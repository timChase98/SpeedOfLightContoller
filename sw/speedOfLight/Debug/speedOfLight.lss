
speedOfLight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  000004fa  0000058e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800126  00800126  000005b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000624  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ebb  00000000  00000000  000006dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b6a  00000000  00000000  00001597  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006aa  00000000  00000000  00002101  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a4  00000000  00000000  000027ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b6  00000000  00000000  00002950  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000457  00000000  00000000  00002f06  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0000335d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__vector_17>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 a4 00 	jmp	0x148	; 0x148 <__vector_33>
  88:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__vector_34>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ea ef       	ldi	r30, 0xFA	; 250
  c8:	f4 e0       	ldi	r31, 0x04	; 4
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a6 32       	cpi	r26, 0x26	; 38
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a6 e2       	ldi	r26, 0x26	; 38
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	af 32       	cpi	r26, 0x2F	; 47
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 c0 01 	call	0x380	; 0x380 <main>
  ea:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <spiSetup>:

void setButtonLed(uint8_t x, uint8_t y, uint8_t value){
	if(value){
		ledMemory[9 + y] |= 1 << x;
		}else{
		ledMemory[9 + y] &= ~(1 << x);
  f2:	84 b1       	in	r24, 0x04	; 4
  f4:	88 62       	ori	r24, 0x28	; 40
  f6:	84 b9       	out	0x04, r24	; 4
  f8:	81 ed       	ldi	r24, 0xD1	; 209
  fa:	8c bd       	out	0x2c, r24	; 44
  fc:	08 95       	ret

000000fe <tmrSetup>:
  fe:	8a e0       	ldi	r24, 0x0A	; 10
 100:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
 104:	84 e7       	ldi	r24, 0x74	; 116
 106:	9e e0       	ldi	r25, 0x0E	; 14
 108:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 10c:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 110:	8a e3       	ldi	r24, 0x3A	; 58
 112:	97 e0       	ldi	r25, 0x07	; 7
 114:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 118:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
 11c:	e1 e7       	ldi	r30, 0x71	; 113
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	86 60       	ori	r24, 0x06	; 6
 124:	80 83       	st	Z, r24
 126:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 12a:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
 12e:	08 95       	ret

00000130 <buttonsInit>:
 130:	8f e3       	ldi	r24, 0x3F	; 63
 132:	87 b9       	out	0x07, r24	; 7
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	8b b9       	out	0x0b, r24	; 11
 138:	84 b1       	in	r24, 0x04	; 4
 13a:	83 60       	ori	r24, 0x03	; 3
 13c:	84 b9       	out	0x04, r24	; 4
 13e:	0e 94 79 00 	call	0xf2	; 0xf2 <spiSetup>
 142:	0e 94 7f 00 	call	0xfe	; 0xfe <tmrSetup>
 146:	08 95       	ret

00000148 <__vector_33>:
	}
}



ISR(TIMER3_COMPA_vect){
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
 152:	2f 93       	push	r18
 154:	3f 93       	push	r19
 156:	4f 93       	push	r20
 158:	5f 93       	push	r21
 15a:	6f 93       	push	r22
 15c:	7f 93       	push	r23
 15e:	8f 93       	push	r24
 160:	9f 93       	push	r25
 162:	af 93       	push	r26
 164:	bf 93       	push	r27
 166:	ef 93       	push	r30
 168:	ff 93       	push	r31
	// row 0, 1, 2 are on LED 2 and 3
	// row 3, 4, 5 are on LED 4 and 5
	// the row is in the lower nibble and column data is in the upper nibble
	// for each row the two registers need to be set and the other two need to be cleared
	
	if(muxCounter < 3){
 16a:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <muxCounter>
 16e:	83 30       	cpi	r24, 0x03	; 3
 170:	90 f5       	brcc	.+100    	; 0x1d6 <__vector_33+0x8e>
		ledData[0] = (1 << muxCounter) | ((ledMemory[9 + muxCounter] >> 4) << 4);
 172:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <muxCounter>
 176:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <muxCounter>
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	e1 5f       	subi	r30, 0xF1	; 241
 17e:	fe 4f       	sbci	r31, 0xFE	; 254
 180:	80 81       	ld	r24, Z
 182:	48 2f       	mov	r20, r24
 184:	40 7f       	andi	r20, 0xF0	; 240
 186:	21 e0       	ldi	r18, 0x01	; 1
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	b9 01       	movw	r22, r18
 18c:	02 c0       	rjmp	.+4      	; 0x192 <__vector_33+0x4a>
 18e:	66 0f       	add	r22, r22
 190:	77 1f       	adc	r23, r23
 192:	9a 95       	dec	r25
 194:	e2 f7       	brpl	.-8      	; 0x18e <__vector_33+0x46>
 196:	cb 01       	movw	r24, r22
 198:	84 2b       	or	r24, r20
 19a:	a0 e0       	ldi	r26, 0x00	; 0
 19c:	b1 e0       	ldi	r27, 0x01	; 1
 19e:	8c 93       	st	X, r24
		ledData[1] = (1 << muxCounter) | ((ledMemory[9 + muxCounter] & 0x0F) << 4);
 1a0:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <muxCounter>
 1a4:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <muxCounter>
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	e1 5f       	subi	r30, 0xF1	; 241
 1ac:	fe 4f       	sbci	r31, 0xFE	; 254
 1ae:	90 81       	ld	r25, Z
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <__vector_33+0x6e>
 1b2:	22 0f       	add	r18, r18
 1b4:	33 1f       	adc	r19, r19
 1b6:	8a 95       	dec	r24
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <__vector_33+0x6a>
 1ba:	70 e1       	ldi	r23, 0x10	; 16
 1bc:	97 9f       	mul	r25, r23
 1be:	c0 01       	movw	r24, r0
 1c0:	11 24       	eor	r1, r1
 1c2:	82 2b       	or	r24, r18
 1c4:	11 96       	adiw	r26, 0x01	; 1
 1c6:	8c 93       	st	X, r24
 1c8:	11 97       	sbiw	r26, 0x01	; 1
		ledData[2] = 0;
 1ca:	12 96       	adiw	r26, 0x02	; 2
 1cc:	1c 92       	st	X, r1
 1ce:	12 97       	sbiw	r26, 0x02	; 2
		ledData[3] = 0;
 1d0:	13 96       	adiw	r26, 0x03	; 3
 1d2:	1c 92       	st	X, r1
 1d4:	33 c0       	rjmp	.+102    	; 0x23c <__vector_33+0xf4>
	}
	else{
		ledData[2] = (1 << (muxCounter - 3)) | ((ledMemory[9 + muxCounter] >> 4) << 4);
 1d6:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <muxCounter>
 1da:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <muxCounter>
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	e1 5f       	subi	r30, 0xF1	; 241
 1e2:	fe 4f       	sbci	r31, 0xFE	; 254
 1e4:	40 81       	ld	r20, Z
 1e6:	83 50       	subi	r24, 0x03	; 3
 1e8:	21 e0       	ldi	r18, 0x01	; 1
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	b9 01       	movw	r22, r18
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <__vector_33+0xac>
 1f0:	66 0f       	add	r22, r22
 1f2:	77 1f       	adc	r23, r23
 1f4:	8a 95       	dec	r24
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <__vector_33+0xa8>
 1f8:	cb 01       	movw	r24, r22
 1fa:	94 2f       	mov	r25, r20
 1fc:	90 7f       	andi	r25, 0xF0	; 240
 1fe:	89 2b       	or	r24, r25
 200:	a0 e0       	ldi	r26, 0x00	; 0
 202:	b1 e0       	ldi	r27, 0x01	; 1
 204:	12 96       	adiw	r26, 0x02	; 2
 206:	8c 93       	st	X, r24
 208:	12 97       	sbiw	r26, 0x02	; 2
		ledData[3] = (1 << (muxCounter - 3)) | ((ledMemory[9 + muxCounter] & 0x0F) << 4);
 20a:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <muxCounter>
 20e:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <muxCounter>
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	e1 5f       	subi	r30, 0xF1	; 241
 216:	fe 4f       	sbci	r31, 0xFE	; 254
 218:	90 81       	ld	r25, Z
 21a:	83 50       	subi	r24, 0x03	; 3
 21c:	02 c0       	rjmp	.+4      	; 0x222 <__vector_33+0xda>
 21e:	22 0f       	add	r18, r18
 220:	33 1f       	adc	r19, r19
 222:	8a 95       	dec	r24
 224:	e2 f7       	brpl	.-8      	; 0x21e <__vector_33+0xd6>
 226:	70 e1       	ldi	r23, 0x10	; 16
 228:	97 9f       	mul	r25, r23
 22a:	c0 01       	movw	r24, r0
 22c:	11 24       	eor	r1, r1
 22e:	82 2b       	or	r24, r18
 230:	13 96       	adiw	r26, 0x03	; 3
 232:	8c 93       	st	X, r24
 234:	13 97       	sbiw	r26, 0x03	; 3
		ledData[0] = 0;
 236:	1c 92       	st	X, r1
		ledData[1] = 0;
 238:	11 96       	adiw	r26, 0x01	; 1
 23a:	1c 92       	st	X, r1
	}
	
	muxCounter = (muxCounter + 1) % 6;
 23c:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <muxCounter>
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	01 96       	adiw	r24, 0x01	; 1
 244:	66 e0       	ldi	r22, 0x06	; 6
 246:	70 e0       	ldi	r23, 0x00	; 0
 248:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__divmodhi4>
 24c:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <muxCounter>
	
	// calculate data for score display
	
	ledData[5] = sevenSegmentDecode[ledMemory[scoreDigitCounter]];
 250:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <scoreDigitCounter>
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	ea 5f       	subi	r30, 0xFA	; 250
 258:	fe 4f       	sbci	r31, 0xFE	; 254
 25a:	e0 81       	ld	r30, Z
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	eb 5e       	subi	r30, 0xEB	; 235
 260:	fe 4f       	sbci	r31, 0xFE	; 254
 262:	80 81       	ld	r24, Z
 264:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__data_start+0x5>
	if (scoreDigitCounter == 0){
 268:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <scoreDigitCounter>
 26c:	81 11       	cpse	r24, r1
 26e:	07 c0       	rjmp	.+14     	; 0x27e <__vector_33+0x136>
		ledData[5] |= 1 << 7; // set MSB for D0
 270:	e0 e0       	ldi	r30, 0x00	; 0
 272:	f1 e0       	ldi	r31, 0x01	; 1
 274:	85 81       	ldd	r24, Z+5	; 0x05
 276:	80 68       	ori	r24, 0x80	; 128
 278:	85 83       	std	Z+5, r24	; 0x05
		ledData[4] = 0;
 27a:	14 82       	std	Z+4, r1	; 0x04
 27c:	0c c0       	rjmp	.+24     	; 0x296 <__vector_33+0x14e>
	}
	else{
		ledData[4] = 1 << (scoreDigitCounter - 1);
 27e:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <scoreDigitCounter>
 282:	21 50       	subi	r18, 0x01	; 1
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	02 c0       	rjmp	.+4      	; 0x28e <__vector_33+0x146>
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	2a 95       	dec	r18
 290:	e2 f7       	brpl	.-8      	; 0x28a <__vector_33+0x142>
 292:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_start+0x4>
	}

	scoreDigitCounter = (scoreDigitCounter + 1) % 9;
 296:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <scoreDigitCounter>
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	01 96       	adiw	r24, 0x01	; 1
 29e:	69 e0       	ldi	r22, 0x09	; 9
 2a0:	70 e0       	ldi	r23, 0x00	; 0
 2a2:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__divmodhi4>
 2a6:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <scoreDigitCounter>
	

	// clear contents of shift register and latch
	PORTB &= ~(1 << LED_L); // set led latch low
 2aa:	28 98       	cbi	0x05, 0	; 5
	PORTB &= ~(1 << LED_B); // blank leds
 2ac:	29 98       	cbi	0x05, 1	; 5
	PORTB |= (1 << LED_L); // set led latch high
 2ae:	28 9a       	sbi	0x05, 0	; 5
	PORTB |= (1 << LED_B); // unblank leds
 2b0:	29 9a       	sbi	0x05, 1	; 5
	PORTB &= ~(1 << LED_L); // set led latch low
 2b2:	28 98       	cbi	0x05, 0	; 5
	spiByteCounter = 0;
 2b4:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <__data_end>
	SPDR0 = ledData[spiByteCounter++];
 2b8:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <__data_end>
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	8e 0f       	add	r24, r30
 2c0:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	e0 50       	subi	r30, 0x00	; 0
 2c8:	ff 4f       	sbci	r31, 0xFF	; 255
 2ca:	80 81       	ld	r24, Z
 2cc:	8e bd       	out	0x2e, r24	; 46
}
 2ce:	ff 91       	pop	r31
 2d0:	ef 91       	pop	r30
 2d2:	bf 91       	pop	r27
 2d4:	af 91       	pop	r26
 2d6:	9f 91       	pop	r25
 2d8:	8f 91       	pop	r24
 2da:	7f 91       	pop	r23
 2dc:	6f 91       	pop	r22
 2de:	5f 91       	pop	r21
 2e0:	4f 91       	pop	r20
 2e2:	3f 91       	pop	r19
 2e4:	2f 91       	pop	r18
 2e6:	0f 90       	pop	r0
 2e8:	0f be       	out	0x3f, r0	; 63
 2ea:	0f 90       	pop	r0
 2ec:	1f 90       	pop	r1
 2ee:	18 95       	reti

000002f0 <__vector_34>:

ISR(TIMER3_COMPB_vect){
 2f0:	1f 92       	push	r1
 2f2:	0f 92       	push	r0
 2f4:	0f b6       	in	r0, 0x3f	; 63
 2f6:	0f 92       	push	r0
 2f8:	11 24       	eor	r1, r1
 2fa:	2f 93       	push	r18
 2fc:	8f 93       	push	r24
 2fe:	9f 93       	push	r25
 300:	ef 93       	push	r30
 302:	ff 93       	push	r31
	// Read in Buttons
	PORTC = ~(1 << muxCounter);// set 1 bit to a 0
 304:	20 91 27 01 	lds	r18, 0x0127	; 0x800127 <muxCounter>
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	02 c0       	rjmp	.+4      	; 0x312 <__vector_34+0x22>
 30e:	88 0f       	add	r24, r24
 310:	99 1f       	adc	r25, r25
 312:	2a 95       	dec	r18
 314:	e2 f7       	brpl	.-8      	; 0x30e <__vector_34+0x1e>
 316:	80 95       	com	r24
 318:	88 b9       	out	0x08, r24	; 8
	buttonMemory[muxCounter] = ~PIND;
 31a:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <muxCounter>
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	89 b1       	in	r24, 0x09	; 9
 322:	80 95       	com	r24
 324:	e7 5d       	subi	r30, 0xD7	; 215
 326:	fe 4f       	sbci	r31, 0xFE	; 254
 328:	80 83       	st	Z, r24
	
}
 32a:	ff 91       	pop	r31
 32c:	ef 91       	pop	r30
 32e:	9f 91       	pop	r25
 330:	8f 91       	pop	r24
 332:	2f 91       	pop	r18
 334:	0f 90       	pop	r0
 336:	0f be       	out	0x3f, r0	; 63
 338:	0f 90       	pop	r0
 33a:	1f 90       	pop	r1
 33c:	18 95       	reti

0000033e <__vector_17>:

ISR(SPI0_STC_vect){
 33e:	1f 92       	push	r1
 340:	0f 92       	push	r0
 342:	0f b6       	in	r0, 0x3f	; 63
 344:	0f 92       	push	r0
 346:	11 24       	eor	r1, r1
 348:	8f 93       	push	r24
 34a:	ef 93       	push	r30
 34c:	ff 93       	push	r31
	if (spiByteCounter >= 6){
 34e:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
 352:	86 30       	cpi	r24, 0x06	; 6
 354:	10 f0       	brcs	.+4      	; 0x35a <__vector_17+0x1c>
		PORTB |= 1 << LED_L; // set led latch high
 356:	28 9a       	sbi	0x05, 0	; 5
		return;
 358:	0b c0       	rjmp	.+22     	; 0x370 <__vector_17+0x32>
	}
	SPDR0 = ledData[spiByteCounter++];
 35a:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <__data_end>
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	8e 0f       	add	r24, r30
 362:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	e0 50       	subi	r30, 0x00	; 0
 36a:	ff 4f       	sbci	r31, 0xFF	; 255
 36c:	80 81       	ld	r24, Z
 36e:	8e bd       	out	0x2e, r24	; 46
}
 370:	ff 91       	pop	r31
 372:	ef 91       	pop	r30
 374:	8f 91       	pop	r24
 376:	0f 90       	pop	r0
 378:	0f be       	out	0x3f, r0	; 63
 37a:	0f 90       	pop	r0
 37c:	1f 90       	pop	r1
 37e:	18 95       	reti

00000380 <main>:
#include "usbQc.h"
#include "buttons.h"

int main(void)
{
	usbQcInit();
 380:	0e 94 4b 02 	call	0x496	; 0x496 <usbQcInit>
	QCset12V();
 384:	0e 94 50 02 	call	0x4a0	; 0x4a0 <QCset12V>

	buttonsInit();
 388:	0e 94 98 00 	call	0x130	; 0x130 <buttonsInit>
	
	sei();
 38c:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 38e:	2f ef       	ldi	r18, 0xFF	; 255
 390:	81 ee       	ldi	r24, 0xE1	; 225
 392:	94 e0       	ldi	r25, 0x04	; 4
 394:	21 50       	subi	r18, 0x01	; 1
 396:	80 40       	sbci	r24, 0x00	; 0
 398:	90 40       	sbci	r25, 0x00	; 0
 39a:	e1 f7       	brne	.-8      	; 0x394 <main+0x14>
 39c:	00 c0       	rjmp	.+0      	; 0x39e <main+0x1e>
 39e:	00 00       	nop
 3a0:	2f ef       	ldi	r18, 0xFF	; 255
 3a2:	81 ee       	ldi	r24, 0xE1	; 225
 3a4:	94 e0       	ldi	r25, 0x04	; 4
 3a6:	21 50       	subi	r18, 0x01	; 1
 3a8:	80 40       	sbci	r24, 0x00	; 0
 3aa:	90 40       	sbci	r25, 0x00	; 0
 3ac:	e1 f7       	brne	.-8      	; 0x3a6 <main+0x26>
 3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <main+0x30>
 3b0:	00 00       	nop
 3b2:	2f ef       	ldi	r18, 0xFF	; 255
 3b4:	81 ee       	ldi	r24, 0xE1	; 225
 3b6:	94 e0       	ldi	r25, 0x04	; 4
 3b8:	21 50       	subi	r18, 0x01	; 1
 3ba:	80 40       	sbci	r24, 0x00	; 0
 3bc:	90 40       	sbci	r25, 0x00	; 0
 3be:	e1 f7       	brne	.-8      	; 0x3b8 <main+0x38>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <main+0x42>
 3c2:	00 00       	nop
 3c4:	2f ef       	ldi	r18, 0xFF	; 255
 3c6:	81 ee       	ldi	r24, 0xE1	; 225
 3c8:	94 e0       	ldi	r25, 0x04	; 4
 3ca:	21 50       	subi	r18, 0x01	; 1
 3cc:	80 40       	sbci	r24, 0x00	; 0
 3ce:	90 40       	sbci	r25, 0x00	; 0
 3d0:	e1 f7       	brne	.-8      	; 0x3ca <main+0x4a>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <main+0x54>
 3d4:	00 00       	nop
 3d6:	2f ef       	ldi	r18, 0xFF	; 255
 3d8:	81 ee       	ldi	r24, 0xE1	; 225
 3da:	94 e0       	ldi	r25, 0x04	; 4
 3dc:	21 50       	subi	r18, 0x01	; 1
 3de:	80 40       	sbci	r24, 0x00	; 0
 3e0:	90 40       	sbci	r25, 0x00	; 0
 3e2:	e1 f7       	brne	.-8      	; 0x3dc <main+0x5c>
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <main+0x66>
 3e6:	00 00       	nop
 3e8:	2f ef       	ldi	r18, 0xFF	; 255
 3ea:	81 ee       	ldi	r24, 0xE1	; 225
 3ec:	94 e0       	ldi	r25, 0x04	; 4
 3ee:	21 50       	subi	r18, 0x01	; 1
 3f0:	80 40       	sbci	r24, 0x00	; 0
 3f2:	90 40       	sbci	r25, 0x00	; 0
 3f4:	e1 f7       	brne	.-8      	; 0x3ee <main+0x6e>
 3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <main+0x78>
 3f8:	00 00       	nop
 3fa:	2f ef       	ldi	r18, 0xFF	; 255
 3fc:	81 ee       	ldi	r24, 0xE1	; 225
 3fe:	94 e0       	ldi	r25, 0x04	; 4
 400:	21 50       	subi	r18, 0x01	; 1
 402:	80 40       	sbci	r24, 0x00	; 0
 404:	90 40       	sbci	r25, 0x00	; 0
 406:	e1 f7       	brne	.-8      	; 0x400 <__LOCK_REGION_LENGTH__>
 408:	00 c0       	rjmp	.+0      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 40a:	00 00       	nop
 40c:	2f ef       	ldi	r18, 0xFF	; 255
 40e:	81 ee       	ldi	r24, 0xE1	; 225
 410:	94 e0       	ldi	r25, 0x04	; 4
 412:	21 50       	subi	r18, 0x01	; 1
 414:	80 40       	sbci	r24, 0x00	; 0
 416:	90 40       	sbci	r25, 0x00	; 0
 418:	e1 f7       	brne	.-8      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 41c:	00 00       	nop
 41e:	2f ef       	ldi	r18, 0xFF	; 255
 420:	81 ee       	ldi	r24, 0xE1	; 225
 422:	94 e0       	ldi	r25, 0x04	; 4
 424:	21 50       	subi	r18, 0x01	; 1
 426:	80 40       	sbci	r24, 0x00	; 0
 428:	90 40       	sbci	r25, 0x00	; 0
 42a:	e1 f7       	brne	.-8      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 42c:	00 c0       	rjmp	.+0      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 42e:	00 00       	nop
 430:	2f ef       	ldi	r18, 0xFF	; 255
 432:	81 ee       	ldi	r24, 0xE1	; 225
 434:	94 e0       	ldi	r25, 0x04	; 4
 436:	21 50       	subi	r18, 0x01	; 1
 438:	80 40       	sbci	r24, 0x00	; 0
 43a:	90 40       	sbci	r25, 0x00	; 0
 43c:	e1 f7       	brne	.-8      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 43e:	00 c0       	rjmp	.+0      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 440:	00 00       	nop
 442:	2f ef       	ldi	r18, 0xFF	; 255
 444:	81 ee       	ldi	r24, 0xE1	; 225
 446:	94 e0       	ldi	r25, 0x04	; 4
 448:	21 50       	subi	r18, 0x01	; 1
 44a:	80 40       	sbci	r24, 0x00	; 0
 44c:	90 40       	sbci	r25, 0x00	; 0
 44e:	e1 f7       	brne	.-8      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 450:	00 c0       	rjmp	.+0      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 452:	00 00       	nop
 454:	2f ef       	ldi	r18, 0xFF	; 255
 456:	81 ee       	ldi	r24, 0xE1	; 225
 458:	94 e0       	ldi	r25, 0x04	; 4
 45a:	21 50       	subi	r18, 0x01	; 1
 45c:	80 40       	sbci	r24, 0x00	; 0
 45e:	90 40       	sbci	r25, 0x00	; 0
 460:	e1 f7       	brne	.-8      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 462:	00 c0       	rjmp	.+0      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 464:	00 00       	nop
 466:	93 cf       	rjmp	.-218    	; 0x38e <main+0xe>

00000468 <_handshake>:
	
}

void QCset9V(){
	_dp3V3();
	_dm600mV();
 468:	21 98       	cbi	0x04, 1	; 4
 46a:	2f ef       	ldi	r18, 0xFF	; 255
 46c:	8d e3       	ldi	r24, 0x3D	; 61
 46e:	99 e4       	ldi	r25, 0x49	; 73
 470:	21 50       	subi	r18, 0x01	; 1
 472:	80 40       	sbci	r24, 0x00	; 0
 474:	90 40       	sbci	r25, 0x00	; 0
 476:	e1 f7       	brne	.-8      	; 0x470 <_handshake+0x8>
 478:	00 c0       	rjmp	.+0      	; 0x47a <_handshake+0x12>
 47a:	00 00       	nop
 47c:	29 98       	cbi	0x05, 1	; 5
 47e:	21 9a       	sbi	0x04, 1	; 4
 480:	8f e3       	ldi	r24, 0x3F	; 63
 482:	9f e1       	ldi	r25, 0x1F	; 31
 484:	01 97       	sbiw	r24, 0x01	; 1
 486:	f1 f7       	brne	.-4      	; 0x484 <_handshake+0x1c>
 488:	00 c0       	rjmp	.+0      	; 0x48a <_handshake+0x22>
 48a:	00 00       	nop
 48c:	08 95       	ret

0000048e <QCset5V>:
 48e:	20 98       	cbi	0x04, 0	; 4
 490:	29 98       	cbi	0x05, 1	; 5
 492:	21 9a       	sbi	0x04, 1	; 4
 494:	08 95       	ret

00000496 <usbQcInit>:
 496:	0e 94 34 02 	call	0x468	; 0x468 <_handshake>
 49a:	0e 94 47 02 	call	0x48e	; 0x48e <QCset5V>
 49e:	08 95       	ret

000004a0 <QCset12V>:
	
}

void QCset12V(){
	_dp600mV();
 4a0:	20 98       	cbi	0x04, 0	; 4
	_dm600mV();
 4a2:	21 98       	cbi	0x04, 1	; 4
 4a4:	08 95       	ret

000004a6 <__divmodhi4>:
 4a6:	97 fb       	bst	r25, 7
 4a8:	07 2e       	mov	r0, r23
 4aa:	16 f4       	brtc	.+4      	; 0x4b0 <__divmodhi4+0xa>
 4ac:	00 94       	com	r0
 4ae:	07 d0       	rcall	.+14     	; 0x4be <__divmodhi4_neg1>
 4b0:	77 fd       	sbrc	r23, 7
 4b2:	09 d0       	rcall	.+18     	; 0x4c6 <__divmodhi4_neg2>
 4b4:	0e 94 67 02 	call	0x4ce	; 0x4ce <__udivmodhi4>
 4b8:	07 fc       	sbrc	r0, 7
 4ba:	05 d0       	rcall	.+10     	; 0x4c6 <__divmodhi4_neg2>
 4bc:	3e f4       	brtc	.+14     	; 0x4cc <__divmodhi4_exit>

000004be <__divmodhi4_neg1>:
 4be:	90 95       	com	r25
 4c0:	81 95       	neg	r24
 4c2:	9f 4f       	sbci	r25, 0xFF	; 255
 4c4:	08 95       	ret

000004c6 <__divmodhi4_neg2>:
 4c6:	70 95       	com	r23
 4c8:	61 95       	neg	r22
 4ca:	7f 4f       	sbci	r23, 0xFF	; 255

000004cc <__divmodhi4_exit>:
 4cc:	08 95       	ret

000004ce <__udivmodhi4>:
 4ce:	aa 1b       	sub	r26, r26
 4d0:	bb 1b       	sub	r27, r27
 4d2:	51 e1       	ldi	r21, 0x11	; 17
 4d4:	07 c0       	rjmp	.+14     	; 0x4e4 <__udivmodhi4_ep>

000004d6 <__udivmodhi4_loop>:
 4d6:	aa 1f       	adc	r26, r26
 4d8:	bb 1f       	adc	r27, r27
 4da:	a6 17       	cp	r26, r22
 4dc:	b7 07       	cpc	r27, r23
 4de:	10 f0       	brcs	.+4      	; 0x4e4 <__udivmodhi4_ep>
 4e0:	a6 1b       	sub	r26, r22
 4e2:	b7 0b       	sbc	r27, r23

000004e4 <__udivmodhi4_ep>:
 4e4:	88 1f       	adc	r24, r24
 4e6:	99 1f       	adc	r25, r25
 4e8:	5a 95       	dec	r21
 4ea:	a9 f7       	brne	.-22     	; 0x4d6 <__udivmodhi4_loop>
 4ec:	80 95       	com	r24
 4ee:	90 95       	com	r25
 4f0:	bc 01       	movw	r22, r24
 4f2:	cd 01       	movw	r24, r26
 4f4:	08 95       	ret

000004f6 <_exit>:
 4f6:	f8 94       	cli

000004f8 <__stop_program>:
 4f8:	ff cf       	rjmp	.-2      	; 0x4f8 <__stop_program>
