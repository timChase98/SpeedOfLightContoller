
speedOfLight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000096  00800100  00000e10  00000ea4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002c  00800196  00800196  00000f3a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f3a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000fac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017fc  00000000  00000000  000010bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cf5  00000000  00000000  000028b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c3d  00000000  00000000  000035ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000364  00000000  00000000  000041ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007b0  00000000  00000000  00004550  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000af2  00000000  00000000  00004d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  000057f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__vector_14>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__vector_17>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__vector_33>
  88:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__vector_34>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 98 02 	jmp	0x530	; 0x530 <__vector_42>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e0 e1       	ldi	r30, 0x10	; 16
  c8:	fe e0       	ldi	r31, 0x0E	; 14
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a6 39       	cpi	r26, 0x96	; 150
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a6 e9       	ldi	r26, 0x96	; 150
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a2 3c       	cpi	r26, 0xC2	; 194
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 78 05 	call	0xaf0	; 0xaf0 <main>
  ea:	0c 94 06 07 	jmp	0xe0c	; 0xe0c <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <spiSetup>:
  f2:	84 b1       	in	r24, 0x04	; 4
  f4:	88 62       	ori	r24, 0x28	; 40
  f6:	84 b9       	out	0x04, r24	; 4
  f8:	81 ed       	ldi	r24, 0xD1	; 209
  fa:	8c bd       	out	0x2c, r24	; 44
  fc:	08 95       	ret

000000fe <tmrSetup>:
  fe:	8a e0       	ldi	r24, 0x0A	; 10
 100:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
 104:	84 e7       	ldi	r24, 0x74	; 116
 106:	9e e0       	ldi	r25, 0x0E	; 14
 108:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 10c:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 110:	8a e3       	ldi	r24, 0x3A	; 58
 112:	97 e0       	ldi	r25, 0x07	; 7
 114:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 118:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
 11c:	e1 e7       	ldi	r30, 0x71	; 113
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	86 60       	ori	r24, 0x06	; 6
 124:	80 83       	st	Z, r24
 126:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 12a:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
 12e:	08 95       	ret

00000130 <buttonsInit>:
 130:	8f e3       	ldi	r24, 0x3F	; 63
 132:	87 b9       	out	0x07, r24	; 7
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	8b b9       	out	0x0b, r24	; 11
 138:	84 b1       	in	r24, 0x04	; 4
 13a:	83 60       	ori	r24, 0x03	; 3
 13c:	84 b9       	out	0x04, r24	; 4
 13e:	0e 94 79 00 	call	0xf2	; 0xf2 <spiSetup>
 142:	0e 94 7f 00 	call	0xfe	; 0xfe <tmrSetup>
 146:	08 95       	ret

00000148 <isButtonDown>:
 148:	e6 2f       	mov	r30, r22
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	e3 56       	subi	r30, 0x63	; 99
 14e:	fe 4f       	sbci	r31, 0xFE	; 254
 150:	40 81       	ld	r20, Z
 152:	21 e0       	ldi	r18, 0x01	; 1
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	b9 01       	movw	r22, r18
 158:	02 c0       	rjmp	.+4      	; 0x15e <isButtonDown+0x16>
 15a:	66 0f       	add	r22, r22
 15c:	77 1f       	adc	r23, r23
 15e:	8a 95       	dec	r24
 160:	e2 f7       	brpl	.-8      	; 0x15a <isButtonDown+0x12>
 162:	cb 01       	movw	r24, r22
 164:	84 23       	and	r24, r20
 166:	08 95       	ret

00000168 <setButtonLed>:
 168:	44 23       	and	r20, r20
 16a:	89 f0       	breq	.+34     	; 0x18e <setButtonLed+0x26>
 16c:	e6 2f       	mov	r30, r22
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	ed 5e       	subi	r30, 0xED	; 237
 172:	fe 4f       	sbci	r31, 0xFE	; 254
 174:	40 81       	ld	r20, Z
 176:	21 e0       	ldi	r18, 0x01	; 1
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	b9 01       	movw	r22, r18
 17c:	02 c0       	rjmp	.+4      	; 0x182 <setButtonLed+0x1a>
 17e:	66 0f       	add	r22, r22
 180:	77 1f       	adc	r23, r23
 182:	8a 95       	dec	r24
 184:	e2 f7       	brpl	.-8      	; 0x17e <setButtonLed+0x16>
 186:	cb 01       	movw	r24, r22
 188:	84 2b       	or	r24, r20
 18a:	80 83       	st	Z, r24
 18c:	08 95       	ret
 18e:	e6 2f       	mov	r30, r22
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	ed 5e       	subi	r30, 0xED	; 237
 194:	fe 4f       	sbci	r31, 0xFE	; 254
 196:	40 81       	ld	r20, Z
 198:	21 e0       	ldi	r18, 0x01	; 1
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	b9 01       	movw	r22, r18
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <setButtonLed+0x3c>
 1a0:	66 0f       	add	r22, r22
 1a2:	77 1f       	adc	r23, r23
 1a4:	8a 95       	dec	r24
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <setButtonLed+0x38>
 1a8:	cb 01       	movw	r24, r22
 1aa:	80 95       	com	r24
 1ac:	84 23       	and	r24, r20
 1ae:	80 83       	st	Z, r24
 1b0:	08 95       	ret

000001b2 <__vector_33>:
 1b2:	1f 92       	push	r1
 1b4:	0f 92       	push	r0
 1b6:	0f b6       	in	r0, 0x3f	; 63
 1b8:	0f 92       	push	r0
 1ba:	11 24       	eor	r1, r1
 1bc:	2f 93       	push	r18
 1be:	3f 93       	push	r19
 1c0:	4f 93       	push	r20
 1c2:	5f 93       	push	r21
 1c4:	6f 93       	push	r22
 1c6:	7f 93       	push	r23
 1c8:	8f 93       	push	r24
 1ca:	9f 93       	push	r25
 1cc:	af 93       	push	r26
 1ce:	bf 93       	push	r27
 1d0:	ef 93       	push	r30
 1d2:	ff 93       	push	r31
 1d4:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <muxCounter>
 1d8:	83 30       	cpi	r24, 0x03	; 3
 1da:	90 f5       	brcc	.+100    	; 0x240 <__vector_33+0x8e>
 1dc:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <muxCounter>
 1e0:	e0 91 97 01 	lds	r30, 0x0197	; 0x800197 <muxCounter>
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	ed 5e       	subi	r30, 0xED	; 237
 1e8:	fe 4f       	sbci	r31, 0xFE	; 254
 1ea:	80 81       	ld	r24, Z
 1ec:	48 2f       	mov	r20, r24
 1ee:	40 7f       	andi	r20, 0xF0	; 240
 1f0:	21 e0       	ldi	r18, 0x01	; 1
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	b9 01       	movw	r22, r18
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <__vector_33+0x4a>
 1f8:	66 0f       	add	r22, r22
 1fa:	77 1f       	adc	r23, r23
 1fc:	9a 95       	dec	r25
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <__vector_33+0x46>
 200:	cb 01       	movw	r24, r22
 202:	84 2b       	or	r24, r20
 204:	a4 e0       	ldi	r26, 0x04	; 4
 206:	b1 e0       	ldi	r27, 0x01	; 1
 208:	8c 93       	st	X, r24
 20a:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <muxCounter>
 20e:	e0 91 97 01 	lds	r30, 0x0197	; 0x800197 <muxCounter>
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	ed 5e       	subi	r30, 0xED	; 237
 216:	fe 4f       	sbci	r31, 0xFE	; 254
 218:	90 81       	ld	r25, Z
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__vector_33+0x6e>
 21c:	22 0f       	add	r18, r18
 21e:	33 1f       	adc	r19, r19
 220:	8a 95       	dec	r24
 222:	e2 f7       	brpl	.-8      	; 0x21c <__vector_33+0x6a>
 224:	70 e1       	ldi	r23, 0x10	; 16
 226:	97 9f       	mul	r25, r23
 228:	c0 01       	movw	r24, r0
 22a:	11 24       	eor	r1, r1
 22c:	82 2b       	or	r24, r18
 22e:	11 96       	adiw	r26, 0x01	; 1
 230:	8c 93       	st	X, r24
 232:	11 97       	sbiw	r26, 0x01	; 1
 234:	12 96       	adiw	r26, 0x02	; 2
 236:	1c 92       	st	X, r1
 238:	12 97       	sbiw	r26, 0x02	; 2
 23a:	13 96       	adiw	r26, 0x03	; 3
 23c:	1c 92       	st	X, r1
 23e:	33 c0       	rjmp	.+102    	; 0x2a6 <__vector_33+0xf4>
 240:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <muxCounter>
 244:	e0 91 97 01 	lds	r30, 0x0197	; 0x800197 <muxCounter>
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	ed 5e       	subi	r30, 0xED	; 237
 24c:	fe 4f       	sbci	r31, 0xFE	; 254
 24e:	40 81       	ld	r20, Z
 250:	83 50       	subi	r24, 0x03	; 3
 252:	21 e0       	ldi	r18, 0x01	; 1
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	b9 01       	movw	r22, r18
 258:	02 c0       	rjmp	.+4      	; 0x25e <__vector_33+0xac>
 25a:	66 0f       	add	r22, r22
 25c:	77 1f       	adc	r23, r23
 25e:	8a 95       	dec	r24
 260:	e2 f7       	brpl	.-8      	; 0x25a <__vector_33+0xa8>
 262:	cb 01       	movw	r24, r22
 264:	94 2f       	mov	r25, r20
 266:	90 7f       	andi	r25, 0xF0	; 240
 268:	89 2b       	or	r24, r25
 26a:	a4 e0       	ldi	r26, 0x04	; 4
 26c:	b1 e0       	ldi	r27, 0x01	; 1
 26e:	12 96       	adiw	r26, 0x02	; 2
 270:	8c 93       	st	X, r24
 272:	12 97       	sbiw	r26, 0x02	; 2
 274:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <muxCounter>
 278:	e0 91 97 01 	lds	r30, 0x0197	; 0x800197 <muxCounter>
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	ed 5e       	subi	r30, 0xED	; 237
 280:	fe 4f       	sbci	r31, 0xFE	; 254
 282:	90 81       	ld	r25, Z
 284:	83 50       	subi	r24, 0x03	; 3
 286:	02 c0       	rjmp	.+4      	; 0x28c <__vector_33+0xda>
 288:	22 0f       	add	r18, r18
 28a:	33 1f       	adc	r19, r19
 28c:	8a 95       	dec	r24
 28e:	e2 f7       	brpl	.-8      	; 0x288 <__vector_33+0xd6>
 290:	70 e1       	ldi	r23, 0x10	; 16
 292:	97 9f       	mul	r25, r23
 294:	c0 01       	movw	r24, r0
 296:	11 24       	eor	r1, r1
 298:	82 2b       	or	r24, r18
 29a:	13 96       	adiw	r26, 0x03	; 3
 29c:	8c 93       	st	X, r24
 29e:	13 97       	sbiw	r26, 0x03	; 3
 2a0:	1c 92       	st	X, r1
 2a2:	11 96       	adiw	r26, 0x01	; 1
 2a4:	1c 92       	st	X, r1
 2a6:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <muxCounter>
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	01 96       	adiw	r24, 0x01	; 1
 2ae:	66 e0       	ldi	r22, 0x06	; 6
 2b0:	70 e0       	ldi	r23, 0x00	; 0
 2b2:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__divmodhi4>
 2b6:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <muxCounter>
 2ba:	e0 91 98 01 	lds	r30, 0x0198	; 0x800198 <scoreDigitCounter>
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	e6 5f       	subi	r30, 0xF6	; 246
 2c2:	fe 4f       	sbci	r31, 0xFE	; 254
 2c4:	e0 81       	ld	r30, Z
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	e3 59       	subi	r30, 0x93	; 147
 2ca:	fe 4f       	sbci	r31, 0xFE	; 254
 2cc:	80 81       	ld	r24, Z
 2ce:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <ledData+0x5>
 2d2:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <scoreDigitCounter>
 2d6:	81 11       	cpse	r24, r1
 2d8:	07 c0       	rjmp	.+14     	; 0x2e8 <__vector_33+0x136>
 2da:	e4 e0       	ldi	r30, 0x04	; 4
 2dc:	f1 e0       	ldi	r31, 0x01	; 1
 2de:	85 81       	ldd	r24, Z+5	; 0x05
 2e0:	80 68       	ori	r24, 0x80	; 128
 2e2:	85 83       	std	Z+5, r24	; 0x05
 2e4:	14 82       	std	Z+4, r1	; 0x04
 2e6:	0c c0       	rjmp	.+24     	; 0x300 <__vector_33+0x14e>
 2e8:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <scoreDigitCounter>
 2ec:	21 50       	subi	r18, 0x01	; 1
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <__vector_33+0x146>
 2f4:	88 0f       	add	r24, r24
 2f6:	99 1f       	adc	r25, r25
 2f8:	2a 95       	dec	r18
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <__vector_33+0x142>
 2fc:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <ledData+0x4>
 300:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <scoreDigitCounter>
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	01 96       	adiw	r24, 0x01	; 1
 308:	69 e0       	ldi	r22, 0x09	; 9
 30a:	70 e0       	ldi	r23, 0x00	; 0
 30c:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__divmodhi4>
 310:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <scoreDigitCounter>
 314:	28 98       	cbi	0x05, 0	; 5
 316:	29 98       	cbi	0x05, 1	; 5
 318:	28 9a       	sbi	0x05, 0	; 5
 31a:	29 9a       	sbi	0x05, 1	; 5
 31c:	28 98       	cbi	0x05, 0	; 5
 31e:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <__data_end>
 322:	e0 91 96 01 	lds	r30, 0x0196	; 0x800196 <__data_end>
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	8e 0f       	add	r24, r30
 32a:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <__data_end>
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	ec 5f       	subi	r30, 0xFC	; 252
 332:	fe 4f       	sbci	r31, 0xFE	; 254
 334:	80 81       	ld	r24, Z
 336:	8e bd       	out	0x2e, r24	; 46
 338:	ff 91       	pop	r31
 33a:	ef 91       	pop	r30
 33c:	bf 91       	pop	r27
 33e:	af 91       	pop	r26
 340:	9f 91       	pop	r25
 342:	8f 91       	pop	r24
 344:	7f 91       	pop	r23
 346:	6f 91       	pop	r22
 348:	5f 91       	pop	r21
 34a:	4f 91       	pop	r20
 34c:	3f 91       	pop	r19
 34e:	2f 91       	pop	r18
 350:	0f 90       	pop	r0
 352:	0f be       	out	0x3f, r0	; 63
 354:	0f 90       	pop	r0
 356:	1f 90       	pop	r1
 358:	18 95       	reti

0000035a <__vector_34>:
 35a:	1f 92       	push	r1
 35c:	0f 92       	push	r0
 35e:	0f b6       	in	r0, 0x3f	; 63
 360:	0f 92       	push	r0
 362:	11 24       	eor	r1, r1
 364:	2f 93       	push	r18
 366:	8f 93       	push	r24
 368:	9f 93       	push	r25
 36a:	ef 93       	push	r30
 36c:	ff 93       	push	r31
 36e:	20 91 97 01 	lds	r18, 0x0197	; 0x800197 <muxCounter>
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	02 c0       	rjmp	.+4      	; 0x37c <__vector_34+0x22>
 378:	88 0f       	add	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	2a 95       	dec	r18
 37e:	e2 f7       	brpl	.-8      	; 0x378 <__vector_34+0x1e>
 380:	80 95       	com	r24
 382:	88 b9       	out	0x08, r24	; 8
 384:	e0 91 97 01 	lds	r30, 0x0197	; 0x800197 <muxCounter>
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	89 b1       	in	r24, 0x09	; 9
 38c:	80 95       	com	r24
 38e:	e3 56       	subi	r30, 0x63	; 99
 390:	fe 4f       	sbci	r31, 0xFE	; 254
 392:	80 83       	st	Z, r24
 394:	ff 91       	pop	r31
 396:	ef 91       	pop	r30
 398:	9f 91       	pop	r25
 39a:	8f 91       	pop	r24
 39c:	2f 91       	pop	r18
 39e:	0f 90       	pop	r0
 3a0:	0f be       	out	0x3f, r0	; 63
 3a2:	0f 90       	pop	r0
 3a4:	1f 90       	pop	r1
 3a6:	18 95       	reti

000003a8 <__vector_17>:
 3a8:	1f 92       	push	r1
 3aa:	0f 92       	push	r0
 3ac:	0f b6       	in	r0, 0x3f	; 63
 3ae:	0f 92       	push	r0
 3b0:	11 24       	eor	r1, r1
 3b2:	8f 93       	push	r24
 3b4:	ef 93       	push	r30
 3b6:	ff 93       	push	r31
 3b8:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <__data_end>
 3bc:	86 30       	cpi	r24, 0x06	; 6
 3be:	10 f0       	brcs	.+4      	; 0x3c4 <__vector_17+0x1c>
 3c0:	28 9a       	sbi	0x05, 0	; 5
 3c2:	0b c0       	rjmp	.+22     	; 0x3da <__vector_17+0x32>
 3c4:	e0 91 96 01 	lds	r30, 0x0196	; 0x800196 <__data_end>
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	8e 0f       	add	r24, r30
 3cc:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <__data_end>
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	ec 5f       	subi	r30, 0xFC	; 252
 3d4:	fe 4f       	sbci	r31, 0xFE	; 254
 3d6:	80 81       	ld	r24, Z
 3d8:	8e bd       	out	0x2e, r24	; 46
 3da:	ff 91       	pop	r31
 3dc:	ef 91       	pop	r30
 3de:	8f 91       	pop	r24
 3e0:	0f 90       	pop	r0
 3e2:	0f be       	out	0x3f, r0	; 63
 3e4:	0f 90       	pop	r0
 3e6:	1f 90       	pop	r1
 3e8:	18 95       	reti

000003ea <__vector_14>:

	}
}

ISR(TIMER0_COMPA_vect)		// audio interrupt
{
 3ea:	1f 92       	push	r1
 3ec:	0f 92       	push	r0
 3ee:	0f b6       	in	r0, 0x3f	; 63
 3f0:	0f 92       	push	r0
 3f2:	11 24       	eor	r1, r1
 3f4:	8f 93       	push	r24
 3f6:	9f 93       	push	r25
 3f8:	ef 93       	push	r30
 3fa:	ff 93       	push	r31
	switch(note_index)
 3fc:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <note_index>
 400:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <note_index+0x1>
 404:	86 30       	cpi	r24, 0x06	; 6
 406:	91 05       	cpc	r25, r1
 408:	09 f4       	brne	.+2      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 40a:	4e c0       	rjmp	.+156    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 40c:	30 f4       	brcc	.+12     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 40e:	81 30       	cpi	r24, 0x01	; 1
 410:	91 05       	cpc	r25, r1
 412:	61 f0       	breq	.+24     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 414:	03 97       	sbiw	r24, 0x03	; 3
 416:	49 f1       	breq	.+82     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 418:	79 c0       	rjmp	.+242    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
 41a:	8e 30       	cpi	r24, 0x0E	; 14
 41c:	91 05       	cpc	r25, r1
 41e:	09 f4       	brne	.+2      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 420:	62 c0       	rjmp	.+196    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 422:	80 34       	cpi	r24, 0x40	; 64
 424:	91 05       	cpc	r25, r1
 426:	09 f4       	brne	.+2      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 428:	63 c0       	rjmp	.+198    	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
 42a:	70 c0       	rjmp	.+224    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
	{	//every 8ms
		case 0+1:	//0ms, 8ms on
		ICR1 = notes[beep_index];	//1st note
 42c:	e0 91 9b 01 	lds	r30, 0x019B	; 0x80019b <beep_index>
 430:	f0 91 9c 01 	lds	r31, 0x019C	; 0x80019c <beep_index+0x1>
 434:	ee 0f       	add	r30, r30
 436:	ff 1f       	adc	r31, r31
 438:	e2 58       	subi	r30, 0x82	; 130
 43a:	fe 4f       	sbci	r31, 0xFE	; 254
 43c:	80 81       	ld	r24, Z
 43e:	91 81       	ldd	r25, Z+1	; 0x01
 440:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 444:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		OCR1A = notes[beep_index]/2;
 448:	e0 91 9b 01 	lds	r30, 0x019B	; 0x80019b <beep_index>
 44c:	f0 91 9c 01 	lds	r31, 0x019C	; 0x80019c <beep_index+0x1>
 450:	ee 0f       	add	r30, r30
 452:	ff 1f       	adc	r31, r31
 454:	e2 58       	subi	r30, 0x82	; 130
 456:	fe 4f       	sbci	r31, 0xFE	; 254
 458:	80 81       	ld	r24, Z
 45a:	91 81       	ldd	r25, Z+1	; 0x01
 45c:	96 95       	lsr	r25
 45e:	87 95       	ror	r24
 460:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 464:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		break;
 468:	51 c0       	rjmp	.+162    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
		case 2+1:	// 16ms, 24, 32 on
		ICR1 = notes[beep_index+1];	//2nd note
 46a:	e0 91 9b 01 	lds	r30, 0x019B	; 0x80019b <beep_index>
 46e:	f0 91 9c 01 	lds	r31, 0x019C	; 0x80019c <beep_index+0x1>
 472:	ee 0f       	add	r30, r30
 474:	ff 1f       	adc	r31, r31
 476:	e0 58       	subi	r30, 0x80	; 128
 478:	fe 4f       	sbci	r31, 0xFE	; 254
 47a:	80 81       	ld	r24, Z
 47c:	91 81       	ldd	r25, Z+1	; 0x01
 47e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 482:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		OCR1A = notes[beep_index]/2;
 486:	e0 91 9b 01 	lds	r30, 0x019B	; 0x80019b <beep_index>
 48a:	f0 91 9c 01 	lds	r31, 0x019C	; 0x80019c <beep_index+0x1>
 48e:	ee 0f       	add	r30, r30
 490:	ff 1f       	adc	r31, r31
 492:	e2 58       	subi	r30, 0x82	; 130
 494:	fe 4f       	sbci	r31, 0xFE	; 254
 496:	80 81       	ld	r24, Z
 498:	91 81       	ldd	r25, Z+1	; 0x01
 49a:	96 95       	lsr	r25
 49c:	87 95       	ror	r24
 49e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 4a2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		break;
 4a6:	32 c0       	rjmp	.+100    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
		case 5+1:	// 40ms, 48, 56, 64, 72, 80, 88, 96, on
		ICR1 = notes[beep_index+2];	// 3rd note
 4a8:	e0 91 9b 01 	lds	r30, 0x019B	; 0x80019b <beep_index>
 4ac:	f0 91 9c 01 	lds	r31, 0x019C	; 0x80019c <beep_index+0x1>
 4b0:	ee 0f       	add	r30, r30
 4b2:	ff 1f       	adc	r31, r31
 4b4:	ee 57       	subi	r30, 0x7E	; 126
 4b6:	fe 4f       	sbci	r31, 0xFE	; 254
 4b8:	80 81       	ld	r24, Z
 4ba:	91 81       	ldd	r25, Z+1	; 0x01
 4bc:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 4c0:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		OCR1A = notes[beep_index]/2;
 4c4:	e0 91 9b 01 	lds	r30, 0x019B	; 0x80019b <beep_index>
 4c8:	f0 91 9c 01 	lds	r31, 0x019C	; 0x80019c <beep_index+0x1>
 4cc:	ee 0f       	add	r30, r30
 4ce:	ff 1f       	adc	r31, r31
 4d0:	e2 58       	subi	r30, 0x82	; 130
 4d2:	fe 4f       	sbci	r31, 0xFE	; 254
 4d4:	80 81       	ld	r24, Z
 4d6:	91 81       	ldd	r25, Z+1	; 0x01
 4d8:	96 95       	lsr	r25
 4da:	87 95       	ror	r24
 4dc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 4e0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		break;
 4e4:	13 c0       	rjmp	.+38     	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
		case 13+1:
		//ICR1 = 0;					//off
		OCR1A = 0;
 4e6:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 4ea:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		break;
 4ee:	0e c0       	rjmp	.+28     	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
		
		case 63+1:
		beep_index = 0;
 4f0:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <beep_index+0x1>
 4f4:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <beep_index>
		note_index = -1;
 4f8:	8f ef       	ldi	r24, 0xFF	; 255
 4fa:	9f ef       	ldi	r25, 0xFF	; 255
 4fc:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <note_index+0x1>
 500:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <note_index>
		TCCR0B &= ~(0b101 << CS00);
 504:	85 b5       	in	r24, 0x25	; 37
 506:	8a 7f       	andi	r24, 0xFA	; 250
 508:	85 bd       	out	0x25, r24	; 37
		TCNT0 = 0;
 50a:	16 bc       	out	0x26, r1	; 38
		break;
	}
	note_index += 1;
 50c:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <note_index>
 510:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <note_index+0x1>
 514:	01 96       	adiw	r24, 0x01	; 1
 516:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <note_index+0x1>
 51a:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <note_index>
}
 51e:	ff 91       	pop	r31
 520:	ef 91       	pop	r30
 522:	9f 91       	pop	r25
 524:	8f 91       	pop	r24
 526:	0f 90       	pop	r0
 528:	0f be       	out	0x3f, r0	; 63
 52a:	0f 90       	pop	r0
 52c:	1f 90       	pop	r1
 52e:	18 95       	reti

00000530 <__vector_42>:

ISR(TIMER4_COMPA_vect){		// use timer 4 for decreasing game time every 1s
 530:	1f 92       	push	r1
 532:	0f 92       	push	r0
 534:	0f b6       	in	r0, 0x3f	; 63
 536:	0f 92       	push	r0
 538:	11 24       	eor	r1, r1
 53a:	8f 93       	push	r24
	if(TimeRemaining > 0){
 53c:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <TimeRemaining>
 540:	88 23       	and	r24, r24
 542:	29 f0       	breq	.+10     	; 0x54e <__vector_42+0x1e>
		TimeRemaining--;
 544:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <TimeRemaining>
 548:	81 50       	subi	r24, 0x01	; 1
 54a:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <TimeRemaining>
	}
}
 54e:	8f 91       	pop	r24
 550:	0f 90       	pop	r0
 552:	0f be       	out	0x3f, r0	; 63
 554:	0f 90       	pop	r0
 556:	1f 90       	pop	r1
 558:	18 95       	reti

0000055a <IncrementScore>:
	TCCR4B = (0b000 << CS40);

}

void IncrementScore(uint8_t Player, uint16_t value){
	if(Player == 0){
 55a:	81 11       	cpse	r24, r1
 55c:	11 c0       	rjmp	.+34     	; 0x580 <IncrementScore+0x26>
		P1Score += value;
		P1Score = P1Score > 999 ? 999 : P1Score;
 55e:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <P1Score>
 562:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <P1Score+0x1>
 566:	68 0f       	add	r22, r24
 568:	79 1f       	adc	r23, r25
 56a:	68 3e       	cpi	r22, 0xE8	; 232
 56c:	83 e0       	ldi	r24, 0x03	; 3
 56e:	78 07       	cpc	r23, r24
 570:	10 f0       	brcs	.+4      	; 0x576 <IncrementScore+0x1c>
 572:	67 ee       	ldi	r22, 0xE7	; 231
 574:	73 e0       	ldi	r23, 0x03	; 3
 576:	70 93 b3 01 	sts	0x01B3, r23	; 0x8001b3 <P1Score+0x1>
 57a:	60 93 b2 01 	sts	0x01B2, r22	; 0x8001b2 <P1Score>
 57e:	08 95       	ret
	}else if(Player == 1){
 580:	81 30       	cpi	r24, 0x01	; 1
 582:	81 f4       	brne	.+32     	; 0x5a4 <IncrementScore+0x4a>
		P2Score += value;
		P2Score = P2Score > 999 ? 999 : P2Score;
 584:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <P2Score>
 588:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <P2Score+0x1>
 58c:	68 0f       	add	r22, r24
 58e:	79 1f       	adc	r23, r25
 590:	68 3e       	cpi	r22, 0xE8	; 232
 592:	83 e0       	ldi	r24, 0x03	; 3
 594:	78 07       	cpc	r23, r24
 596:	10 f0       	brcs	.+4      	; 0x59c <IncrementScore+0x42>
 598:	67 ee       	ldi	r22, 0xE7	; 231
 59a:	73 e0       	ldi	r23, 0x03	; 3
 59c:	70 93 b5 01 	sts	0x01B5, r23	; 0x8001b5 <P2Score+0x1>
 5a0:	60 93 b4 01 	sts	0x01B4, r22	; 0x8001b4 <P2Score>
 5a4:	08 95       	ret

000005a6 <Bonus>:
						// game is over, stop timer
	TCCR4B = (0b000 << CS40);
	
}

void Bonus(){
 5a6:	cf 92       	push	r12
 5a8:	df 92       	push	r13
 5aa:	ef 92       	push	r14
 5ac:	ff 92       	push	r15
 5ae:	0f 93       	push	r16
 5b0:	1f 93       	push	r17
 5b2:	cf 93       	push	r28
 5b4:	df 93       	push	r29

	// blink leds to indicate bonus round start

	for(uint8_t i = 0; i < 30; i++){
 5b6:	c0 e0       	ldi	r28, 0x00	; 0
		setButtonLed(i % 6, i / 5, 1); // TODO VERIFY THIS WORKS, turn all leds on
 5b8:	1d ec       	ldi	r17, 0xCD	; 205
 5ba:	db ea       	ldi	r29, 0xAB	; 171
 5bc:	c1 9f       	mul	r28, r17
 5be:	61 2d       	mov	r22, r1
 5c0:	11 24       	eor	r1, r1
 5c2:	66 95       	lsr	r22
 5c4:	66 95       	lsr	r22
 5c6:	cd 9f       	mul	r28, r29
 5c8:	81 2d       	mov	r24, r1
 5ca:	11 24       	eor	r1, r1
 5cc:	86 95       	lsr	r24
 5ce:	86 95       	lsr	r24
 5d0:	98 2f       	mov	r25, r24
 5d2:	99 0f       	add	r25, r25
 5d4:	89 0f       	add	r24, r25
 5d6:	88 0f       	add	r24, r24
 5d8:	41 e0       	ldi	r20, 0x01	; 1
 5da:	2c 2f       	mov	r18, r28
 5dc:	28 1b       	sub	r18, r24
 5de:	82 2f       	mov	r24, r18
 5e0:	0e 94 b4 00 	call	0x168	; 0x168 <setButtonLed>

void Bonus(){

	// blink leds to indicate bonus round start

	for(uint8_t i = 0; i < 30; i++){
 5e4:	cf 5f       	subi	r28, 0xFF	; 255
 5e6:	ce 31       	cpi	r28, 0x1E	; 30
 5e8:	49 f7       	brne	.-46     	; 0x5bc <Bonus+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5ea:	8f ef       	ldi	r24, 0xFF	; 255
 5ec:	99 e6       	ldi	r25, 0x69	; 105
 5ee:	28 e1       	ldi	r18, 0x18	; 24
 5f0:	81 50       	subi	r24, 0x01	; 1
 5f2:	90 40       	sbci	r25, 0x00	; 0
 5f4:	20 40       	sbci	r18, 0x00	; 0
 5f6:	e1 f7       	brne	.-8      	; 0x5f0 <Bonus+0x4a>
 5f8:	00 c0       	rjmp	.+0      	; 0x5fa <Bonus+0x54>
 5fa:	00 00       	nop
		setButtonLed(i % 6, i / 5, 1); // TODO VERIFY THIS WORKS, turn all leds on
	}
	_delay_ms(500);

	for(uint8_t i = 0; i < 30; i++){
 5fc:	c0 e0       	ldi	r28, 0x00	; 0
		setButtonLed(i % 6, i / 5, 0); // TODO VERIFY THIS WORKS, turn all leds on 
 5fe:	1d ec       	ldi	r17, 0xCD	; 205
 600:	db ea       	ldi	r29, 0xAB	; 171
 602:	c1 9f       	mul	r28, r17
 604:	61 2d       	mov	r22, r1
 606:	11 24       	eor	r1, r1
 608:	66 95       	lsr	r22
 60a:	66 95       	lsr	r22
 60c:	cd 9f       	mul	r28, r29
 60e:	81 2d       	mov	r24, r1
 610:	11 24       	eor	r1, r1
 612:	86 95       	lsr	r24
 614:	86 95       	lsr	r24
 616:	98 2f       	mov	r25, r24
 618:	99 0f       	add	r25, r25
 61a:	89 0f       	add	r24, r25
 61c:	88 0f       	add	r24, r24
 61e:	40 e0       	ldi	r20, 0x00	; 0
 620:	9c 2f       	mov	r25, r28
 622:	98 1b       	sub	r25, r24
 624:	89 2f       	mov	r24, r25
 626:	0e 94 b4 00 	call	0x168	; 0x168 <setButtonLed>
	for(uint8_t i = 0; i < 30; i++){
		setButtonLed(i % 6, i / 5, 1); // TODO VERIFY THIS WORKS, turn all leds on
	}
	_delay_ms(500);

	for(uint8_t i = 0; i < 30; i++){
 62a:	cf 5f       	subi	r28, 0xFF	; 255
 62c:	ce 31       	cpi	r28, 0x1E	; 30
 62e:	49 f7       	brne	.-46     	; 0x602 <Bonus+0x5c>
 630:	2f ef       	ldi	r18, 0xFF	; 255
 632:	89 e6       	ldi	r24, 0x69	; 105
 634:	98 e1       	ldi	r25, 0x18	; 24
 636:	21 50       	subi	r18, 0x01	; 1
 638:	80 40       	sbci	r24, 0x00	; 0
 63a:	90 40       	sbci	r25, 0x00	; 0
 63c:	e1 f7       	brne	.-8      	; 0x636 <Bonus+0x90>
 63e:	00 c0       	rjmp	.+0      	; 0x640 <Bonus+0x9a>
 640:	00 00       	nop
		setButtonLed(i % 6, i / 5, 0); // TODO VERIFY THIS WORKS, turn all leds on 
	}
	_delay_ms(500);

	for(uint8_t i = 0; i < 30; i++){
 642:	c0 e0       	ldi	r28, 0x00	; 0
		setButtonLed(i % 6, i / 5, 1); // TODO VERIFY THIS WORKS, turn all leds on
 644:	1d ec       	ldi	r17, 0xCD	; 205
 646:	db ea       	ldi	r29, 0xAB	; 171
 648:	c1 9f       	mul	r28, r17
 64a:	61 2d       	mov	r22, r1
 64c:	11 24       	eor	r1, r1
 64e:	66 95       	lsr	r22
 650:	66 95       	lsr	r22
 652:	cd 9f       	mul	r28, r29
 654:	81 2d       	mov	r24, r1
 656:	11 24       	eor	r1, r1
 658:	86 95       	lsr	r24
 65a:	86 95       	lsr	r24
 65c:	98 2f       	mov	r25, r24
 65e:	99 0f       	add	r25, r25
 660:	89 0f       	add	r24, r25
 662:	88 0f       	add	r24, r24
 664:	41 e0       	ldi	r20, 0x01	; 1
 666:	2c 2f       	mov	r18, r28
 668:	28 1b       	sub	r18, r24
 66a:	82 2f       	mov	r24, r18
 66c:	0e 94 b4 00 	call	0x168	; 0x168 <setButtonLed>
	for(uint8_t i = 0; i < 30; i++){
		setButtonLed(i % 6, i / 5, 0); // TODO VERIFY THIS WORKS, turn all leds on 
	}
	_delay_ms(500);

	for(uint8_t i = 0; i < 30; i++){
 670:	cf 5f       	subi	r28, 0xFF	; 255
 672:	ce 31       	cpi	r28, 0x1E	; 30
 674:	49 f7       	brne	.-46     	; 0x648 <Bonus+0xa2>
 676:	8f ef       	ldi	r24, 0xFF	; 255
 678:	94 e3       	ldi	r25, 0x34	; 52
 67a:	2c e0       	ldi	r18, 0x0C	; 12
 67c:	81 50       	subi	r24, 0x01	; 1
 67e:	90 40       	sbci	r25, 0x00	; 0
 680:	20 40       	sbci	r18, 0x00	; 0
 682:	e1 f7       	brne	.-8      	; 0x67c <Bonus+0xd6>
 684:	00 c0       	rjmp	.+0      	; 0x686 <Bonus+0xe0>
 686:	00 00       	nop
	}
	_delay_ms(250);

	uint32_t HasPressed = 0;	// store 30 stored buttons
	
	TimeRemaining = BonusTime;
 688:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <BonusTime>
 68c:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <TimeRemaining>
	TCNT4 = 0;
 690:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7e00a5>
 694:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7e00a4>
	TCCR4B = (0b101 << CS40);	// enable timer 0 (game timer)
 698:	85 e0       	ldi	r24, 0x05	; 5
 69a:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
	while(TimeRemaining > 0){
		for(uint8_t x = 0; x < 6; x++){
			for(uint8_t y = 0; y < 5; y++){
				if( isButtonDown(x, y) && (( 1 << (x*5 + y) ) == 0)){		// check later
 69e:	cc 24       	eor	r12, r12
 6a0:	c3 94       	inc	r12
 6a2:	d1 2c       	mov	r13, r1
	uint32_t HasPressed = 0;	// store 30 stored buttons
	
	TimeRemaining = BonusTime;
	TCNT4 = 0;
	TCCR4B = (0b101 << CS40);	// enable timer 0 (game timer)
	while(TimeRemaining > 0){
 6a4:	3c c0       	rjmp	.+120    	; 0x71e <Bonus+0x178>
		for(uint8_t x = 0; x < 6; x++){
			for(uint8_t y = 0; y < 5; y++){
				if( isButtonDown(x, y) && (( 1 << (x*5 + y) ) == 0)){		// check later
 6a6:	6c 2f       	mov	r22, r28
 6a8:	8d 2f       	mov	r24, r29
 6aa:	0e 94 a4 00 	call	0x148	; 0x148 <isButtonDown>
 6ae:	88 23       	and	r24, r24
 6b0:	21 f1       	breq	.+72     	; 0x6fa <Bonus+0x154>
 6b2:	c6 01       	movw	r24, r12
 6b4:	00 2e       	mov	r0, r16
 6b6:	02 c0       	rjmp	.+4      	; 0x6bc <Bonus+0x116>
 6b8:	88 0f       	add	r24, r24
 6ba:	99 1f       	adc	r25, r25
 6bc:	0a 94       	dec	r0
 6be:	e2 f7       	brpl	.-8      	; 0x6b8 <Bonus+0x112>
 6c0:	89 2b       	or	r24, r25
 6c2:	d9 f4       	brne	.+54     	; 0x6fa <Bonus+0x154>

					HasPressed |= (1 << (x*5 + y) );
					setButtonLed(x,y,0);
 6c4:	40 e0       	ldi	r20, 0x00	; 0
 6c6:	6c 2f       	mov	r22, r28
 6c8:	8d 2f       	mov	r24, r29
 6ca:	0e 94 b4 00 	call	0x168	; 0x168 <setButtonLed>

					if(GameMode == 0){
 6ce:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <GameMode>
 6d2:	81 11       	cpse	r24, r1
 6d4:	05 c0       	rjmp	.+10     	; 0x6e0 <Bonus+0x13a>
						IncrementScore(0,2);		// TODO later include mil
 6d6:	62 e0       	ldi	r22, 0x02	; 2
 6d8:	70 e0       	ldi	r23, 0x00	; 0
 6da:	0e 94 ad 02 	call	0x55a	; 0x55a <IncrementScore>
 6de:	0d c0       	rjmp	.+26     	; 0x6fa <Bonus+0x154>
					}else{
						if(x >= 3){
 6e0:	d3 30       	cpi	r29, 0x03	; 3
 6e2:	30 f0       	brcs	.+12     	; 0x6f0 <Bonus+0x14a>
							IncrementScore(1,2);	
 6e4:	62 e0       	ldi	r22, 0x02	; 2
 6e6:	70 e0       	ldi	r23, 0x00	; 0
 6e8:	81 e0       	ldi	r24, 0x01	; 1
 6ea:	0e 94 ad 02 	call	0x55a	; 0x55a <IncrementScore>
 6ee:	05 c0       	rjmp	.+10     	; 0x6fa <Bonus+0x154>
						}else{
							IncrementScore(0,2);
 6f0:	62 e0       	ldi	r22, 0x02	; 2
 6f2:	70 e0       	ldi	r23, 0x00	; 0
 6f4:	80 e0       	ldi	r24, 0x00	; 0
 6f6:	0e 94 ad 02 	call	0x55a	; 0x55a <IncrementScore>
	TimeRemaining = BonusTime;
	TCNT4 = 0;
	TCCR4B = (0b101 << CS40);	// enable timer 0 (game timer)
	while(TimeRemaining > 0){
		for(uint8_t x = 0; x < 6; x++){
			for(uint8_t y = 0; y < 5; y++){
 6fa:	cf 5f       	subi	r28, 0xFF	; 255
 6fc:	0f 5f       	subi	r16, 0xFF	; 255
 6fe:	1f 4f       	sbci	r17, 0xFF	; 255
 700:	c5 30       	cpi	r28, 0x05	; 5
 702:	89 f6       	brne	.-94     	; 0x6a6 <Bonus+0x100>
	
	TimeRemaining = BonusTime;
	TCNT4 = 0;
	TCCR4B = (0b101 << CS40);	// enable timer 0 (game timer)
	while(TimeRemaining > 0){
		for(uint8_t x = 0; x < 6; x++){
 704:	df 5f       	subi	r29, 0xFF	; 255
 706:	85 e0       	ldi	r24, 0x05	; 5
 708:	e8 0e       	add	r14, r24
 70a:	f1 1c       	adc	r15, r1
 70c:	d6 30       	cpi	r29, 0x06	; 6
 70e:	21 f4       	brne	.+8      	; 0x718 <Bonus+0x172>
 710:	06 c0       	rjmp	.+12     	; 0x71e <Bonus+0x178>
 712:	e1 2c       	mov	r14, r1
 714:	f1 2c       	mov	r15, r1
 716:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t i = 0; i < 30; i++){
		setButtonLed(i % 6, i / 5, 0); // TODO VERIFY THIS WORKS, turn all leds on 
	}
	_delay_ms(500);

	for(uint8_t i = 0; i < 30; i++){
 718:	87 01       	movw	r16, r14
 71a:	c0 e0       	ldi	r28, 0x00	; 0
 71c:	c4 cf       	rjmp	.-120    	; 0x6a6 <Bonus+0x100>
	uint32_t HasPressed = 0;	// store 30 stored buttons
	
	TimeRemaining = BonusTime;
	TCNT4 = 0;
	TCCR4B = (0b101 << CS40);	// enable timer 0 (game timer)
	while(TimeRemaining > 0){
 71e:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <TimeRemaining>
 722:	81 11       	cpse	r24, r1
 724:	f6 cf       	rjmp	.-20     	; 0x712 <Bonus+0x16c>

				}
			}
		}
	}
	TCCR4B = (0b000 << CS40);
 726:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>

}
 72a:	df 91       	pop	r29
 72c:	cf 91       	pop	r28
 72e:	1f 91       	pop	r17
 730:	0f 91       	pop	r16
 732:	ff 90       	pop	r15
 734:	ef 90       	pop	r14
 736:	df 90       	pop	r13
 738:	cf 90       	pop	r12
 73a:	08 95       	ret

0000073c <Display321>:
						4,3,4,4,4,3,4,5,5,5,5,5,5,5};
uint8_t onledsY[42] = { 0,0,0,0,1,2,2,2,2,3,4,4,4,4,
						0,0,0,0,1,2,2,2,2,3,4,4,4,4,
						0,1,1,2,3,4,4,4,4,4,4,4,4,4};
	
void Display321(){	//TODO ADD TONES FOR EACH DIGIT
 73c:	6f 92       	push	r6
 73e:	7f 92       	push	r7
 740:	8f 92       	push	r8
 742:	9f 92       	push	r9
 744:	af 92       	push	r10
 746:	bf 92       	push	r11
 748:	cf 92       	push	r12
 74a:	df 92       	push	r13
 74c:	ef 92       	push	r14
 74e:	ff 92       	push	r15
 750:	0f 93       	push	r16
 752:	1f 93       	push	r17
 754:	cf 93       	push	r28
 756:	df 93       	push	r29
 758:	03 e4       	ldi	r16, 0x43	; 67
 75a:	11 e0       	ldi	r17, 0x01	; 1
 75c:	0f 2e       	mov	r0, r31
 75e:	fd e6       	ldi	r31, 0x6D	; 109
 760:	8f 2e       	mov	r8, r31
 762:	f1 e0       	ldi	r31, 0x01	; 1
 764:	9f 2e       	mov	r9, r31
 766:	f0 2d       	mov	r31, r0
 768:	0f 2e       	mov	r0, r31
 76a:	f3 e4       	ldi	r31, 0x43	; 67
 76c:	ef 2e       	mov	r14, r31
 76e:	f1 e0       	ldi	r31, 0x01	; 1
 770:	ff 2e       	mov	r15, r31
 772:	f0 2d       	mov	r31, r0
	
	for(uint8_t number = 3; number >= 1; number--){
		// turn off all leds
		for(uint8_t i = 0; i < 30; i++){
			setButtonLed(i % 6, i / 5, 0); // TODO VERIFY THIS WORKS
 774:	0f 2e       	mov	r0, r31
 776:	fd ec       	ldi	r31, 0xCD	; 205
 778:	6f 2e       	mov	r6, r31
 77a:	f0 2d       	mov	r31, r0
 77c:	0f 2e       	mov	r0, r31
 77e:	fb ea       	ldi	r31, 0xAB	; 171
 780:	7f 2e       	mov	r7, r31
 782:	f0 2d       	mov	r31, r0
 784:	38 c0       	rjmp	.+112    	; 0x7f6 <Display321+0xba>
 786:	c6 9d       	mul	r28, r6
 788:	61 2d       	mov	r22, r1
 78a:	11 24       	eor	r1, r1
 78c:	66 95       	lsr	r22
 78e:	66 95       	lsr	r22
 790:	c7 9d       	mul	r28, r7
 792:	81 2d       	mov	r24, r1
 794:	11 24       	eor	r1, r1
 796:	86 95       	lsr	r24
 798:	86 95       	lsr	r24
 79a:	98 2f       	mov	r25, r24
 79c:	99 0f       	add	r25, r25
 79e:	89 0f       	add	r24, r25
 7a0:	88 0f       	add	r24, r24
 7a2:	40 e0       	ldi	r20, 0x00	; 0
 7a4:	2c 2f       	mov	r18, r28
 7a6:	28 1b       	sub	r18, r24
 7a8:	82 2f       	mov	r24, r18
 7aa:	0e 94 b4 00 	call	0x168	; 0x168 <setButtonLed>
	
void Display321(){	//TODO ADD TONES FOR EACH DIGIT
	
	for(uint8_t number = 3; number >= 1; number--){
		// turn off all leds
		for(uint8_t i = 0; i < 30; i++){
 7ae:	cf 5f       	subi	r28, 0xFF	; 255
 7b0:	ce 31       	cpi	r28, 0x1E	; 30
 7b2:	49 f7       	brne	.-46     	; 0x786 <Display321+0x4a>
 7b4:	58 01       	movw	r10, r16
 7b6:	8e e0       	ldi	r24, 0x0E	; 14
 7b8:	a8 0e       	add	r10, r24
 7ba:	b1 1c       	adc	r11, r1
 7bc:	64 01       	movw	r12, r8
 7be:	e8 01       	movw	r28, r16
			setButtonLed(i % 6, i / 5, 0); // TODO VERIFY THIS WORKS
		}
		for(uint8_t i = 0; i < 14; i++){	// 
			setButtonLed(onledsX[i + (14*number)], onledsY[i + (14*number)], 1);
 7c0:	69 91       	ld	r22, Y+
 7c2:	41 e0       	ldi	r20, 0x01	; 1
 7c4:	f6 01       	movw	r30, r12
 7c6:	81 91       	ld	r24, Z+
 7c8:	6f 01       	movw	r12, r30
 7ca:	0e 94 b4 00 	call	0x168	; 0x168 <setButtonLed>
	for(uint8_t number = 3; number >= 1; number--){
		// turn off all leds
		for(uint8_t i = 0; i < 30; i++){
			setButtonLed(i % 6, i / 5, 0); // TODO VERIFY THIS WORKS
		}
		for(uint8_t i = 0; i < 14; i++){	// 
 7ce:	ca 15       	cp	r28, r10
 7d0:	db 05       	cpc	r29, r11
 7d2:	b1 f7       	brne	.-20     	; 0x7c0 <Display321+0x84>
 7d4:	ff ef       	ldi	r31, 0xFF	; 255
 7d6:	23 ed       	ldi	r18, 0xD3	; 211
 7d8:	80 e3       	ldi	r24, 0x30	; 48
 7da:	f1 50       	subi	r31, 0x01	; 1
 7dc:	20 40       	sbci	r18, 0x00	; 0
 7de:	80 40       	sbci	r24, 0x00	; 0
 7e0:	e1 f7       	brne	.-8      	; 0x7da <Display321+0x9e>
 7e2:	00 c0       	rjmp	.+0      	; 0x7e4 <Display321+0xa8>
 7e4:	00 00       	nop
 7e6:	0e 50       	subi	r16, 0x0E	; 14
 7e8:	11 09       	sbc	r17, r1
 7ea:	9e e0       	ldi	r25, 0x0E	; 14
 7ec:	89 1a       	sub	r8, r25
 7ee:	91 08       	sbc	r9, r1
						0,0,0,0,1,2,2,2,2,3,4,4,4,4,
						0,1,1,2,3,4,4,4,4,4,4,4,4,4};
	
void Display321(){	//TODO ADD TONES FOR EACH DIGIT
	
	for(uint8_t number = 3; number >= 1; number--){
 7f0:	8e 14       	cp	r8, r14
 7f2:	9f 04       	cpc	r9, r15
 7f4:	11 f0       	breq	.+4      	; 0x7fa <Display321+0xbe>
						4,3,4,4,4,3,4,5,5,5,5,5,5,5};
uint8_t onledsY[42] = { 0,0,0,0,1,2,2,2,2,3,4,4,4,4,
						0,0,0,0,1,2,2,2,2,3,4,4,4,4,
						0,1,1,2,3,4,4,4,4,4,4,4,4,4};
	
void Display321(){	//TODO ADD TONES FOR EACH DIGIT
 7f6:	c0 e0       	ldi	r28, 0x00	; 0
 7f8:	c6 cf       	rjmp	.-116    	; 0x786 <Display321+0x4a>
		for(uint8_t i = 0; i < 14; i++){	// 
			setButtonLed(onledsX[i + (14*number)], onledsY[i + (14*number)], 1);
		}
		_delay_ms(1000);
	}
}
 7fa:	df 91       	pop	r29
 7fc:	cf 91       	pop	r28
 7fe:	1f 91       	pop	r17
 800:	0f 91       	pop	r16
 802:	ff 90       	pop	r15
 804:	ef 90       	pop	r14
 806:	df 90       	pop	r13
 808:	cf 90       	pop	r12
 80a:	bf 90       	pop	r11
 80c:	af 90       	pop	r10
 80e:	9f 90       	pop	r9
 810:	8f 90       	pop	r8
 812:	7f 90       	pop	r7
 814:	6f 90       	pop	r6
 816:	08 95       	ret

00000818 <playChirp>:

void playChirp(uint8_t tone){
	beep_index = tone;
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <beep_index+0x1>
 81e:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <beep_index>
	note_index = 0;
 822:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <note_index+0x1>
 826:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <note_index>
	TCCR0B = (0b101 << CS00);	//turn on clock for
 82a:	85 e0       	ldi	r24, 0x05	; 5
 82c:	85 bd       	out	0x25, r24	; 37
 82e:	08 95       	ret

00000830 <Game>:
	if(TimeRemaining > 0){
		TimeRemaining--;
	}
}

void Game(){
 830:	3f 92       	push	r3
 832:	4f 92       	push	r4
 834:	6f 92       	push	r6
 836:	7f 92       	push	r7
 838:	8f 92       	push	r8
 83a:	9f 92       	push	r9
 83c:	af 92       	push	r10
 83e:	bf 92       	push	r11
 840:	cf 92       	push	r12
 842:	df 92       	push	r13
 844:	ef 92       	push	r14
 846:	ff 92       	push	r15
 848:	0f 93       	push	r16
 84a:	1f 93       	push	r17
 84c:	cf 93       	push	r28
 84e:	df 93       	push	r29

							// game mode is set when leaving attract mode
	Display321();
 850:	0e 94 9e 03 	call	0x73c	; 0x73c <Display321>
	
	P1Score = 0;			// reset scores and multipliers
 854:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <P1Score+0x1>
 858:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <P1Score>
	P2Score = 0;
 85c:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <P2Score+0x1>
 860:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <P2Score>
	P1Multiplier = 1;
 864:	81 e0       	ldi	r24, 0x01	; 1
 866:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <P1Multiplier>
	P2Multiplier = 1;
 86a:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <P2Multiplier>
 86e:	0f 2e       	mov	r0, r31
 870:	fc eb       	ldi	r31, 0xBC	; 188
 872:	ef 2e       	mov	r14, r31
 874:	f1 e0       	ldi	r31, 0x01	; 1
 876:	ff 2e       	mov	r15, r31
 878:	f0 2d       	mov	r31, r0
 87a:	08 ea       	ldi	r16, 0xA8	; 168
 87c:	11 e0       	ldi	r17, 0x01	; 1
 87e:	c9 eb       	ldi	r28, 0xB9	; 185
 880:	d1 e0       	ldi	r29, 0x01	; 1

							// pick 6 random leds to enable regardless of mode
							// (3 left side 3 right side)
	for(int i = 0; i < (MaxLedsOn / 2); i++){
		gameledsX[i] = rand() % (LedsXMax / 2);			// turn 3 on left side
 882:	0f 2e       	mov	r0, r31
 884:	f3 e0       	ldi	r31, 0x03	; 3
 886:	cf 2e       	mov	r12, r31
 888:	d1 2c       	mov	r13, r1
 88a:	f0 2d       	mov	r31, r0
		gameledsY[i] = rand() % 5;
 88c:	0f 2e       	mov	r0, r31
 88e:	f5 e0       	ldi	r31, 0x05	; 5
 890:	af 2e       	mov	r10, r31
 892:	b1 2c       	mov	r11, r1
 894:	f0 2d       	mov	r31, r0
	P2Multiplier = 1;

							// pick 6 random leds to enable regardless of mode
							// (3 left side 3 right side)
	for(int i = 0; i < (MaxLedsOn / 2); i++){
		gameledsX[i] = rand() % (LedsXMax / 2);			// turn 3 on left side
 896:	0e 94 93 06 	call	0xd26	; 0xd26 <rand>
 89a:	b6 01       	movw	r22, r12
 89c:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__divmodhi4>
 8a0:	89 93       	st	Y+, r24
		gameledsY[i] = rand() % 5;
 8a2:	0e 94 93 06 	call	0xd26	; 0xd26 <rand>
 8a6:	b5 01       	movw	r22, r10
 8a8:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__divmodhi4>
 8ac:	f8 01       	movw	r30, r16
 8ae:	81 93       	st	Z+, r24
 8b0:	8f 01       	movw	r16, r30
		
		gameledsX[i+3] = 3 + rand() % (LedsXMax / 2);	// turn 3 on right side
 8b2:	0e 94 93 06 	call	0xd26	; 0xd26 <rand>
 8b6:	b6 01       	movw	r22, r12
 8b8:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__divmodhi4>
 8bc:	8d 5f       	subi	r24, 0xFD	; 253
 8be:	8a 83       	std	Y+2, r24	; 0x02
		gameledsY[i+3] = rand() % 5;
 8c0:	0e 94 93 06 	call	0xd26	; 0xd26 <rand>
 8c4:	b5 01       	movw	r22, r10
 8c6:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__divmodhi4>
 8ca:	f8 01       	movw	r30, r16
 8cc:	82 83       	std	Z+2, r24	; 0x02
	P1Multiplier = 1;
	P2Multiplier = 1;

							// pick 6 random leds to enable regardless of mode
							// (3 left side 3 right side)
	for(int i = 0; i < (MaxLedsOn / 2); i++){
 8ce:	ce 15       	cp	r28, r14
 8d0:	df 05       	cpc	r29, r15
 8d2:	09 f7       	brne	.-62     	; 0x896 <Game+0x66>
		gameledsX[i+3] = 3 + rand() % (LedsXMax / 2);	// turn 3 on right side
		gameledsY[i+3] = rand() % 5;
	}


	TimeRemaining = RoundTime;
 8d4:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <RoundTime>
 8d8:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <TimeRemaining>
	TCNT4 = 0;					// reset timer
 8dc:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7e00a5>
 8e0:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7e00a4>
	TCCR4B = (0b101 << CS40);	// enable timer 0 (game timer)
 8e4:	85 e0       	ldi	r24, 0x05	; 5
 8e6:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>

				do{		// move led to random DIFFERENT spot
					if(i >= 3){	
						gameledsX[i+3] = 3 + rand() % (LedsXMax / 2);
					}else{
						gameledsX[i] = rand() % (LedsXMax / 2);
 8ea:	0f 2e       	mov	r0, r31
 8ec:	f3 e0       	ldi	r31, 0x03	; 3
 8ee:	ef 2e       	mov	r14, r31
 8f0:	f1 2c       	mov	r15, r1
 8f2:	f0 2d       	mov	r31, r0
					}
					gameledsY[i] = rand() % 5;
 8f4:	0f 2e       	mov	r0, r31
 8f6:	f5 e0       	ldi	r31, 0x05	; 5
 8f8:	8f 2e       	mov	r8, r31
 8fa:	91 2c       	mov	r9, r1
 8fc:	f0 2d       	mov	r31, r0

	TimeRemaining = RoundTime;
	TCNT4 = 0;					// reset timer
	TCCR4B = (0b101 << CS40);	// enable timer 0 (game timer)
	
	while(TimeRemaining > 0){		
 8fe:	90 c0       	rjmp	.+288    	; 0xa20 <__stack+0x121>
 900:	0f 2e       	mov	r0, r31
 902:	f9 eb       	ldi	r31, 0xB9	; 185
 904:	af 2e       	mov	r10, r31
 906:	f1 e0       	ldi	r31, 0x01	; 1
 908:	bf 2e       	mov	r11, r31
 90a:	f0 2d       	mov	r31, r0
 90c:	0f 2e       	mov	r0, r31
 90e:	f8 ea       	ldi	r31, 0xA8	; 168
 910:	cf 2e       	mov	r12, r31
 912:	f1 e0       	ldi	r31, 0x01	; 1
 914:	df 2e       	mov	r13, r31
 916:	f0 2d       	mov	r31, r0
 918:	10 e0       	ldi	r17, 0x00	; 0
 91a:	36 01       	movw	r6, r12
 91c:	e5 01       	movw	r28, r10

		for(uint8_t i = 0; i < 6; i++){
			if (isButtonDown(gameledsX[i], gameledsY[i]) ){
 91e:	f6 01       	movw	r30, r12
 920:	60 81       	ld	r22, Z
 922:	88 81       	ld	r24, Y
 924:	0e 94 a4 00 	call	0x148	; 0x148 <isButtonDown>
 928:	88 23       	and	r24, r24
 92a:	09 f4       	brne	.+2      	; 0x92e <__stack+0x2f>
 92c:	63 c0       	rjmp	.+198    	; 0x9f4 <__stack+0xf5>

				uint8_t oldX = gameledsX[i];
 92e:	48 80       	ld	r4, Y
				uint8_t oldY = gameledsY[i];
 930:	f6 01       	movw	r30, r12
 932:	30 80       	ld	r3, Z

				do{		// move led to random DIFFERENT spot
					if(i >= 3){	
 934:	13 30       	cpi	r17, 0x03	; 3
 936:	40 f0       	brcs	.+16     	; 0x948 <__stack+0x49>
						gameledsX[i+3] = 3 + rand() % (LedsXMax / 2);
 938:	0e 94 93 06 	call	0xd26	; 0xd26 <rand>
 93c:	b7 01       	movw	r22, r14
 93e:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__divmodhi4>
 942:	8d 5f       	subi	r24, 0xFD	; 253
 944:	8b 83       	std	Y+3, r24	; 0x03
 946:	06 c0       	rjmp	.+12     	; 0x954 <__stack+0x55>
					}else{
						gameledsX[i] = rand() % (LedsXMax / 2);
 948:	0e 94 93 06 	call	0xd26	; 0xd26 <rand>
 94c:	b7 01       	movw	r22, r14
 94e:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__divmodhi4>
 952:	88 83       	st	Y, r24
					}
					gameledsY[i] = rand() % 5;
 954:	0e 94 93 06 	call	0xd26	; 0xd26 <rand>
 958:	b4 01       	movw	r22, r8
 95a:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__divmodhi4>
 95e:	98 2f       	mov	r25, r24
 960:	f3 01       	movw	r30, r6
 962:	80 83       	st	Z, r24

				}while((gameledsX[i] == oldX) && (gameledsY[i] == oldY));
 964:	88 81       	ld	r24, Y
 966:	48 12       	cpse	r4, r24
 968:	02 c0       	rjmp	.+4      	; 0x96e <__stack+0x6f>
 96a:	39 16       	cp	r3, r25
 96c:	19 f3       	breq	.-58     	; 0x934 <__stack+0x35>


				if(GameMode == 0){
 96e:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <GameMode>
 972:	81 11       	cpse	r24, r1
 974:	14 c0       	rjmp	.+40     	; 0x99e <__stack+0x9f>
					IncrementScore(0, P1Multiplier);	// add score and inc multiplier (singleplayer)
 976:	60 91 a4 01 	lds	r22, 0x01A4	; 0x8001a4 <P1Multiplier>
 97a:	70 e0       	ldi	r23, 0x00	; 0
 97c:	0e 94 ad 02 	call	0x55a	; 0x55a <IncrementScore>
					playChirp(P1Multiplier);
 980:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <P1Multiplier>
 984:	0e 94 0c 04 	call	0x818	; 0x818 <playChirp>
					P1Multiplier = (P1Multiplier == MultiplierMax) ? MultiplierMax : (P1Multiplier + 1);
 988:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <P1Multiplier>
 98c:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <MultiplierMax>
 990:	98 17       	cp	r25, r24
 992:	11 f0       	breq	.+4      	; 0x998 <__stack+0x99>
 994:	81 e0       	ldi	r24, 0x01	; 1
 996:	89 0f       	add	r24, r25
 998:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <P1Multiplier>
 99c:	2b c0       	rjmp	.+86     	; 0x9f4 <__stack+0xf5>
				}else{
					if(i >= 3){
 99e:	13 30       	cpi	r17, 0x03	; 3
 9a0:	a8 f0       	brcs	.+42     	; 0x9cc <__stack+0xcd>
						IncrementScore(1, P2Multiplier);	// add depending on side of button pressed
 9a2:	60 91 a3 01 	lds	r22, 0x01A3	; 0x8001a3 <P2Multiplier>
 9a6:	70 e0       	ldi	r23, 0x00	; 0
 9a8:	81 e0       	ldi	r24, 0x01	; 1
 9aa:	0e 94 ad 02 	call	0x55a	; 0x55a <IncrementScore>
						playChirp(P2Multiplier);
 9ae:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <P2Multiplier>
 9b2:	0e 94 0c 04 	call	0x818	; 0x818 <playChirp>
						P2Multiplier = (P2Multiplier == MultiplierMax) ? MultiplierMax : (P2Multiplier + 1);
 9b6:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <P2Multiplier>
 9ba:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <MultiplierMax>
 9be:	98 17       	cp	r25, r24
 9c0:	11 f0       	breq	.+4      	; 0x9c6 <__stack+0xc7>
 9c2:	81 e0       	ldi	r24, 0x01	; 1
 9c4:	89 0f       	add	r24, r25
 9c6:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <P2Multiplier>
 9ca:	14 c0       	rjmp	.+40     	; 0x9f4 <__stack+0xf5>
					}else{
						IncrementScore(0, P1Multiplier);
 9cc:	60 91 a4 01 	lds	r22, 0x01A4	; 0x8001a4 <P1Multiplier>
 9d0:	70 e0       	ldi	r23, 0x00	; 0
 9d2:	80 e0       	ldi	r24, 0x00	; 0
 9d4:	0e 94 ad 02 	call	0x55a	; 0x55a <IncrementScore>
						playChirp(P1Multiplier);
 9d8:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <P1Multiplier>
 9dc:	0e 94 0c 04 	call	0x818	; 0x818 <playChirp>
						P1Multiplier = (P1Multiplier == MultiplierMax) ? MultiplierMax : (P1Multiplier + 1);
 9e0:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <P1Multiplier>
 9e4:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <MultiplierMax>
 9e8:	98 17       	cp	r25, r24
 9ea:	11 f0       	breq	.+4      	; 0x9f0 <__stack+0xf1>
 9ec:	81 e0       	ldi	r24, 0x01	; 1
 9ee:	89 0f       	add	r24, r25
 9f0:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <P1Multiplier>
	TCNT4 = 0;					// reset timer
	TCCR4B = (0b101 << CS40);	// enable timer 0 (game timer)
	
	while(TimeRemaining > 0){		

		for(uint8_t i = 0; i < 6; i++){
 9f4:	1f 5f       	subi	r17, 0xFF	; 255
 9f6:	ff ef       	ldi	r31, 0xFF	; 255
 9f8:	cf 1a       	sub	r12, r31
 9fa:	df 0a       	sbc	r13, r31
 9fc:	8f ef       	ldi	r24, 0xFF	; 255
 9fe:	a8 1a       	sub	r10, r24
 a00:	b8 0a       	sbc	r11, r24
 a02:	16 30       	cpi	r17, 0x06	; 6
 a04:	09 f0       	breq	.+2      	; 0xa08 <__stack+0x109>
 a06:	89 cf       	rjmp	.-238    	; 0x91a <__stack+0x1b>

			}
		}	
		
		
		if (P1Multiplier > 1){
 a08:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <P1Multiplier>
 a0c:	82 30       	cpi	r24, 0x02	; 2
 a0e:	10 f0       	brcs	.+4      	; 0xa14 <__stack+0x115>
			if ( (P1MultTimeS + MultiplierDecaySeconds) <= TimeRemaining){
 a10:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <TimeRemaining>
				if(P1MultTimeT < MultiplierDecayTicks){	// TODO INCORPORATE TICK OFFSET
					P1Multiplier--;
				}
			}
		}
		if (P2Multiplier > 1){
 a14:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <P2Multiplier>
 a18:	82 30       	cpi	r24, 0x02	; 2
 a1a:	10 f0       	brcs	.+4      	; 0xa20 <__stack+0x121>
			if ( (P2MultTimeS + MultiplierDecaySeconds) <= TimeRemaining){
 a1c:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <TimeRemaining>

	TimeRemaining = RoundTime;
	TCNT4 = 0;					// reset timer
	TCCR4B = (0b101 << CS40);	// enable timer 0 (game timer)
	
	while(TimeRemaining > 0){		
 a20:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <TimeRemaining>
 a24:	81 11       	cpse	r24, r1
 a26:	6c cf       	rjmp	.-296    	; 0x900 <__stack+0x1>
		//_delay_ms(50);	// TODO maybe change this later	

	}
	
						// game is over, stop timer
	TCCR4B = (0b000 << CS40);
 a28:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
	
}
 a2c:	df 91       	pop	r29
 a2e:	cf 91       	pop	r28
 a30:	1f 91       	pop	r17
 a32:	0f 91       	pop	r16
 a34:	ff 90       	pop	r15
 a36:	ef 90       	pop	r14
 a38:	df 90       	pop	r13
 a3a:	cf 90       	pop	r12
 a3c:	bf 90       	pop	r11
 a3e:	af 90       	pop	r10
 a40:	9f 90       	pop	r9
 a42:	8f 90       	pop	r8
 a44:	7f 90       	pop	r7
 a46:	6f 90       	pop	r6
 a48:	4f 90       	pop	r4
 a4a:	3f 90       	pop	r3
 a4c:	08 95       	ret

00000a4e <AttractCheckGameStart>:
	beep_index = tone;
	note_index = 0;
	TCCR0B = (0b101 << CS00);	//turn on clock for
}

uint8_t AttractCheckGameStart(uint16_t count){
 a4e:	0f 93       	push	r16
 a50:	1f 93       	push	r17
 a52:	cf 93       	push	r28
 a54:	df 93       	push	r29
	// pauses some time while checking player button inputs, skip and start game if pressed
	for(uint16_t delayCount = 0; delayCount < count; delayCount++){
 a56:	00 97       	sbiw	r24, 0x00	; 0
 a58:	e1 f0       	breq	.+56     	; 0xa92 <AttractCheckGameStart+0x44>
 a5a:	8c 01       	movw	r16, r24
 a5c:	c0 e0       	ldi	r28, 0x00	; 0
 a5e:	d0 e0       	ldi	r29, 0x00	; 0
		//delay some ms between each button light and check for game start
		if(isButtonDown(Player1ButtonX, Player1ButtonY) || isButtonDown(Player2ButtonX, Player2ButtonY)){
 a60:	62 e0       	ldi	r22, 0x02	; 2
 a62:	81 e0       	ldi	r24, 0x01	; 1
 a64:	0e 94 a4 00 	call	0x148	; 0x148 <isButtonDown>
 a68:	81 11       	cpse	r24, r1
 a6a:	06 c0       	rjmp	.+12     	; 0xa78 <AttractCheckGameStart+0x2a>
 a6c:	62 e0       	ldi	r22, 0x02	; 2
 a6e:	81 e0       	ldi	r24, 0x01	; 1
 a70:	0e 94 a4 00 	call	0x148	; 0x148 <isButtonDown>
 a74:	88 23       	and	r24, r24
 a76:	41 f0       	breq	.+16     	; 0xa88 <AttractCheckGameStart+0x3a>
			GameMode = isButtonDown(Player2ButtonX, Player2ButtonY);
 a78:	62 e0       	ldi	r22, 0x02	; 2
 a7a:	81 e0       	ldi	r24, 0x01	; 1
 a7c:	0e 94 a4 00 	call	0x148	; 0x148 <isButtonDown>
 a80:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <GameMode>
			return 1;	// instantly return and quit waiting
 a84:	81 e0       	ldi	r24, 0x01	; 1
 a86:	06 c0       	rjmp	.+12     	; 0xa94 <AttractCheckGameStart+0x46>
	TCCR0B = (0b101 << CS00);	//turn on clock for
}

uint8_t AttractCheckGameStart(uint16_t count){
	// pauses some time while checking player button inputs, skip and start game if pressed
	for(uint16_t delayCount = 0; delayCount < count; delayCount++){
 a88:	21 96       	adiw	r28, 0x01	; 1
 a8a:	0c 17       	cp	r16, r28
 a8c:	1d 07       	cpc	r17, r29
 a8e:	41 f7       	brne	.-48     	; 0xa60 <AttractCheckGameStart+0x12>
 a90:	01 c0       	rjmp	.+2      	; 0xa94 <AttractCheckGameStart+0x46>
		if(isButtonDown(Player1ButtonX, Player1ButtonY) || isButtonDown(Player2ButtonX, Player2ButtonY)){
			GameMode = isButtonDown(Player2ButtonX, Player2ButtonY);
			return 1;	// instantly return and quit waiting
		}
	}
	return 0;	// return that it finished without button presses
 a92:	80 e0       	ldi	r24, 0x00	; 0
}
 a94:	df 91       	pop	r29
 a96:	cf 91       	pop	r28
 a98:	1f 91       	pop	r17
 a9a:	0f 91       	pop	r16
 a9c:	08 95       	ret

00000a9e <Attractive>:

void Attractive(){
 a9e:	cf 93       	push	r28
 aa0:	df 93       	push	r29
	while(1){
		uint8_t blinkyMode = 0;	// todo make random, ADD DISPLAY BLANKING
		switch(blinkyMode){	// multiple blinky modes (todo randomly pick one)
			case 0:
			for(uint8_t mode = 1; mode > 0; mode--){	// turn on then turn	off (add more mod 2 to repeat muliple times)
				for(uint8_t x = 0; x < 6; x++){			// iterate each LED
 aa2:	d0 e0       	ldi	r29, 0x00	; 0
 aa4:	11 c0       	rjmp	.+34     	; 0xac8 <Attractive+0x2a>
					for (uint8_t y = 0; y < 5; y++){
						setButtonLed(x, y, mode);	//setbuttonled from buttons.h
 aa6:	41 e0       	ldi	r20, 0x01	; 1
 aa8:	6c 2f       	mov	r22, r28
 aaa:	8d 2f       	mov	r24, r29
 aac:	0e 94 b4 00 	call	0x168	; 0x168 <setButtonLed>
						if( AttractCheckGameStart(100) ){
 ab0:	84 e6       	ldi	r24, 0x64	; 100
 ab2:	90 e0       	ldi	r25, 0x00	; 0
 ab4:	0e 94 27 05 	call	0xa4e	; 0xa4e <AttractCheckGameStart>
 ab8:	81 11       	cpse	r24, r1
 aba:	08 c0       	rjmp	.+16     	; 0xacc <Attractive+0x2e>
		uint8_t blinkyMode = 0;	// todo make random, ADD DISPLAY BLANKING
		switch(blinkyMode){	// multiple blinky modes (todo randomly pick one)
			case 0:
			for(uint8_t mode = 1; mode > 0; mode--){	// turn on then turn	off (add more mod 2 to repeat muliple times)
				for(uint8_t x = 0; x < 6; x++){			// iterate each LED
					for (uint8_t y = 0; y < 5; y++){
 abc:	cf 5f       	subi	r28, 0xFF	; 255
 abe:	c5 30       	cpi	r28, 0x05	; 5
 ac0:	91 f7       	brne	.-28     	; 0xaa6 <Attractive+0x8>
	while(1){
		uint8_t blinkyMode = 0;	// todo make random, ADD DISPLAY BLANKING
		switch(blinkyMode){	// multiple blinky modes (todo randomly pick one)
			case 0:
			for(uint8_t mode = 1; mode > 0; mode--){	// turn on then turn	off (add more mod 2 to repeat muliple times)
				for(uint8_t x = 0; x < 6; x++){			// iterate each LED
 ac2:	df 5f       	subi	r29, 0xFF	; 255
 ac4:	d6 30       	cpi	r29, 0x06	; 6
 ac6:	11 f0       	breq	.+4      	; 0xacc <Attractive+0x2e>
		}
	}
	return 0;	// return that it finished without button presses
}

void Attractive(){
 ac8:	c0 e0       	ldi	r28, 0x00	; 0
 aca:	ed cf       	rjmp	.-38     	; 0xaa6 <Attractive+0x8>
		}
		EndAttract:
		return;		// start the game
	}

}
 acc:	df 91       	pop	r29
 ace:	cf 91       	pop	r28
 ad0:	08 95       	ret

00000ad2 <EEPROM_write>:


void EEPROM_write(uint16_t uiAddress, uint8_t ucData)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
 ad2:	f9 99       	sbic	0x1f, 1	; 31
 ad4:	fe cf       	rjmp	.-4      	; 0xad2 <EEPROM_write>
		;
	/* Set up address and Data Registers */
	EEAR = uiAddress;
 ad6:	92 bd       	out	0x22, r25	; 34
 ad8:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
 ada:	60 bd       	out	0x20, r22	; 32
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMPE);
 adc:	fa 9a       	sbi	0x1f, 2	; 31
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEPE);
 ade:	f9 9a       	sbi	0x1f, 1	; 31
 ae0:	08 95       	ret

00000ae2 <EEPROM_read>:
}

uint8_t EEPROM_read(uint16_t uiAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
 ae2:	f9 99       	sbic	0x1f, 1	; 31
 ae4:	fe cf       	rjmp	.-4      	; 0xae2 <EEPROM_read>
		;
	/* Set up address register */
	EEAR = uiAddress;
 ae6:	92 bd       	out	0x22, r25	; 34
 ae8:	81 bd       	out	0x21, r24	; 33
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
 aea:	f8 9a       	sbi	0x1f, 0	; 31
	/* Return data from Data Register */
	return EEDR;
 aec:	80 b5       	in	r24, 0x20	; 32
}
 aee:	08 95       	ret

00000af0 <main>:


int main(void)
{

	usbQcInit();
 af0:	0e 94 17 06 	call	0xc2e	; 0xc2e <usbQcInit>
	QCset12V();
 af4:	0e 94 1c 06 	call	0xc38	; 0xc38 <QCset12V>
	
	buttonsInit();
 af8:	0e 94 98 00 	call	0x130	; 0x130 <buttonsInit>
	
	
	// initialize timer0 for audio circuit
	DDRB |= (1 << DDB1) | (1 << DDB5); // output speaker pin B1
 afc:	84 b1       	in	r24, 0x04	; 4
 afe:	82 62       	ori	r24, 0x22	; 34
 b00:	84 b9       	out	0x04, r24	; 4
	ICR1 = 0;	// TOP of counter, start OFF
 b02:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 b06:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	OCR1A = 0; //0x1FFF;	// OFF at
 b0a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 b0e:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TCCR1A |= (1 << COM1A1) | (1 << WGM11); //|(0 << COM1B1);
 b12:	e0 e8       	ldi	r30, 0x80	; 128
 b14:	f0 e0       	ldi	r31, 0x00	; 0
 b16:	80 81       	ld	r24, Z
 b18:	82 68       	ori	r24, 0x82	; 130
 b1a:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12 ) | (1 << WGM13) | (1 << CS41);
 b1c:	e1 e8       	ldi	r30, 0x81	; 129
 b1e:	f0 e0       	ldi	r31, 0x00	; 0
 b20:	80 81       	ld	r24, Z
 b22:	8a 61       	ori	r24, 0x1A	; 26
 b24:	80 83       	st	Z, r24
	PORTB &= ~(1 << 1);
 b26:	29 98       	cbi	0x05, 1	; 5
	
	TCCR0A = (1 << WGM01);	// enable CTC mode timer 0
 b28:	82 e0       	ldi	r24, 0x02	; 2
 b2a:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0;		//disable clock for timer0, as it will be enabled when "beeped"
 b2c:	15 bc       	out	0x25, r1	; 37
	OCR0A = 125;
 b2e:	9d e7       	ldi	r25, 0x7D	; 125
 b30:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = ( 1 << OCIE0A );
 b32:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>



	//load values from eeprom
	HighScore = (EEPROM_read(EEP_ADDR_HighScore_H) << 8) | (EEPROM_read(EEP_ADDR_HighScore_L));
 b36:	80 e0       	ldi	r24, 0x00	; 0
 b38:	90 e0       	ldi	r25, 0x00	; 0
 b3a:	0e 94 71 05 	call	0xae2	; 0xae2 <EEPROM_read>
 b3e:	c8 2f       	mov	r28, r24
 b40:	81 e0       	ldi	r24, 0x01	; 1
 b42:	90 e0       	ldi	r25, 0x00	; 0
 b44:	0e 94 71 05 	call	0xae2	; 0xae2 <EEPROM_read>
 b48:	2c 2f       	mov	r18, r28
 b4a:	30 e0       	ldi	r19, 0x00	; 0
 b4c:	32 2f       	mov	r19, r18
 b4e:	22 27       	eor	r18, r18
 b50:	28 2b       	or	r18, r24
 b52:	30 93 b8 01 	sts	0x01B8, r19	; 0x8001b8 <HighScore+0x1>
 b56:	20 93 b7 01 	sts	0x01B7, r18	; 0x8001b7 <HighScore>
	RoundTime = EEPROM_read(EEP_ADDR_RoundTime);
 b5a:	80 e1       	ldi	r24, 0x10	; 16
 b5c:	90 e0       	ldi	r25, 0x00	; 0
 b5e:	0e 94 71 05 	call	0xae2	; 0xae2 <EEPROM_read>
 b62:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <RoundTime>
	BonusTime = EEPROM_read(EEP_ADDR_BonusTime);
 b66:	80 e2       	ldi	r24, 0x20	; 32
 b68:	90 e0       	ldi	r25, 0x00	; 0
 b6a:	0e 94 71 05 	call	0xae2	; 0xae2 <EEPROM_read>
 b6e:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <BonusTime>
	MultiplierMax = EEPROM_read(EEP_ADDR_MultMax);
 b72:	80 e5       	ldi	r24, 0x50	; 80
 b74:	90 e0       	ldi	r25, 0x00	; 0
 b76:	0e 94 71 05 	call	0xae2	; 0xae2 <EEPROM_read>
 b7a:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <MultiplierMax>
	
	// load random value from eeprom as seed and write new random value
	srand((EEPROM_read(EEP_ADDR_RandomSeed_H) << 8) | EEPROM_read(EEP_ADDR_RandomSeed_L));
 b7e:	80 e4       	ldi	r24, 0x40	; 64
 b80:	90 e0       	ldi	r25, 0x00	; 0
 b82:	0e 94 71 05 	call	0xae2	; 0xae2 <EEPROM_read>
 b86:	c8 2f       	mov	r28, r24
 b88:	81 e4       	ldi	r24, 0x41	; 65
 b8a:	90 e0       	ldi	r25, 0x00	; 0
 b8c:	0e 94 71 05 	call	0xae2	; 0xae2 <EEPROM_read>
 b90:	2c 2f       	mov	r18, r28
 b92:	30 e0       	ldi	r19, 0x00	; 0
 b94:	32 2f       	mov	r19, r18
 b96:	22 27       	eor	r18, r18
 b98:	a9 01       	movw	r20, r18
 b9a:	48 2b       	or	r20, r24
 b9c:	ca 01       	movw	r24, r20
 b9e:	0e 94 98 06 	call	0xd30	; 0xd30 <srand>
	EEPROM_write(EEP_ADDR_RandomSeed_H, rand()%256 );
 ba2:	0e 94 93 06 	call	0xd26	; 0xd26 <rand>
 ba6:	90 78       	andi	r25, 0x80	; 128
 ba8:	99 23       	and	r25, r25
 baa:	1c f4       	brge	.+6      	; 0xbb2 <main+0xc2>
 bac:	01 97       	sbiw	r24, 0x01	; 1
 bae:	9f 6f       	ori	r25, 0xFF	; 255
 bb0:	01 96       	adiw	r24, 0x01	; 1
 bb2:	68 2f       	mov	r22, r24
 bb4:	80 e4       	ldi	r24, 0x40	; 64
 bb6:	90 e0       	ldi	r25, 0x00	; 0
 bb8:	0e 94 69 05 	call	0xad2	; 0xad2 <EEPROM_write>
	EEPROM_write(EEP_ADDR_RandomSeed_L, rand()%256 );
 bbc:	0e 94 93 06 	call	0xd26	; 0xd26 <rand>
 bc0:	90 78       	andi	r25, 0x80	; 128
 bc2:	99 23       	and	r25, r25
 bc4:	1c f4       	brge	.+6      	; 0xbcc <main+0xdc>
 bc6:	01 97       	sbiw	r24, 0x01	; 1
 bc8:	9f 6f       	ori	r25, 0xFF	; 255
 bca:	01 96       	adiw	r24, 0x01	; 1
 bcc:	68 2f       	mov	r22, r24
 bce:	81 e4       	ldi	r24, 0x41	; 65
 bd0:	90 e0       	ldi	r25, 0x00	; 0
 bd2:	0e 94 69 05 	call	0xad2	; 0xad2 <EEPROM_write>
	
	
							// set up timer4 for game timer
	TCCR4A = (1 << WGM41);	// CTC mode
 bd6:	82 e0       	ldi	r24, 0x02	; 2
 bd8:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	TCCR4B = 0;				// disable timer until game start (set to 64 prescale later in code)
 bdc:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
	TIMSK4 = (1 << OCIE4A);
 be0:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7e0072>
	OCR4A = 15625;			// set up for 1s
 be4:	89 e0       	ldi	r24, 0x09	; 9
 be6:	9d e3       	ldi	r25, 0x3D	; 61
 be8:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
 bec:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>

	sei();
 bf0:	78 94       	sei

	while (1)
	{
		Attractive();		// loop thru patterns until game start is pressed (TODO IMPLEMENT DEBUG PATTERN)
 bf2:	0e 94 4f 05 	call	0xa9e	; 0xa9e <Attractive>
		Game();
 bf6:	0e 94 18 04 	call	0x830	; 0x830 <Game>
		Bonus();
 bfa:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <Bonus>
 bfe:	f9 cf       	rjmp	.-14     	; 0xbf2 <main+0x102>

00000c00 <_handshake>:
 c00:	21 98       	cbi	0x04, 1	; 4
 c02:	2f ef       	ldi	r18, 0xFF	; 255
 c04:	8d e3       	ldi	r24, 0x3D	; 61
 c06:	99 e4       	ldi	r25, 0x49	; 73
 c08:	21 50       	subi	r18, 0x01	; 1
 c0a:	80 40       	sbci	r24, 0x00	; 0
 c0c:	90 40       	sbci	r25, 0x00	; 0
 c0e:	e1 f7       	brne	.-8      	; 0xc08 <_handshake+0x8>
 c10:	00 c0       	rjmp	.+0      	; 0xc12 <_handshake+0x12>
 c12:	00 00       	nop
 c14:	29 98       	cbi	0x05, 1	; 5
 c16:	21 9a       	sbi	0x04, 1	; 4
 c18:	8f e3       	ldi	r24, 0x3F	; 63
 c1a:	9f e1       	ldi	r25, 0x1F	; 31
 c1c:	01 97       	sbiw	r24, 0x01	; 1
 c1e:	f1 f7       	brne	.-4      	; 0xc1c <_handshake+0x1c>
 c20:	00 c0       	rjmp	.+0      	; 0xc22 <_handshake+0x22>
 c22:	00 00       	nop
 c24:	08 95       	ret

00000c26 <QCset5V>:
 c26:	20 98       	cbi	0x04, 0	; 4
 c28:	29 98       	cbi	0x05, 1	; 5
 c2a:	21 9a       	sbi	0x04, 1	; 4
 c2c:	08 95       	ret

00000c2e <usbQcInit>:
 c2e:	0e 94 00 06 	call	0xc00	; 0xc00 <_handshake>
 c32:	0e 94 13 06 	call	0xc26	; 0xc26 <QCset5V>
 c36:	08 95       	ret

00000c38 <QCset12V>:
 c38:	20 98       	cbi	0x04, 0	; 4
 c3a:	21 98       	cbi	0x04, 1	; 4
 c3c:	08 95       	ret

00000c3e <__divmodhi4>:
 c3e:	97 fb       	bst	r25, 7
 c40:	07 2e       	mov	r0, r23
 c42:	16 f4       	brtc	.+4      	; 0xc48 <__divmodhi4+0xa>
 c44:	00 94       	com	r0
 c46:	07 d0       	rcall	.+14     	; 0xc56 <__divmodhi4_neg1>
 c48:	77 fd       	sbrc	r23, 7
 c4a:	09 d0       	rcall	.+18     	; 0xc5e <__divmodhi4_neg2>
 c4c:	0e 94 33 06 	call	0xc66	; 0xc66 <__udivmodhi4>
 c50:	07 fc       	sbrc	r0, 7
 c52:	05 d0       	rcall	.+10     	; 0xc5e <__divmodhi4_neg2>
 c54:	3e f4       	brtc	.+14     	; 0xc64 <__divmodhi4_exit>

00000c56 <__divmodhi4_neg1>:
 c56:	90 95       	com	r25
 c58:	81 95       	neg	r24
 c5a:	9f 4f       	sbci	r25, 0xFF	; 255
 c5c:	08 95       	ret

00000c5e <__divmodhi4_neg2>:
 c5e:	70 95       	com	r23
 c60:	61 95       	neg	r22
 c62:	7f 4f       	sbci	r23, 0xFF	; 255

00000c64 <__divmodhi4_exit>:
 c64:	08 95       	ret

00000c66 <__udivmodhi4>:
 c66:	aa 1b       	sub	r26, r26
 c68:	bb 1b       	sub	r27, r27
 c6a:	51 e1       	ldi	r21, 0x11	; 17
 c6c:	07 c0       	rjmp	.+14     	; 0xc7c <__udivmodhi4_ep>

00000c6e <__udivmodhi4_loop>:
 c6e:	aa 1f       	adc	r26, r26
 c70:	bb 1f       	adc	r27, r27
 c72:	a6 17       	cp	r26, r22
 c74:	b7 07       	cpc	r27, r23
 c76:	10 f0       	brcs	.+4      	; 0xc7c <__udivmodhi4_ep>
 c78:	a6 1b       	sub	r26, r22
 c7a:	b7 0b       	sbc	r27, r23

00000c7c <__udivmodhi4_ep>:
 c7c:	88 1f       	adc	r24, r24
 c7e:	99 1f       	adc	r25, r25
 c80:	5a 95       	dec	r21
 c82:	a9 f7       	brne	.-22     	; 0xc6e <__udivmodhi4_loop>
 c84:	80 95       	com	r24
 c86:	90 95       	com	r25
 c88:	bc 01       	movw	r22, r24
 c8a:	cd 01       	movw	r24, r26
 c8c:	08 95       	ret

00000c8e <do_rand>:
 c8e:	8f 92       	push	r8
 c90:	9f 92       	push	r9
 c92:	af 92       	push	r10
 c94:	bf 92       	push	r11
 c96:	cf 92       	push	r12
 c98:	df 92       	push	r13
 c9a:	ef 92       	push	r14
 c9c:	ff 92       	push	r15
 c9e:	cf 93       	push	r28
 ca0:	df 93       	push	r29
 ca2:	ec 01       	movw	r28, r24
 ca4:	68 81       	ld	r22, Y
 ca6:	79 81       	ldd	r23, Y+1	; 0x01
 ca8:	8a 81       	ldd	r24, Y+2	; 0x02
 caa:	9b 81       	ldd	r25, Y+3	; 0x03
 cac:	61 15       	cp	r22, r1
 cae:	71 05       	cpc	r23, r1
 cb0:	81 05       	cpc	r24, r1
 cb2:	91 05       	cpc	r25, r1
 cb4:	21 f4       	brne	.+8      	; 0xcbe <do_rand+0x30>
 cb6:	64 e2       	ldi	r22, 0x24	; 36
 cb8:	79 ed       	ldi	r23, 0xD9	; 217
 cba:	8b e5       	ldi	r24, 0x5B	; 91
 cbc:	97 e0       	ldi	r25, 0x07	; 7
 cbe:	2d e1       	ldi	r18, 0x1D	; 29
 cc0:	33 ef       	ldi	r19, 0xF3	; 243
 cc2:	41 e0       	ldi	r20, 0x01	; 1
 cc4:	50 e0       	ldi	r21, 0x00	; 0
 cc6:	0e 94 a3 06 	call	0xd46	; 0xd46 <__divmodsi4>
 cca:	49 01       	movw	r8, r18
 ccc:	5a 01       	movw	r10, r20
 cce:	9b 01       	movw	r18, r22
 cd0:	ac 01       	movw	r20, r24
 cd2:	a7 ea       	ldi	r26, 0xA7	; 167
 cd4:	b1 e4       	ldi	r27, 0x41	; 65
 cd6:	0e 94 c2 06 	call	0xd84	; 0xd84 <__muluhisi3>
 cda:	6b 01       	movw	r12, r22
 cdc:	7c 01       	movw	r14, r24
 cde:	ac ee       	ldi	r26, 0xEC	; 236
 ce0:	b4 ef       	ldi	r27, 0xF4	; 244
 ce2:	a5 01       	movw	r20, r10
 ce4:	94 01       	movw	r18, r8
 ce6:	0e 94 d0 06 	call	0xda0	; 0xda0 <__mulohisi3>
 cea:	dc 01       	movw	r26, r24
 cec:	cb 01       	movw	r24, r22
 cee:	8c 0d       	add	r24, r12
 cf0:	9d 1d       	adc	r25, r13
 cf2:	ae 1d       	adc	r26, r14
 cf4:	bf 1d       	adc	r27, r15
 cf6:	b7 ff       	sbrs	r27, 7
 cf8:	03 c0       	rjmp	.+6      	; 0xd00 <do_rand+0x72>
 cfa:	01 97       	sbiw	r24, 0x01	; 1
 cfc:	a1 09       	sbc	r26, r1
 cfe:	b0 48       	sbci	r27, 0x80	; 128
 d00:	88 83       	st	Y, r24
 d02:	99 83       	std	Y+1, r25	; 0x01
 d04:	aa 83       	std	Y+2, r26	; 0x02
 d06:	bb 83       	std	Y+3, r27	; 0x03
 d08:	9f 77       	andi	r25, 0x7F	; 127
 d0a:	df 91       	pop	r29
 d0c:	cf 91       	pop	r28
 d0e:	ff 90       	pop	r15
 d10:	ef 90       	pop	r14
 d12:	df 90       	pop	r13
 d14:	cf 90       	pop	r12
 d16:	bf 90       	pop	r11
 d18:	af 90       	pop	r10
 d1a:	9f 90       	pop	r9
 d1c:	8f 90       	pop	r8
 d1e:	08 95       	ret

00000d20 <rand_r>:
 d20:	0e 94 47 06 	call	0xc8e	; 0xc8e <do_rand>
 d24:	08 95       	ret

00000d26 <rand>:
 d26:	80 e0       	ldi	r24, 0x00	; 0
 d28:	91 e0       	ldi	r25, 0x01	; 1
 d2a:	0e 94 47 06 	call	0xc8e	; 0xc8e <do_rand>
 d2e:	08 95       	ret

00000d30 <srand>:
 d30:	a0 e0       	ldi	r26, 0x00	; 0
 d32:	b0 e0       	ldi	r27, 0x00	; 0
 d34:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 d38:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 d3c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 d40:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 d44:	08 95       	ret

00000d46 <__divmodsi4>:
 d46:	05 2e       	mov	r0, r21
 d48:	97 fb       	bst	r25, 7
 d4a:	1e f4       	brtc	.+6      	; 0xd52 <__divmodsi4+0xc>
 d4c:	00 94       	com	r0
 d4e:	0e 94 ba 06 	call	0xd74	; 0xd74 <__negsi2>
 d52:	57 fd       	sbrc	r21, 7
 d54:	07 d0       	rcall	.+14     	; 0xd64 <__divmodsi4_neg2>
 d56:	0e 94 d5 06 	call	0xdaa	; 0xdaa <__udivmodsi4>
 d5a:	07 fc       	sbrc	r0, 7
 d5c:	03 d0       	rcall	.+6      	; 0xd64 <__divmodsi4_neg2>
 d5e:	4e f4       	brtc	.+18     	; 0xd72 <__divmodsi4_exit>
 d60:	0c 94 ba 06 	jmp	0xd74	; 0xd74 <__negsi2>

00000d64 <__divmodsi4_neg2>:
 d64:	50 95       	com	r21
 d66:	40 95       	com	r20
 d68:	30 95       	com	r19
 d6a:	21 95       	neg	r18
 d6c:	3f 4f       	sbci	r19, 0xFF	; 255
 d6e:	4f 4f       	sbci	r20, 0xFF	; 255
 d70:	5f 4f       	sbci	r21, 0xFF	; 255

00000d72 <__divmodsi4_exit>:
 d72:	08 95       	ret

00000d74 <__negsi2>:
 d74:	90 95       	com	r25
 d76:	80 95       	com	r24
 d78:	70 95       	com	r23
 d7a:	61 95       	neg	r22
 d7c:	7f 4f       	sbci	r23, 0xFF	; 255
 d7e:	8f 4f       	sbci	r24, 0xFF	; 255
 d80:	9f 4f       	sbci	r25, 0xFF	; 255
 d82:	08 95       	ret

00000d84 <__muluhisi3>:
 d84:	0e 94 f7 06 	call	0xdee	; 0xdee <__umulhisi3>
 d88:	a5 9f       	mul	r26, r21
 d8a:	90 0d       	add	r25, r0
 d8c:	b4 9f       	mul	r27, r20
 d8e:	90 0d       	add	r25, r0
 d90:	a4 9f       	mul	r26, r20
 d92:	80 0d       	add	r24, r0
 d94:	91 1d       	adc	r25, r1
 d96:	11 24       	eor	r1, r1
 d98:	08 95       	ret

00000d9a <__mulshisi3>:
 d9a:	b7 ff       	sbrs	r27, 7
 d9c:	0c 94 c2 06 	jmp	0xd84	; 0xd84 <__muluhisi3>

00000da0 <__mulohisi3>:
 da0:	0e 94 c2 06 	call	0xd84	; 0xd84 <__muluhisi3>
 da4:	82 1b       	sub	r24, r18
 da6:	93 0b       	sbc	r25, r19
 da8:	08 95       	ret

00000daa <__udivmodsi4>:
 daa:	a1 e2       	ldi	r26, 0x21	; 33
 dac:	1a 2e       	mov	r1, r26
 dae:	aa 1b       	sub	r26, r26
 db0:	bb 1b       	sub	r27, r27
 db2:	fd 01       	movw	r30, r26
 db4:	0d c0       	rjmp	.+26     	; 0xdd0 <__udivmodsi4_ep>

00000db6 <__udivmodsi4_loop>:
 db6:	aa 1f       	adc	r26, r26
 db8:	bb 1f       	adc	r27, r27
 dba:	ee 1f       	adc	r30, r30
 dbc:	ff 1f       	adc	r31, r31
 dbe:	a2 17       	cp	r26, r18
 dc0:	b3 07       	cpc	r27, r19
 dc2:	e4 07       	cpc	r30, r20
 dc4:	f5 07       	cpc	r31, r21
 dc6:	20 f0       	brcs	.+8      	; 0xdd0 <__udivmodsi4_ep>
 dc8:	a2 1b       	sub	r26, r18
 dca:	b3 0b       	sbc	r27, r19
 dcc:	e4 0b       	sbc	r30, r20
 dce:	f5 0b       	sbc	r31, r21

00000dd0 <__udivmodsi4_ep>:
 dd0:	66 1f       	adc	r22, r22
 dd2:	77 1f       	adc	r23, r23
 dd4:	88 1f       	adc	r24, r24
 dd6:	99 1f       	adc	r25, r25
 dd8:	1a 94       	dec	r1
 dda:	69 f7       	brne	.-38     	; 0xdb6 <__udivmodsi4_loop>
 ddc:	60 95       	com	r22
 dde:	70 95       	com	r23
 de0:	80 95       	com	r24
 de2:	90 95       	com	r25
 de4:	9b 01       	movw	r18, r22
 de6:	ac 01       	movw	r20, r24
 de8:	bd 01       	movw	r22, r26
 dea:	cf 01       	movw	r24, r30
 dec:	08 95       	ret

00000dee <__umulhisi3>:
 dee:	a2 9f       	mul	r26, r18
 df0:	b0 01       	movw	r22, r0
 df2:	b3 9f       	mul	r27, r19
 df4:	c0 01       	movw	r24, r0
 df6:	a3 9f       	mul	r26, r19
 df8:	70 0d       	add	r23, r0
 dfa:	81 1d       	adc	r24, r1
 dfc:	11 24       	eor	r1, r1
 dfe:	91 1d       	adc	r25, r1
 e00:	b2 9f       	mul	r27, r18
 e02:	70 0d       	add	r23, r0
 e04:	81 1d       	adc	r24, r1
 e06:	11 24       	eor	r1, r1
 e08:	91 1d       	adc	r25, r1
 e0a:	08 95       	ret

00000e0c <_exit>:
 e0c:	f8 94       	cli

00000e0e <__stop_program>:
 e0e:	ff cf       	rjmp	.-2      	; 0xe0e <__stop_program>
