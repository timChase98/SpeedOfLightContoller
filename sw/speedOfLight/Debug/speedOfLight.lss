
speedOfLight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001cc  00800100  00001ba6  00001c3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ba6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000035  008002cc  008002cc  00001e06  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001e06  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00001ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023d4  00000000  00000000  00002014  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e5d  00000000  00000000  000043e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011be  00000000  00000000  00005245  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000528  00000000  00000000  00006404  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000898  00000000  00000000  0000692c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001420  00000000  00000000  000071c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000290  00000000  00000000  000085e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
       4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      38:	0c 94 9c 02 	jmp	0x538	; 0x538 <__vector_14>
      3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      44:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__vector_17>
      48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      84:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__vector_33>
      88:	0c 94 31 02 	jmp	0x462	; 0x462 <__vector_34>
      8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a8:	0c 94 41 03 	jmp	0x682	; 0x682 <__vector_42>
      ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	d8 e0       	ldi	r29, 0x08	; 8
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
      c0:	12 e0       	ldi	r17, 0x02	; 2
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	e6 ea       	ldi	r30, 0xA6	; 166
      c8:	fb e1       	ldi	r31, 0x1B	; 27
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0
      d0:	ac 3c       	cpi	r26, 0xCC	; 204
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
      d6:	23 e0       	ldi	r18, 0x03	; 3
      d8:	ac ec       	ldi	r26, 0xCC	; 204
      da:	b2 e0       	ldi	r27, 0x02	; 2
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	a1 30       	cpi	r26, 0x01	; 1
      e2:	b2 07       	cpc	r27, r18
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
      e6:	0e 94 6e 08 	call	0x10dc	; 0x10dc <main>
      ea:	0c 94 d1 0d 	jmp	0x1ba2	; 0x1ba2 <_exit>

000000ee <__bad_interrupt>:
      ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <spiSetup>:
	ledMemory[3*display+2] = (value / 100) % 10;
	
}

void setScoreSegment(uint8_t segment, uint8_t val){
	ledMemory[segment] = val;
      f2:	84 b1       	in	r24, 0x04	; 4
      f4:	88 62       	ori	r24, 0x28	; 40
      f6:	84 b9       	out	0x04, r24	; 4
      f8:	81 ed       	ldi	r24, 0xD1	; 209
      fa:	8c bd       	out	0x2c, r24	; 44
      fc:	08 95       	ret

000000fe <tmrSetup>:
      fe:	8a e0       	ldi	r24, 0x0A	; 10
     100:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
     104:	88 eb       	ldi	r24, 0xB8	; 184
     106:	9b e0       	ldi	r25, 0x0B	; 11
     108:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     10c:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
     110:	8a e3       	ldi	r24, 0x3A	; 58
     112:	97 e0       	ldi	r25, 0x07	; 7
     114:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     118:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
     11c:	e1 e7       	ldi	r30, 0x71	; 113
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	80 81       	ld	r24, Z
     122:	86 60       	ori	r24, 0x06	; 6
     124:	80 83       	st	Z, r24
     126:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     12a:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
     12e:	08 95       	ret

00000130 <buttonsInit>:
     130:	8f ef       	ldi	r24, 0xFF	; 255
     132:	8a b9       	out	0x0a, r24	; 10
     134:	88 b9       	out	0x08, r24	; 8
     136:	20 9a       	sbi	0x04, 0	; 4
     138:	6b 9a       	sbi	0x0d, 3	; 13
     13a:	6a 9a       	sbi	0x0d, 2	; 13
     13c:	73 9a       	sbi	0x0e, 3	; 14
     13e:	0e 94 79 00 	call	0xf2	; 0xf2 <spiSetup>
     142:	0e 94 7f 00 	call	0xfe	; 0xfe <tmrSetup>
     146:	08 95       	ret

00000148 <isButtonDown>:
     148:	e8 2f       	mov	r30, r24
     14a:	f0 e0       	ldi	r31, 0x00	; 0
     14c:	ed 52       	subi	r30, 0x2D	; 45
     14e:	fd 4f       	sbci	r31, 0xFD	; 253
     150:	20 81       	ld	r18, Z
     152:	81 e0       	ldi	r24, 0x01	; 1
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	02 c0       	rjmp	.+4      	; 0x15c <isButtonDown+0x14>
     158:	88 0f       	add	r24, r24
     15a:	99 1f       	adc	r25, r25
     15c:	6a 95       	dec	r22
     15e:	e2 f7       	brpl	.-8      	; 0x158 <isButtonDown+0x10>
     160:	82 23       	and	r24, r18
     162:	08 95       	ret

00000164 <setButtonLed>:
     164:	44 23       	and	r20, r20
     166:	89 f0       	breq	.+34     	; 0x18a <setButtonLed+0x26>
     168:	e6 2f       	mov	r30, r22
     16a:	f0 e0       	ldi	r31, 0x00	; 0
     16c:	ed 5e       	subi	r30, 0xED	; 237
     16e:	fe 4f       	sbci	r31, 0xFE	; 254
     170:	40 81       	ld	r20, Z
     172:	21 e0       	ldi	r18, 0x01	; 1
     174:	30 e0       	ldi	r19, 0x00	; 0
     176:	b9 01       	movw	r22, r18
     178:	02 c0       	rjmp	.+4      	; 0x17e <setButtonLed+0x1a>
     17a:	66 0f       	add	r22, r22
     17c:	77 1f       	adc	r23, r23
     17e:	8a 95       	dec	r24
     180:	e2 f7       	brpl	.-8      	; 0x17a <setButtonLed+0x16>
     182:	cb 01       	movw	r24, r22
     184:	84 2b       	or	r24, r20
     186:	80 83       	st	Z, r24
     188:	08 95       	ret
     18a:	e6 2f       	mov	r30, r22
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	ed 5e       	subi	r30, 0xED	; 237
     190:	fe 4f       	sbci	r31, 0xFE	; 254
     192:	40 81       	ld	r20, Z
     194:	21 e0       	ldi	r18, 0x01	; 1
     196:	30 e0       	ldi	r19, 0x00	; 0
     198:	b9 01       	movw	r22, r18
     19a:	02 c0       	rjmp	.+4      	; 0x1a0 <setButtonLed+0x3c>
     19c:	66 0f       	add	r22, r22
     19e:	77 1f       	adc	r23, r23
     1a0:	8a 95       	dec	r24
     1a2:	e2 f7       	brpl	.-8      	; 0x19c <setButtonLed+0x38>
     1a4:	cb 01       	movw	r24, r22
     1a6:	80 95       	com	r24
     1a8:	84 23       	and	r24, r20
     1aa:	80 83       	st	Z, r24
     1ac:	08 95       	ret

000001ae <setScore>:
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	eb 01       	movw	r28, r22
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	ac 01       	movw	r20, r24
     1b8:	44 0f       	add	r20, r20
     1ba:	55 1f       	adc	r21, r21
     1bc:	48 0f       	add	r20, r24
     1be:	59 1f       	adc	r21, r25
     1c0:	9b 01       	movw	r18, r22
     1c2:	ad ec       	ldi	r26, 0xCD	; 205
     1c4:	bc ec       	ldi	r27, 0xCC	; 204
     1c6:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <__umulhisi3>
     1ca:	fc 01       	movw	r30, r24
     1cc:	f6 95       	lsr	r31
     1ce:	e7 95       	ror	r30
     1d0:	f6 95       	lsr	r31
     1d2:	e7 95       	ror	r30
     1d4:	f6 95       	lsr	r31
     1d6:	e7 95       	ror	r30
     1d8:	9f 01       	movw	r18, r30
     1da:	22 0f       	add	r18, r18
     1dc:	33 1f       	adc	r19, r19
     1de:	cf 01       	movw	r24, r30
     1e0:	88 0f       	add	r24, r24
     1e2:	99 1f       	adc	r25, r25
     1e4:	88 0f       	add	r24, r24
     1e6:	99 1f       	adc	r25, r25
     1e8:	88 0f       	add	r24, r24
     1ea:	99 1f       	adc	r25, r25
     1ec:	82 0f       	add	r24, r18
     1ee:	93 1f       	adc	r25, r19
     1f0:	9e 01       	movw	r18, r28
     1f2:	28 1b       	sub	r18, r24
     1f4:	39 0b       	sbc	r19, r25
     1f6:	da 01       	movw	r26, r20
     1f8:	a6 5f       	subi	r26, 0xF6	; 246
     1fa:	be 4f       	sbci	r27, 0xFE	; 254
     1fc:	2c 93       	st	X, r18
     1fe:	9f 01       	movw	r18, r30
     200:	ad ec       	ldi	r26, 0xCD	; 205
     202:	bc ec       	ldi	r27, 0xCC	; 204
     204:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <__umulhisi3>
     208:	96 95       	lsr	r25
     20a:	87 95       	ror	r24
     20c:	96 95       	lsr	r25
     20e:	87 95       	ror	r24
     210:	96 95       	lsr	r25
     212:	87 95       	ror	r24
     214:	9c 01       	movw	r18, r24
     216:	22 0f       	add	r18, r18
     218:	33 1f       	adc	r19, r19
     21a:	88 0f       	add	r24, r24
     21c:	99 1f       	adc	r25, r25
     21e:	88 0f       	add	r24, r24
     220:	99 1f       	adc	r25, r25
     222:	88 0f       	add	r24, r24
     224:	99 1f       	adc	r25, r25
     226:	82 0f       	add	r24, r18
     228:	93 1f       	adc	r25, r19
     22a:	e8 1b       	sub	r30, r24
     22c:	f9 0b       	sbc	r31, r25
     22e:	da 01       	movw	r26, r20
     230:	a5 5f       	subi	r26, 0xF5	; 245
     232:	be 4f       	sbci	r27, 0xFE	; 254
     234:	ec 93       	st	X, r30
     236:	9e 01       	movw	r18, r28
     238:	36 95       	lsr	r19
     23a:	27 95       	ror	r18
     23c:	36 95       	lsr	r19
     23e:	27 95       	ror	r18
     240:	ab e7       	ldi	r26, 0x7B	; 123
     242:	b4 e1       	ldi	r27, 0x14	; 20
     244:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <__umulhisi3>
     248:	fc 01       	movw	r30, r24
     24a:	f6 95       	lsr	r31
     24c:	e7 95       	ror	r30
     24e:	9f 01       	movw	r18, r30
     250:	ad ec       	ldi	r26, 0xCD	; 205
     252:	bc ec       	ldi	r27, 0xCC	; 204
     254:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <__umulhisi3>
     258:	96 95       	lsr	r25
     25a:	87 95       	ror	r24
     25c:	96 95       	lsr	r25
     25e:	87 95       	ror	r24
     260:	96 95       	lsr	r25
     262:	87 95       	ror	r24
     264:	9c 01       	movw	r18, r24
     266:	22 0f       	add	r18, r18
     268:	33 1f       	adc	r19, r19
     26a:	88 0f       	add	r24, r24
     26c:	99 1f       	adc	r25, r25
     26e:	88 0f       	add	r24, r24
     270:	99 1f       	adc	r25, r25
     272:	88 0f       	add	r24, r24
     274:	99 1f       	adc	r25, r25
     276:	82 0f       	add	r24, r18
     278:	93 1f       	adc	r25, r19
     27a:	e8 1b       	sub	r30, r24
     27c:	f9 0b       	sbc	r31, r25
     27e:	da 01       	movw	r26, r20
     280:	a4 5f       	subi	r26, 0xF4	; 244
     282:	be 4f       	sbci	r27, 0xFE	; 254
     284:	ec 93       	st	X, r30
     286:	df 91       	pop	r29
     288:	cf 91       	pop	r28
     28a:	08 95       	ret

0000028c <clearLeds>:
}
	

void clearLeds(uint8_t mode){
     28c:	1f 93       	push	r17
     28e:	cf 93       	push	r28
     290:	df 93       	push	r29
     292:	18 2f       	mov	r17, r24
	for(uint8_t ledx = 0; ledx < 6; ledx++){
     294:	d0 e0       	ldi	r29, 0x00	; 0
     296:	0b c0       	rjmp	.+22     	; 0x2ae <clearLeds+0x22>
		for(uint8_t ledy = 0; ledy < 6; ledy++){
			setButtonLed(ledx, ledy, mode);
     298:	41 2f       	mov	r20, r17
     29a:	6c 2f       	mov	r22, r28
     29c:	8d 2f       	mov	r24, r29
     29e:	0e 94 b2 00 	call	0x164	; 0x164 <setButtonLed>
}
	

void clearLeds(uint8_t mode){
	for(uint8_t ledx = 0; ledx < 6; ledx++){
		for(uint8_t ledy = 0; ledy < 6; ledy++){
     2a2:	cf 5f       	subi	r28, 0xFF	; 255
     2a4:	c6 30       	cpi	r28, 0x06	; 6
     2a6:	c1 f7       	brne	.-16     	; 0x298 <clearLeds+0xc>
	ledMemory[segment] = val;
}
	

void clearLeds(uint8_t mode){
	for(uint8_t ledx = 0; ledx < 6; ledx++){
     2a8:	df 5f       	subi	r29, 0xFF	; 255
     2aa:	d6 30       	cpi	r29, 0x06	; 6
     2ac:	11 f0       	breq	.+4      	; 0x2b2 <clearLeds+0x26>
void setScoreSegment(uint8_t segment, uint8_t val){
	ledMemory[segment] = val;
}
	

void clearLeds(uint8_t mode){
     2ae:	c0 e0       	ldi	r28, 0x00	; 0
     2b0:	f3 cf       	rjmp	.-26     	; 0x298 <clearLeds+0xc>
	for(uint8_t ledx = 0; ledx < 6; ledx++){
		for(uint8_t ledy = 0; ledy < 6; ledy++){
			setButtonLed(ledx, ledy, mode);
		}	
	}
}
     2b2:	df 91       	pop	r29
     2b4:	cf 91       	pop	r28
     2b6:	1f 91       	pop	r17
     2b8:	08 95       	ret

000002ba <__vector_33>:



ISR(TIMER3_COMPA_vect){
     2ba:	1f 92       	push	r1
     2bc:	0f 92       	push	r0
     2be:	0f b6       	in	r0, 0x3f	; 63
     2c0:	0f 92       	push	r0
     2c2:	11 24       	eor	r1, r1
     2c4:	2f 93       	push	r18
     2c6:	3f 93       	push	r19
     2c8:	4f 93       	push	r20
     2ca:	5f 93       	push	r21
     2cc:	6f 93       	push	r22
     2ce:	7f 93       	push	r23
     2d0:	8f 93       	push	r24
     2d2:	9f 93       	push	r25
     2d4:	af 93       	push	r26
     2d6:	bf 93       	push	r27
     2d8:	ef 93       	push	r30
     2da:	ff 93       	push	r31
	// the row is in the lower nibble and column data is in the upper nibble
	// for each row the two registers need to be set and the other two need to be cleared
	
	// ledData for the matrices are stored as a byte array of the column data
	
	if (muxCounter < 3)
     2dc:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <muxCounter>
     2e0:	83 30       	cpi	r24, 0x03	; 3
     2e2:	90 f5       	brcc	.+100    	; 0x348 <__vector_33+0x8e>
	{
		ledData[3] = ((1 << muxCounter)) | ((ledMemory[9 + muxCounter] & 0b00000111)<<4);
     2e4:	40 91 cd 02 	lds	r20, 0x02CD	; 0x8002cd <muxCounter>
     2e8:	e0 91 cd 02 	lds	r30, 0x02CD	; 0x8002cd <muxCounter>
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	ed 5e       	subi	r30, 0xED	; 237
     2f0:	fe 4f       	sbci	r31, 0xFE	; 254
     2f2:	20 81       	ld	r18, Z
     2f4:	27 70       	andi	r18, 0x07	; 7
     2f6:	60 e1       	ldi	r22, 0x10	; 16
     2f8:	26 9f       	mul	r18, r22
     2fa:	90 01       	movw	r18, r0
     2fc:	11 24       	eor	r1, r1
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	bc 01       	movw	r22, r24
     304:	02 c0       	rjmp	.+4      	; 0x30a <__vector_33+0x50>
     306:	66 0f       	add	r22, r22
     308:	77 1f       	adc	r23, r23
     30a:	4a 95       	dec	r20
     30c:	e2 f7       	brpl	.-8      	; 0x306 <__vector_33+0x4c>
     30e:	26 2b       	or	r18, r22
     310:	a4 e0       	ldi	r26, 0x04	; 4
     312:	b1 e0       	ldi	r27, 0x01	; 1
     314:	13 96       	adiw	r26, 0x03	; 3
     316:	2c 93       	st	X, r18
     318:	13 97       	sbiw	r26, 0x03	; 3
		ledData[0] = 0;
     31a:	1c 92       	st	X, r1
		ledData[1] = 0;
     31c:	11 96       	adiw	r26, 0x01	; 1
     31e:	1c 92       	st	X, r1
     320:	11 97       	sbiw	r26, 0x01	; 1
		ledData[2] = ((1 << muxCounter)) | ((ledMemory[9 + muxCounter] & 0b00111000)<<1);
     322:	30 91 cd 02 	lds	r19, 0x02CD	; 0x8002cd <muxCounter>
     326:	e0 91 cd 02 	lds	r30, 0x02CD	; 0x8002cd <muxCounter>
     32a:	f0 e0       	ldi	r31, 0x00	; 0
     32c:	ed 5e       	subi	r30, 0xED	; 237
     32e:	fe 4f       	sbci	r31, 0xFE	; 254
     330:	20 81       	ld	r18, Z
     332:	28 73       	andi	r18, 0x38	; 56
     334:	22 0f       	add	r18, r18
     336:	02 c0       	rjmp	.+4      	; 0x33c <__vector_33+0x82>
     338:	88 0f       	add	r24, r24
     33a:	99 1f       	adc	r25, r25
     33c:	3a 95       	dec	r19
     33e:	e2 f7       	brpl	.-8      	; 0x338 <__vector_33+0x7e>
     340:	82 2b       	or	r24, r18
     342:	12 96       	adiw	r26, 0x02	; 2
     344:	8c 93       	st	X, r24
     346:	33 c0       	rjmp	.+102    	; 0x3ae <__vector_33+0xf4>
	}
	else{
		ledData[3] = 0;
     348:	a4 e0       	ldi	r26, 0x04	; 4
     34a:	b1 e0       	ldi	r27, 0x01	; 1
     34c:	13 96       	adiw	r26, 0x03	; 3
     34e:	1c 92       	st	X, r1
     350:	13 97       	sbiw	r26, 0x03	; 3
		ledData[0] = ((1 << (muxCounter-3))) | ((ledMemory[9 + muxCounter] & 0b00000111)<<4);
     352:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <muxCounter>
     356:	e0 91 cd 02 	lds	r30, 0x02CD	; 0x8002cd <muxCounter>
     35a:	f0 e0       	ldi	r31, 0x00	; 0
     35c:	ed 5e       	subi	r30, 0xED	; 237
     35e:	fe 4f       	sbci	r31, 0xFE	; 254
     360:	90 81       	ld	r25, Z
     362:	83 50       	subi	r24, 0x03	; 3
     364:	21 e0       	ldi	r18, 0x01	; 1
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	a9 01       	movw	r20, r18
     36a:	02 c0       	rjmp	.+4      	; 0x370 <__vector_33+0xb6>
     36c:	44 0f       	add	r20, r20
     36e:	55 1f       	adc	r21, r21
     370:	8a 95       	dec	r24
     372:	e2 f7       	brpl	.-8      	; 0x36c <__vector_33+0xb2>
     374:	97 70       	andi	r25, 0x07	; 7
     376:	70 e1       	ldi	r23, 0x10	; 16
     378:	97 9f       	mul	r25, r23
     37a:	c0 01       	movw	r24, r0
     37c:	11 24       	eor	r1, r1
     37e:	84 2b       	or	r24, r20
     380:	8c 93       	st	X, r24
		ledData[1] = ((1 << (muxCounter-3))) | ((ledMemory[9 + muxCounter] & 0b00111000)<<1);
     382:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <muxCounter>
     386:	e0 91 cd 02 	lds	r30, 0x02CD	; 0x8002cd <muxCounter>
     38a:	f0 e0       	ldi	r31, 0x00	; 0
     38c:	ed 5e       	subi	r30, 0xED	; 237
     38e:	fe 4f       	sbci	r31, 0xFE	; 254
     390:	80 81       	ld	r24, Z
     392:	93 50       	subi	r25, 0x03	; 3
     394:	02 c0       	rjmp	.+4      	; 0x39a <__vector_33+0xe0>
     396:	22 0f       	add	r18, r18
     398:	33 1f       	adc	r19, r19
     39a:	9a 95       	dec	r25
     39c:	e2 f7       	brpl	.-8      	; 0x396 <__vector_33+0xdc>
     39e:	88 73       	andi	r24, 0x38	; 56
     3a0:	88 0f       	add	r24, r24
     3a2:	28 2b       	or	r18, r24
     3a4:	11 96       	adiw	r26, 0x01	; 1
     3a6:	2c 93       	st	X, r18
     3a8:	11 97       	sbiw	r26, 0x01	; 1
		ledData[2] = 0;
     3aa:	12 96       	adiw	r26, 0x02	; 2
     3ac:	1c 92       	st	X, r1
	}
	
	muxCounter = (muxCounter + 1) % 6;
     3ae:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <muxCounter>
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	01 96       	adiw	r24, 0x01	; 1
     3b6:	66 e0       	ldi	r22, 0x06	; 6
     3b8:	70 e0       	ldi	r23, 0x00	; 0
     3ba:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__divmodhi4>
     3be:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <muxCounter>
	
	// calculate data for score display
	
	ledData[5] = sevenSegmentDecode[ledMemory[scoreDigitCounter]];
     3c2:	e0 91 ce 02 	lds	r30, 0x02CE	; 0x8002ce <scoreDigitCounter>
     3c6:	f0 e0       	ldi	r31, 0x00	; 0
     3c8:	e6 5f       	subi	r30, 0xF6	; 246
     3ca:	fe 4f       	sbci	r31, 0xFE	; 254
     3cc:	e0 81       	ld	r30, Z
     3ce:	f0 e0       	ldi	r31, 0x00	; 0
     3d0:	e9 5d       	subi	r30, 0xD9	; 217
     3d2:	fe 4f       	sbci	r31, 0xFE	; 254
     3d4:	80 81       	ld	r24, Z
     3d6:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <ledData+0x5>
	if (scoreDigitCounter == 0){
     3da:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <scoreDigitCounter>
     3de:	81 11       	cpse	r24, r1
     3e0:	07 c0       	rjmp	.+14     	; 0x3f0 <__vector_33+0x136>
		ledData[5] |= 1 << 7; // set MSB for D0
     3e2:	e4 e0       	ldi	r30, 0x04	; 4
     3e4:	f1 e0       	ldi	r31, 0x01	; 1
     3e6:	85 81       	ldd	r24, Z+5	; 0x05
     3e8:	80 68       	ori	r24, 0x80	; 128
     3ea:	85 83       	std	Z+5, r24	; 0x05
		ledData[4] = 0;
     3ec:	14 82       	std	Z+4, r1	; 0x04
     3ee:	0c c0       	rjmp	.+24     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
	}
	else{
		ledData[4] = 1 << (scoreDigitCounter - 1);
     3f0:	20 91 ce 02 	lds	r18, 0x02CE	; 0x8002ce <scoreDigitCounter>
     3f4:	21 50       	subi	r18, 0x01	; 1
     3f6:	81 e0       	ldi	r24, 0x01	; 1
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	02 c0       	rjmp	.+4      	; 0x400 <__LOCK_REGION_LENGTH__>
     3fc:	88 0f       	add	r24, r24
     3fe:	99 1f       	adc	r25, r25
     400:	2a 95       	dec	r18
     402:	e2 f7       	brpl	.-8      	; 0x3fc <__vector_33+0x142>
     404:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <ledData+0x4>
	}

	scoreDigitCounter = (scoreDigitCounter + 1) % 9;
     408:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <scoreDigitCounter>
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	01 96       	adiw	r24, 0x01	; 1
     410:	69 e0       	ldi	r22, 0x09	; 9
     412:	70 e0       	ldi	r23, 0x00	; 0
     414:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__divmodhi4>
     418:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <scoreDigitCounter>
	

	// clear contents of shift register and latch
	PORTB &= ~(1 << LED_L); // set led latch low
     41c:	28 98       	cbi	0x05, 0	; 5
	PORTE &= ~(1 << LED_B); // blank leds
     41e:	73 98       	cbi	0x0e, 3	; 14
	PORTB |= (1 << LED_L); // set led latch high
     420:	28 9a       	sbi	0x05, 0	; 5
	PORTE |= (1 << LED_B); // unblank leds
     422:	73 9a       	sbi	0x0e, 3	; 14
	PORTB &= ~(1 << LED_L); // set led latch low
     424:	28 98       	cbi	0x05, 0	; 5
	spiByteCounter = 0;
     426:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <__data_end>
	SPDR0 = ledData[spiByteCounter++];
     42a:	e0 91 cc 02 	lds	r30, 0x02CC	; 0x8002cc <__data_end>
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	8e 0f       	add	r24, r30
     432:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <__data_end>
     436:	f0 e0       	ldi	r31, 0x00	; 0
     438:	ec 5f       	subi	r30, 0xFC	; 252
     43a:	fe 4f       	sbci	r31, 0xFE	; 254
     43c:	80 81       	ld	r24, Z
     43e:	8e bd       	out	0x2e, r24	; 46
}
     440:	ff 91       	pop	r31
     442:	ef 91       	pop	r30
     444:	bf 91       	pop	r27
     446:	af 91       	pop	r26
     448:	9f 91       	pop	r25
     44a:	8f 91       	pop	r24
     44c:	7f 91       	pop	r23
     44e:	6f 91       	pop	r22
     450:	5f 91       	pop	r21
     452:	4f 91       	pop	r20
     454:	3f 91       	pop	r19
     456:	2f 91       	pop	r18
     458:	0f 90       	pop	r0
     45a:	0f be       	out	0x3f, r0	; 63
     45c:	0f 90       	pop	r0
     45e:	1f 90       	pop	r1
     460:	18 95       	reti

00000462 <__vector_34>:
	PORTD = 0xFF; 
	buttonMemory[muxCounter] = ~PINC;
	
}*/

ISR(TIMER3_COMPB_vect){
     462:	1f 92       	push	r1
     464:	0f 92       	push	r0
     466:	0f b6       	in	r0, 0x3f	; 63
     468:	0f 92       	push	r0
     46a:	11 24       	eor	r1, r1
     46c:	2f 93       	push	r18
     46e:	3f 93       	push	r19
     470:	8f 93       	push	r24
     472:	9f 93       	push	r25
     474:	ef 93       	push	r30
     476:	ff 93       	push	r31
	DDRD &= ~(1<<(muxCounter+2));
	buttonMemory[muxCounter] = ~PINC; 
	DDRD = 0xFF; 
	*/
	
	DDRD = 0xFF;
     478:	3f ef       	ldi	r19, 0xFF	; 255
     47a:	3a b9       	out	0x0a, r19	; 10
	DDRC = 0x00;
     47c:	17 b8       	out	0x07, r1	; 7
	
	PORTD = ~(1<<(muxCounter+2));
     47e:	20 91 cd 02 	lds	r18, 0x02CD	; 0x8002cd <muxCounter>
     482:	2e 5f       	subi	r18, 0xFE	; 254
     484:	81 e0       	ldi	r24, 0x01	; 1
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	02 c0       	rjmp	.+4      	; 0x48e <__vector_34+0x2c>
     48a:	88 0f       	add	r24, r24
     48c:	99 1f       	adc	r25, r25
     48e:	2a 95       	dec	r18
     490:	e2 f7       	brpl	.-8      	; 0x48a <__vector_34+0x28>
     492:	80 95       	com	r24
     494:	8b b9       	out	0x0b, r24	; 11
	buttonMemory[muxCounter] = ~PINC;
     496:	e0 91 cd 02 	lds	r30, 0x02CD	; 0x8002cd <muxCounter>
     49a:	f0 e0       	ldi	r31, 0x00	; 0
     49c:	86 b1       	in	r24, 0x06	; 6
     49e:	80 95       	com	r24
     4a0:	ed 52       	subi	r30, 0x2D	; 45
     4a2:	fd 4f       	sbci	r31, 0xFD	; 253
     4a4:	80 83       	st	Z, r24
	PORTD = 0xFF;
     4a6:	3b b9       	out	0x0b, r19	; 11
}
     4a8:	ff 91       	pop	r31
     4aa:	ef 91       	pop	r30
     4ac:	9f 91       	pop	r25
     4ae:	8f 91       	pop	r24
     4b0:	3f 91       	pop	r19
     4b2:	2f 91       	pop	r18
     4b4:	0f 90       	pop	r0
     4b6:	0f be       	out	0x3f, r0	; 63
     4b8:	0f 90       	pop	r0
     4ba:	1f 90       	pop	r1
     4bc:	18 95       	reti

000004be <__vector_17>:

ISR(SPI0_STC_vect){
     4be:	1f 92       	push	r1
     4c0:	0f 92       	push	r0
     4c2:	0f b6       	in	r0, 0x3f	; 63
     4c4:	0f 92       	push	r0
     4c6:	11 24       	eor	r1, r1
     4c8:	8f 93       	push	r24
     4ca:	ef 93       	push	r30
     4cc:	ff 93       	push	r31
	if (spiByteCounter >= 6){
     4ce:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <__data_end>
     4d2:	86 30       	cpi	r24, 0x06	; 6
     4d4:	10 f0       	brcs	.+4      	; 0x4da <__vector_17+0x1c>
		PORTB |= 1 << LED_L; // set led latch high
     4d6:	28 9a       	sbi	0x05, 0	; 5
		return;
     4d8:	0b c0       	rjmp	.+22     	; 0x4f0 <__vector_17+0x32>
	}
	SPDR0 = ledData[spiByteCounter++];
     4da:	e0 91 cc 02 	lds	r30, 0x02CC	; 0x8002cc <__data_end>
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	8e 0f       	add	r24, r30
     4e2:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <__data_end>
     4e6:	f0 e0       	ldi	r31, 0x00	; 0
     4e8:	ec 5f       	subi	r30, 0xFC	; 252
     4ea:	fe 4f       	sbci	r31, 0xFE	; 254
     4ec:	80 81       	ld	r24, Z
     4ee:	8e bd       	out	0x2e, r24	; 46
}
     4f0:	ff 91       	pop	r31
     4f2:	ef 91       	pop	r30
     4f4:	8f 91       	pop	r24
     4f6:	0f 90       	pop	r0
     4f8:	0f be       	out	0x3f, r0	; 63
     4fa:	0f 90       	pop	r0
     4fc:	1f 90       	pop	r1
     4fe:	18 95       	reti

00000500 <uart_putchar>:

static int uart_putchar(char c, FILE *stream);
static FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);

static int uart_putchar(char c, FILE *stream)
{
     500:	cf 93       	push	r28
     502:	c8 2f       	mov	r28, r24
	if (c == '\n')
     504:	8a 30       	cpi	r24, 0x0A	; 10
     506:	19 f4       	brne	.+6      	; 0x50e <uart_putchar+0xe>
	uart_putchar('\r', stream);
     508:	8d e0       	ldi	r24, 0x0D	; 13
     50a:	0e 94 80 02 	call	0x500	; 0x500 <uart_putchar>
	while(!(UCSR0A &( 1 << UDRE0)));
     50e:	e0 ec       	ldi	r30, 0xC0	; 192
     510:	f0 e0       	ldi	r31, 0x00	; 0
     512:	80 81       	ld	r24, Z
     514:	85 ff       	sbrs	r24, 5
     516:	fd cf       	rjmp	.-6      	; 0x512 <uart_putchar+0x12>
	UDR0 = c;
     518:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	return 0;
}
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	cf 91       	pop	r28
     522:	08 95       	ret

00000524 <init_uart>:

void init_uart(){
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     524:	88 e1       	ldi	r24, 0x18	; 24
     526:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (3<<UCSZ00);
     52a:	86 e0       	ldi	r24, 0x06	; 6
     52c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0L = 51;
     530:	83 e3       	ldi	r24, 0x33	; 51
     532:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     536:	08 95       	ret

00000538 <__vector_14>:

	}
}

ISR(TIMER0_COMPA_vect)		// audio interrupt
{
     538:	1f 92       	push	r1
     53a:	0f 92       	push	r0
     53c:	0f b6       	in	r0, 0x3f	; 63
     53e:	0f 92       	push	r0
     540:	11 24       	eor	r1, r1
     542:	8f 93       	push	r24
     544:	9f 93       	push	r25
     546:	ef 93       	push	r30
     548:	ff 93       	push	r31
	DDRB |= (1<<1);
     54a:	21 9a       	sbi	0x04, 1	; 4
	switch(note_index)
     54c:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <note_index>
     550:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <note_index+0x1>
     554:	86 30       	cpi	r24, 0x06	; 6
     556:	91 05       	cpc	r25, r1
     558:	09 f4       	brne	.+2      	; 0x55c <__vector_14+0x24>
     55a:	4e c0       	rjmp	.+156    	; 0x5f8 <__vector_14+0xc0>
     55c:	30 f4       	brcc	.+12     	; 0x56a <__vector_14+0x32>
     55e:	81 30       	cpi	r24, 0x01	; 1
     560:	91 05       	cpc	r25, r1
     562:	61 f0       	breq	.+24     	; 0x57c <__vector_14+0x44>
     564:	03 97       	sbiw	r24, 0x03	; 3
     566:	49 f1       	breq	.+82     	; 0x5ba <__vector_14+0x82>
     568:	7a c0       	rjmp	.+244    	; 0x65e <__vector_14+0x126>
     56a:	8e 30       	cpi	r24, 0x0E	; 14
     56c:	91 05       	cpc	r25, r1
     56e:	09 f4       	brne	.+2      	; 0x572 <__vector_14+0x3a>
     570:	62 c0       	rjmp	.+196    	; 0x636 <__vector_14+0xfe>
     572:	80 34       	cpi	r24, 0x40	; 64
     574:	91 05       	cpc	r25, r1
     576:	09 f4       	brne	.+2      	; 0x57a <__vector_14+0x42>
     578:	63 c0       	rjmp	.+198    	; 0x640 <__vector_14+0x108>
     57a:	71 c0       	rjmp	.+226    	; 0x65e <__vector_14+0x126>
	{	//every 8ms
		
		case 0+1:	//0ms, 8ms on
		ICR1 = notes[beep_index];	//1st note
     57c:	e0 91 d1 02 	lds	r30, 0x02D1	; 0x8002d1 <beep_index>
     580:	f0 91 d2 02 	lds	r31, 0x02D2	; 0x8002d2 <beep_index+0x1>
     584:	ee 0f       	add	r30, r30
     586:	ff 1f       	adc	r31, r31
     588:	ed 54       	subi	r30, 0x4D	; 77
     58a:	fd 4f       	sbci	r31, 0xFD	; 253
     58c:	80 81       	ld	r24, Z
     58e:	91 81       	ldd	r25, Z+1	; 0x01
     590:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     594:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		OCR1A = notes[beep_index]/2;
     598:	e0 91 d1 02 	lds	r30, 0x02D1	; 0x8002d1 <beep_index>
     59c:	f0 91 d2 02 	lds	r31, 0x02D2	; 0x8002d2 <beep_index+0x1>
     5a0:	ee 0f       	add	r30, r30
     5a2:	ff 1f       	adc	r31, r31
     5a4:	ed 54       	subi	r30, 0x4D	; 77
     5a6:	fd 4f       	sbci	r31, 0xFD	; 253
     5a8:	80 81       	ld	r24, Z
     5aa:	91 81       	ldd	r25, Z+1	; 0x01
     5ac:	96 95       	lsr	r25
     5ae:	87 95       	ror	r24
     5b0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     5b4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		break;
     5b8:	52 c0       	rjmp	.+164    	; 0x65e <__vector_14+0x126>
		case 2+1:	// 16ms, 24, 32 on
		ICR1 = notes[beep_index+1];	//2nd note
     5ba:	e0 91 d1 02 	lds	r30, 0x02D1	; 0x8002d1 <beep_index>
     5be:	f0 91 d2 02 	lds	r31, 0x02D2	; 0x8002d2 <beep_index+0x1>
     5c2:	ee 0f       	add	r30, r30
     5c4:	ff 1f       	adc	r31, r31
     5c6:	eb 54       	subi	r30, 0x4B	; 75
     5c8:	fd 4f       	sbci	r31, 0xFD	; 253
     5ca:	80 81       	ld	r24, Z
     5cc:	91 81       	ldd	r25, Z+1	; 0x01
     5ce:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     5d2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		OCR1A = notes[beep_index]/2;
     5d6:	e0 91 d1 02 	lds	r30, 0x02D1	; 0x8002d1 <beep_index>
     5da:	f0 91 d2 02 	lds	r31, 0x02D2	; 0x8002d2 <beep_index+0x1>
     5de:	ee 0f       	add	r30, r30
     5e0:	ff 1f       	adc	r31, r31
     5e2:	ed 54       	subi	r30, 0x4D	; 77
     5e4:	fd 4f       	sbci	r31, 0xFD	; 253
     5e6:	80 81       	ld	r24, Z
     5e8:	91 81       	ldd	r25, Z+1	; 0x01
     5ea:	96 95       	lsr	r25
     5ec:	87 95       	ror	r24
     5ee:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     5f2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		break;
     5f6:	33 c0       	rjmp	.+102    	; 0x65e <__vector_14+0x126>
		case 5+1:	// 40ms, 48, 56, 64, 72, 80, 88, 96, on
		ICR1 = notes[beep_index+2];	// 3rd note
     5f8:	e0 91 d1 02 	lds	r30, 0x02D1	; 0x8002d1 <beep_index>
     5fc:	f0 91 d2 02 	lds	r31, 0x02D2	; 0x8002d2 <beep_index+0x1>
     600:	ee 0f       	add	r30, r30
     602:	ff 1f       	adc	r31, r31
     604:	e9 54       	subi	r30, 0x49	; 73
     606:	fd 4f       	sbci	r31, 0xFD	; 253
     608:	80 81       	ld	r24, Z
     60a:	91 81       	ldd	r25, Z+1	; 0x01
     60c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     610:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		OCR1A = notes[beep_index]/2;
     614:	e0 91 d1 02 	lds	r30, 0x02D1	; 0x8002d1 <beep_index>
     618:	f0 91 d2 02 	lds	r31, 0x02D2	; 0x8002d2 <beep_index+0x1>
     61c:	ee 0f       	add	r30, r30
     61e:	ff 1f       	adc	r31, r31
     620:	ed 54       	subi	r30, 0x4D	; 77
     622:	fd 4f       	sbci	r31, 0xFD	; 253
     624:	80 81       	ld	r24, Z
     626:	91 81       	ldd	r25, Z+1	; 0x01
     628:	96 95       	lsr	r25
     62a:	87 95       	ror	r24
     62c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     630:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		break;
     634:	14 c0       	rjmp	.+40     	; 0x65e <__vector_14+0x126>
		case 13+1:
		//ICR1 = 0;					//off
		OCR1A = 0;
     636:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     63a:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		break;
     63e:	0f c0       	rjmp	.+30     	; 0x65e <__vector_14+0x126>
		
		case 63+1:
		beep_index = 0;
     640:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <beep_index+0x1>
     644:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <beep_index>
		note_index = -1;
     648:	8f ef       	ldi	r24, 0xFF	; 255
     64a:	9f ef       	ldi	r25, 0xFF	; 255
     64c:	90 93 d0 02 	sts	0x02D0, r25	; 0x8002d0 <note_index+0x1>
     650:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <note_index>
		TCCR0B &= ~(0b101 << CS00);
     654:	85 b5       	in	r24, 0x25	; 37
     656:	8a 7f       	andi	r24, 0xFA	; 250
     658:	85 bd       	out	0x25, r24	; 37
		TCNT0 = 0;
     65a:	16 bc       	out	0x26, r1	; 38
		DDRB &= ~(1<<1);
     65c:	21 98       	cbi	0x04, 1	; 4
		break;
	}
	note_index += 1;
     65e:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <note_index>
     662:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <note_index+0x1>
     666:	01 96       	adiw	r24, 0x01	; 1
     668:	90 93 d0 02 	sts	0x02D0, r25	; 0x8002d0 <note_index+0x1>
     66c:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <note_index>
}
     670:	ff 91       	pop	r31
     672:	ef 91       	pop	r30
     674:	9f 91       	pop	r25
     676:	8f 91       	pop	r24
     678:	0f 90       	pop	r0
     67a:	0f be       	out	0x3f, r0	; 63
     67c:	0f 90       	pop	r0
     67e:	1f 90       	pop	r1
     680:	18 95       	reti

00000682 <__vector_42>:

ISR(TIMER4_COMPA_vect){		// use timer 4 for decreasing game time every 1s
     682:	1f 92       	push	r1
     684:	0f 92       	push	r0
     686:	0f b6       	in	r0, 0x3f	; 63
     688:	0f 92       	push	r0
     68a:	11 24       	eor	r1, r1
     68c:	8f 93       	push	r24
	
	if(TimeRemaining > 0){
     68e:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <TimeRemaining>
     692:	88 23       	and	r24, r24
     694:	29 f0       	breq	.+10     	; 0x6a0 <__vector_42+0x1e>
		TimeRemaining--;
     696:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <TimeRemaining>
     69a:	81 50       	subi	r24, 0x01	; 1
     69c:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <TimeRemaining>
	}
}
     6a0:	8f 91       	pop	r24
     6a2:	0f 90       	pop	r0
     6a4:	0f be       	out	0x3f, r0	; 63
     6a6:	0f 90       	pop	r0
     6a8:	1f 90       	pop	r1
     6aa:	18 95       	reti

000006ac <ShowWinner>:
	EndAttract:
	return;		// start the game

}

void ShowWinner(){
     6ac:	af 92       	push	r10
     6ae:	bf 92       	push	r11
     6b0:	cf 92       	push	r12
     6b2:	df 92       	push	r13
     6b4:	ef 92       	push	r14
     6b6:	ff 92       	push	r15
     6b8:	0f 93       	push	r16
     6ba:	1f 93       	push	r17
     6bc:	cf 93       	push	r28
     6be:	df 93       	push	r29
	
	clearLeds(0);
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	0e 94 46 01 	call	0x28c	; 0x28c <clearLeds>
	
	if(GameMode == 0){
     6c6:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <GameMode>
     6ca:	81 11       	cpse	r24, r1
     6cc:	6f c0       	rjmp	.+222    	; 0x7ac <ShowWinner+0x100>
     6ce:	68 94       	set
     6d0:	dd 24       	eor	r13, r13
     6d2:	d3 f8       	bld	r13, 3
		for(uint8_t count = 0; count < 8; count++){			// flash whole screen
			setScore(0, HighScore1P);
			setScore(2, HighScore1P);
			printf("checkerboard");
     6d4:	0f 2e       	mov	r0, r31
     6d6:	f9 e3       	ldi	r31, 0x39	; 57
     6d8:	af 2e       	mov	r10, r31
     6da:	f1 e0       	ldi	r31, 0x01	; 1
     6dc:	bf 2e       	mov	r11, r31
     6de:	f0 2d       	mov	r31, r0
			_delay_ms(250);
			setScore(0, 0);	// TODO TURN SEGMENTS OFF
			setScore(2, 0);
			
			for(uint8_t i = 0; i < 30; i++){
				setButtonLed(i % 6, i / 5, 1 - (i%2)); // TODO VERIFY THIS WORKS, turn all leds on
     6e0:	ee 24       	eor	r14, r14
     6e2:	e3 94       	inc	r14
     6e4:	0f 2e       	mov	r0, r31
     6e6:	fd ec       	ldi	r31, 0xCD	; 205
     6e8:	ff 2e       	mov	r15, r31
     6ea:	f0 2d       	mov	r31, r0
     6ec:	db ea       	ldi	r29, 0xAB	; 171
	
	clearLeds(0);
	
	if(GameMode == 0){
		for(uint8_t count = 0; count < 8; count++){			// flash whole screen
			setScore(0, HighScore1P);
     6ee:	60 91 e8 02 	lds	r22, 0x02E8	; 0x8002e8 <HighScore1P>
     6f2:	70 91 e9 02 	lds	r23, 0x02E9	; 0x8002e9 <HighScore1P+0x1>
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
			setScore(2, HighScore1P);
     6fc:	60 91 e8 02 	lds	r22, 0x02E8	; 0x8002e8 <HighScore1P>
     700:	70 91 e9 02 	lds	r23, 0x02E9	; 0x8002e9 <HighScore1P+0x1>
     704:	82 e0       	ldi	r24, 0x02	; 2
     706:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
			printf("checkerboard");
     70a:	bf 92       	push	r11
     70c:	af 92       	push	r10
     70e:	0e 94 6f 0a 	call	0x14de	; 0x14de <printf>
     712:	0f 90       	pop	r0
     714:	0f 90       	pop	r0
			for(uint8_t ledx = 0; ledx < 6; ledx++){		// set checkerboard
     716:	10 e0       	ldi	r17, 0x00	; 0
     718:	0d c0       	rjmp	.+26     	; 0x734 <ShowWinner+0x88>
				for(uint8_t ledy = 0; ledy < 6; ledy++){
					setButtonLed(ledx, ledy, (ledx+ledy)%2 );
     71a:	41 2f       	mov	r20, r17
     71c:	4c 0f       	add	r20, r28
     71e:	41 70       	andi	r20, 0x01	; 1
     720:	6c 2f       	mov	r22, r28
     722:	81 2f       	mov	r24, r17
     724:	0e 94 b2 00 	call	0x164	; 0x164 <setButtonLed>
		for(uint8_t count = 0; count < 8; count++){			// flash whole screen
			setScore(0, HighScore1P);
			setScore(2, HighScore1P);
			printf("checkerboard");
			for(uint8_t ledx = 0; ledx < 6; ledx++){		// set checkerboard
				for(uint8_t ledy = 0; ledy < 6; ledy++){
     728:	cf 5f       	subi	r28, 0xFF	; 255
     72a:	c6 30       	cpi	r28, 0x06	; 6
     72c:	b1 f7       	brne	.-20     	; 0x71a <ShowWinner+0x6e>
	if(GameMode == 0){
		for(uint8_t count = 0; count < 8; count++){			// flash whole screen
			setScore(0, HighScore1P);
			setScore(2, HighScore1P);
			printf("checkerboard");
			for(uint8_t ledx = 0; ledx < 6; ledx++){		// set checkerboard
     72e:	1f 5f       	subi	r17, 0xFF	; 255
     730:	16 30       	cpi	r17, 0x06	; 6
     732:	11 f0       	breq	.+4      	; 0x738 <ShowWinner+0x8c>
     734:	c0 e0       	ldi	r28, 0x00	; 0
     736:	f1 cf       	rjmp	.-30     	; 0x71a <ShowWinner+0x6e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     738:	2f ef       	ldi	r18, 0xFF	; 255
     73a:	84 e3       	ldi	r24, 0x34	; 52
     73c:	9c e0       	ldi	r25, 0x0C	; 12
     73e:	21 50       	subi	r18, 0x01	; 1
     740:	80 40       	sbci	r24, 0x00	; 0
     742:	90 40       	sbci	r25, 0x00	; 0
     744:	e1 f7       	brne	.-8      	; 0x73e <ShowWinner+0x92>
     746:	00 c0       	rjmp	.+0      	; 0x748 <ShowWinner+0x9c>
     748:	00 00       	nop
					setButtonLed(ledx, ledy, (ledx+ledy)%2 );
				}
			}
			
			_delay_ms(250);
			setScore(0, 0);	// TODO TURN SEGMENTS OFF
     74a:	60 e0       	ldi	r22, 0x00	; 0
     74c:	70 e0       	ldi	r23, 0x00	; 0
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
			setScore(2, 0);
     754:	60 e0       	ldi	r22, 0x00	; 0
     756:	70 e0       	ldi	r23, 0x00	; 0
     758:	82 e0       	ldi	r24, 0x02	; 2
     75a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
			
			for(uint8_t i = 0; i < 30; i++){
     75e:	c0 e0       	ldi	r28, 0x00	; 0
				setButtonLed(i % 6, i / 5, 1 - (i%2)); // TODO VERIFY THIS WORKS, turn all leds on
     760:	4c 2f       	mov	r20, r28
     762:	4e 25       	eor	r20, r14
     764:	41 70       	andi	r20, 0x01	; 1
     766:	cf 9d       	mul	r28, r15
     768:	61 2d       	mov	r22, r1
     76a:	11 24       	eor	r1, r1
     76c:	66 95       	lsr	r22
     76e:	66 95       	lsr	r22
     770:	cd 9f       	mul	r28, r29
     772:	81 2d       	mov	r24, r1
     774:	11 24       	eor	r1, r1
     776:	86 95       	lsr	r24
     778:	86 95       	lsr	r24
     77a:	98 2f       	mov	r25, r24
     77c:	99 0f       	add	r25, r25
     77e:	89 0f       	add	r24, r25
     780:	88 0f       	add	r24, r24
     782:	2c 2f       	mov	r18, r28
     784:	28 1b       	sub	r18, r24
     786:	82 2f       	mov	r24, r18
     788:	0e 94 b2 00 	call	0x164	; 0x164 <setButtonLed>
			
			_delay_ms(250);
			setScore(0, 0);	// TODO TURN SEGMENTS OFF
			setScore(2, 0);
			
			for(uint8_t i = 0; i < 30; i++){
     78c:	cf 5f       	subi	r28, 0xFF	; 255
     78e:	ce 31       	cpi	r28, 0x1E	; 30
     790:	39 f7       	brne	.-50     	; 0x760 <ShowWinner+0xb4>
     792:	8f ef       	ldi	r24, 0xFF	; 255
     794:	94 e3       	ldi	r25, 0x34	; 52
     796:	2c e0       	ldi	r18, 0x0C	; 12
     798:	81 50       	subi	r24, 0x01	; 1
     79a:	90 40       	sbci	r25, 0x00	; 0
     79c:	20 40       	sbci	r18, 0x00	; 0
     79e:	e1 f7       	brne	.-8      	; 0x798 <ShowWinner+0xec>
     7a0:	00 c0       	rjmp	.+0      	; 0x7a2 <ShowWinner+0xf6>
     7a2:	00 00       	nop
     7a4:	da 94       	dec	r13
void ShowWinner(){
	
	clearLeds(0);
	
	if(GameMode == 0){
		for(uint8_t count = 0; count < 8; count++){			// flash whole screen
     7a6:	d1 10       	cpse	r13, r1
     7a8:	a2 cf       	rjmp	.-188    	; 0x6ee <ShowWinner+0x42>
     7aa:	9c c0       	rjmp	.+312    	; 0x8e4 <ShowWinner+0x238>
			}
			
			_delay_ms(250);
		}
		}else{										//2p mode, show winner every time
		uint8_t winnerhalf = P1Score > P2Score ? 0 : 3; //index half based on winner
     7ac:	20 91 ea 02 	lds	r18, 0x02EA	; 0x8002ea <P1Score>
     7b0:	30 91 eb 02 	lds	r19, 0x02EB	; 0x8002eb <P1Score+0x1>
     7b4:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <P2Score>
     7b8:	90 91 ed 02 	lds	r25, 0x02ED	; 0x8002ed <P2Score+0x1>
     7bc:	82 17       	cp	r24, r18
     7be:	93 07       	cpc	r25, r19
     7c0:	28 f0       	brcs	.+10     	; 0x7cc <ShowWinner+0x120>
     7c2:	0f 2e       	mov	r0, r31
     7c4:	f3 e0       	ldi	r31, 0x03	; 3
     7c6:	cf 2e       	mov	r12, r31
     7c8:	f0 2d       	mov	r31, r0
     7ca:	01 c0       	rjmp	.+2      	; 0x7ce <ShowWinner+0x122>
     7cc:	c1 2c       	mov	r12, r1
     7ce:	68 94       	set
     7d0:	dd 24       	eor	r13, r13
     7d2:	d2 f8       	bld	r13, 2
				setScore(0, HighScore2P);
				setScore(1, 0);	//TODO EMPTY? show 2P flashing opposite
				setScore(2, HighScore2P);
			}
			
			for(uint8_t x = winnerhalf; x < (winnerhalf+3); x++){
     7d4:	ec 2c       	mov	r14, r12
     7d6:	f1 2c       	mov	r15, r1
     7d8:	87 01       	movw	r16, r14
     7da:	0d 5f       	subi	r16, 0xFD	; 253
     7dc:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		}else{										//2p mode, show winner every time
		uint8_t winnerhalf = P1Score > P2Score ? 0 : 3; //index half based on winner
		for(uint8_t i = 0; i < 4; i++){
			
			if((P1Score == HighScore2P) || (P2Score == HighScore2P)){
     7de:	60 91 f8 02 	lds	r22, 0x02F8	; 0x8002f8 <HighScore2P>
     7e2:	70 91 f9 02 	lds	r23, 0x02F9	; 0x8002f9 <HighScore2P+0x1>
     7e6:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <P1Score>
     7ea:	90 91 eb 02 	lds	r25, 0x02EB	; 0x8002eb <P1Score+0x1>
     7ee:	86 17       	cp	r24, r22
     7f0:	97 07       	cpc	r25, r23
     7f2:	39 f0       	breq	.+14     	; 0x802 <ShowWinner+0x156>
     7f4:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <P2Score>
     7f8:	90 91 ed 02 	lds	r25, 0x02ED	; 0x8002ed <P2Score+0x1>
     7fc:	68 17       	cp	r22, r24
     7fe:	79 07       	cpc	r23, r25
     800:	79 f4       	brne	.+30     	; 0x820 <ShowWinner+0x174>
				setScore(0, HighScore2P);
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
				setScore(1, 0);	//TODO EMPTY? show 2P flashing opposite
     808:	60 e0       	ldi	r22, 0x00	; 0
     80a:	70 e0       	ldi	r23, 0x00	; 0
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
				setScore(2, HighScore2P);
     812:	60 91 f8 02 	lds	r22, 0x02F8	; 0x8002f8 <HighScore2P>
     816:	70 91 f9 02 	lds	r23, 0x02F9	; 0x8002f9 <HighScore2P+0x1>
     81a:	82 e0       	ldi	r24, 0x02	; 2
     81c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
			}
			
			for(uint8_t x = winnerhalf; x < (winnerhalf+3); x++){
     820:	e0 16       	cp	r14, r16
     822:	f1 06       	cpc	r15, r17
     824:	84 f0       	brlt	.+32     	; 0x846 <ShowWinner+0x19a>
     826:	12 c0       	rjmp	.+36     	; 0x84c <ShowWinner+0x1a0>
				for(uint8_t y = 0; y < 5; y++){
					setButtonLed(x,y,1);
     828:	41 e0       	ldi	r20, 0x01	; 1
     82a:	6c 2f       	mov	r22, r28
     82c:	8d 2f       	mov	r24, r29
     82e:	0e 94 b2 00 	call	0x164	; 0x164 <setButtonLed>
				setScore(1, 0);	//TODO EMPTY? show 2P flashing opposite
				setScore(2, HighScore2P);
			}
			
			for(uint8_t x = winnerhalf; x < (winnerhalf+3); x++){
				for(uint8_t y = 0; y < 5; y++){
     832:	cf 5f       	subi	r28, 0xFF	; 255
     834:	c5 30       	cpi	r28, 0x05	; 5
     836:	c1 f7       	brne	.-16     	; 0x828 <ShowWinner+0x17c>
				setScore(0, HighScore2P);
				setScore(1, 0);	//TODO EMPTY? show 2P flashing opposite
				setScore(2, HighScore2P);
			}
			
			for(uint8_t x = winnerhalf; x < (winnerhalf+3); x++){
     838:	df 5f       	subi	r29, 0xFF	; 255
     83a:	8d 2f       	mov	r24, r29
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	80 17       	cp	r24, r16
     840:	91 07       	cpc	r25, r17
     842:	14 f0       	brlt	.+4      	; 0x848 <ShowWinner+0x19c>
     844:	03 c0       	rjmp	.+6      	; 0x84c <ShowWinner+0x1a0>
     846:	dc 2d       	mov	r29, r12
			}
			
			_delay_ms(250);
		}
		}else{										//2p mode, show winner every time
		uint8_t winnerhalf = P1Score > P2Score ? 0 : 3; //index half based on winner
     848:	c0 e0       	ldi	r28, 0x00	; 0
     84a:	ee cf       	rjmp	.-36     	; 0x828 <ShowWinner+0x17c>
     84c:	8f ef       	ldi	r24, 0xFF	; 255
     84e:	94 e3       	ldi	r25, 0x34	; 52
     850:	2c e0       	ldi	r18, 0x0C	; 12
     852:	81 50       	subi	r24, 0x01	; 1
     854:	90 40       	sbci	r25, 0x00	; 0
     856:	20 40       	sbci	r18, 0x00	; 0
     858:	e1 f7       	brne	.-8      	; 0x852 <ShowWinner+0x1a6>
     85a:	00 c0       	rjmp	.+0      	; 0x85c <ShowWinner+0x1b0>
     85c:	00 00       	nop
					setButtonLed(x,y,1);
				}
			}
			_delay_ms(250);
			
			if((P1Score == HighScore2P) || (P2Score == HighScore2P)){
     85e:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <HighScore2P>
     862:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <HighScore2P+0x1>
     866:	20 91 ea 02 	lds	r18, 0x02EA	; 0x8002ea <P1Score>
     86a:	30 91 eb 02 	lds	r19, 0x02EB	; 0x8002eb <P1Score+0x1>
     86e:	28 17       	cp	r18, r24
     870:	39 07       	cpc	r19, r25
     872:	39 f0       	breq	.+14     	; 0x882 <ShowWinner+0x1d6>
     874:	20 91 ec 02 	lds	r18, 0x02EC	; 0x8002ec <P2Score>
     878:	30 91 ed 02 	lds	r19, 0x02ED	; 0x8002ed <P2Score+0x1>
     87c:	82 17       	cp	r24, r18
     87e:	93 07       	cpc	r25, r19
     880:	79 f4       	brne	.+30     	; 0x8a0 <ShowWinner+0x1f4>
				setScore(0, 0); // TODO EMPTY
     882:	60 e0       	ldi	r22, 0x00	; 0
     884:	70 e0       	ldi	r23, 0x00	; 0
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
				setScore(1, 0);	//TODO SHOW 1P if 1p has hs else 2p
     88c:	60 e0       	ldi	r22, 0x00	; 0
     88e:	70 e0       	ldi	r23, 0x00	; 0
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
				setScore(2, 0); // todo empty
     896:	60 e0       	ldi	r22, 0x00	; 0
     898:	70 e0       	ldi	r23, 0x00	; 0
     89a:	82 e0       	ldi	r24, 0x02	; 2
     89c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
			}
			
			for(uint8_t x = winnerhalf; x < (winnerhalf+3); x++){
     8a0:	e0 16       	cp	r14, r16
     8a2:	f1 06       	cpc	r15, r17
     8a4:	84 f0       	brlt	.+32     	; 0x8c6 <ShowWinner+0x21a>
     8a6:	12 c0       	rjmp	.+36     	; 0x8cc <ShowWinner+0x220>
				for(uint8_t y = 0; y < 5; y++){
					setButtonLed(x,y,0);
     8a8:	40 e0       	ldi	r20, 0x00	; 0
     8aa:	6c 2f       	mov	r22, r28
     8ac:	8d 2f       	mov	r24, r29
     8ae:	0e 94 b2 00 	call	0x164	; 0x164 <setButtonLed>
				setScore(1, 0);	//TODO SHOW 1P if 1p has hs else 2p
				setScore(2, 0); // todo empty
			}
			
			for(uint8_t x = winnerhalf; x < (winnerhalf+3); x++){
				for(uint8_t y = 0; y < 5; y++){
     8b2:	cf 5f       	subi	r28, 0xFF	; 255
     8b4:	c5 30       	cpi	r28, 0x05	; 5
     8b6:	c1 f7       	brne	.-16     	; 0x8a8 <ShowWinner+0x1fc>
				setScore(0, 0); // TODO EMPTY
				setScore(1, 0);	//TODO SHOW 1P if 1p has hs else 2p
				setScore(2, 0); // todo empty
			}
			
			for(uint8_t x = winnerhalf; x < (winnerhalf+3); x++){
     8b8:	df 5f       	subi	r29, 0xFF	; 255
     8ba:	8d 2f       	mov	r24, r29
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	80 17       	cp	r24, r16
     8c0:	91 07       	cpc	r25, r17
     8c2:	14 f0       	brlt	.+4      	; 0x8c8 <ShowWinner+0x21c>
     8c4:	03 c0       	rjmp	.+6      	; 0x8cc <ShowWinner+0x220>
     8c6:	dc 2d       	mov	r29, r12
				setScore(0, HighScore2P);
				setScore(1, 0);	//TODO EMPTY? show 2P flashing opposite
				setScore(2, HighScore2P);
			}
			
			for(uint8_t x = winnerhalf; x < (winnerhalf+3); x++){
     8c8:	c0 e0       	ldi	r28, 0x00	; 0
     8ca:	ee cf       	rjmp	.-36     	; 0x8a8 <ShowWinner+0x1fc>
     8cc:	8f ef       	ldi	r24, 0xFF	; 255
     8ce:	94 e3       	ldi	r25, 0x34	; 52
     8d0:	2c e0       	ldi	r18, 0x0C	; 12
     8d2:	81 50       	subi	r24, 0x01	; 1
     8d4:	90 40       	sbci	r25, 0x00	; 0
     8d6:	20 40       	sbci	r18, 0x00	; 0
     8d8:	e1 f7       	brne	.-8      	; 0x8d2 <ShowWinner+0x226>
     8da:	00 c0       	rjmp	.+0      	; 0x8dc <ShowWinner+0x230>
     8dc:	00 00       	nop
     8de:	da 94       	dec	r13
			
			_delay_ms(250);
		}
		}else{										//2p mode, show winner every time
		uint8_t winnerhalf = P1Score > P2Score ? 0 : 3; //index half based on winner
		for(uint8_t i = 0; i < 4; i++){
     8e0:	d1 10       	cpse	r13, r1
     8e2:	7d cf       	rjmp	.-262    	; 0x7de <ShowWinner+0x132>
				}
			}
			_delay_ms(250);
		}
	}
}
     8e4:	df 91       	pop	r29
     8e6:	cf 91       	pop	r28
     8e8:	1f 91       	pop	r17
     8ea:	0f 91       	pop	r16
     8ec:	ff 90       	pop	r15
     8ee:	ef 90       	pop	r14
     8f0:	df 90       	pop	r13
     8f2:	cf 90       	pop	r12
     8f4:	bf 90       	pop	r11
     8f6:	af 90       	pop	r10
     8f8:	08 95       	ret

000008fa <IncrementScore>:

void IncrementScore(uint8_t Player, uint16_t value){
	if(Player == 0){
     8fa:	81 11       	cpse	r24, r1
     8fc:	11 c0       	rjmp	.+34     	; 0x920 <__stack+0x21>
		P1Score += value;
		P1Score = P1Score > 999 ? 999 : P1Score;
     8fe:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <P1Score>
     902:	90 91 eb 02 	lds	r25, 0x02EB	; 0x8002eb <P1Score+0x1>
     906:	68 0f       	add	r22, r24
     908:	79 1f       	adc	r23, r25
     90a:	68 3e       	cpi	r22, 0xE8	; 232
     90c:	83 e0       	ldi	r24, 0x03	; 3
     90e:	78 07       	cpc	r23, r24
     910:	10 f0       	brcs	.+4      	; 0x916 <__stack+0x17>
     912:	67 ee       	ldi	r22, 0xE7	; 231
     914:	73 e0       	ldi	r23, 0x03	; 3
     916:	70 93 eb 02 	sts	0x02EB, r23	; 0x8002eb <P1Score+0x1>
     91a:	60 93 ea 02 	sts	0x02EA, r22	; 0x8002ea <P1Score>
     91e:	08 95       	ret
		}else if(Player == 1){
     920:	81 30       	cpi	r24, 0x01	; 1
     922:	81 f4       	brne	.+32     	; 0x944 <__stack+0x45>
		P2Score += value;
		P2Score = P2Score > 999 ? 999 : P2Score;
     924:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <P2Score>
     928:	90 91 ed 02 	lds	r25, 0x02ED	; 0x8002ed <P2Score+0x1>
     92c:	68 0f       	add	r22, r24
     92e:	79 1f       	adc	r23, r25
     930:	68 3e       	cpi	r22, 0xE8	; 232
     932:	83 e0       	ldi	r24, 0x03	; 3
     934:	78 07       	cpc	r23, r24
     936:	10 f0       	brcs	.+4      	; 0x93c <__stack+0x3d>
     938:	67 ee       	ldi	r22, 0xE7	; 231
     93a:	73 e0       	ldi	r23, 0x03	; 3
     93c:	70 93 ed 02 	sts	0x02ED, r23	; 0x8002ed <P2Score+0x1>
     940:	60 93 ec 02 	sts	0x02EC, r22	; 0x8002ec <P2Score>
     944:	08 95       	ret

00000946 <Bonus>:
	// game is over, stop timer
	TCCR4B &= ~(0b111 << CS40);
	
}

void Bonus(){
     946:	cf 92       	push	r12
     948:	df 92       	push	r13
     94a:	ef 92       	push	r14
     94c:	ff 92       	push	r15
     94e:	0f 93       	push	r16
     950:	1f 93       	push	r17
     952:	cf 93       	push	r28
     954:	df 93       	push	r29

	// blink leds to indicate bonus round start

	clearLeds(1);
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	0e 94 46 01 	call	0x28c	; 0x28c <clearLeds>
     95c:	2f ef       	ldi	r18, 0xFF	; 255
     95e:	89 e6       	ldi	r24, 0x69	; 105
     960:	98 e1       	ldi	r25, 0x18	; 24
     962:	21 50       	subi	r18, 0x01	; 1
     964:	80 40       	sbci	r24, 0x00	; 0
     966:	90 40       	sbci	r25, 0x00	; 0
     968:	e1 f7       	brne	.-8      	; 0x962 <Bonus+0x1c>
     96a:	00 c0       	rjmp	.+0      	; 0x96c <Bonus+0x26>
     96c:	00 00       	nop
	_delay_ms(500);

	clearLeds(0);
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	0e 94 46 01 	call	0x28c	; 0x28c <clearLeds>
     974:	2f ef       	ldi	r18, 0xFF	; 255
     976:	89 e6       	ldi	r24, 0x69	; 105
     978:	98 e1       	ldi	r25, 0x18	; 24
     97a:	21 50       	subi	r18, 0x01	; 1
     97c:	80 40       	sbci	r24, 0x00	; 0
     97e:	90 40       	sbci	r25, 0x00	; 0
     980:	e1 f7       	brne	.-8      	; 0x97a <Bonus+0x34>
     982:	00 c0       	rjmp	.+0      	; 0x984 <Bonus+0x3e>
     984:	00 00       	nop
	_delay_ms(500);

	clearLeds(1);
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	0e 94 46 01 	call	0x28c	; 0x28c <clearLeds>
     98c:	2f ef       	ldi	r18, 0xFF	; 255
     98e:	84 e3       	ldi	r24, 0x34	; 52
     990:	9c e0       	ldi	r25, 0x0C	; 12
     992:	21 50       	subi	r18, 0x01	; 1
     994:	80 40       	sbci	r24, 0x00	; 0
     996:	90 40       	sbci	r25, 0x00	; 0
     998:	e1 f7       	brne	.-8      	; 0x992 <Bonus+0x4c>
     99a:	00 c0       	rjmp	.+0      	; 0x99c <Bonus+0x56>
     99c:	00 00       	nop
	_delay_ms(250);

	uint32_t HasPressed = 0;	// store 30 stored buttons
	
	TimeRemaining = BonusTime;
     99e:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <BonusTime>
     9a2:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <TimeRemaining>
	TCNT4 = 0;
     9a6:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7e00a5>
     9aa:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7e00a4>
	TCCR4B = (0b101 << CS40);	// enable timer 0 (game timer)
     9ae:	85 e0       	ldi	r24, 0x05	; 5
     9b0:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
	
	setScore(0, GameMode == 0 ? HighScore1P : HighScore2P);
     9b4:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <GameMode>
     9b8:	81 11       	cpse	r24, r1
     9ba:	05 c0       	rjmp	.+10     	; 0x9c6 <Bonus+0x80>
     9bc:	60 91 e8 02 	lds	r22, 0x02E8	; 0x8002e8 <HighScore1P>
     9c0:	70 91 e9 02 	lds	r23, 0x02E9	; 0x8002e9 <HighScore1P+0x1>
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <Bonus+0x88>
     9c6:	60 91 f8 02 	lds	r22, 0x02F8	; 0x8002f8 <HighScore2P>
     9ca:	70 91 f9 02 	lds	r23, 0x02F9	; 0x8002f9 <HighScore2P+0x1>
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
			setScore(2, P1Score);	// otherwise show p1 score and high score
		}
		
		for(uint8_t x = 0; x < 6; x++){
			for(uint8_t y = 0; y < 5; y++){
				if( isButtonDown(x, y) && (( 1 << (x*5 + y) ) == 0)){		// check later
     9d4:	cc 24       	eor	r12, r12
     9d6:	c3 94       	inc	r12
     9d8:	d1 2c       	mov	r13, r1
	TCNT4 = 0;
	TCCR4B = (0b101 << CS40);	// enable timer 0 (game timer)
	
	setScore(0, GameMode == 0 ? HighScore1P : HighScore2P);
	
	while(TimeRemaining > 0){
     9da:	5c c0       	rjmp	.+184    	; 0xa94 <Bonus+0x14e>
		
		setScore(1, TimeRemaining);
     9dc:	60 91 e7 02 	lds	r22, 0x02E7	; 0x8002e7 <TimeRemaining>
     9e0:	70 e0       	ldi	r23, 0x00	; 0
     9e2:	81 e0       	ldi	r24, 0x01	; 1
     9e4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
		if(GameMode == 1){
     9e8:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <GameMode>
     9ec:	81 30       	cpi	r24, 0x01	; 1
     9ee:	79 f4       	brne	.+30     	; 0xa0e <Bonus+0xc8>
			setScore(0, P1Score);	// if 2p mode, show left p1 and right p2 scores
     9f0:	60 91 ea 02 	lds	r22, 0x02EA	; 0x8002ea <P1Score>
     9f4:	70 91 eb 02 	lds	r23, 0x02EB	; 0x8002eb <P1Score+0x1>
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
			setScore(2, P2Score);
     9fe:	60 91 ec 02 	lds	r22, 0x02EC	; 0x8002ec <P2Score>
     a02:	70 91 ed 02 	lds	r23, 0x02ED	; 0x8002ed <P2Score+0x1>
     a06:	82 e0       	ldi	r24, 0x02	; 2
     a08:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
     a0c:	4f c0       	rjmp	.+158    	; 0xaac <Bonus+0x166>
			}else{
			setScore(2, P1Score);	// otherwise show p1 score and high score
     a0e:	60 91 ea 02 	lds	r22, 0x02EA	; 0x8002ea <P1Score>
     a12:	70 91 eb 02 	lds	r23, 0x02EB	; 0x8002eb <P1Score+0x1>
     a16:	82 e0       	ldi	r24, 0x02	; 2
     a18:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
     a1c:	47 c0       	rjmp	.+142    	; 0xaac <Bonus+0x166>
		}
		
		for(uint8_t x = 0; x < 6; x++){
			for(uint8_t y = 0; y < 5; y++){
				if( isButtonDown(x, y) && (( 1 << (x*5 + y) ) == 0)){		// check later
     a1e:	6c 2f       	mov	r22, r28
     a20:	8d 2f       	mov	r24, r29
     a22:	0e 94 a4 00 	call	0x148	; 0x148 <isButtonDown>
     a26:	88 23       	and	r24, r24
     a28:	39 f1       	breq	.+78     	; 0xa78 <Bonus+0x132>
     a2a:	c6 01       	movw	r24, r12
     a2c:	00 2e       	mov	r0, r16
     a2e:	02 c0       	rjmp	.+4      	; 0xa34 <Bonus+0xee>
     a30:	88 0f       	add	r24, r24
     a32:	99 1f       	adc	r25, r25
     a34:	0a 94       	dec	r0
     a36:	e2 f7       	brpl	.-8      	; 0xa30 <Bonus+0xea>
     a38:	89 2b       	or	r24, r25
     a3a:	f1 f4       	brne	.+60     	; 0xa78 <Bonus+0x132>

					HasPressed |= (1 << (x*5 + y) );
					setButtonLed(x,y,0);
     a3c:	40 e0       	ldi	r20, 0x00	; 0
     a3e:	6c 2f       	mov	r22, r28
     a40:	8d 2f       	mov	r24, r29
     a42:	0e 94 b2 00 	call	0x164	; 0x164 <setButtonLed>

					if(GameMode == 0){
     a46:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <GameMode>
     a4a:	81 11       	cpse	r24, r1
     a4c:	06 c0       	rjmp	.+12     	; 0xa5a <Bonus+0x114>
						IncrementScore(0,BonusPointCount);		// TODO later include mil
     a4e:	60 91 fa 02 	lds	r22, 0x02FA	; 0x8002fa <BonusPointCount>
     a52:	70 e0       	ldi	r23, 0x00	; 0
     a54:	0e 94 7d 04 	call	0x8fa	; 0x8fa <IncrementScore>
     a58:	0f c0       	rjmp	.+30     	; 0xa78 <Bonus+0x132>
						}else{
						if(x >= 3){
     a5a:	d3 30       	cpi	r29, 0x03	; 3
     a5c:	38 f0       	brcs	.+14     	; 0xa6c <Bonus+0x126>
							IncrementScore(1,BonusPointCount);
     a5e:	60 91 fa 02 	lds	r22, 0x02FA	; 0x8002fa <BonusPointCount>
     a62:	70 e0       	ldi	r23, 0x00	; 0
     a64:	81 e0       	ldi	r24, 0x01	; 1
     a66:	0e 94 7d 04 	call	0x8fa	; 0x8fa <IncrementScore>
     a6a:	06 c0       	rjmp	.+12     	; 0xa78 <Bonus+0x132>
							}else{
							IncrementScore(0,BonusPointCount);
     a6c:	60 91 fa 02 	lds	r22, 0x02FA	; 0x8002fa <BonusPointCount>
     a70:	70 e0       	ldi	r23, 0x00	; 0
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	0e 94 7d 04 	call	0x8fa	; 0x8fa <IncrementScore>
			}else{
			setScore(2, P1Score);	// otherwise show p1 score and high score
		}
		
		for(uint8_t x = 0; x < 6; x++){
			for(uint8_t y = 0; y < 5; y++){
     a78:	cf 5f       	subi	r28, 0xFF	; 255
     a7a:	0f 5f       	subi	r16, 0xFF	; 255
     a7c:	1f 4f       	sbci	r17, 0xFF	; 255
     a7e:	c5 30       	cpi	r28, 0x05	; 5
     a80:	71 f6       	brne	.-100    	; 0xa1e <Bonus+0xd8>
			setScore(2, P2Score);
			}else{
			setScore(2, P1Score);	// otherwise show p1 score and high score
		}
		
		for(uint8_t x = 0; x < 6; x++){
     a82:	df 5f       	subi	r29, 0xFF	; 255
     a84:	25 e0       	ldi	r18, 0x05	; 5
     a86:	e2 0e       	add	r14, r18
     a88:	f1 1c       	adc	r15, r1
     a8a:	d6 30       	cpi	r29, 0x06	; 6
     a8c:	19 f0       	breq	.+6      	; 0xa94 <Bonus+0x14e>
	// game is over, stop timer
	TCCR4B &= ~(0b111 << CS40);
	
}

void Bonus(){
     a8e:	87 01       	movw	r16, r14
     a90:	c0 e0       	ldi	r28, 0x00	; 0
     a92:	c5 cf       	rjmp	.-118    	; 0xa1e <Bonus+0xd8>
	TCNT4 = 0;
	TCCR4B = (0b101 << CS40);	// enable timer 0 (game timer)
	
	setScore(0, GameMode == 0 ? HighScore1P : HighScore2P);
	
	while(TimeRemaining > 0){
     a94:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <TimeRemaining>
     a98:	81 11       	cpse	r24, r1
     a9a:	a0 cf       	rjmp	.-192    	; 0x9dc <Bonus+0x96>

				}
			}
		}
	}
	TCCR4B = (0b000 << CS40);
     a9c:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
	
	setScore(1, 0); // TODO MAKE DASHES
     aa0:	60 e0       	ldi	r22, 0x00	; 0
     aa2:	70 e0       	ldi	r23, 0x00	; 0
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>

}
     aaa:	04 c0       	rjmp	.+8      	; 0xab4 <Bonus+0x16e>
	// game is over, stop timer
	TCCR4B &= ~(0b111 << CS40);
	
}

void Bonus(){
     aac:	e1 2c       	mov	r14, r1
     aae:	f1 2c       	mov	r15, r1
     ab0:	d0 e0       	ldi	r29, 0x00	; 0
     ab2:	ed cf       	rjmp	.-38     	; 0xa8e <Bonus+0x148>
	}
	TCCR4B = (0b000 << CS40);
	
	setScore(1, 0); // TODO MAKE DASHES

}
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	1f 91       	pop	r17
     aba:	0f 91       	pop	r16
     abc:	ff 90       	pop	r15
     abe:	ef 90       	pop	r14
     ac0:	df 90       	pop	r13
     ac2:	cf 90       	pop	r12
     ac4:	08 95       	ret

00000ac6 <playChirp>:
		_delay_ms(1000);
	}
}

void playChirp(uint8_t tone){
	beep_index = tone;
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	90 93 d2 02 	sts	0x02D2, r25	; 0x8002d2 <beep_index+0x1>
     acc:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <beep_index>
	note_index = 0;
     ad0:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <note_index+0x1>
     ad4:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <note_index>
	TCCR0B = (0b101 << CS00);	//turn on clock for speaker
     ad8:	85 e0       	ldi	r24, 0x05	; 5
     ada:	85 bd       	out	0x25, r24	; 37
     adc:	08 95       	ret

00000ade <Display321>:
							 2, 3, 2, 2, 2, 3, 2, 1, 0, 0, 0};
const uint8_t onledsY[33] = {1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5,
							 1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5,
							 1, 2, 2, 3, 4, 5, 5, 5, 0, 0, 0};

void Display321(){	//TODO ADD TONES FOR EACH DIGIT
     ade:	7f 92       	push	r7
     ae0:	8f 92       	push	r8
     ae2:	9f 92       	push	r9
     ae4:	af 92       	push	r10
     ae6:	bf 92       	push	r11
     ae8:	cf 92       	push	r12
     aea:	df 92       	push	r13
     aec:	ef 92       	push	r14
     aee:	ff 92       	push	r15
     af0:	0f 93       	push	r16
     af2:	1f 93       	push	r17
     af4:	cf 93       	push	r28
     af6:	df 93       	push	r29
	
	clearLeds(0);
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	0e 94 46 01 	call	0x28c	; 0x28c <clearLeds>
	
	if(GameMode){	//light up 2p button
     afe:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <GameMode>
     b02:	88 23       	and	r24, r24
     b04:	a1 f0       	breq	.+40     	; 0xb2e <Display321+0x50>
     b06:	c0 e0       	ldi	r28, 0x00	; 0
		for(uint8_t i = 0; i < 8; i++){
			setButtonLed(Player2ButtonX, Player2ButtonY, i%2);
     b08:	4c 2f       	mov	r20, r28
     b0a:	41 70       	andi	r20, 0x01	; 1
     b0c:	60 e0       	ldi	r22, 0x00	; 0
     b0e:	82 e0       	ldi	r24, 0x02	; 2
     b10:	0e 94 b2 00 	call	0x164	; 0x164 <setButtonLed>
     b14:	2f ef       	ldi	r18, 0xFF	; 255
     b16:	81 ee       	ldi	r24, 0xE1	; 225
     b18:	94 e0       	ldi	r25, 0x04	; 4
     b1a:	21 50       	subi	r18, 0x01	; 1
     b1c:	80 40       	sbci	r24, 0x00	; 0
     b1e:	90 40       	sbci	r25, 0x00	; 0
     b20:	e1 f7       	brne	.-8      	; 0xb1a <Display321+0x3c>
     b22:	00 c0       	rjmp	.+0      	; 0xb24 <Display321+0x46>
     b24:	00 00       	nop
void Display321(){	//TODO ADD TONES FOR EACH DIGIT
	
	clearLeds(0);
	
	if(GameMode){	//light up 2p button
		for(uint8_t i = 0; i < 8; i++){
     b26:	cf 5f       	subi	r28, 0xFF	; 255
     b28:	c8 30       	cpi	r28, 0x08	; 8
     b2a:	71 f7       	brne	.-36     	; 0xb08 <Display321+0x2a>
     b2c:	13 c0       	rjmp	.+38     	; 0xb54 <Display321+0x76>
     b2e:	c0 e0       	ldi	r28, 0x00	; 0
			setButtonLed(Player2ButtonX, Player2ButtonY, i%2);
			_delay_ms(100);
		}
	}else{
		for(uint8_t i = 0; i < 8; i++){
			setButtonLed(Player1ButtonX, Player1ButtonY, i%2);
     b30:	4c 2f       	mov	r20, r28
     b32:	41 70       	andi	r20, 0x01	; 1
     b34:	60 e0       	ldi	r22, 0x00	; 0
     b36:	83 e0       	ldi	r24, 0x03	; 3
     b38:	0e 94 b2 00 	call	0x164	; 0x164 <setButtonLed>
     b3c:	ef ef       	ldi	r30, 0xFF	; 255
     b3e:	f1 ee       	ldi	r31, 0xE1	; 225
     b40:	24 e0       	ldi	r18, 0x04	; 4
     b42:	e1 50       	subi	r30, 0x01	; 1
     b44:	f0 40       	sbci	r31, 0x00	; 0
     b46:	20 40       	sbci	r18, 0x00	; 0
     b48:	e1 f7       	brne	.-8      	; 0xb42 <Display321+0x64>
     b4a:	00 c0       	rjmp	.+0      	; 0xb4c <Display321+0x6e>
     b4c:	00 00       	nop
		for(uint8_t i = 0; i < 8; i++){
			setButtonLed(Player2ButtonX, Player2ButtonY, i%2);
			_delay_ms(100);
		}
	}else{
		for(uint8_t i = 0; i < 8; i++){
     b4e:	cf 5f       	subi	r28, 0xFF	; 255
     b50:	c8 30       	cpi	r28, 0x08	; 8
     b52:	71 f7       	brne	.-36     	; 0xb30 <Display321+0x52>
			setButtonLed(Player1ButtonX, Player1ButtonY, i%2);
			_delay_ms(100);
		}
	}

	playChirp(2);
     b54:	82 e0       	ldi	r24, 0x02	; 2
     b56:	0e 94 63 05 	call	0xac6	; 0xac6 <playChirp>
     b5a:	8f ef       	ldi	r24, 0xFF	; 255
     b5c:	9c eb       	ldi	r25, 0xBC	; 188
     b5e:	ef e1       	ldi	r30, 0x1F	; 31
     b60:	81 50       	subi	r24, 0x01	; 1
     b62:	90 40       	sbci	r25, 0x00	; 0
     b64:	e0 40       	sbci	r30, 0x00	; 0
     b66:	e1 f7       	brne	.-8      	; 0xb60 <Display321+0x82>
     b68:	00 c0       	rjmp	.+0      	; 0xb6a <Display321+0x8c>
     b6a:	00 00       	nop
     b6c:	00 e0       	ldi	r16, 0x00	; 0
     b6e:	10 e0       	ldi	r17, 0x00	; 0
     b70:	71 2c       	mov	r7, r1
     b72:	0f 2e       	mov	r0, r31
     b74:	f3 e0       	ldi	r31, 0x03	; 3
     b76:	cf 2e       	mov	r12, r31
     b78:	d1 2c       	mov	r13, r1
     b7a:	f0 2d       	mov	r31, r0
	_delay_ms(650);
	for(uint8_t count = 3; count >= 1; count--){
		printf("%d\n", count);
     b7c:	0f 2e       	mov	r0, r31
     b7e:	fc e5       	ldi	r31, 0x5C	; 92
     b80:	af 2e       	mov	r10, r31
     b82:	f1 e0       	ldi	r31, 0x01	; 1
     b84:	bf 2e       	mov	r11, r31
     b86:	f0 2d       	mov	r31, r0
     b88:	df 92       	push	r13
     b8a:	cf 92       	push	r12
     b8c:	bf 92       	push	r11
     b8e:	af 92       	push	r10
     b90:	0e 94 6f 0a 	call	0x14de	; 0x14de <printf>
		clearLeds(0);
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	0e 94 46 01 	call	0x28c	; 0x28c <clearLeds>
     b9a:	c8 01       	movw	r24, r16
     b9c:	8f 58       	subi	r24, 0x8F	; 143
     b9e:	9d 4f       	sbci	r25, 0xFD	; 253
     ba0:	4c 01       	movw	r8, r24
     ba2:	e8 01       	movw	r28, r16
     ba4:	ce 56       	subi	r28, 0x6E	; 110
     ba6:	dd 4f       	sbci	r29, 0xFD	; 253
     ba8:	78 01       	movw	r14, r16
     baa:	9b e0       	ldi	r25, 0x0B	; 11
     bac:	e9 0e       	add	r14, r25
     bae:	f1 1c       	adc	r15, r1
     bb0:	87 01       	movw	r16, r14
     bb2:	0f 58       	subi	r16, 0x8F	; 143
     bb4:	1d 4f       	sbci	r17, 0xFD	; 253
     bb6:	0f 90       	pop	r0
     bb8:	0f 90       	pop	r0
     bba:	0f 90       	pop	r0
     bbc:	0f 90       	pop	r0
		
		for(uint8_t index = 0; index < 11; index++){
			setButtonLed(onledsX[index + ((3-count)*11)], onledsY[index + ((3-count)*11)], 1);
     bbe:	f4 01       	movw	r30, r8
     bc0:	61 91       	ld	r22, Z+
     bc2:	4f 01       	movw	r8, r30
     bc4:	41 e0       	ldi	r20, 0x01	; 1
     bc6:	89 91       	ld	r24, Y+
     bc8:	0e 94 b2 00 	call	0x164	; 0x164 <setButtonLed>
	_delay_ms(650);
	for(uint8_t count = 3; count >= 1; count--){
		printf("%d\n", count);
		clearLeds(0);
		
		for(uint8_t index = 0; index < 11; index++){
     bcc:	80 16       	cp	r8, r16
     bce:	91 06       	cpc	r9, r17
     bd0:	b1 f7       	brne	.-20     	; 0xbbe <Display321+0xe0>
			setButtonLed(onledsX[index + ((3-count)*11)], onledsY[index + ((3-count)*11)], 1);
		}
		playChirp(3-count);
     bd2:	87 2d       	mov	r24, r7
     bd4:	0e 94 63 05 	call	0xac6	; 0xac6 <playChirp>
     bd8:	ff ef       	ldi	r31, 0xFF	; 255
     bda:	23 ed       	ldi	r18, 0xD3	; 211
     bdc:	80 e3       	ldi	r24, 0x30	; 48
     bde:	f1 50       	subi	r31, 0x01	; 1
     be0:	20 40       	sbci	r18, 0x00	; 0
     be2:	80 40       	sbci	r24, 0x00	; 0
     be4:	e1 f7       	brne	.-8      	; 0xbde <Display321+0x100>
     be6:	00 c0       	rjmp	.+0      	; 0xbe8 <Display321+0x10a>
     be8:	00 00       	nop
     bea:	91 e0       	ldi	r25, 0x01	; 1
     bec:	c9 1a       	sub	r12, r25
     bee:	d1 08       	sbc	r13, r1
     bf0:	73 94       	inc	r7
     bf2:	87 01       	movw	r16, r14
		}
	}

	playChirp(2);
	_delay_ms(650);
	for(uint8_t count = 3; count >= 1; count--){
     bf4:	c1 14       	cp	r12, r1
     bf6:	d1 04       	cpc	r13, r1
     bf8:	39 f6       	brne	.-114    	; 0xb88 <Display321+0xaa>
			setButtonLed(onledsX[index + ((3-count)*11)], onledsY[index + ((3-count)*11)], 1);
		}
		playChirp(3-count);
		_delay_ms(1000);
	}
}
     bfa:	df 91       	pop	r29
     bfc:	cf 91       	pop	r28
     bfe:	1f 91       	pop	r17
     c00:	0f 91       	pop	r16
     c02:	ff 90       	pop	r15
     c04:	ef 90       	pop	r14
     c06:	df 90       	pop	r13
     c08:	cf 90       	pop	r12
     c0a:	bf 90       	pop	r11
     c0c:	af 90       	pop	r10
     c0e:	9f 90       	pop	r9
     c10:	8f 90       	pop	r8
     c12:	7f 90       	pop	r7
     c14:	08 95       	ret

00000c16 <Game>:
	if(TimeRemaining > 0){
		TimeRemaining--;
	}
}

void Game(){
     c16:	3f 92       	push	r3
     c18:	4f 92       	push	r4
     c1a:	6f 92       	push	r6
     c1c:	7f 92       	push	r7
     c1e:	8f 92       	push	r8
     c20:	9f 92       	push	r9
     c22:	af 92       	push	r10
     c24:	bf 92       	push	r11
     c26:	cf 92       	push	r12
     c28:	df 92       	push	r13
     c2a:	ef 92       	push	r14
     c2c:	ff 92       	push	r15
     c2e:	0f 93       	push	r16
     c30:	1f 93       	push	r17
     c32:	cf 93       	push	r28
     c34:	df 93       	push	r29

	// game mode is set when leaving attract mode
	Display321();
     c36:	0e 94 6f 05 	call	0xade	; 0xade <Display321>
	printf("GAME START\n");
     c3a:	86 e4       	ldi	r24, 0x46	; 70
     c3c:	91 e0       	ldi	r25, 0x01	; 1
     c3e:	0e 94 85 0a 	call	0x150a	; 0x150a <puts>
	
	P1Score = 0;			// reset scores and multipliers
     c42:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <P1Score+0x1>
     c46:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <P1Score>
	P2Score = 0;
     c4a:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <P2Score+0x1>
     c4e:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <P2Score>
	P1Multiplier = 1;
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <P1Multiplier>
	P2Multiplier = 1;
     c58:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <P2Multiplier>
     c5c:	0f 2e       	mov	r0, r31
     c5e:	f2 ef       	ldi	r31, 0xF2	; 242
     c60:	ef 2e       	mov	r14, r31
     c62:	f2 e0       	ldi	r31, 0x02	; 2
     c64:	ff 2e       	mov	r15, r31
     c66:	f0 2d       	mov	r31, r0
     c68:	0e ed       	ldi	r16, 0xDE	; 222
     c6a:	12 e0       	ldi	r17, 0x02	; 2
     c6c:	cf ee       	ldi	r28, 0xEF	; 239
     c6e:	d2 e0       	ldi	r29, 0x02	; 2

	// pick 6 random leds to enable regardless of mode
	// (3 left side 3 right side)
	for(int i = 0; i < 3; i++){
		gameledsX[i] = rand() % 3;			// turn 3 on right side
     c70:	0f 2e       	mov	r0, r31
     c72:	f3 e0       	ldi	r31, 0x03	; 3
     c74:	cf 2e       	mov	r12, r31
     c76:	d1 2c       	mov	r13, r1
     c78:	f0 2d       	mov	r31, r0
		gameledsY[i] = rand() % 5;
     c7a:	0f 2e       	mov	r0, r31
     c7c:	f5 e0       	ldi	r31, 0x05	; 5
     c7e:	af 2e       	mov	r10, r31
     c80:	b1 2c       	mov	r11, r1
     c82:	f0 2d       	mov	r31, r0
	P2Multiplier = 1;

	// pick 6 random leds to enable regardless of mode
	// (3 left side 3 right side)
	for(int i = 0; i < 3; i++){
		gameledsX[i] = rand() % 3;			// turn 3 on right side
     c84:	0e 94 5f 0a 	call	0x14be	; 0x14be <rand>
     c88:	b6 01       	movw	r22, r12
     c8a:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__divmodhi4>
     c8e:	89 93       	st	Y+, r24
		gameledsY[i] = rand() % 5;
     c90:	0e 94 5f 0a 	call	0x14be	; 0x14be <rand>
     c94:	b5 01       	movw	r22, r10
     c96:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__divmodhi4>
     c9a:	f8 01       	movw	r30, r16
     c9c:	81 93       	st	Z+, r24
     c9e:	8f 01       	movw	r16, r30
		
		gameledsX[i+3] = 3 + rand() % 3;	// turn 3 on left side
     ca0:	0e 94 5f 0a 	call	0x14be	; 0x14be <rand>
     ca4:	b6 01       	movw	r22, r12
     ca6:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__divmodhi4>
     caa:	8d 5f       	subi	r24, 0xFD	; 253
     cac:	8a 83       	std	Y+2, r24	; 0x02
		gameledsY[i+3] = rand() % 5;
     cae:	0e 94 5f 0a 	call	0x14be	; 0x14be <rand>
     cb2:	b5 01       	movw	r22, r10
     cb4:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__divmodhi4>
     cb8:	f8 01       	movw	r30, r16
     cba:	82 83       	std	Z+2, r24	; 0x02
	P1Multiplier = 1;
	P2Multiplier = 1;

	// pick 6 random leds to enable regardless of mode
	// (3 left side 3 right side)
	for(int i = 0; i < 3; i++){
     cbc:	ce 15       	cp	r28, r14
     cbe:	df 05       	cpc	r29, r15
     cc0:	09 f7       	brne	.-62     	; 0xc84 <Game+0x6e>
		gameledsX[i+3] = 3 + rand() % 3;	// turn 3 on left side
		gameledsY[i+3] = rand() % 5;
	}


	TimeRemaining = RoundTime;
     cc2:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <RoundTime>
     cc6:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <TimeRemaining>
	printf("round time %d\n", TimeRemaining);
     cca:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <TimeRemaining>
     cce:	1f 92       	push	r1
     cd0:	8f 93       	push	r24
     cd2:	81 e5       	ldi	r24, 0x51	; 81
     cd4:	91 e0       	ldi	r25, 0x01	; 1
     cd6:	9f 93       	push	r25
     cd8:	8f 93       	push	r24
     cda:	0e 94 6f 0a 	call	0x14de	; 0x14de <printf>
	TCNT4 = 0;					// reset timer
     cde:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7e00a5>
     ce2:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7e00a4>
	TCCR4B |= (0b101 << CS40);	// enable timer 0 (game timer)
     ce6:	e1 ea       	ldi	r30, 0xA1	; 161
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	85 60       	ori	r24, 0x05	; 5
     cee:	80 83       	st	Z, r24
	
	setScore(0, HighScore1P);	// will be replaced if 2p mode
     cf0:	60 91 e8 02 	lds	r22, 0x02E8	; 0x8002e8 <HighScore1P>
     cf4:	70 91 e9 02 	lds	r23, 0x02E9	; 0x8002e9 <HighScore1P+0x1>
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
	printf("time remaining %d\n", TimeRemaining);
     cfe:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <TimeRemaining>
     d02:	1f 92       	push	r1
     d04:	8f 93       	push	r24
     d06:	80 e6       	ldi	r24, 0x60	; 96
     d08:	91 e0       	ldi	r25, 0x01	; 1
     d0a:	9f 93       	push	r25
     d0c:	8f 93       	push	r24
     d0e:	0e 94 6f 0a 	call	0x14de	; 0x14de <printf>
	while(TimeRemaining > 0){
     d12:	8d b7       	in	r24, 0x3d	; 61
     d14:	9e b7       	in	r25, 0x3e	; 62
     d16:	08 96       	adiw	r24, 0x08	; 8
     d18:	0f b6       	in	r0, 0x3f	; 63
     d1a:	f8 94       	cli
     d1c:	9e bf       	out	0x3e, r25	; 62
     d1e:	0f be       	out	0x3f, r0	; 63
     d20:	8d bf       	out	0x3d, r24	; 61
				do{		// move led to random DIFFERENT spot
					printf("bad\n");
					if(i >= 3){
							gameledsX[i] = 3 + rand() % 3;
						}else{
							gameledsX[i] = rand() % 3;
     d22:	0f 2e       	mov	r0, r31
     d24:	f3 e0       	ldi	r31, 0x03	; 3
     d26:	ef 2e       	mov	r14, r31
     d28:	f1 2c       	mov	r15, r1
     d2a:	f0 2d       	mov	r31, r0
					}
					gameledsY[i] = 1 + (rand() % 5);
     d2c:	0f 2e       	mov	r0, r31
     d2e:	f5 e0       	ldi	r31, 0x05	; 5
     d30:	8f 2e       	mov	r8, r31
     d32:	91 2c       	mov	r9, r1
     d34:	f0 2d       	mov	r31, r0
	TCNT4 = 0;					// reset timer
	TCCR4B |= (0b101 << CS40);	// enable timer 0 (game timer)
	
	setScore(0, HighScore1P);	// will be replaced if 2p mode
	printf("time remaining %d\n", TimeRemaining);
	while(TimeRemaining > 0){
     d36:	c8 c0       	rjmp	.+400    	; 0xec8 <Game+0x2b2>

		printf("%ds REMAINING\n", TimeRemaining);
     d38:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <TimeRemaining>
     d3c:	1f 92       	push	r1
     d3e:	8f 93       	push	r24
     d40:	e3 e7       	ldi	r30, 0x73	; 115
     d42:	f1 e0       	ldi	r31, 0x01	; 1
     d44:	ff 93       	push	r31
     d46:	ef 93       	push	r30
     d48:	0e 94 6f 0a 	call	0x14de	; 0x14de <printf>
		
		setScore(1, TimeRemaining);
     d4c:	60 91 e7 02 	lds	r22, 0x02E7	; 0x8002e7 <TimeRemaining>
     d50:	70 e0       	ldi	r23, 0x00	; 0
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
		if(GameMode == 1){
     d58:	0f 90       	pop	r0
     d5a:	0f 90       	pop	r0
     d5c:	0f 90       	pop	r0
     d5e:	0f 90       	pop	r0
     d60:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <GameMode>
     d64:	81 30       	cpi	r24, 0x01	; 1
     d66:	79 f4       	brne	.+30     	; 0xd86 <Game+0x170>
			setScore(0, P1Score);	// if 2p mode, show left p1 and right p2 scores
     d68:	60 91 ea 02 	lds	r22, 0x02EA	; 0x8002ea <P1Score>
     d6c:	70 91 eb 02 	lds	r23, 0x02EB	; 0x8002eb <P1Score+0x1>
     d70:	80 e0       	ldi	r24, 0x00	; 0
     d72:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
			setScore(2, P2Score);
     d76:	60 91 ec 02 	lds	r22, 0x02EC	; 0x8002ec <P2Score>
     d7a:	70 91 ed 02 	lds	r23, 0x02ED	; 0x8002ed <P2Score+0x1>
     d7e:	82 e0       	ldi	r24, 0x02	; 2
     d80:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
     d84:	af c0       	rjmp	.+350    	; 0xee4 <Game+0x2ce>
			}else{
			setScore(2, P1Score);	// otherwise show p1 score and high score
     d86:	60 91 ea 02 	lds	r22, 0x02EA	; 0x8002ea <P1Score>
     d8a:	70 91 eb 02 	lds	r23, 0x02EB	; 0x8002eb <P1Score+0x1>
     d8e:	82 e0       	ldi	r24, 0x02	; 2
     d90:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
     d94:	a7 c0       	rjmp	.+334    	; 0xee4 <Game+0x2ce>
     d96:	36 01       	movw	r6, r12
     d98:	e5 01       	movw	r28, r10
		}

		for(uint8_t i = 0; i < 6; i++){
			if (isButtonDown(gameledsX[i], gameledsY[i]) ){
     d9a:	f6 01       	movw	r30, r12
     d9c:	60 81       	ld	r22, Z
     d9e:	88 81       	ld	r24, Y
     da0:	0e 94 a4 00 	call	0x148	; 0x148 <isButtonDown>
     da4:	88 23       	and	r24, r24
     da6:	09 f4       	brne	.+2      	; 0xdaa <Game+0x194>
     da8:	67 c0       	rjmp	.+206    	; 0xe78 <Game+0x262>

				uint8_t oldX = gameledsX[i];
     daa:	48 80       	ld	r4, Y
				uint8_t oldY = gameledsY[i];
     dac:	f6 01       	movw	r30, r12
     dae:	30 80       	ld	r3, Z

				do{		// move led to random DIFFERENT spot
					printf("bad\n");
     db0:	82 e8       	ldi	r24, 0x82	; 130
     db2:	91 e0       	ldi	r25, 0x01	; 1
     db4:	0e 94 85 0a 	call	0x150a	; 0x150a <puts>
					if(i >= 3){
     db8:	13 30       	cpi	r17, 0x03	; 3
     dba:	40 f0       	brcs	.+16     	; 0xdcc <Game+0x1b6>
							gameledsX[i] = 3 + rand() % 3;
     dbc:	0e 94 5f 0a 	call	0x14be	; 0x14be <rand>
     dc0:	b7 01       	movw	r22, r14
     dc2:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__divmodhi4>
     dc6:	8d 5f       	subi	r24, 0xFD	; 253
     dc8:	88 83       	st	Y, r24
     dca:	06 c0       	rjmp	.+12     	; 0xdd8 <Game+0x1c2>
						}else{
							gameledsX[i] = rand() % 3;
     dcc:	0e 94 5f 0a 	call	0x14be	; 0x14be <rand>
     dd0:	b7 01       	movw	r22, r14
     dd2:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__divmodhi4>
     dd6:	88 83       	st	Y, r24
					}
					gameledsY[i] = 1 + (rand() % 5);
     dd8:	0e 94 5f 0a 	call	0x14be	; 0x14be <rand>
     ddc:	b4 01       	movw	r22, r8
     dde:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__divmodhi4>
     de2:	8f 5f       	subi	r24, 0xFF	; 255
     de4:	f3 01       	movw	r30, r6
     de6:	80 83       	st	Z, r24

				}while((gameledsX[i] == oldX) && (gameledsY[i] == oldY));
     de8:	98 81       	ld	r25, Y
     dea:	49 12       	cpse	r4, r25
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <Game+0x1dc>
     dee:	38 16       	cp	r3, r24
     df0:	f9 f2       	breq	.-66     	; 0xdb0 <Game+0x19a>


				if(GameMode == 0){
     df2:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <GameMode>
     df6:	81 11       	cpse	r24, r1
     df8:	14 c0       	rjmp	.+40     	; 0xe22 <Game+0x20c>
					IncrementScore(0, P1Multiplier);	// add score and inc multiplier (singleplayer)
     dfa:	60 91 da 02 	lds	r22, 0x02DA	; 0x8002da <P1Multiplier>
     dfe:	70 e0       	ldi	r23, 0x00	; 0
     e00:	0e 94 7d 04 	call	0x8fa	; 0x8fa <IncrementScore>
					playChirp(P1Multiplier);
     e04:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <P1Multiplier>
     e08:	0e 94 63 05 	call	0xac6	; 0xac6 <playChirp>
					P1Multiplier = (P1Multiplier == MultiplierMax) ? MultiplierMax : (P1Multiplier + 1);
     e0c:	90 91 da 02 	lds	r25, 0x02DA	; 0x8002da <P1Multiplier>
     e10:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <MultiplierMax>
     e14:	98 17       	cp	r25, r24
     e16:	11 f0       	breq	.+4      	; 0xe1c <Game+0x206>
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	89 0f       	add	r24, r25
     e1c:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <P1Multiplier>
     e20:	2b c0       	rjmp	.+86     	; 0xe78 <Game+0x262>
					}else{
					if(i >= 3){
     e22:	13 30       	cpi	r17, 0x03	; 3
     e24:	a8 f0       	brcs	.+42     	; 0xe50 <Game+0x23a>
						IncrementScore(1, P2Multiplier);	// add depending on side of button pressed
     e26:	60 91 d9 02 	lds	r22, 0x02D9	; 0x8002d9 <P2Multiplier>
     e2a:	70 e0       	ldi	r23, 0x00	; 0
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	0e 94 7d 04 	call	0x8fa	; 0x8fa <IncrementScore>
						playChirp(P2Multiplier);
     e32:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <P2Multiplier>
     e36:	0e 94 63 05 	call	0xac6	; 0xac6 <playChirp>
						P2Multiplier = (P2Multiplier == MultiplierMax) ? MultiplierMax : (P2Multiplier + 1);
     e3a:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <P2Multiplier>
     e3e:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <MultiplierMax>
     e42:	98 17       	cp	r25, r24
     e44:	11 f0       	breq	.+4      	; 0xe4a <Game+0x234>
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	89 0f       	add	r24, r25
     e4a:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <P2Multiplier>
     e4e:	14 c0       	rjmp	.+40     	; 0xe78 <Game+0x262>
						}else{
						IncrementScore(0, P1Multiplier);
     e50:	60 91 da 02 	lds	r22, 0x02DA	; 0x8002da <P1Multiplier>
     e54:	70 e0       	ldi	r23, 0x00	; 0
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	0e 94 7d 04 	call	0x8fa	; 0x8fa <IncrementScore>
						playChirp(P1Multiplier);
     e5c:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <P1Multiplier>
     e60:	0e 94 63 05 	call	0xac6	; 0xac6 <playChirp>
						P1Multiplier = (P1Multiplier == MultiplierMax) ? MultiplierMax : (P1Multiplier + 1);
     e64:	90 91 da 02 	lds	r25, 0x02DA	; 0x8002da <P1Multiplier>
     e68:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <MultiplierMax>
     e6c:	98 17       	cp	r25, r24
     e6e:	11 f0       	breq	.+4      	; 0xe74 <Game+0x25e>
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	89 0f       	add	r24, r25
     e74:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <P1Multiplier>
			setScore(2, P2Score);
			}else{
			setScore(2, P1Score);	// otherwise show p1 score and high score
		}

		for(uint8_t i = 0; i < 6; i++){
     e78:	1f 5f       	subi	r17, 0xFF	; 255
     e7a:	ff ef       	ldi	r31, 0xFF	; 255
     e7c:	cf 1a       	sub	r12, r31
     e7e:	df 0a       	sbc	r13, r31
     e80:	2f ef       	ldi	r18, 0xFF	; 255
     e82:	a2 1a       	sub	r10, r18
     e84:	b2 0a       	sbc	r11, r18
     e86:	16 30       	cpi	r17, 0x06	; 6
     e88:	09 f0       	breq	.+2      	; 0xe8c <Game+0x276>
     e8a:	85 cf       	rjmp	.-246    	; 0xd96 <Game+0x180>

			}
		}
		
		
		if (P1Multiplier > 1){
     e8c:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <P1Multiplier>
     e90:	82 30       	cpi	r24, 0x02	; 2
     e92:	10 f0       	brcs	.+4      	; 0xe98 <Game+0x282>
			if ( (P1MultTimeS + MultiplierDecaySeconds) <= TimeRemaining){
     e94:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <TimeRemaining>
				if(P1MultTimeT < MultiplierDecayTicks){	// TODO INCORPORATE TICK OFFSET
					P1Multiplier--;
				}
			}
		}
		if (P2Multiplier > 1){
     e98:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <P2Multiplier>
     e9c:	82 30       	cpi	r24, 0x02	; 2
     e9e:	10 f0       	brcs	.+4      	; 0xea4 <Game+0x28e>
			if ( (P2MultTimeS + MultiplierDecaySeconds) <= TimeRemaining){
     ea0:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <TimeRemaining>
				}
			}
		}
		
		
		clearLeds(0);
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	0e 94 46 01 	call	0x28c	; 0x28c <clearLeds>
     eaa:	cf ee       	ldi	r28, 0xEF	; 239
     eac:	d2 e0       	ldi	r29, 0x02	; 2
     eae:	0e ed       	ldi	r16, 0xDE	; 222
     eb0:	12 e0       	ldi	r17, 0x02	; 2
		for(uint8_t ledIndex = 0; ledIndex < 6; ledIndex++){
			setButtonLed(gameledsX[ledIndex], gameledsY[ledIndex], 1);
     eb2:	f8 01       	movw	r30, r16
     eb4:	61 91       	ld	r22, Z+
     eb6:	8f 01       	movw	r16, r30
     eb8:	41 e0       	ldi	r20, 0x01	; 1
     eba:	89 91       	ld	r24, Y+
     ebc:	0e 94 b2 00 	call	0x164	; 0x164 <setButtonLed>
			}
		}
		
		
		clearLeds(0);
		for(uint8_t ledIndex = 0; ledIndex < 6; ledIndex++){
     ec0:	f2 e0       	ldi	r31, 0x02	; 2
     ec2:	04 3e       	cpi	r16, 0xE4	; 228
     ec4:	1f 07       	cpc	r17, r31
     ec6:	a9 f7       	brne	.-22     	; 0xeb2 <Game+0x29c>
	TCNT4 = 0;					// reset timer
	TCCR4B |= (0b101 << CS40);	// enable timer 0 (game timer)
	
	setScore(0, HighScore1P);	// will be replaced if 2p mode
	printf("time remaining %d\n", TimeRemaining);
	while(TimeRemaining > 0){
     ec8:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <TimeRemaining>
     ecc:	81 11       	cpse	r24, r1
     ece:	34 cf       	rjmp	.-408    	; 0xd38 <Game+0x122>
		}
		
		//_delay_ms(50);	// TODO maybe change this later

	}
	printf("GAMa ovar\n");
     ed0:	86 e8       	ldi	r24, 0x86	; 134
     ed2:	91 e0       	ldi	r25, 0x01	; 1
     ed4:	0e 94 85 0a 	call	0x150a	; 0x150a <puts>
	// game is over, stop timer
	TCCR4B &= ~(0b111 << CS40);
     ed8:	e1 ea       	ldi	r30, 0xA1	; 161
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	88 7f       	andi	r24, 0xF8	; 248
     ee0:	80 83       	st	Z, r24
	
}
     ee2:	0e c0       	rjmp	.+28     	; 0xf00 <Game+0x2ea>
	printf("GAME START\n");
	
	P1Score = 0;			// reset scores and multipliers
	P2Score = 0;
	P1Multiplier = 1;
	P2Multiplier = 1;
     ee4:	0f 2e       	mov	r0, r31
     ee6:	ff ee       	ldi	r31, 0xEF	; 239
     ee8:	af 2e       	mov	r10, r31
     eea:	f2 e0       	ldi	r31, 0x02	; 2
     eec:	bf 2e       	mov	r11, r31
     eee:	f0 2d       	mov	r31, r0
     ef0:	0f 2e       	mov	r0, r31
     ef2:	fe ed       	ldi	r31, 0xDE	; 222
     ef4:	cf 2e       	mov	r12, r31
     ef6:	f2 e0       	ldi	r31, 0x02	; 2
     ef8:	df 2e       	mov	r13, r31
     efa:	f0 2d       	mov	r31, r0
     efc:	10 e0       	ldi	r17, 0x00	; 0
     efe:	4b cf       	rjmp	.-362    	; 0xd96 <Game+0x180>
	}
	printf("GAMa ovar\n");
	// game is over, stop timer
	TCCR4B &= ~(0b111 << CS40);
	
}
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28
     f04:	1f 91       	pop	r17
     f06:	0f 91       	pop	r16
     f08:	ff 90       	pop	r15
     f0a:	ef 90       	pop	r14
     f0c:	df 90       	pop	r13
     f0e:	cf 90       	pop	r12
     f10:	bf 90       	pop	r11
     f12:	af 90       	pop	r10
     f14:	9f 90       	pop	r9
     f16:	8f 90       	pop	r8
     f18:	7f 90       	pop	r7
     f1a:	6f 90       	pop	r6
     f1c:	4f 90       	pop	r4
     f1e:	3f 90       	pop	r3
     f20:	08 95       	ret

00000f22 <AttractCheckGameStart>:
	beep_index = tone;
	note_index = 0;
	TCCR0B = (0b101 << CS00);	//turn on clock for speaker
}

uint8_t AttractCheckGameStart(uint16_t count){
     f22:	0f 93       	push	r16
     f24:	1f 93       	push	r17
     f26:	cf 93       	push	r28
     f28:	df 93       	push	r29
	// pauses some time while checking player button inputs, skip and start game if pressed
	for(uint16_t delayCount = 0; delayCount < count; delayCount++){
     f2a:	00 97       	sbiw	r24, 0x00	; 0
     f2c:	51 f1       	breq	.+84     	; 0xf82 <AttractCheckGameStart+0x60>
     f2e:	8c 01       	movw	r16, r24
     f30:	c0 e0       	ldi	r28, 0x00	; 0
     f32:	d0 e0       	ldi	r29, 0x00	; 0
		//delay some ms between each button light and check for game start
		if(isButtonDown(Player1ButtonX, Player1ButtonY) || isButtonDown(Player2ButtonX, Player2ButtonY)){
     f34:	60 e0       	ldi	r22, 0x00	; 0
     f36:	83 e0       	ldi	r24, 0x03	; 3
     f38:	0e 94 a4 00 	call	0x148	; 0x148 <isButtonDown>
     f3c:	81 11       	cpse	r24, r1
     f3e:	06 c0       	rjmp	.+12     	; 0xf4c <AttractCheckGameStart+0x2a>
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	82 e0       	ldi	r24, 0x02	; 2
     f44:	0e 94 a4 00 	call	0x148	; 0x148 <isButtonDown>
     f48:	88 23       	and	r24, r24
     f4a:	b1 f0       	breq	.+44     	; 0xf78 <AttractCheckGameStart+0x56>
			GameMode = isButtonDown(Player2ButtonX, Player2ButtonY);
     f4c:	60 e0       	ldi	r22, 0x00	; 0
     f4e:	82 e0       	ldi	r24, 0x02	; 2
     f50:	0e 94 a4 00 	call	0x148	; 0x148 <isButtonDown>
     f54:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <GameMode>
			printf("STARTING %dP mode\n", GameMode+1);
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	01 96       	adiw	r24, 0x01	; 1
     f5c:	9f 93       	push	r25
     f5e:	8f 93       	push	r24
     f60:	80 e9       	ldi	r24, 0x90	; 144
     f62:	91 e0       	ldi	r25, 0x01	; 1
     f64:	9f 93       	push	r25
     f66:	8f 93       	push	r24
     f68:	0e 94 6f 0a 	call	0x14de	; 0x14de <printf>
			return 1;	// instantly return and quit waiting
     f6c:	0f 90       	pop	r0
     f6e:	0f 90       	pop	r0
     f70:	0f 90       	pop	r0
     f72:	0f 90       	pop	r0
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	06 c0       	rjmp	.+12     	; 0xf84 <AttractCheckGameStart+0x62>
	TCCR0B = (0b101 << CS00);	//turn on clock for speaker
}

uint8_t AttractCheckGameStart(uint16_t count){
	// pauses some time while checking player button inputs, skip and start game if pressed
	for(uint16_t delayCount = 0; delayCount < count; delayCount++){
     f78:	21 96       	adiw	r28, 0x01	; 1
     f7a:	0c 17       	cp	r16, r28
     f7c:	1d 07       	cpc	r17, r29
     f7e:	d1 f6       	brne	.-76     	; 0xf34 <AttractCheckGameStart+0x12>
     f80:	01 c0       	rjmp	.+2      	; 0xf84 <AttractCheckGameStart+0x62>
			GameMode = isButtonDown(Player2ButtonX, Player2ButtonY);
			printf("STARTING %dP mode\n", GameMode+1);
			return 1;	// instantly return and quit waiting
		}
	}
	return 0;	// return that it finished without button presses
     f82:	80 e0       	ldi	r24, 0x00	; 0
}
     f84:	df 91       	pop	r29
     f86:	cf 91       	pop	r28
     f88:	1f 91       	pop	r17
     f8a:	0f 91       	pop	r16
     f8c:	08 95       	ret

00000f8e <Attractive>:
	
	setScore(1, 0); // TODO MAKE DASHES

}

void Attractive(){
     f8e:	cf 92       	push	r12
     f90:	df 92       	push	r13
     f92:	ff 92       	push	r15
     f94:	0f 93       	push	r16
     f96:	1f 93       	push	r17
     f98:	cf 93       	push	r28
     f9a:	df 93       	push	r29
	setScore(0, HighScore1P);
     f9c:	60 91 e8 02 	lds	r22, 0x02E8	; 0x8002e8 <HighScore1P>
     fa0:	70 91 e9 02 	lds	r23, 0x02E9	; 0x8002e9 <HighScore1P+0x1>
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
	setScore(1, 0);			// TODO MAKE DASHES AND FLASH "1P" on left and "2P" on right
     faa:	60 e0       	ldi	r22, 0x00	; 0
     fac:	70 e0       	ldi	r23, 0x00	; 0
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
	setScore(0, HighScore2P);
     fb4:	60 91 f8 02 	lds	r22, 0x02F8	; 0x8002f8 <HighScore2P>
     fb8:	70 91 f9 02 	lds	r23, 0x02F9	; 0x8002f9 <HighScore2P+0x1>
     fbc:	80 e0       	ldi	r24, 0x00	; 0
     fbe:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
	while(1){
		uint8_t blinkyMode = rand() % AttractPatternCount;	// todo make random, ADD DISPLAY BLANKING
     fc2:	0e 94 5f 0a 	call	0x14be	; 0x14be <rand>
		switch(blinkyMode){	// multiple blinky modes (todo randomly pick one)
			case 0:
				while(1){
					for(uint8_t y = 1; y < 6; y++){
						for(uint8_t x = 0; x < 6; x++){
							setButtonLed( (y%2)==0 ? x : (5-x) ,y,1);
     fc6:	0f 2e       	mov	r0, r31
     fc8:	f5 e0       	ldi	r31, 0x05	; 5
     fca:	ff 2e       	mov	r15, r31
     fcc:	f0 2d       	mov	r31, r0
     fce:	68 94       	set
     fd0:	cc 24       	eor	r12, r12
     fd2:	c1 f8       	bld	r12, 1
     fd4:	d1 2c       	mov	r13, r1
	while(1){
		uint8_t blinkyMode = rand() % AttractPatternCount;	// todo make random, ADD DISPLAY BLANKING
		switch(blinkyMode){	// multiple blinky modes (todo randomly pick one)
			case 0:
				while(1){
					for(uint8_t y = 1; y < 6; y++){
     fd6:	11 e0       	ldi	r17, 0x01	; 1
     fd8:	2e c0       	rjmp	.+92     	; 0x1036 <Attractive+0xa8>
						for(uint8_t x = 0; x < 6; x++){
							setButtonLed( (y%2)==0 ? x : (5-x) ,y,1);
     fda:	0d 2f       	mov	r16, r29
     fdc:	dd 23       	and	r29, r29
     fde:	19 f0       	breq	.+6      	; 0xfe6 <Attractive+0x58>
     fe0:	8f 2d       	mov	r24, r15
     fe2:	8c 1b       	sub	r24, r28
     fe4:	01 c0       	rjmp	.+2      	; 0xfe8 <Attractive+0x5a>
     fe6:	8c 2f       	mov	r24, r28
     fe8:	41 e0       	ldi	r20, 0x01	; 1
     fea:	61 2f       	mov	r22, r17
     fec:	0e 94 b2 00 	call	0x164	; 0x164 <setButtonLed>
							if( AttractCheckGameStart(10000) ){
     ff0:	80 e1       	ldi	r24, 0x10	; 16
     ff2:	97 e2       	ldi	r25, 0x27	; 39
     ff4:	0e 94 91 07 	call	0xf22	; 0xf22 <AttractCheckGameStart>
     ff8:	81 11       	cpse	r24, r1
     ffa:	59 c0       	rjmp	.+178    	; 0x10ae <Attractive+0x120>
		uint8_t blinkyMode = rand() % AttractPatternCount;	// todo make random, ADD DISPLAY BLANKING
		switch(blinkyMode){	// multiple blinky modes (todo randomly pick one)
			case 0:
				while(1){
					for(uint8_t y = 1; y < 6; y++){
						for(uint8_t x = 0; x < 6; x++){
     ffc:	cf 5f       	subi	r28, 0xFF	; 255
     ffe:	c6 30       	cpi	r28, 0x06	; 6
    1000:	61 f7       	brne	.-40     	; 0xfda <Attractive+0x4c>
							if( AttractCheckGameStart(10000) ){
								
								goto EndAttract;
							}
						}
						setButtonLed(Player1ButtonX, Player1ButtonY, y%2);
    1002:	40 2f       	mov	r20, r16
    1004:	60 e0       	ldi	r22, 0x00	; 0
    1006:	83 e0       	ldi	r24, 0x03	; 3
    1008:	0e 94 b2 00 	call	0x164	; 0x164 <setButtonLed>
						setButtonLed(Player2ButtonX, Player2ButtonY, (y+1) % 2);
    100c:	a6 01       	movw	r20, r12
    100e:	41 70       	andi	r20, 0x01	; 1
    1010:	50 78       	andi	r21, 0x80	; 128
    1012:	55 23       	and	r21, r21
    1014:	34 f4       	brge	.+12     	; 0x1022 <Attractive+0x94>
    1016:	41 50       	subi	r20, 0x01	; 1
    1018:	51 09       	sbc	r21, r1
    101a:	4e 6f       	ori	r20, 0xFE	; 254
    101c:	5f 6f       	ori	r21, 0xFF	; 255
    101e:	4f 5f       	subi	r20, 0xFF	; 255
    1020:	5f 4f       	sbci	r21, 0xFF	; 255
    1022:	60 e0       	ldi	r22, 0x00	; 0
    1024:	82 e0       	ldi	r24, 0x02	; 2
    1026:	0e 94 b2 00 	call	0x164	; 0x164 <setButtonLed>
	while(1){
		uint8_t blinkyMode = rand() % AttractPatternCount;	// todo make random, ADD DISPLAY BLANKING
		switch(blinkyMode){	// multiple blinky modes (todo randomly pick one)
			case 0:
				while(1){
					for(uint8_t y = 1; y < 6; y++){
    102a:	1f 5f       	subi	r17, 0xFF	; 255
    102c:	8f ef       	ldi	r24, 0xFF	; 255
    102e:	c8 1a       	sub	r12, r24
    1030:	d8 0a       	sbc	r13, r24
    1032:	16 30       	cpi	r17, 0x06	; 6
    1034:	99 f1       	breq	.+102    	; 0x109c <Attractive+0x10e>
	
	setScore(1, 0); // TODO MAKE DASHES

}

void Attractive(){
    1036:	c0 e0       	ldi	r28, 0x00	; 0
		switch(blinkyMode){	// multiple blinky modes (todo randomly pick one)
			case 0:
				while(1){
					for(uint8_t y = 1; y < 6; y++){
						for(uint8_t x = 0; x < 6; x++){
							setButtonLed( (y%2)==0 ? x : (5-x) ,y,1);
    1038:	d1 2f       	mov	r29, r17
    103a:	d1 70       	andi	r29, 0x01	; 1
    103c:	ce cf       	rjmp	.-100    	; 0xfda <Attractive+0x4c>
						setButtonLed(Player1ButtonX, Player1ButtonY, y%2);
						setButtonLed(Player2ButtonX, Player2ButtonY, (y+1) % 2);
					}
					for(uint8_t y = 1; y < 6; y++){
						for(uint8_t x = 0; x < 6; x++){
							setButtonLed( (y%2)==0 ? x : (5-x) ,y,0);
    103e:	0d 2f       	mov	r16, r29
    1040:	dd 23       	and	r29, r29
    1042:	19 f0       	breq	.+6      	; 0x104a <Attractive+0xbc>
    1044:	8f 2d       	mov	r24, r15
    1046:	8c 1b       	sub	r24, r28
    1048:	01 c0       	rjmp	.+2      	; 0x104c <Attractive+0xbe>
    104a:	8c 2f       	mov	r24, r28
    104c:	40 e0       	ldi	r20, 0x00	; 0
    104e:	61 2f       	mov	r22, r17
    1050:	0e 94 b2 00 	call	0x164	; 0x164 <setButtonLed>
							if( AttractCheckGameStart(10000) ){
    1054:	80 e1       	ldi	r24, 0x10	; 16
    1056:	97 e2       	ldi	r25, 0x27	; 39
    1058:	0e 94 91 07 	call	0xf22	; 0xf22 <AttractCheckGameStart>
    105c:	81 11       	cpse	r24, r1
    105e:	27 c0       	rjmp	.+78     	; 0x10ae <Attractive+0x120>
						}
						setButtonLed(Player1ButtonX, Player1ButtonY, y%2);
						setButtonLed(Player2ButtonX, Player2ButtonY, (y+1) % 2);
					}
					for(uint8_t y = 1; y < 6; y++){
						for(uint8_t x = 0; x < 6; x++){
    1060:	cf 5f       	subi	r28, 0xFF	; 255
    1062:	c6 30       	cpi	r28, 0x06	; 6
    1064:	61 f7       	brne	.-40     	; 0x103e <Attractive+0xb0>
							if( AttractCheckGameStart(10000) ){
								
								goto EndAttract;
							}
						}
						setButtonLed(Player1ButtonX, Player1ButtonY, (y+1)%2);
    1066:	a6 01       	movw	r20, r12
    1068:	41 70       	andi	r20, 0x01	; 1
    106a:	50 78       	andi	r21, 0x80	; 128
    106c:	55 23       	and	r21, r21
    106e:	34 f4       	brge	.+12     	; 0x107c <Attractive+0xee>
    1070:	41 50       	subi	r20, 0x01	; 1
    1072:	51 09       	sbc	r21, r1
    1074:	4e 6f       	ori	r20, 0xFE	; 254
    1076:	5f 6f       	ori	r21, 0xFF	; 255
    1078:	4f 5f       	subi	r20, 0xFF	; 255
    107a:	5f 4f       	sbci	r21, 0xFF	; 255
    107c:	60 e0       	ldi	r22, 0x00	; 0
    107e:	83 e0       	ldi	r24, 0x03	; 3
    1080:	0e 94 b2 00 	call	0x164	; 0x164 <setButtonLed>
						setButtonLed(Player2ButtonX, Player2ButtonY,(y) % 2);
    1084:	40 2f       	mov	r20, r16
    1086:	60 e0       	ldi	r22, 0x00	; 0
    1088:	82 e0       	ldi	r24, 0x02	; 2
    108a:	0e 94 b2 00 	call	0x164	; 0x164 <setButtonLed>
							}
						}
						setButtonLed(Player1ButtonX, Player1ButtonY, y%2);
						setButtonLed(Player2ButtonX, Player2ButtonY, (y+1) % 2);
					}
					for(uint8_t y = 1; y < 6; y++){
    108e:	1f 5f       	subi	r17, 0xFF	; 255
    1090:	8f ef       	ldi	r24, 0xFF	; 255
    1092:	c8 1a       	sub	r12, r24
    1094:	d8 0a       	sbc	r13, r24
    1096:	16 30       	cpi	r17, 0x06	; 6
    1098:	31 f4       	brne	.+12     	; 0x10a6 <Attractive+0x118>
    109a:	99 cf       	rjmp	.-206    	; 0xfce <Attractive+0x40>
    109c:	68 94       	set
    109e:	cc 24       	eor	r12, r12
    10a0:	c1 f8       	bld	r12, 1
    10a2:	d1 2c       	mov	r13, r1
    10a4:	11 e0       	ldi	r17, 0x01	; 1
	while(1){
		uint8_t blinkyMode = rand() % AttractPatternCount;	// todo make random, ADD DISPLAY BLANKING
		switch(blinkyMode){	// multiple blinky modes (todo randomly pick one)
			case 0:
				while(1){
					for(uint8_t y = 1; y < 6; y++){
    10a6:	c0 e0       	ldi	r28, 0x00	; 0
						setButtonLed(Player1ButtonX, Player1ButtonY, y%2);
						setButtonLed(Player2ButtonX, Player2ButtonY, (y+1) % 2);
					}
					for(uint8_t y = 1; y < 6; y++){
						for(uint8_t x = 0; x < 6; x++){
							setButtonLed( (y%2)==0 ? x : (5-x) ,y,0);
    10a8:	d1 2f       	mov	r29, r17
    10aa:	d1 70       	andi	r29, 0x01	; 1
    10ac:	c8 cf       	rjmp	.-112    	; 0x103e <Attractive+0xb0>
		}
	}
	EndAttract:
	return;		// start the game

}
    10ae:	df 91       	pop	r29
    10b0:	cf 91       	pop	r28
    10b2:	1f 91       	pop	r17
    10b4:	0f 91       	pop	r16
    10b6:	ff 90       	pop	r15
    10b8:	df 90       	pop	r13
    10ba:	cf 90       	pop	r12
    10bc:	08 95       	ret

000010be <EEPROM_write>:


void EEPROM_write(uint16_t uiAddress, uint8_t ucData)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
    10be:	f9 99       	sbic	0x1f, 1	; 31
    10c0:	fe cf       	rjmp	.-4      	; 0x10be <EEPROM_write>
	;
	/* Set up address and Data Registers */
	EEAR = uiAddress;
    10c2:	92 bd       	out	0x22, r25	; 34
    10c4:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
    10c6:	60 bd       	out	0x20, r22	; 32
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMPE);
    10c8:	fa 9a       	sbi	0x1f, 2	; 31
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEPE);
    10ca:	f9 9a       	sbi	0x1f, 1	; 31
    10cc:	08 95       	ret

000010ce <EEPROM_read>:
}

uint8_t EEPROM_read(uint16_t uiAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
    10ce:	f9 99       	sbic	0x1f, 1	; 31
    10d0:	fe cf       	rjmp	.-4      	; 0x10ce <EEPROM_read>
	;
	/* Set up address register */
	EEAR = uiAddress;
    10d2:	92 bd       	out	0x22, r25	; 34
    10d4:	81 bd       	out	0x21, r24	; 33
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
    10d6:	f8 9a       	sbi	0x1f, 0	; 31
	/* Return data from Data Register */
	return EEDR;
    10d8:	80 b5       	in	r24, 0x20	; 32
}
    10da:	08 95       	ret

000010dc <main>:
	UBRR0L = 51;
}

int main(void)
{
	usbQcInit();
    10dc:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <usbQcInit>
	QCset12V();
    10e0:	0e 94 d7 09 	call	0x13ae	; 0x13ae <QCset12V>
	
	buttonsInit();
    10e4:	0e 94 98 00 	call	0x130	; 0x130 <buttonsInit>
	init_uart();
    10e8:	0e 94 92 02 	call	0x524	; 0x524 <init_uart>
	stdout = &mystdout;
    10ec:	89 e1       	ldi	r24, 0x19	; 25
    10ee:	91 e0       	ldi	r25, 0x01	; 1
    10f0:	90 93 fe 02 	sts	0x02FE, r25	; 0x8002fe <__iob+0x3>
    10f4:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <__iob+0x2>
	printf("\n\nWelcome to bartending robot OS ver 4.7B\n");
    10f8:	83 ea       	ldi	r24, 0xA3	; 163
    10fa:	91 e0       	ldi	r25, 0x01	; 1
    10fc:	0e 94 85 0a 	call	0x150a	; 0x150a <puts>
	
	sei();
    1100:	78 94       	sei
		setScoreSegment(6, 0x11);
		_delay_ms(100);
	}*/
	
	// initialize timer0 for audio circuit
	DDRB |= (1 << DDB1) | (1 << DDB5); // output speaker pin B1
    1102:	84 b1       	in	r24, 0x04	; 4
    1104:	82 62       	ori	r24, 0x22	; 34
    1106:	84 b9       	out	0x04, r24	; 4
	ICR1 = 0;	// TOP of counter, start OFF
    1108:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    110c:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	OCR1A = 0; //0x1FFF;	// OFF at
    1110:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1114:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TCCR1A |= (1 << COM1A1) | (1 << WGM11); //|(0 << COM1B1);
    1118:	e0 e8       	ldi	r30, 0x80	; 128
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	82 68       	ori	r24, 0x82	; 130
    1120:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12 ) | (1 << WGM13) | (1 << CS41);
    1122:	e1 e8       	ldi	r30, 0x81	; 129
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	8a 61       	ori	r24, 0x1A	; 26
    112a:	80 83       	st	Z, r24
	PORTB &= ~(1 << 1);
    112c:	29 98       	cbi	0x05, 1	; 5
	
	TCCR0A = (1 << WGM01);	// enable CTC mode timer 0
    112e:	82 e0       	ldi	r24, 0x02	; 2
    1130:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0;		//disable clock for timer0, as it will be enabled when "beeped"
    1132:	15 bc       	out	0x25, r1	; 37
	OCR0A = 125;
    1134:	9d e7       	ldi	r25, 0x7D	; 125
    1136:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = ( 1 << OCIE0A );
    1138:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	
	printf("AUDIO TIMERS & PORT SET\n");
    113c:	8d ec       	ldi	r24, 0xCD	; 205
    113e:	91 e0       	ldi	r25, 0x01	; 1
    1140:	0e 94 85 0a 	call	0x150a	; 0x150a <puts>

	//load values from eeprom
	
	

	HighScore1P = (EEPROM_read(EEP_ADDR_HighScore1P_H) << 8) | (EEPROM_read(EEP_ADDR_HighScore1P_L));
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	0e 94 67 08 	call	0x10ce	; 0x10ce <EEPROM_read>
    114c:	c8 2f       	mov	r28, r24
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	0e 94 67 08 	call	0x10ce	; 0x10ce <EEPROM_read>
    1156:	2c 2f       	mov	r18, r28
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	32 2f       	mov	r19, r18
    115c:	22 27       	eor	r18, r18
    115e:	28 2b       	or	r18, r24
    1160:	30 93 e9 02 	sts	0x02E9, r19	; 0x8002e9 <HighScore1P+0x1>
    1164:	20 93 e8 02 	sts	0x02E8, r18	; 0x8002e8 <HighScore1P>
	HighScore2P = (EEPROM_read(EEP_ADDR_HighScore2P_H) << 8) | (EEPROM_read(EEP_ADDR_HighScore2P_L));
    1168:	82 e0       	ldi	r24, 0x02	; 2
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	0e 94 67 08 	call	0x10ce	; 0x10ce <EEPROM_read>
    1170:	c8 2f       	mov	r28, r24
    1172:	83 e0       	ldi	r24, 0x03	; 3
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	0e 94 67 08 	call	0x10ce	; 0x10ce <EEPROM_read>
    117a:	2c 2f       	mov	r18, r28
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	32 2f       	mov	r19, r18
    1180:	22 27       	eor	r18, r18
    1182:	28 2b       	or	r18, r24
    1184:	30 93 f9 02 	sts	0x02F9, r19	; 0x8002f9 <HighScore2P+0x1>
    1188:	20 93 f8 02 	sts	0x02F8, r18	; 0x8002f8 <HighScore2P>
	RoundTime = EEPROM_read(EEP_ADDR_RoundTime);
    118c:	80 e1       	ldi	r24, 0x10	; 16
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	0e 94 67 08 	call	0x10ce	; 0x10ce <EEPROM_read>
    1194:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <RoundTime>
	BonusTime = EEPROM_read(EEP_ADDR_BonusTime);
    1198:	80 e2       	ldi	r24, 0x20	; 32
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	0e 94 67 08 	call	0x10ce	; 0x10ce <EEPROM_read>
    11a0:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <BonusTime>
	MultiplierMax = EEPROM_read(EEP_ADDR_MultMax);
    11a4:	80 e5       	ldi	r24, 0x50	; 80
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	0e 94 67 08 	call	0x10ce	; 0x10ce <EEPROM_read>
    11ac:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <MultiplierMax>
	BonusPointCount = EEPROM_read(EEP_ADDR_BonusPtCount);
    11b0:	80 e6       	ldi	r24, 0x60	; 96
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	0e 94 67 08 	call	0x10ce	; 0x10ce <EEPROM_read>
    11b8:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <BonusPointCount>
	
	// load random value from eeprom as seed and write new random value
	srand((EEPROM_read(EEP_ADDR_RandomSeed_H) << 8) | EEPROM_read(EEP_ADDR_RandomSeed_L));
    11bc:	80 e4       	ldi	r24, 0x40	; 64
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	0e 94 67 08 	call	0x10ce	; 0x10ce <EEPROM_read>
    11c4:	c8 2f       	mov	r28, r24
    11c6:	81 e4       	ldi	r24, 0x41	; 65
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	0e 94 67 08 	call	0x10ce	; 0x10ce <EEPROM_read>
    11ce:	2c 2f       	mov	r18, r28
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	32 2f       	mov	r19, r18
    11d4:	22 27       	eor	r18, r18
    11d6:	a9 01       	movw	r20, r18
    11d8:	48 2b       	or	r20, r24
    11da:	ca 01       	movw	r24, r20
    11dc:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <srand>
	EEPROM_write(EEP_ADDR_RandomSeed_H, rand()%256 );
    11e0:	0e 94 5f 0a 	call	0x14be	; 0x14be <rand>
    11e4:	90 78       	andi	r25, 0x80	; 128
    11e6:	99 23       	and	r25, r25
    11e8:	1c f4       	brge	.+6      	; 0x11f0 <main+0x114>
    11ea:	01 97       	sbiw	r24, 0x01	; 1
    11ec:	9f 6f       	ori	r25, 0xFF	; 255
    11ee:	01 96       	adiw	r24, 0x01	; 1
    11f0:	68 2f       	mov	r22, r24
    11f2:	80 e4       	ldi	r24, 0x40	; 64
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	0e 94 5f 08 	call	0x10be	; 0x10be <EEPROM_write>
	EEPROM_write(EEP_ADDR_RandomSeed_L, rand()%256 );
    11fa:	0e 94 5f 0a 	call	0x14be	; 0x14be <rand>
    11fe:	90 78       	andi	r25, 0x80	; 128
    1200:	99 23       	and	r25, r25
    1202:	1c f4       	brge	.+6      	; 0x120a <main+0x12e>
    1204:	01 97       	sbiw	r24, 0x01	; 1
    1206:	9f 6f       	ori	r25, 0xFF	; 255
    1208:	01 96       	adiw	r24, 0x01	; 1
    120a:	68 2f       	mov	r22, r24
    120c:	81 e4       	ldi	r24, 0x41	; 65
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	0e 94 5f 08 	call	0x10be	; 0x10be <EEPROM_write>
	
	printf("EEPROM VALUES SET:\n");
    1214:	85 ee       	ldi	r24, 0xE5	; 229
    1216:	91 e0       	ldi	r25, 0x01	; 1
    1218:	0e 94 85 0a 	call	0x150a	; 0x150a <puts>
	printf("HS1P: %d \t HS2P: %d \t RT: %d \t BT: %d \t MMAX: %d \t BPC: %d \n",HighScore1P, HighScore2P, RoundTime, BonusTime, MultiplierMax, BonusPointCount);
    121c:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <BonusPointCount>
    1220:	1f 92       	push	r1
    1222:	8f 93       	push	r24
    1224:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <MultiplierMax>
    1228:	1f 92       	push	r1
    122a:	8f 93       	push	r24
    122c:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <BonusTime>
    1230:	1f 92       	push	r1
    1232:	8f 93       	push	r24
    1234:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <RoundTime>
    1238:	1f 92       	push	r1
    123a:	8f 93       	push	r24
    123c:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <HighScore2P+0x1>
    1240:	8f 93       	push	r24
    1242:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <HighScore2P>
    1246:	8f 93       	push	r24
    1248:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <HighScore1P+0x1>
    124c:	8f 93       	push	r24
    124e:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <HighScore1P>
    1252:	8f 93       	push	r24
    1254:	88 ef       	ldi	r24, 0xF8	; 248
    1256:	91 e0       	ldi	r25, 0x01	; 1
    1258:	9f 93       	push	r25
    125a:	8f 93       	push	r24
    125c:	0e 94 6f 0a 	call	0x14de	; 0x14de <printf>
	printf("RANDOMSEED: 0x%X%X\n\n", EEPROM_read(EEP_ADDR_RandomSeed_H), EEPROM_read(EEP_ADDR_RandomSeed_L));
    1260:	81 e4       	ldi	r24, 0x41	; 65
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	0e 94 67 08 	call	0x10ce	; 0x10ce <EEPROM_read>
    1268:	c8 2f       	mov	r28, r24
    126a:	80 e4       	ldi	r24, 0x40	; 64
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	0e 94 67 08 	call	0x10ce	; 0x10ce <EEPROM_read>
    1272:	1f 92       	push	r1
    1274:	cf 93       	push	r28
    1276:	1f 92       	push	r1
    1278:	8f 93       	push	r24
    127a:	85 e3       	ldi	r24, 0x35	; 53
    127c:	92 e0       	ldi	r25, 0x02	; 2
    127e:	9f 93       	push	r25
    1280:	8f 93       	push	r24
    1282:	0e 94 6f 0a 	call	0x14de	; 0x14de <printf>
	
	
	
	
	// set up timer4 for game timer
	TCCR4B = (1 << WGM42);	// CTC mode
    1286:	e1 ea       	ldi	r30, 0xA1	; 161
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	88 e0       	ldi	r24, 0x08	; 8
    128c:	80 83       	st	Z, r24
	TCCR4B |= 0;				// disable timer until game start (set to 1024 prescale later in code)
    128e:	80 81       	ld	r24, Z
    1290:	80 83       	st	Z, r24
	TIMSK4 = (1 << OCIE4A);
    1292:	82 e0       	ldi	r24, 0x02	; 2
    1294:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7e0072>
	OCR4A = 15625;			// set up for 1s
    1298:	89 e0       	ldi	r24, 0x09	; 9
    129a:	9d e3       	ldi	r25, 0x3D	; 61
    129c:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    12a0:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>

	sei();
    12a4:	78 94       	sei
    12a6:	8d b7       	in	r24, 0x3d	; 61
    12a8:	9e b7       	in	r25, 0x3e	; 62
    12aa:	44 96       	adiw	r24, 0x14	; 20
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	f8 94       	cli
    12b0:	9e bf       	out	0x3e, r25	; 62
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	8d bf       	out	0x3d, r24	; 61

	while (1)
	{
		printf("\n\n\nSTARTING ATTRACT MODE\n");
    12b6:	8a e4       	ldi	r24, 0x4A	; 74
    12b8:	92 e0       	ldi	r25, 0x02	; 2
    12ba:	0e 94 85 0a 	call	0x150a	; 0x150a <puts>
		Attractive();		// loop thru patterns until game start is pressed (TODO IMPLEMENT DEBUG PATTERN)
    12be:	0e 94 c7 07 	call	0xf8e	; 0xf8e <Attractive>
		printf("STARTING GAME\n");
    12c2:	83 e6       	ldi	r24, 0x63	; 99
    12c4:	92 e0       	ldi	r25, 0x02	; 2
    12c6:	0e 94 85 0a 	call	0x150a	; 0x150a <puts>
		Game();
    12ca:	0e 94 0b 06 	call	0xc16	; 0xc16 <Game>
    12ce:	9f ef       	ldi	r25, 0xFF	; 255
    12d0:	2e e9       	ldi	r18, 0x9E	; 158
    12d2:	44 e2       	ldi	r20, 0x24	; 36
    12d4:	91 50       	subi	r25, 0x01	; 1
    12d6:	20 40       	sbci	r18, 0x00	; 0
    12d8:	40 40       	sbci	r20, 0x00	; 0
    12da:	e1 f7       	brne	.-8      	; 0x12d4 <main+0x1f8>
    12dc:	00 c0       	rjmp	.+0      	; 0x12de <main+0x202>
    12de:	00 00       	nop
		_delay_ms(750);
		Bonus();
    12e0:	0e 94 a3 04 	call	0x946	; 0x946 <Bonus>
		
		if(GameMode == 0){
    12e4:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <GameMode>
    12e8:	81 11       	cpse	r24, r1
    12ea:	12 c0       	rjmp	.+36     	; 0x1310 <main+0x234>
			if(P1Score > HighScore1P){
    12ec:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <P1Score>
    12f0:	90 91 eb 02 	lds	r25, 0x02EB	; 0x8002eb <P1Score+0x1>
    12f4:	20 91 e8 02 	lds	r18, 0x02E8	; 0x8002e8 <HighScore1P>
    12f8:	30 91 e9 02 	lds	r19, 0x02E9	; 0x8002e9 <HighScore1P+0x1>
    12fc:	28 17       	cp	r18, r24
    12fe:	39 07       	cpc	r19, r25
    1300:	38 f5       	brcc	.+78     	; 0x1350 <main+0x274>
				HighScore1P = P1Score;
    1302:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <HighScore1P+0x1>
    1306:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <HighScore1P>
				ShowWinner();			//if new high score, flash screen
    130a:	0e 94 56 03 	call	0x6ac	; 0x6ac <ShowWinner>
    130e:	20 c0       	rjmp	.+64     	; 0x1350 <main+0x274>
			}
			}else{
			if((P1Score > HighScore2P) || (P2Score > HighScore2P)){
    1310:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <P1Score>
    1314:	90 91 eb 02 	lds	r25, 0x02EB	; 0x8002eb <P1Score+0x1>
    1318:	20 91 f8 02 	lds	r18, 0x02F8	; 0x8002f8 <HighScore2P>
    131c:	30 91 f9 02 	lds	r19, 0x02F9	; 0x8002f9 <HighScore2P+0x1>
    1320:	28 17       	cp	r18, r24
    1322:	39 07       	cpc	r19, r25
    1324:	38 f0       	brcs	.+14     	; 0x1334 <main+0x258>
    1326:	40 91 ec 02 	lds	r20, 0x02EC	; 0x8002ec <P2Score>
    132a:	50 91 ed 02 	lds	r21, 0x02ED	; 0x8002ed <P2Score+0x1>
    132e:	24 17       	cp	r18, r20
    1330:	35 07       	cpc	r19, r21
    1332:	60 f4       	brcc	.+24     	; 0x134c <main+0x270>
				HighScore2P = (P1Score > P2Score ? P1Score : P2Score);
    1334:	20 91 ec 02 	lds	r18, 0x02EC	; 0x8002ec <P2Score>
    1338:	30 91 ed 02 	lds	r19, 0x02ED	; 0x8002ed <P2Score+0x1>
    133c:	28 17       	cp	r18, r24
    133e:	39 07       	cpc	r19, r25
    1340:	08 f4       	brcc	.+2      	; 0x1344 <main+0x268>
    1342:	9c 01       	movw	r18, r24
    1344:	30 93 f9 02 	sts	0x02F9, r19	; 0x8002f9 <HighScore2P+0x1>
    1348:	20 93 f8 02 	sts	0x02F8, r18	; 0x8002f8 <HighScore2P>
			}
			ShowWinner();				//if 2 player mode show winner anyway
    134c:	0e 94 56 03 	call	0x6ac	; 0x6ac <ShowWinner>
    1350:	5f ef       	ldi	r21, 0xFF	; 255
    1352:	8e e9       	ldi	r24, 0x9E	; 158
    1354:	94 e2       	ldi	r25, 0x24	; 36
    1356:	51 50       	subi	r21, 0x01	; 1
    1358:	80 40       	sbci	r24, 0x00	; 0
    135a:	90 40       	sbci	r25, 0x00	; 0
    135c:	e1 f7       	brne	.-8      	; 0x1356 <main+0x27a>
    135e:	00 c0       	rjmp	.+0      	; 0x1360 <main+0x284>
    1360:	00 00       	nop
    1362:	a9 cf       	rjmp	.-174    	; 0x12b6 <main+0x1da>

00001364 <_dm0V>:
	_dp600mV();
	_dm600mV();
}

void _dm0V(){
	QC_PORT &= ~(1 << QC_DM);
    1364:	70 98       	cbi	0x0e, 0	; 14
	QC_DDR |= 1 << QC_DM;
    1366:	68 9a       	sbi	0x0d, 0	; 13
    1368:	08 95       	ret

0000136a <_dp600mV>:
}

void _dp600mV(){
	QC_DDR &= ~(1 << QC_DP);
    136a:	69 98       	cbi	0x0d, 1	; 13
    136c:	08 95       	ret

0000136e <QCset5V>:
	_delay_ms(2);
	
}

void QCset5V(){
	_dp600mV();
    136e:	0e 94 b5 09 	call	0x136a	; 0x136a <_dp600mV>
	_dm0V();
    1372:	0e 94 b2 09 	call	0x1364	; 0x1364 <_dm0V>
    1376:	08 95       	ret

00001378 <_dm600mV>:
void _dp600mV(){
	QC_DDR &= ~(1 << QC_DP);
}

void _dm600mV(){
	QC_DDR &= ~(1 << QC_DM);
    1378:	68 98       	cbi	0x0d, 0	; 13
    137a:	08 95       	ret

0000137c <_handshake>:
	_handshake();
	QCset5V();
}

void _handshake(){
	_dm600mV();
    137c:	0e 94 bc 09 	call	0x1378	; 0x1378 <_dm600mV>
    1380:	2f ef       	ldi	r18, 0xFF	; 255
    1382:	8d e3       	ldi	r24, 0x3D	; 61
    1384:	99 e4       	ldi	r25, 0x49	; 73
    1386:	21 50       	subi	r18, 0x01	; 1
    1388:	80 40       	sbci	r24, 0x00	; 0
    138a:	90 40       	sbci	r25, 0x00	; 0
    138c:	e1 f7       	brne	.-8      	; 0x1386 <_handshake+0xa>
    138e:	00 c0       	rjmp	.+0      	; 0x1390 <_handshake+0x14>
    1390:	00 00       	nop
	_delay_ms(1500);
	_dm0V();
    1392:	0e 94 b2 09 	call	0x1364	; 0x1364 <_dm0V>
    1396:	8f e3       	ldi	r24, 0x3F	; 63
    1398:	9f e1       	ldi	r25, 0x1F	; 31
    139a:	01 97       	sbiw	r24, 0x01	; 1
    139c:	f1 f7       	brne	.-4      	; 0x139a <_handshake+0x1e>
    139e:	00 c0       	rjmp	.+0      	; 0x13a0 <_handshake+0x24>
    13a0:	00 00       	nop
    13a2:	08 95       	ret

000013a4 <usbQcInit>:
#include "usbQc.h"
#define F_CPU 16000000UL
#include <util/delay.h>

void usbQcInit(){
	_handshake();
    13a4:	0e 94 be 09 	call	0x137c	; 0x137c <_handshake>
	QCset5V();
    13a8:	0e 94 b7 09 	call	0x136e	; 0x136e <QCset5V>
    13ac:	08 95       	ret

000013ae <QCset12V>:
	_dm600mV();
	
}

void QCset12V(){
	_dp600mV();
    13ae:	0e 94 b5 09 	call	0x136a	; 0x136a <_dp600mV>
	_dm600mV();
    13b2:	0e 94 bc 09 	call	0x1378	; 0x1378 <_dm600mV>
    13b6:	08 95       	ret

000013b8 <__divmodhi4>:
    13b8:	97 fb       	bst	r25, 7
    13ba:	07 2e       	mov	r0, r23
    13bc:	16 f4       	brtc	.+4      	; 0x13c2 <__divmodhi4+0xa>
    13be:	00 94       	com	r0
    13c0:	07 d0       	rcall	.+14     	; 0x13d0 <__divmodhi4_neg1>
    13c2:	77 fd       	sbrc	r23, 7
    13c4:	09 d0       	rcall	.+18     	; 0x13d8 <__divmodhi4_neg2>
    13c6:	0e 94 ff 09 	call	0x13fe	; 0x13fe <__udivmodhi4>
    13ca:	07 fc       	sbrc	r0, 7
    13cc:	05 d0       	rcall	.+10     	; 0x13d8 <__divmodhi4_neg2>
    13ce:	3e f4       	brtc	.+14     	; 0x13de <__divmodhi4_exit>

000013d0 <__divmodhi4_neg1>:
    13d0:	90 95       	com	r25
    13d2:	81 95       	neg	r24
    13d4:	9f 4f       	sbci	r25, 0xFF	; 255
    13d6:	08 95       	ret

000013d8 <__divmodhi4_neg2>:
    13d8:	70 95       	com	r23
    13da:	61 95       	neg	r22
    13dc:	7f 4f       	sbci	r23, 0xFF	; 255

000013de <__divmodhi4_exit>:
    13de:	08 95       	ret

000013e0 <__umulhisi3>:
    13e0:	a2 9f       	mul	r26, r18
    13e2:	b0 01       	movw	r22, r0
    13e4:	b3 9f       	mul	r27, r19
    13e6:	c0 01       	movw	r24, r0
    13e8:	a3 9f       	mul	r26, r19
    13ea:	70 0d       	add	r23, r0
    13ec:	81 1d       	adc	r24, r1
    13ee:	11 24       	eor	r1, r1
    13f0:	91 1d       	adc	r25, r1
    13f2:	b2 9f       	mul	r27, r18
    13f4:	70 0d       	add	r23, r0
    13f6:	81 1d       	adc	r24, r1
    13f8:	11 24       	eor	r1, r1
    13fa:	91 1d       	adc	r25, r1
    13fc:	08 95       	ret

000013fe <__udivmodhi4>:
    13fe:	aa 1b       	sub	r26, r26
    1400:	bb 1b       	sub	r27, r27
    1402:	51 e1       	ldi	r21, 0x11	; 17
    1404:	07 c0       	rjmp	.+14     	; 0x1414 <__udivmodhi4_ep>

00001406 <__udivmodhi4_loop>:
    1406:	aa 1f       	adc	r26, r26
    1408:	bb 1f       	adc	r27, r27
    140a:	a6 17       	cp	r26, r22
    140c:	b7 07       	cpc	r27, r23
    140e:	10 f0       	brcs	.+4      	; 0x1414 <__udivmodhi4_ep>
    1410:	a6 1b       	sub	r26, r22
    1412:	b7 0b       	sbc	r27, r23

00001414 <__udivmodhi4_ep>:
    1414:	88 1f       	adc	r24, r24
    1416:	99 1f       	adc	r25, r25
    1418:	5a 95       	dec	r21
    141a:	a9 f7       	brne	.-22     	; 0x1406 <__udivmodhi4_loop>
    141c:	80 95       	com	r24
    141e:	90 95       	com	r25
    1420:	bc 01       	movw	r22, r24
    1422:	cd 01       	movw	r24, r26
    1424:	08 95       	ret

00001426 <do_rand>:
    1426:	8f 92       	push	r8
    1428:	9f 92       	push	r9
    142a:	af 92       	push	r10
    142c:	bf 92       	push	r11
    142e:	cf 92       	push	r12
    1430:	df 92       	push	r13
    1432:	ef 92       	push	r14
    1434:	ff 92       	push	r15
    1436:	cf 93       	push	r28
    1438:	df 93       	push	r29
    143a:	ec 01       	movw	r28, r24
    143c:	68 81       	ld	r22, Y
    143e:	79 81       	ldd	r23, Y+1	; 0x01
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	9b 81       	ldd	r25, Y+3	; 0x03
    1444:	61 15       	cp	r22, r1
    1446:	71 05       	cpc	r23, r1
    1448:	81 05       	cpc	r24, r1
    144a:	91 05       	cpc	r25, r1
    144c:	21 f4       	brne	.+8      	; 0x1456 <do_rand+0x30>
    144e:	64 e2       	ldi	r22, 0x24	; 36
    1450:	79 ed       	ldi	r23, 0xD9	; 217
    1452:	8b e5       	ldi	r24, 0x5B	; 91
    1454:	97 e0       	ldi	r25, 0x07	; 7
    1456:	2d e1       	ldi	r18, 0x1D	; 29
    1458:	33 ef       	ldi	r19, 0xF3	; 243
    145a:	41 e0       	ldi	r20, 0x01	; 1
    145c:	50 e0       	ldi	r21, 0x00	; 0
    145e:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <__divmodsi4>
    1462:	49 01       	movw	r8, r18
    1464:	5a 01       	movw	r10, r20
    1466:	9b 01       	movw	r18, r22
    1468:	ac 01       	movw	r20, r24
    146a:	a7 ea       	ldi	r26, 0xA7	; 167
    146c:	b1 e4       	ldi	r27, 0x41	; 65
    146e:	0e 94 65 0d 	call	0x1aca	; 0x1aca <__muluhisi3>
    1472:	6b 01       	movw	r12, r22
    1474:	7c 01       	movw	r14, r24
    1476:	ac ee       	ldi	r26, 0xEC	; 236
    1478:	b4 ef       	ldi	r27, 0xF4	; 244
    147a:	a5 01       	movw	r20, r10
    147c:	94 01       	movw	r18, r8
    147e:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__mulohisi3>
    1482:	dc 01       	movw	r26, r24
    1484:	cb 01       	movw	r24, r22
    1486:	8c 0d       	add	r24, r12
    1488:	9d 1d       	adc	r25, r13
    148a:	ae 1d       	adc	r26, r14
    148c:	bf 1d       	adc	r27, r15
    148e:	b7 ff       	sbrs	r27, 7
    1490:	03 c0       	rjmp	.+6      	; 0x1498 <do_rand+0x72>
    1492:	01 97       	sbiw	r24, 0x01	; 1
    1494:	a1 09       	sbc	r26, r1
    1496:	b0 48       	sbci	r27, 0x80	; 128
    1498:	88 83       	st	Y, r24
    149a:	99 83       	std	Y+1, r25	; 0x01
    149c:	aa 83       	std	Y+2, r26	; 0x02
    149e:	bb 83       	std	Y+3, r27	; 0x03
    14a0:	9f 77       	andi	r25, 0x7F	; 127
    14a2:	df 91       	pop	r29
    14a4:	cf 91       	pop	r28
    14a6:	ff 90       	pop	r15
    14a8:	ef 90       	pop	r14
    14aa:	df 90       	pop	r13
    14ac:	cf 90       	pop	r12
    14ae:	bf 90       	pop	r11
    14b0:	af 90       	pop	r10
    14b2:	9f 90       	pop	r9
    14b4:	8f 90       	pop	r8
    14b6:	08 95       	ret

000014b8 <rand_r>:
    14b8:	0e 94 13 0a 	call	0x1426	; 0x1426 <do_rand>
    14bc:	08 95       	ret

000014be <rand>:
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	91 e0       	ldi	r25, 0x01	; 1
    14c2:	0e 94 13 0a 	call	0x1426	; 0x1426 <do_rand>
    14c6:	08 95       	ret

000014c8 <srand>:
    14c8:	a0 e0       	ldi	r26, 0x00	; 0
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    14d0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    14d4:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    14d8:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    14dc:	08 95       	ret

000014de <printf>:
    14de:	a0 e0       	ldi	r26, 0x00	; 0
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	e5 e7       	ldi	r30, 0x75	; 117
    14e4:	fa e0       	ldi	r31, 0x0A	; 10
    14e6:	0c 94 88 0d 	jmp	0x1b10	; 0x1b10 <__prologue_saves__+0x20>
    14ea:	ae 01       	movw	r20, r28
    14ec:	4b 5f       	subi	r20, 0xFB	; 251
    14ee:	5f 4f       	sbci	r21, 0xFF	; 255
    14f0:	fa 01       	movw	r30, r20
    14f2:	61 91       	ld	r22, Z+
    14f4:	71 91       	ld	r23, Z+
    14f6:	af 01       	movw	r20, r30
    14f8:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <__iob+0x2>
    14fc:	90 91 fe 02 	lds	r25, 0x02FE	; 0x8002fe <__iob+0x3>
    1500:	0e 94 b5 0a 	call	0x156a	; 0x156a <vfprintf>
    1504:	e2 e0       	ldi	r30, 0x02	; 2
    1506:	0c 94 a4 0d 	jmp	0x1b48	; 0x1b48 <__epilogue_restores__+0x20>

0000150a <puts>:
    150a:	0f 93       	push	r16
    150c:	1f 93       	push	r17
    150e:	cf 93       	push	r28
    1510:	df 93       	push	r29
    1512:	e0 91 fd 02 	lds	r30, 0x02FD	; 0x8002fd <__iob+0x2>
    1516:	f0 91 fe 02 	lds	r31, 0x02FE	; 0x8002fe <__iob+0x3>
    151a:	23 81       	ldd	r18, Z+3	; 0x03
    151c:	21 ff       	sbrs	r18, 1
    151e:	1b c0       	rjmp	.+54     	; 0x1556 <puts+0x4c>
    1520:	8c 01       	movw	r16, r24
    1522:	d0 e0       	ldi	r29, 0x00	; 0
    1524:	c0 e0       	ldi	r28, 0x00	; 0
    1526:	f8 01       	movw	r30, r16
    1528:	81 91       	ld	r24, Z+
    152a:	8f 01       	movw	r16, r30
    152c:	60 91 fd 02 	lds	r22, 0x02FD	; 0x8002fd <__iob+0x2>
    1530:	70 91 fe 02 	lds	r23, 0x02FE	; 0x8002fe <__iob+0x3>
    1534:	db 01       	movw	r26, r22
    1536:	18 96       	adiw	r26, 0x08	; 8
    1538:	ed 91       	ld	r30, X+
    153a:	fc 91       	ld	r31, X
    153c:	19 97       	sbiw	r26, 0x09	; 9
    153e:	88 23       	and	r24, r24
    1540:	31 f0       	breq	.+12     	; 0x154e <puts+0x44>
    1542:	09 95       	icall
    1544:	89 2b       	or	r24, r25
    1546:	79 f3       	breq	.-34     	; 0x1526 <puts+0x1c>
    1548:	df ef       	ldi	r29, 0xFF	; 255
    154a:	cf ef       	ldi	r28, 0xFF	; 255
    154c:	ec cf       	rjmp	.-40     	; 0x1526 <puts+0x1c>
    154e:	8a e0       	ldi	r24, 0x0A	; 10
    1550:	09 95       	icall
    1552:	89 2b       	or	r24, r25
    1554:	19 f0       	breq	.+6      	; 0x155c <puts+0x52>
    1556:	8f ef       	ldi	r24, 0xFF	; 255
    1558:	9f ef       	ldi	r25, 0xFF	; 255
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <puts+0x56>
    155c:	8d 2f       	mov	r24, r29
    155e:	9c 2f       	mov	r25, r28
    1560:	df 91       	pop	r29
    1562:	cf 91       	pop	r28
    1564:	1f 91       	pop	r17
    1566:	0f 91       	pop	r16
    1568:	08 95       	ret

0000156a <vfprintf>:
    156a:	ab e0       	ldi	r26, 0x0B	; 11
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	eb eb       	ldi	r30, 0xBB	; 187
    1570:	fa e0       	ldi	r31, 0x0A	; 10
    1572:	0c 94 78 0d 	jmp	0x1af0	; 0x1af0 <__prologue_saves__>
    1576:	6c 01       	movw	r12, r24
    1578:	7b 01       	movw	r14, r22
    157a:	8a 01       	movw	r16, r20
    157c:	fc 01       	movw	r30, r24
    157e:	17 82       	std	Z+7, r1	; 0x07
    1580:	16 82       	std	Z+6, r1	; 0x06
    1582:	83 81       	ldd	r24, Z+3	; 0x03
    1584:	81 ff       	sbrs	r24, 1
    1586:	cc c1       	rjmp	.+920    	; 0x1920 <vfprintf+0x3b6>
    1588:	ce 01       	movw	r24, r28
    158a:	01 96       	adiw	r24, 0x01	; 1
    158c:	3c 01       	movw	r6, r24
    158e:	f6 01       	movw	r30, r12
    1590:	93 81       	ldd	r25, Z+3	; 0x03
    1592:	f7 01       	movw	r30, r14
    1594:	93 fd       	sbrc	r25, 3
    1596:	85 91       	lpm	r24, Z+
    1598:	93 ff       	sbrs	r25, 3
    159a:	81 91       	ld	r24, Z+
    159c:	7f 01       	movw	r14, r30
    159e:	88 23       	and	r24, r24
    15a0:	09 f4       	brne	.+2      	; 0x15a4 <vfprintf+0x3a>
    15a2:	ba c1       	rjmp	.+884    	; 0x1918 <vfprintf+0x3ae>
    15a4:	85 32       	cpi	r24, 0x25	; 37
    15a6:	39 f4       	brne	.+14     	; 0x15b6 <vfprintf+0x4c>
    15a8:	93 fd       	sbrc	r25, 3
    15aa:	85 91       	lpm	r24, Z+
    15ac:	93 ff       	sbrs	r25, 3
    15ae:	81 91       	ld	r24, Z+
    15b0:	7f 01       	movw	r14, r30
    15b2:	85 32       	cpi	r24, 0x25	; 37
    15b4:	29 f4       	brne	.+10     	; 0x15c0 <vfprintf+0x56>
    15b6:	b6 01       	movw	r22, r12
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	0e 94 ac 0c 	call	0x1958	; 0x1958 <fputc>
    15be:	e7 cf       	rjmp	.-50     	; 0x158e <vfprintf+0x24>
    15c0:	91 2c       	mov	r9, r1
    15c2:	21 2c       	mov	r2, r1
    15c4:	31 2c       	mov	r3, r1
    15c6:	ff e1       	ldi	r31, 0x1F	; 31
    15c8:	f3 15       	cp	r31, r3
    15ca:	d8 f0       	brcs	.+54     	; 0x1602 <vfprintf+0x98>
    15cc:	8b 32       	cpi	r24, 0x2B	; 43
    15ce:	79 f0       	breq	.+30     	; 0x15ee <vfprintf+0x84>
    15d0:	38 f4       	brcc	.+14     	; 0x15e0 <vfprintf+0x76>
    15d2:	80 32       	cpi	r24, 0x20	; 32
    15d4:	79 f0       	breq	.+30     	; 0x15f4 <vfprintf+0x8a>
    15d6:	83 32       	cpi	r24, 0x23	; 35
    15d8:	a1 f4       	brne	.+40     	; 0x1602 <vfprintf+0x98>
    15da:	23 2d       	mov	r18, r3
    15dc:	20 61       	ori	r18, 0x10	; 16
    15de:	1d c0       	rjmp	.+58     	; 0x161a <vfprintf+0xb0>
    15e0:	8d 32       	cpi	r24, 0x2D	; 45
    15e2:	61 f0       	breq	.+24     	; 0x15fc <vfprintf+0x92>
    15e4:	80 33       	cpi	r24, 0x30	; 48
    15e6:	69 f4       	brne	.+26     	; 0x1602 <vfprintf+0x98>
    15e8:	23 2d       	mov	r18, r3
    15ea:	21 60       	ori	r18, 0x01	; 1
    15ec:	16 c0       	rjmp	.+44     	; 0x161a <vfprintf+0xb0>
    15ee:	83 2d       	mov	r24, r3
    15f0:	82 60       	ori	r24, 0x02	; 2
    15f2:	38 2e       	mov	r3, r24
    15f4:	e3 2d       	mov	r30, r3
    15f6:	e4 60       	ori	r30, 0x04	; 4
    15f8:	3e 2e       	mov	r3, r30
    15fa:	2a c0       	rjmp	.+84     	; 0x1650 <vfprintf+0xe6>
    15fc:	f3 2d       	mov	r31, r3
    15fe:	f8 60       	ori	r31, 0x08	; 8
    1600:	1d c0       	rjmp	.+58     	; 0x163c <vfprintf+0xd2>
    1602:	37 fc       	sbrc	r3, 7
    1604:	2d c0       	rjmp	.+90     	; 0x1660 <vfprintf+0xf6>
    1606:	20 ed       	ldi	r18, 0xD0	; 208
    1608:	28 0f       	add	r18, r24
    160a:	2a 30       	cpi	r18, 0x0A	; 10
    160c:	40 f0       	brcs	.+16     	; 0x161e <vfprintf+0xb4>
    160e:	8e 32       	cpi	r24, 0x2E	; 46
    1610:	b9 f4       	brne	.+46     	; 0x1640 <vfprintf+0xd6>
    1612:	36 fc       	sbrc	r3, 6
    1614:	81 c1       	rjmp	.+770    	; 0x1918 <vfprintf+0x3ae>
    1616:	23 2d       	mov	r18, r3
    1618:	20 64       	ori	r18, 0x40	; 64
    161a:	32 2e       	mov	r3, r18
    161c:	19 c0       	rjmp	.+50     	; 0x1650 <vfprintf+0xe6>
    161e:	36 fe       	sbrs	r3, 6
    1620:	06 c0       	rjmp	.+12     	; 0x162e <vfprintf+0xc4>
    1622:	8a e0       	ldi	r24, 0x0A	; 10
    1624:	98 9e       	mul	r9, r24
    1626:	20 0d       	add	r18, r0
    1628:	11 24       	eor	r1, r1
    162a:	92 2e       	mov	r9, r18
    162c:	11 c0       	rjmp	.+34     	; 0x1650 <vfprintf+0xe6>
    162e:	ea e0       	ldi	r30, 0x0A	; 10
    1630:	2e 9e       	mul	r2, r30
    1632:	20 0d       	add	r18, r0
    1634:	11 24       	eor	r1, r1
    1636:	22 2e       	mov	r2, r18
    1638:	f3 2d       	mov	r31, r3
    163a:	f0 62       	ori	r31, 0x20	; 32
    163c:	3f 2e       	mov	r3, r31
    163e:	08 c0       	rjmp	.+16     	; 0x1650 <vfprintf+0xe6>
    1640:	8c 36       	cpi	r24, 0x6C	; 108
    1642:	21 f4       	brne	.+8      	; 0x164c <vfprintf+0xe2>
    1644:	83 2d       	mov	r24, r3
    1646:	80 68       	ori	r24, 0x80	; 128
    1648:	38 2e       	mov	r3, r24
    164a:	02 c0       	rjmp	.+4      	; 0x1650 <vfprintf+0xe6>
    164c:	88 36       	cpi	r24, 0x68	; 104
    164e:	41 f4       	brne	.+16     	; 0x1660 <vfprintf+0xf6>
    1650:	f7 01       	movw	r30, r14
    1652:	93 fd       	sbrc	r25, 3
    1654:	85 91       	lpm	r24, Z+
    1656:	93 ff       	sbrs	r25, 3
    1658:	81 91       	ld	r24, Z+
    165a:	7f 01       	movw	r14, r30
    165c:	81 11       	cpse	r24, r1
    165e:	b3 cf       	rjmp	.-154    	; 0x15c6 <vfprintf+0x5c>
    1660:	98 2f       	mov	r25, r24
    1662:	9f 7d       	andi	r25, 0xDF	; 223
    1664:	95 54       	subi	r25, 0x45	; 69
    1666:	93 30       	cpi	r25, 0x03	; 3
    1668:	28 f4       	brcc	.+10     	; 0x1674 <vfprintf+0x10a>
    166a:	0c 5f       	subi	r16, 0xFC	; 252
    166c:	1f 4f       	sbci	r17, 0xFF	; 255
    166e:	9f e3       	ldi	r25, 0x3F	; 63
    1670:	99 83       	std	Y+1, r25	; 0x01
    1672:	0d c0       	rjmp	.+26     	; 0x168e <vfprintf+0x124>
    1674:	83 36       	cpi	r24, 0x63	; 99
    1676:	31 f0       	breq	.+12     	; 0x1684 <vfprintf+0x11a>
    1678:	83 37       	cpi	r24, 0x73	; 115
    167a:	71 f0       	breq	.+28     	; 0x1698 <vfprintf+0x12e>
    167c:	83 35       	cpi	r24, 0x53	; 83
    167e:	09 f0       	breq	.+2      	; 0x1682 <vfprintf+0x118>
    1680:	59 c0       	rjmp	.+178    	; 0x1734 <vfprintf+0x1ca>
    1682:	21 c0       	rjmp	.+66     	; 0x16c6 <vfprintf+0x15c>
    1684:	f8 01       	movw	r30, r16
    1686:	80 81       	ld	r24, Z
    1688:	89 83       	std	Y+1, r24	; 0x01
    168a:	0e 5f       	subi	r16, 0xFE	; 254
    168c:	1f 4f       	sbci	r17, 0xFF	; 255
    168e:	88 24       	eor	r8, r8
    1690:	83 94       	inc	r8
    1692:	91 2c       	mov	r9, r1
    1694:	53 01       	movw	r10, r6
    1696:	13 c0       	rjmp	.+38     	; 0x16be <vfprintf+0x154>
    1698:	28 01       	movw	r4, r16
    169a:	f2 e0       	ldi	r31, 0x02	; 2
    169c:	4f 0e       	add	r4, r31
    169e:	51 1c       	adc	r5, r1
    16a0:	f8 01       	movw	r30, r16
    16a2:	a0 80       	ld	r10, Z
    16a4:	b1 80       	ldd	r11, Z+1	; 0x01
    16a6:	36 fe       	sbrs	r3, 6
    16a8:	03 c0       	rjmp	.+6      	; 0x16b0 <vfprintf+0x146>
    16aa:	69 2d       	mov	r22, r9
    16ac:	70 e0       	ldi	r23, 0x00	; 0
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <vfprintf+0x14a>
    16b0:	6f ef       	ldi	r22, 0xFF	; 255
    16b2:	7f ef       	ldi	r23, 0xFF	; 255
    16b4:	c5 01       	movw	r24, r10
    16b6:	0e 94 a1 0c 	call	0x1942	; 0x1942 <strnlen>
    16ba:	4c 01       	movw	r8, r24
    16bc:	82 01       	movw	r16, r4
    16be:	f3 2d       	mov	r31, r3
    16c0:	ff 77       	andi	r31, 0x7F	; 127
    16c2:	3f 2e       	mov	r3, r31
    16c4:	16 c0       	rjmp	.+44     	; 0x16f2 <vfprintf+0x188>
    16c6:	28 01       	movw	r4, r16
    16c8:	22 e0       	ldi	r18, 0x02	; 2
    16ca:	42 0e       	add	r4, r18
    16cc:	51 1c       	adc	r5, r1
    16ce:	f8 01       	movw	r30, r16
    16d0:	a0 80       	ld	r10, Z
    16d2:	b1 80       	ldd	r11, Z+1	; 0x01
    16d4:	36 fe       	sbrs	r3, 6
    16d6:	03 c0       	rjmp	.+6      	; 0x16de <vfprintf+0x174>
    16d8:	69 2d       	mov	r22, r9
    16da:	70 e0       	ldi	r23, 0x00	; 0
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <vfprintf+0x178>
    16de:	6f ef       	ldi	r22, 0xFF	; 255
    16e0:	7f ef       	ldi	r23, 0xFF	; 255
    16e2:	c5 01       	movw	r24, r10
    16e4:	0e 94 96 0c 	call	0x192c	; 0x192c <strnlen_P>
    16e8:	4c 01       	movw	r8, r24
    16ea:	f3 2d       	mov	r31, r3
    16ec:	f0 68       	ori	r31, 0x80	; 128
    16ee:	3f 2e       	mov	r3, r31
    16f0:	82 01       	movw	r16, r4
    16f2:	33 fc       	sbrc	r3, 3
    16f4:	1b c0       	rjmp	.+54     	; 0x172c <vfprintf+0x1c2>
    16f6:	82 2d       	mov	r24, r2
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	88 16       	cp	r8, r24
    16fc:	99 06       	cpc	r9, r25
    16fe:	b0 f4       	brcc	.+44     	; 0x172c <vfprintf+0x1c2>
    1700:	b6 01       	movw	r22, r12
    1702:	80 e2       	ldi	r24, 0x20	; 32
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	0e 94 ac 0c 	call	0x1958	; 0x1958 <fputc>
    170a:	2a 94       	dec	r2
    170c:	f4 cf       	rjmp	.-24     	; 0x16f6 <vfprintf+0x18c>
    170e:	f5 01       	movw	r30, r10
    1710:	37 fc       	sbrc	r3, 7
    1712:	85 91       	lpm	r24, Z+
    1714:	37 fe       	sbrs	r3, 7
    1716:	81 91       	ld	r24, Z+
    1718:	5f 01       	movw	r10, r30
    171a:	b6 01       	movw	r22, r12
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	0e 94 ac 0c 	call	0x1958	; 0x1958 <fputc>
    1722:	21 10       	cpse	r2, r1
    1724:	2a 94       	dec	r2
    1726:	21 e0       	ldi	r18, 0x01	; 1
    1728:	82 1a       	sub	r8, r18
    172a:	91 08       	sbc	r9, r1
    172c:	81 14       	cp	r8, r1
    172e:	91 04       	cpc	r9, r1
    1730:	71 f7       	brne	.-36     	; 0x170e <vfprintf+0x1a4>
    1732:	e8 c0       	rjmp	.+464    	; 0x1904 <vfprintf+0x39a>
    1734:	84 36       	cpi	r24, 0x64	; 100
    1736:	11 f0       	breq	.+4      	; 0x173c <vfprintf+0x1d2>
    1738:	89 36       	cpi	r24, 0x69	; 105
    173a:	41 f5       	brne	.+80     	; 0x178c <vfprintf+0x222>
    173c:	f8 01       	movw	r30, r16
    173e:	37 fe       	sbrs	r3, 7
    1740:	07 c0       	rjmp	.+14     	; 0x1750 <vfprintf+0x1e6>
    1742:	60 81       	ld	r22, Z
    1744:	71 81       	ldd	r23, Z+1	; 0x01
    1746:	82 81       	ldd	r24, Z+2	; 0x02
    1748:	93 81       	ldd	r25, Z+3	; 0x03
    174a:	0c 5f       	subi	r16, 0xFC	; 252
    174c:	1f 4f       	sbci	r17, 0xFF	; 255
    174e:	08 c0       	rjmp	.+16     	; 0x1760 <vfprintf+0x1f6>
    1750:	60 81       	ld	r22, Z
    1752:	71 81       	ldd	r23, Z+1	; 0x01
    1754:	07 2e       	mov	r0, r23
    1756:	00 0c       	add	r0, r0
    1758:	88 0b       	sbc	r24, r24
    175a:	99 0b       	sbc	r25, r25
    175c:	0e 5f       	subi	r16, 0xFE	; 254
    175e:	1f 4f       	sbci	r17, 0xFF	; 255
    1760:	f3 2d       	mov	r31, r3
    1762:	ff 76       	andi	r31, 0x6F	; 111
    1764:	3f 2e       	mov	r3, r31
    1766:	97 ff       	sbrs	r25, 7
    1768:	09 c0       	rjmp	.+18     	; 0x177c <vfprintf+0x212>
    176a:	90 95       	com	r25
    176c:	80 95       	com	r24
    176e:	70 95       	com	r23
    1770:	61 95       	neg	r22
    1772:	7f 4f       	sbci	r23, 0xFF	; 255
    1774:	8f 4f       	sbci	r24, 0xFF	; 255
    1776:	9f 4f       	sbci	r25, 0xFF	; 255
    1778:	f0 68       	ori	r31, 0x80	; 128
    177a:	3f 2e       	mov	r3, r31
    177c:	2a e0       	ldi	r18, 0x0A	; 10
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	a3 01       	movw	r20, r6
    1782:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <__ultoa_invert>
    1786:	88 2e       	mov	r8, r24
    1788:	86 18       	sub	r8, r6
    178a:	45 c0       	rjmp	.+138    	; 0x1816 <vfprintf+0x2ac>
    178c:	85 37       	cpi	r24, 0x75	; 117
    178e:	31 f4       	brne	.+12     	; 0x179c <vfprintf+0x232>
    1790:	23 2d       	mov	r18, r3
    1792:	2f 7e       	andi	r18, 0xEF	; 239
    1794:	b2 2e       	mov	r11, r18
    1796:	2a e0       	ldi	r18, 0x0A	; 10
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	25 c0       	rjmp	.+74     	; 0x17e6 <vfprintf+0x27c>
    179c:	93 2d       	mov	r25, r3
    179e:	99 7f       	andi	r25, 0xF9	; 249
    17a0:	b9 2e       	mov	r11, r25
    17a2:	8f 36       	cpi	r24, 0x6F	; 111
    17a4:	c1 f0       	breq	.+48     	; 0x17d6 <vfprintf+0x26c>
    17a6:	18 f4       	brcc	.+6      	; 0x17ae <vfprintf+0x244>
    17a8:	88 35       	cpi	r24, 0x58	; 88
    17aa:	79 f0       	breq	.+30     	; 0x17ca <vfprintf+0x260>
    17ac:	b5 c0       	rjmp	.+362    	; 0x1918 <vfprintf+0x3ae>
    17ae:	80 37       	cpi	r24, 0x70	; 112
    17b0:	19 f0       	breq	.+6      	; 0x17b8 <vfprintf+0x24e>
    17b2:	88 37       	cpi	r24, 0x78	; 120
    17b4:	21 f0       	breq	.+8      	; 0x17be <vfprintf+0x254>
    17b6:	b0 c0       	rjmp	.+352    	; 0x1918 <vfprintf+0x3ae>
    17b8:	e9 2f       	mov	r30, r25
    17ba:	e0 61       	ori	r30, 0x10	; 16
    17bc:	be 2e       	mov	r11, r30
    17be:	b4 fe       	sbrs	r11, 4
    17c0:	0d c0       	rjmp	.+26     	; 0x17dc <vfprintf+0x272>
    17c2:	fb 2d       	mov	r31, r11
    17c4:	f4 60       	ori	r31, 0x04	; 4
    17c6:	bf 2e       	mov	r11, r31
    17c8:	09 c0       	rjmp	.+18     	; 0x17dc <vfprintf+0x272>
    17ca:	34 fe       	sbrs	r3, 4
    17cc:	0a c0       	rjmp	.+20     	; 0x17e2 <vfprintf+0x278>
    17ce:	29 2f       	mov	r18, r25
    17d0:	26 60       	ori	r18, 0x06	; 6
    17d2:	b2 2e       	mov	r11, r18
    17d4:	06 c0       	rjmp	.+12     	; 0x17e2 <vfprintf+0x278>
    17d6:	28 e0       	ldi	r18, 0x08	; 8
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	05 c0       	rjmp	.+10     	; 0x17e6 <vfprintf+0x27c>
    17dc:	20 e1       	ldi	r18, 0x10	; 16
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	02 c0       	rjmp	.+4      	; 0x17e6 <vfprintf+0x27c>
    17e2:	20 e1       	ldi	r18, 0x10	; 16
    17e4:	32 e0       	ldi	r19, 0x02	; 2
    17e6:	f8 01       	movw	r30, r16
    17e8:	b7 fe       	sbrs	r11, 7
    17ea:	07 c0       	rjmp	.+14     	; 0x17fa <vfprintf+0x290>
    17ec:	60 81       	ld	r22, Z
    17ee:	71 81       	ldd	r23, Z+1	; 0x01
    17f0:	82 81       	ldd	r24, Z+2	; 0x02
    17f2:	93 81       	ldd	r25, Z+3	; 0x03
    17f4:	0c 5f       	subi	r16, 0xFC	; 252
    17f6:	1f 4f       	sbci	r17, 0xFF	; 255
    17f8:	06 c0       	rjmp	.+12     	; 0x1806 <vfprintf+0x29c>
    17fa:	60 81       	ld	r22, Z
    17fc:	71 81       	ldd	r23, Z+1	; 0x01
    17fe:	80 e0       	ldi	r24, 0x00	; 0
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	0e 5f       	subi	r16, 0xFE	; 254
    1804:	1f 4f       	sbci	r17, 0xFF	; 255
    1806:	a3 01       	movw	r20, r6
    1808:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <__ultoa_invert>
    180c:	88 2e       	mov	r8, r24
    180e:	86 18       	sub	r8, r6
    1810:	fb 2d       	mov	r31, r11
    1812:	ff 77       	andi	r31, 0x7F	; 127
    1814:	3f 2e       	mov	r3, r31
    1816:	36 fe       	sbrs	r3, 6
    1818:	0d c0       	rjmp	.+26     	; 0x1834 <vfprintf+0x2ca>
    181a:	23 2d       	mov	r18, r3
    181c:	2e 7f       	andi	r18, 0xFE	; 254
    181e:	a2 2e       	mov	r10, r18
    1820:	89 14       	cp	r8, r9
    1822:	58 f4       	brcc	.+22     	; 0x183a <vfprintf+0x2d0>
    1824:	34 fe       	sbrs	r3, 4
    1826:	0b c0       	rjmp	.+22     	; 0x183e <vfprintf+0x2d4>
    1828:	32 fc       	sbrc	r3, 2
    182a:	09 c0       	rjmp	.+18     	; 0x183e <vfprintf+0x2d4>
    182c:	83 2d       	mov	r24, r3
    182e:	8e 7e       	andi	r24, 0xEE	; 238
    1830:	a8 2e       	mov	r10, r24
    1832:	05 c0       	rjmp	.+10     	; 0x183e <vfprintf+0x2d4>
    1834:	b8 2c       	mov	r11, r8
    1836:	a3 2c       	mov	r10, r3
    1838:	03 c0       	rjmp	.+6      	; 0x1840 <vfprintf+0x2d6>
    183a:	b8 2c       	mov	r11, r8
    183c:	01 c0       	rjmp	.+2      	; 0x1840 <vfprintf+0x2d6>
    183e:	b9 2c       	mov	r11, r9
    1840:	a4 fe       	sbrs	r10, 4
    1842:	0f c0       	rjmp	.+30     	; 0x1862 <vfprintf+0x2f8>
    1844:	fe 01       	movw	r30, r28
    1846:	e8 0d       	add	r30, r8
    1848:	f1 1d       	adc	r31, r1
    184a:	80 81       	ld	r24, Z
    184c:	80 33       	cpi	r24, 0x30	; 48
    184e:	21 f4       	brne	.+8      	; 0x1858 <vfprintf+0x2ee>
    1850:	9a 2d       	mov	r25, r10
    1852:	99 7e       	andi	r25, 0xE9	; 233
    1854:	a9 2e       	mov	r10, r25
    1856:	09 c0       	rjmp	.+18     	; 0x186a <vfprintf+0x300>
    1858:	a2 fe       	sbrs	r10, 2
    185a:	06 c0       	rjmp	.+12     	; 0x1868 <vfprintf+0x2fe>
    185c:	b3 94       	inc	r11
    185e:	b3 94       	inc	r11
    1860:	04 c0       	rjmp	.+8      	; 0x186a <vfprintf+0x300>
    1862:	8a 2d       	mov	r24, r10
    1864:	86 78       	andi	r24, 0x86	; 134
    1866:	09 f0       	breq	.+2      	; 0x186a <vfprintf+0x300>
    1868:	b3 94       	inc	r11
    186a:	a3 fc       	sbrc	r10, 3
    186c:	11 c0       	rjmp	.+34     	; 0x1890 <vfprintf+0x326>
    186e:	a0 fe       	sbrs	r10, 0
    1870:	06 c0       	rjmp	.+12     	; 0x187e <vfprintf+0x314>
    1872:	b2 14       	cp	r11, r2
    1874:	88 f4       	brcc	.+34     	; 0x1898 <vfprintf+0x32e>
    1876:	28 0c       	add	r2, r8
    1878:	92 2c       	mov	r9, r2
    187a:	9b 18       	sub	r9, r11
    187c:	0e c0       	rjmp	.+28     	; 0x189a <vfprintf+0x330>
    187e:	b2 14       	cp	r11, r2
    1880:	60 f4       	brcc	.+24     	; 0x189a <vfprintf+0x330>
    1882:	b6 01       	movw	r22, r12
    1884:	80 e2       	ldi	r24, 0x20	; 32
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	0e 94 ac 0c 	call	0x1958	; 0x1958 <fputc>
    188c:	b3 94       	inc	r11
    188e:	f7 cf       	rjmp	.-18     	; 0x187e <vfprintf+0x314>
    1890:	b2 14       	cp	r11, r2
    1892:	18 f4       	brcc	.+6      	; 0x189a <vfprintf+0x330>
    1894:	2b 18       	sub	r2, r11
    1896:	02 c0       	rjmp	.+4      	; 0x189c <vfprintf+0x332>
    1898:	98 2c       	mov	r9, r8
    189a:	21 2c       	mov	r2, r1
    189c:	a4 fe       	sbrs	r10, 4
    189e:	10 c0       	rjmp	.+32     	; 0x18c0 <vfprintf+0x356>
    18a0:	b6 01       	movw	r22, r12
    18a2:	80 e3       	ldi	r24, 0x30	; 48
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	0e 94 ac 0c 	call	0x1958	; 0x1958 <fputc>
    18aa:	a2 fe       	sbrs	r10, 2
    18ac:	17 c0       	rjmp	.+46     	; 0x18dc <vfprintf+0x372>
    18ae:	a1 fc       	sbrc	r10, 1
    18b0:	03 c0       	rjmp	.+6      	; 0x18b8 <vfprintf+0x34e>
    18b2:	88 e7       	ldi	r24, 0x78	; 120
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	02 c0       	rjmp	.+4      	; 0x18bc <vfprintf+0x352>
    18b8:	88 e5       	ldi	r24, 0x58	; 88
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	b6 01       	movw	r22, r12
    18be:	0c c0       	rjmp	.+24     	; 0x18d8 <vfprintf+0x36e>
    18c0:	8a 2d       	mov	r24, r10
    18c2:	86 78       	andi	r24, 0x86	; 134
    18c4:	59 f0       	breq	.+22     	; 0x18dc <vfprintf+0x372>
    18c6:	a1 fe       	sbrs	r10, 1
    18c8:	02 c0       	rjmp	.+4      	; 0x18ce <vfprintf+0x364>
    18ca:	8b e2       	ldi	r24, 0x2B	; 43
    18cc:	01 c0       	rjmp	.+2      	; 0x18d0 <vfprintf+0x366>
    18ce:	80 e2       	ldi	r24, 0x20	; 32
    18d0:	a7 fc       	sbrc	r10, 7
    18d2:	8d e2       	ldi	r24, 0x2D	; 45
    18d4:	b6 01       	movw	r22, r12
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	0e 94 ac 0c 	call	0x1958	; 0x1958 <fputc>
    18dc:	89 14       	cp	r8, r9
    18de:	38 f4       	brcc	.+14     	; 0x18ee <vfprintf+0x384>
    18e0:	b6 01       	movw	r22, r12
    18e2:	80 e3       	ldi	r24, 0x30	; 48
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	0e 94 ac 0c 	call	0x1958	; 0x1958 <fputc>
    18ea:	9a 94       	dec	r9
    18ec:	f7 cf       	rjmp	.-18     	; 0x18dc <vfprintf+0x372>
    18ee:	8a 94       	dec	r8
    18f0:	f3 01       	movw	r30, r6
    18f2:	e8 0d       	add	r30, r8
    18f4:	f1 1d       	adc	r31, r1
    18f6:	80 81       	ld	r24, Z
    18f8:	b6 01       	movw	r22, r12
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	0e 94 ac 0c 	call	0x1958	; 0x1958 <fputc>
    1900:	81 10       	cpse	r8, r1
    1902:	f5 cf       	rjmp	.-22     	; 0x18ee <vfprintf+0x384>
    1904:	22 20       	and	r2, r2
    1906:	09 f4       	brne	.+2      	; 0x190a <vfprintf+0x3a0>
    1908:	42 ce       	rjmp	.-892    	; 0x158e <vfprintf+0x24>
    190a:	b6 01       	movw	r22, r12
    190c:	80 e2       	ldi	r24, 0x20	; 32
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	0e 94 ac 0c 	call	0x1958	; 0x1958 <fputc>
    1914:	2a 94       	dec	r2
    1916:	f6 cf       	rjmp	.-20     	; 0x1904 <vfprintf+0x39a>
    1918:	f6 01       	movw	r30, r12
    191a:	86 81       	ldd	r24, Z+6	; 0x06
    191c:	97 81       	ldd	r25, Z+7	; 0x07
    191e:	02 c0       	rjmp	.+4      	; 0x1924 <vfprintf+0x3ba>
    1920:	8f ef       	ldi	r24, 0xFF	; 255
    1922:	9f ef       	ldi	r25, 0xFF	; 255
    1924:	2b 96       	adiw	r28, 0x0b	; 11
    1926:	e2 e1       	ldi	r30, 0x12	; 18
    1928:	0c 94 94 0d 	jmp	0x1b28	; 0x1b28 <__epilogue_restores__>

0000192c <strnlen_P>:
    192c:	fc 01       	movw	r30, r24
    192e:	05 90       	lpm	r0, Z+
    1930:	61 50       	subi	r22, 0x01	; 1
    1932:	70 40       	sbci	r23, 0x00	; 0
    1934:	01 10       	cpse	r0, r1
    1936:	d8 f7       	brcc	.-10     	; 0x192e <strnlen_P+0x2>
    1938:	80 95       	com	r24
    193a:	90 95       	com	r25
    193c:	8e 0f       	add	r24, r30
    193e:	9f 1f       	adc	r25, r31
    1940:	08 95       	ret

00001942 <strnlen>:
    1942:	fc 01       	movw	r30, r24
    1944:	61 50       	subi	r22, 0x01	; 1
    1946:	70 40       	sbci	r23, 0x00	; 0
    1948:	01 90       	ld	r0, Z+
    194a:	01 10       	cpse	r0, r1
    194c:	d8 f7       	brcc	.-10     	; 0x1944 <strnlen+0x2>
    194e:	80 95       	com	r24
    1950:	90 95       	com	r25
    1952:	8e 0f       	add	r24, r30
    1954:	9f 1f       	adc	r25, r31
    1956:	08 95       	ret

00001958 <fputc>:
    1958:	0f 93       	push	r16
    195a:	1f 93       	push	r17
    195c:	cf 93       	push	r28
    195e:	df 93       	push	r29
    1960:	fb 01       	movw	r30, r22
    1962:	23 81       	ldd	r18, Z+3	; 0x03
    1964:	21 fd       	sbrc	r18, 1
    1966:	03 c0       	rjmp	.+6      	; 0x196e <fputc+0x16>
    1968:	8f ef       	ldi	r24, 0xFF	; 255
    196a:	9f ef       	ldi	r25, 0xFF	; 255
    196c:	2c c0       	rjmp	.+88     	; 0x19c6 <fputc+0x6e>
    196e:	22 ff       	sbrs	r18, 2
    1970:	16 c0       	rjmp	.+44     	; 0x199e <fputc+0x46>
    1972:	46 81       	ldd	r20, Z+6	; 0x06
    1974:	57 81       	ldd	r21, Z+7	; 0x07
    1976:	24 81       	ldd	r18, Z+4	; 0x04
    1978:	35 81       	ldd	r19, Z+5	; 0x05
    197a:	42 17       	cp	r20, r18
    197c:	53 07       	cpc	r21, r19
    197e:	44 f4       	brge	.+16     	; 0x1990 <fputc+0x38>
    1980:	a0 81       	ld	r26, Z
    1982:	b1 81       	ldd	r27, Z+1	; 0x01
    1984:	9d 01       	movw	r18, r26
    1986:	2f 5f       	subi	r18, 0xFF	; 255
    1988:	3f 4f       	sbci	r19, 0xFF	; 255
    198a:	31 83       	std	Z+1, r19	; 0x01
    198c:	20 83       	st	Z, r18
    198e:	8c 93       	st	X, r24
    1990:	26 81       	ldd	r18, Z+6	; 0x06
    1992:	37 81       	ldd	r19, Z+7	; 0x07
    1994:	2f 5f       	subi	r18, 0xFF	; 255
    1996:	3f 4f       	sbci	r19, 0xFF	; 255
    1998:	37 83       	std	Z+7, r19	; 0x07
    199a:	26 83       	std	Z+6, r18	; 0x06
    199c:	14 c0       	rjmp	.+40     	; 0x19c6 <fputc+0x6e>
    199e:	8b 01       	movw	r16, r22
    19a0:	ec 01       	movw	r28, r24
    19a2:	fb 01       	movw	r30, r22
    19a4:	00 84       	ldd	r0, Z+8	; 0x08
    19a6:	f1 85       	ldd	r31, Z+9	; 0x09
    19a8:	e0 2d       	mov	r30, r0
    19aa:	09 95       	icall
    19ac:	89 2b       	or	r24, r25
    19ae:	e1 f6       	brne	.-72     	; 0x1968 <fputc+0x10>
    19b0:	d8 01       	movw	r26, r16
    19b2:	16 96       	adiw	r26, 0x06	; 6
    19b4:	8d 91       	ld	r24, X+
    19b6:	9c 91       	ld	r25, X
    19b8:	17 97       	sbiw	r26, 0x07	; 7
    19ba:	01 96       	adiw	r24, 0x01	; 1
    19bc:	17 96       	adiw	r26, 0x07	; 7
    19be:	9c 93       	st	X, r25
    19c0:	8e 93       	st	-X, r24
    19c2:	16 97       	sbiw	r26, 0x06	; 6
    19c4:	ce 01       	movw	r24, r28
    19c6:	df 91       	pop	r29
    19c8:	cf 91       	pop	r28
    19ca:	1f 91       	pop	r17
    19cc:	0f 91       	pop	r16
    19ce:	08 95       	ret

000019d0 <__ultoa_invert>:
    19d0:	fa 01       	movw	r30, r20
    19d2:	aa 27       	eor	r26, r26
    19d4:	28 30       	cpi	r18, 0x08	; 8
    19d6:	51 f1       	breq	.+84     	; 0x1a2c <__ultoa_invert+0x5c>
    19d8:	20 31       	cpi	r18, 0x10	; 16
    19da:	81 f1       	breq	.+96     	; 0x1a3c <__ultoa_invert+0x6c>
    19dc:	e8 94       	clt
    19de:	6f 93       	push	r22
    19e0:	6e 7f       	andi	r22, 0xFE	; 254
    19e2:	6e 5f       	subi	r22, 0xFE	; 254
    19e4:	7f 4f       	sbci	r23, 0xFF	; 255
    19e6:	8f 4f       	sbci	r24, 0xFF	; 255
    19e8:	9f 4f       	sbci	r25, 0xFF	; 255
    19ea:	af 4f       	sbci	r26, 0xFF	; 255
    19ec:	b1 e0       	ldi	r27, 0x01	; 1
    19ee:	3e d0       	rcall	.+124    	; 0x1a6c <__ultoa_invert+0x9c>
    19f0:	b4 e0       	ldi	r27, 0x04	; 4
    19f2:	3c d0       	rcall	.+120    	; 0x1a6c <__ultoa_invert+0x9c>
    19f4:	67 0f       	add	r22, r23
    19f6:	78 1f       	adc	r23, r24
    19f8:	89 1f       	adc	r24, r25
    19fa:	9a 1f       	adc	r25, r26
    19fc:	a1 1d       	adc	r26, r1
    19fe:	68 0f       	add	r22, r24
    1a00:	79 1f       	adc	r23, r25
    1a02:	8a 1f       	adc	r24, r26
    1a04:	91 1d       	adc	r25, r1
    1a06:	a1 1d       	adc	r26, r1
    1a08:	6a 0f       	add	r22, r26
    1a0a:	71 1d       	adc	r23, r1
    1a0c:	81 1d       	adc	r24, r1
    1a0e:	91 1d       	adc	r25, r1
    1a10:	a1 1d       	adc	r26, r1
    1a12:	20 d0       	rcall	.+64     	; 0x1a54 <__ultoa_invert+0x84>
    1a14:	09 f4       	brne	.+2      	; 0x1a18 <__ultoa_invert+0x48>
    1a16:	68 94       	set
    1a18:	3f 91       	pop	r19
    1a1a:	2a e0       	ldi	r18, 0x0A	; 10
    1a1c:	26 9f       	mul	r18, r22
    1a1e:	11 24       	eor	r1, r1
    1a20:	30 19       	sub	r19, r0
    1a22:	30 5d       	subi	r19, 0xD0	; 208
    1a24:	31 93       	st	Z+, r19
    1a26:	de f6       	brtc	.-74     	; 0x19de <__ultoa_invert+0xe>
    1a28:	cf 01       	movw	r24, r30
    1a2a:	08 95       	ret
    1a2c:	46 2f       	mov	r20, r22
    1a2e:	47 70       	andi	r20, 0x07	; 7
    1a30:	40 5d       	subi	r20, 0xD0	; 208
    1a32:	41 93       	st	Z+, r20
    1a34:	b3 e0       	ldi	r27, 0x03	; 3
    1a36:	0f d0       	rcall	.+30     	; 0x1a56 <__ultoa_invert+0x86>
    1a38:	c9 f7       	brne	.-14     	; 0x1a2c <__ultoa_invert+0x5c>
    1a3a:	f6 cf       	rjmp	.-20     	; 0x1a28 <__ultoa_invert+0x58>
    1a3c:	46 2f       	mov	r20, r22
    1a3e:	4f 70       	andi	r20, 0x0F	; 15
    1a40:	40 5d       	subi	r20, 0xD0	; 208
    1a42:	4a 33       	cpi	r20, 0x3A	; 58
    1a44:	18 f0       	brcs	.+6      	; 0x1a4c <__ultoa_invert+0x7c>
    1a46:	49 5d       	subi	r20, 0xD9	; 217
    1a48:	31 fd       	sbrc	r19, 1
    1a4a:	40 52       	subi	r20, 0x20	; 32
    1a4c:	41 93       	st	Z+, r20
    1a4e:	02 d0       	rcall	.+4      	; 0x1a54 <__ultoa_invert+0x84>
    1a50:	a9 f7       	brne	.-22     	; 0x1a3c <__ultoa_invert+0x6c>
    1a52:	ea cf       	rjmp	.-44     	; 0x1a28 <__ultoa_invert+0x58>
    1a54:	b4 e0       	ldi	r27, 0x04	; 4
    1a56:	a6 95       	lsr	r26
    1a58:	97 95       	ror	r25
    1a5a:	87 95       	ror	r24
    1a5c:	77 95       	ror	r23
    1a5e:	67 95       	ror	r22
    1a60:	ba 95       	dec	r27
    1a62:	c9 f7       	brne	.-14     	; 0x1a56 <__ultoa_invert+0x86>
    1a64:	00 97       	sbiw	r24, 0x00	; 0
    1a66:	61 05       	cpc	r22, r1
    1a68:	71 05       	cpc	r23, r1
    1a6a:	08 95       	ret
    1a6c:	9b 01       	movw	r18, r22
    1a6e:	ac 01       	movw	r20, r24
    1a70:	0a 2e       	mov	r0, r26
    1a72:	06 94       	lsr	r0
    1a74:	57 95       	ror	r21
    1a76:	47 95       	ror	r20
    1a78:	37 95       	ror	r19
    1a7a:	27 95       	ror	r18
    1a7c:	ba 95       	dec	r27
    1a7e:	c9 f7       	brne	.-14     	; 0x1a72 <__ultoa_invert+0xa2>
    1a80:	62 0f       	add	r22, r18
    1a82:	73 1f       	adc	r23, r19
    1a84:	84 1f       	adc	r24, r20
    1a86:	95 1f       	adc	r25, r21
    1a88:	a0 1d       	adc	r26, r0
    1a8a:	08 95       	ret

00001a8c <__divmodsi4>:
    1a8c:	05 2e       	mov	r0, r21
    1a8e:	97 fb       	bst	r25, 7
    1a90:	1e f4       	brtc	.+6      	; 0x1a98 <__divmodsi4+0xc>
    1a92:	00 94       	com	r0
    1a94:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <__negsi2>
    1a98:	57 fd       	sbrc	r21, 7
    1a9a:	07 d0       	rcall	.+14     	; 0x1aaa <__divmodsi4_neg2>
    1a9c:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <__udivmodsi4>
    1aa0:	07 fc       	sbrc	r0, 7
    1aa2:	03 d0       	rcall	.+6      	; 0x1aaa <__divmodsi4_neg2>
    1aa4:	4e f4       	brtc	.+18     	; 0x1ab8 <__divmodsi4_exit>
    1aa6:	0c 94 5d 0d 	jmp	0x1aba	; 0x1aba <__negsi2>

00001aaa <__divmodsi4_neg2>:
    1aaa:	50 95       	com	r21
    1aac:	40 95       	com	r20
    1aae:	30 95       	com	r19
    1ab0:	21 95       	neg	r18
    1ab2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ab4:	4f 4f       	sbci	r20, 0xFF	; 255
    1ab6:	5f 4f       	sbci	r21, 0xFF	; 255

00001ab8 <__divmodsi4_exit>:
    1ab8:	08 95       	ret

00001aba <__negsi2>:
    1aba:	90 95       	com	r25
    1abc:	80 95       	com	r24
    1abe:	70 95       	com	r23
    1ac0:	61 95       	neg	r22
    1ac2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ac6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac8:	08 95       	ret

00001aca <__muluhisi3>:
    1aca:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <__umulhisi3>
    1ace:	a5 9f       	mul	r26, r21
    1ad0:	90 0d       	add	r25, r0
    1ad2:	b4 9f       	mul	r27, r20
    1ad4:	90 0d       	add	r25, r0
    1ad6:	a4 9f       	mul	r26, r20
    1ad8:	80 0d       	add	r24, r0
    1ada:	91 1d       	adc	r25, r1
    1adc:	11 24       	eor	r1, r1
    1ade:	08 95       	ret

00001ae0 <__mulshisi3>:
    1ae0:	b7 ff       	sbrs	r27, 7
    1ae2:	0c 94 65 0d 	jmp	0x1aca	; 0x1aca <__muluhisi3>

00001ae6 <__mulohisi3>:
    1ae6:	0e 94 65 0d 	call	0x1aca	; 0x1aca <__muluhisi3>
    1aea:	82 1b       	sub	r24, r18
    1aec:	93 0b       	sbc	r25, r19
    1aee:	08 95       	ret

00001af0 <__prologue_saves__>:
    1af0:	2f 92       	push	r2
    1af2:	3f 92       	push	r3
    1af4:	4f 92       	push	r4
    1af6:	5f 92       	push	r5
    1af8:	6f 92       	push	r6
    1afa:	7f 92       	push	r7
    1afc:	8f 92       	push	r8
    1afe:	9f 92       	push	r9
    1b00:	af 92       	push	r10
    1b02:	bf 92       	push	r11
    1b04:	cf 92       	push	r12
    1b06:	df 92       	push	r13
    1b08:	ef 92       	push	r14
    1b0a:	ff 92       	push	r15
    1b0c:	0f 93       	push	r16
    1b0e:	1f 93       	push	r17
    1b10:	cf 93       	push	r28
    1b12:	df 93       	push	r29
    1b14:	cd b7       	in	r28, 0x3d	; 61
    1b16:	de b7       	in	r29, 0x3e	; 62
    1b18:	ca 1b       	sub	r28, r26
    1b1a:	db 0b       	sbc	r29, r27
    1b1c:	0f b6       	in	r0, 0x3f	; 63
    1b1e:	f8 94       	cli
    1b20:	de bf       	out	0x3e, r29	; 62
    1b22:	0f be       	out	0x3f, r0	; 63
    1b24:	cd bf       	out	0x3d, r28	; 61
    1b26:	09 94       	ijmp

00001b28 <__epilogue_restores__>:
    1b28:	2a 88       	ldd	r2, Y+18	; 0x12
    1b2a:	39 88       	ldd	r3, Y+17	; 0x11
    1b2c:	48 88       	ldd	r4, Y+16	; 0x10
    1b2e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b30:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b32:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b34:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b36:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b38:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b3a:	b9 84       	ldd	r11, Y+9	; 0x09
    1b3c:	c8 84       	ldd	r12, Y+8	; 0x08
    1b3e:	df 80       	ldd	r13, Y+7	; 0x07
    1b40:	ee 80       	ldd	r14, Y+6	; 0x06
    1b42:	fd 80       	ldd	r15, Y+5	; 0x05
    1b44:	0c 81       	ldd	r16, Y+4	; 0x04
    1b46:	1b 81       	ldd	r17, Y+3	; 0x03
    1b48:	aa 81       	ldd	r26, Y+2	; 0x02
    1b4a:	b9 81       	ldd	r27, Y+1	; 0x01
    1b4c:	ce 0f       	add	r28, r30
    1b4e:	d1 1d       	adc	r29, r1
    1b50:	0f b6       	in	r0, 0x3f	; 63
    1b52:	f8 94       	cli
    1b54:	de bf       	out	0x3e, r29	; 62
    1b56:	0f be       	out	0x3f, r0	; 63
    1b58:	cd bf       	out	0x3d, r28	; 61
    1b5a:	ed 01       	movw	r28, r26
    1b5c:	08 95       	ret

00001b5e <__udivmodsi4>:
    1b5e:	a1 e2       	ldi	r26, 0x21	; 33
    1b60:	1a 2e       	mov	r1, r26
    1b62:	aa 1b       	sub	r26, r26
    1b64:	bb 1b       	sub	r27, r27
    1b66:	fd 01       	movw	r30, r26
    1b68:	0d c0       	rjmp	.+26     	; 0x1b84 <__udivmodsi4_ep>

00001b6a <__udivmodsi4_loop>:
    1b6a:	aa 1f       	adc	r26, r26
    1b6c:	bb 1f       	adc	r27, r27
    1b6e:	ee 1f       	adc	r30, r30
    1b70:	ff 1f       	adc	r31, r31
    1b72:	a2 17       	cp	r26, r18
    1b74:	b3 07       	cpc	r27, r19
    1b76:	e4 07       	cpc	r30, r20
    1b78:	f5 07       	cpc	r31, r21
    1b7a:	20 f0       	brcs	.+8      	; 0x1b84 <__udivmodsi4_ep>
    1b7c:	a2 1b       	sub	r26, r18
    1b7e:	b3 0b       	sbc	r27, r19
    1b80:	e4 0b       	sbc	r30, r20
    1b82:	f5 0b       	sbc	r31, r21

00001b84 <__udivmodsi4_ep>:
    1b84:	66 1f       	adc	r22, r22
    1b86:	77 1f       	adc	r23, r23
    1b88:	88 1f       	adc	r24, r24
    1b8a:	99 1f       	adc	r25, r25
    1b8c:	1a 94       	dec	r1
    1b8e:	69 f7       	brne	.-38     	; 0x1b6a <__udivmodsi4_loop>
    1b90:	60 95       	com	r22
    1b92:	70 95       	com	r23
    1b94:	80 95       	com	r24
    1b96:	90 95       	com	r25
    1b98:	9b 01       	movw	r18, r22
    1b9a:	ac 01       	movw	r20, r24
    1b9c:	bd 01       	movw	r22, r26
    1b9e:	cf 01       	movw	r24, r30
    1ba0:	08 95       	ret

00001ba2 <_exit>:
    1ba2:	f8 94       	cli

00001ba4 <__stop_program>:
    1ba4:	ff cf       	rjmp	.-2      	; 0x1ba4 <__stop_program>
