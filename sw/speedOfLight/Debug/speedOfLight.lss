
speedOfLight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001d8  00800100  000035fe  00003692  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000035fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003f  008002d8  008002d8  0000386a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000386a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000038c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00003908  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003e6e  00000000  00000000  00003a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ea2  00000000  00000000  000078ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002096  00000000  00000000  00008790  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000650  00000000  00000000  0000a828  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009b7  00000000  00000000  0000ae78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000025a8  00000000  00000000  0000b82f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000558  00000000  00000000  0000ddd7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
       4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
       8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
       c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      10:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      14:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      18:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      1c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      20:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      24:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      28:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      2c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      30:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      34:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      38:	0c 94 b9 02 	jmp	0x572	; 0x572 <__vector_14>
      3c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      40:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      44:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <__vector_17>
      48:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      4c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      50:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      54:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      58:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      5c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      68:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      6c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      70:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      74:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      78:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      7c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      80:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      84:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__vector_33>
      88:	0c 94 4e 02 	jmp	0x49c	; 0x49c <__vector_34>
      8c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      90:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      94:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      98:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      9c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      a0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      a4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      a8:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__vector_42>
      ac:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      b0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      b4:	98 0d       	add	r25, r8
      b6:	d1 0e       	add	r13, r17
      b8:	0c 10       	cpse	r0, r12
      ba:	c4 10       	cpse	r12, r4
      bc:	7c 11       	cpse	r23, r12
      be:	b7 12       	cpse	r11, r23
      c0:	6f 13       	cpse	r22, r31

000000c2 <__ctors_end>:
      c2:	11 24       	eor	r1, r1
      c4:	1f be       	out	0x3f, r1	; 63
      c6:	cf ef       	ldi	r28, 0xFF	; 255
      c8:	d8 e0       	ldi	r29, 0x08	; 8
      ca:	de bf       	out	0x3e, r29	; 62
      cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_copy_data>:
      ce:	12 e0       	ldi	r17, 0x02	; 2
      d0:	a0 e0       	ldi	r26, 0x00	; 0
      d2:	b1 e0       	ldi	r27, 0x01	; 1
      d4:	ee ef       	ldi	r30, 0xFE	; 254
      d6:	f5 e3       	ldi	r31, 0x35	; 53
      d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x10>
      da:	05 90       	lpm	r0, Z+
      dc:	0d 92       	st	X+, r0
      de:	a8 3d       	cpi	r26, 0xD8	; 216
      e0:	b1 07       	cpc	r27, r17
      e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0xc>

000000e4 <__do_clear_bss>:
      e4:	23 e0       	ldi	r18, 0x03	; 3
      e6:	a8 ed       	ldi	r26, 0xD8	; 216
      e8:	b2 e0       	ldi	r27, 0x02	; 2
      ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
      ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
      ee:	a7 31       	cpi	r26, 0x17	; 23
      f0:	b2 07       	cpc	r27, r18
      f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>
      f4:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <main>
      f8:	0c 94 fd 1a 	jmp	0x35fa	; 0x35fa <_exit>

000000fc <__bad_interrupt>:
      fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000100 <spiSetup>:
	
}

void spiSetup(){
	// MOSI and SCK to outputs
	DDRB |= (1<<3)|(1<<5);
     100:	84 b1       	in	r24, 0x04	; 4
     102:	88 62       	ori	r24, 0x28	; 40
     104:	84 b9       	out	0x04, r24	; 4
	// STC int enabled master mode, clk/16
	SPCR0 = (1 << SPIE) | (1 << SPE) | (1 << MSTR) | (1 << SPR0);
     106:	81 ed       	ldi	r24, 0xD1	; 209
     108:	8c bd       	out	0x2c, r24	; 44
     10a:	08 95       	ret

0000010c <tmrSetup>:
	// timer 3 is used to update the LED display as well as read the button matrix.
	// COMPA will trigger the next multiplexing cycle of the led matrices
	// COMPB will read the next line of buttons
	
	// CTC mode clk/1
	TCCR3B = (1 << WGM12) | (1 << CS11);
     10c:	8a e0       	ldi	r24, 0x0A	; 10
     10e:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
	//OCR3A = 3700;
	OCR3A = 3000;
     112:	88 eb       	ldi	r24, 0xB8	; 184
     114:	9b e0       	ldi	r25, 0x0B	; 11
     116:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     11a:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	OCR3B = 1850;
     11e:	8a e3       	ldi	r24, 0x3A	; 58
     120:	97 e0       	ldi	r25, 0x07	; 7
     122:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     126:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	TIMSK3 |= (1 << OCIE3B) | 1 << (OCIE3A);
     12a:	e1 e7       	ldi	r30, 0x71	; 113
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	80 81       	ld	r24, Z
     130:	86 60       	ori	r24, 0x06	; 6
     132:	80 83       	st	Z, r24
	TCNT3 = 0;
     134:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     138:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
     13c:	08 95       	ret

0000013e <buttonsInit>:
									  0x73}; // p


void buttonsInit(){
	// set DDR for button matrix
	DDRD = 0xFF;
     13e:	8f ef       	ldi	r24, 0xFF	; 255
     140:	8a b9       	out	0x0a, r24	; 10
	PORTC = 0xFF;
     142:	88 b9       	out	0x08, r24	; 8
	
	// set DDR for latch and blank pins
	DDRB |= 1 << LED_L;
     144:	20 9a       	sbi	0x04, 0	; 4
	DDRE|= 1 << LED_B;
     146:	6b 9a       	sbi	0x0d, 3	; 13
	DDRE |= 1 << 2; // enable LEDs
     148:	6a 9a       	sbi	0x0d, 2	; 13
	PORTE |= 1 << LED_B;
     14a:	73 9a       	sbi	0x0e, 3	; 14
	
	spiSetup();
     14c:	0e 94 80 00 	call	0x100	; 0x100 <spiSetup>
	tmrSetup();
     150:	0e 94 86 00 	call	0x10c	; 0x10c <tmrSetup>
     154:	08 95       	ret

00000156 <isButtonDown>:
	TIMSK3 |= (1 << OCIE3B) | 1 << (OCIE3A);
	TCNT3 = 0;
}

uint8_t isButtonDown(uint8_t x, uint8_t y){
	return buttonMemory[x] & (1 << y); // may need to change to 1 << (5 - x) test this later
     156:	e8 2f       	mov	r30, r24
     158:	f0 e0       	ldi	r31, 0x00	; 0
     15a:	eb 51       	subi	r30, 0x1B	; 27
     15c:	fd 4f       	sbci	r31, 0xFD	; 253
     15e:	20 81       	ld	r18, Z
     160:	81 e0       	ldi	r24, 0x01	; 1
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	02 c0       	rjmp	.+4      	; 0x16a <isButtonDown+0x14>
     166:	88 0f       	add	r24, r24
     168:	99 1f       	adc	r25, r25
     16a:	6a 95       	dec	r22
     16c:	e2 f7       	brpl	.-8      	; 0x166 <isButtonDown+0x10>
}
     16e:	82 23       	and	r24, r18
     170:	08 95       	ret

00000172 <setButtonLed>:

void setButtonLed(uint8_t x, uint8_t y, uint8_t value){
	if(value){
     172:	44 23       	and	r20, r20
     174:	89 f0       	breq	.+34     	; 0x198 <setButtonLed+0x26>
		ledMemory[9 + y] |= 1 << x;
     176:	e6 2f       	mov	r30, r22
     178:	f0 e0       	ldi	r31, 0x00	; 0
     17a:	ed 5e       	subi	r30, 0xED	; 237
     17c:	fe 4f       	sbci	r31, 0xFE	; 254
     17e:	40 81       	ld	r20, Z
     180:	21 e0       	ldi	r18, 0x01	; 1
     182:	30 e0       	ldi	r19, 0x00	; 0
     184:	b9 01       	movw	r22, r18
     186:	02 c0       	rjmp	.+4      	; 0x18c <setButtonLed+0x1a>
     188:	66 0f       	add	r22, r22
     18a:	77 1f       	adc	r23, r23
     18c:	8a 95       	dec	r24
     18e:	e2 f7       	brpl	.-8      	; 0x188 <setButtonLed+0x16>
     190:	cb 01       	movw	r24, r22
     192:	84 2b       	or	r24, r20
     194:	80 83       	st	Z, r24
		return;
     196:	08 95       	ret
	}
	ledMemory[9 + y] &= ~(1 << x);
     198:	e6 2f       	mov	r30, r22
     19a:	f0 e0       	ldi	r31, 0x00	; 0
     19c:	ed 5e       	subi	r30, 0xED	; 237
     19e:	fe 4f       	sbci	r31, 0xFE	; 254
     1a0:	40 81       	ld	r20, Z
     1a2:	21 e0       	ldi	r18, 0x01	; 1
     1a4:	30 e0       	ldi	r19, 0x00	; 0
     1a6:	b9 01       	movw	r22, r18
     1a8:	02 c0       	rjmp	.+4      	; 0x1ae <setButtonLed+0x3c>
     1aa:	66 0f       	add	r22, r22
     1ac:	77 1f       	adc	r23, r23
     1ae:	8a 95       	dec	r24
     1b0:	e2 f7       	brpl	.-8      	; 0x1aa <setButtonLed+0x38>
     1b2:	cb 01       	movw	r24, r22
     1b4:	80 95       	com	r24
     1b6:	84 23       	and	r24, r20
     1b8:	80 83       	st	Z, r24
     1ba:	08 95       	ret

000001bc <getButtonLed>:
	
}

int getButtonLed(uint8_t x, uint8_t y){
		return (ledMemory[9 + y] >> x) & 0x01;
     1bc:	e6 2f       	mov	r30, r22
     1be:	f0 e0       	ldi	r31, 0x00	; 0
     1c0:	ed 5e       	subi	r30, 0xED	; 237
     1c2:	fe 4f       	sbci	r31, 0xFE	; 254
     1c4:	20 81       	ld	r18, Z
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	a9 01       	movw	r20, r18
     1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <getButtonLed+0x14>
     1cc:	55 95       	asr	r21
     1ce:	47 95       	ror	r20
     1d0:	8a 95       	dec	r24
     1d2:	e2 f7       	brpl	.-8      	; 0x1cc <getButtonLed+0x10>
     1d4:	ca 01       	movw	r24, r20
	
}
     1d6:	81 70       	andi	r24, 0x01	; 1
     1d8:	99 27       	eor	r25, r25
     1da:	08 95       	ret

000001dc <setScore>:

void setScore(uint8_t display, uint16_t value){
     1dc:	cf 93       	push	r28
     1de:	df 93       	push	r29
     1e0:	eb 01       	movw	r28, r22
	ledMemory[3*display] = value % 10;
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	ac 01       	movw	r20, r24
     1e6:	44 0f       	add	r20, r20
     1e8:	55 1f       	adc	r21, r21
     1ea:	48 0f       	add	r20, r24
     1ec:	59 1f       	adc	r21, r25
     1ee:	9b 01       	movw	r18, r22
     1f0:	ad ec       	ldi	r26, 0xCD	; 205
     1f2:	bc ec       	ldi	r27, 0xCC	; 204
     1f4:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__umulhisi3>
     1f8:	fc 01       	movw	r30, r24
     1fa:	f6 95       	lsr	r31
     1fc:	e7 95       	ror	r30
     1fe:	f6 95       	lsr	r31
     200:	e7 95       	ror	r30
     202:	f6 95       	lsr	r31
     204:	e7 95       	ror	r30
     206:	9f 01       	movw	r18, r30
     208:	22 0f       	add	r18, r18
     20a:	33 1f       	adc	r19, r19
     20c:	cf 01       	movw	r24, r30
     20e:	88 0f       	add	r24, r24
     210:	99 1f       	adc	r25, r25
     212:	88 0f       	add	r24, r24
     214:	99 1f       	adc	r25, r25
     216:	88 0f       	add	r24, r24
     218:	99 1f       	adc	r25, r25
     21a:	82 0f       	add	r24, r18
     21c:	93 1f       	adc	r25, r19
     21e:	9e 01       	movw	r18, r28
     220:	28 1b       	sub	r18, r24
     222:	39 0b       	sbc	r19, r25
     224:	da 01       	movw	r26, r20
     226:	a6 5f       	subi	r26, 0xF6	; 246
     228:	be 4f       	sbci	r27, 0xFE	; 254
     22a:	2c 93       	st	X, r18
	ledMemory[3*display+1] = (value / 10) % 10;
     22c:	9f 01       	movw	r18, r30
     22e:	ad ec       	ldi	r26, 0xCD	; 205
     230:	bc ec       	ldi	r27, 0xCC	; 204
     232:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__umulhisi3>
     236:	96 95       	lsr	r25
     238:	87 95       	ror	r24
     23a:	96 95       	lsr	r25
     23c:	87 95       	ror	r24
     23e:	96 95       	lsr	r25
     240:	87 95       	ror	r24
     242:	9c 01       	movw	r18, r24
     244:	22 0f       	add	r18, r18
     246:	33 1f       	adc	r19, r19
     248:	88 0f       	add	r24, r24
     24a:	99 1f       	adc	r25, r25
     24c:	88 0f       	add	r24, r24
     24e:	99 1f       	adc	r25, r25
     250:	88 0f       	add	r24, r24
     252:	99 1f       	adc	r25, r25
     254:	82 0f       	add	r24, r18
     256:	93 1f       	adc	r25, r19
     258:	e8 1b       	sub	r30, r24
     25a:	f9 0b       	sbc	r31, r25
     25c:	da 01       	movw	r26, r20
     25e:	a5 5f       	subi	r26, 0xF5	; 245
     260:	be 4f       	sbci	r27, 0xFE	; 254
     262:	ec 93       	st	X, r30
	ledMemory[3*display+2] = (value / 100) % 10;
     264:	9e 01       	movw	r18, r28
     266:	36 95       	lsr	r19
     268:	27 95       	ror	r18
     26a:	36 95       	lsr	r19
     26c:	27 95       	ror	r18
     26e:	ab e7       	ldi	r26, 0x7B	; 123
     270:	b4 e1       	ldi	r27, 0x14	; 20
     272:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__umulhisi3>
     276:	fc 01       	movw	r30, r24
     278:	f6 95       	lsr	r31
     27a:	e7 95       	ror	r30
     27c:	9f 01       	movw	r18, r30
     27e:	ad ec       	ldi	r26, 0xCD	; 205
     280:	bc ec       	ldi	r27, 0xCC	; 204
     282:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__umulhisi3>
     286:	96 95       	lsr	r25
     288:	87 95       	ror	r24
     28a:	96 95       	lsr	r25
     28c:	87 95       	ror	r24
     28e:	96 95       	lsr	r25
     290:	87 95       	ror	r24
     292:	9c 01       	movw	r18, r24
     294:	22 0f       	add	r18, r18
     296:	33 1f       	adc	r19, r19
     298:	88 0f       	add	r24, r24
     29a:	99 1f       	adc	r25, r25
     29c:	88 0f       	add	r24, r24
     29e:	99 1f       	adc	r25, r25
     2a0:	88 0f       	add	r24, r24
     2a2:	99 1f       	adc	r25, r25
     2a4:	82 0f       	add	r24, r18
     2a6:	93 1f       	adc	r25, r19
     2a8:	e8 1b       	sub	r30, r24
     2aa:	f9 0b       	sbc	r31, r25
     2ac:	da 01       	movw	r26, r20
     2ae:	a4 5f       	subi	r26, 0xF4	; 244
     2b0:	be 4f       	sbci	r27, 0xFE	; 254
     2b2:	ec 93       	st	X, r30
	
}
     2b4:	df 91       	pop	r29
     2b6:	cf 91       	pop	r28
     2b8:	08 95       	ret

000002ba <setScoreSegment>:

void setScoreSegment(uint8_t segment, uint8_t val){
	ledMemory[segment] = val;
     2ba:	e8 2f       	mov	r30, r24
     2bc:	f0 e0       	ldi	r31, 0x00	; 0
     2be:	e6 5f       	subi	r30, 0xF6	; 246
     2c0:	fe 4f       	sbci	r31, 0xFE	; 254
     2c2:	60 83       	st	Z, r22
     2c4:	08 95       	ret

000002c6 <clearLeds>:
}
	

void clearLeds(uint8_t mode){
     2c6:	1f 93       	push	r17
     2c8:	cf 93       	push	r28
     2ca:	df 93       	push	r29
     2cc:	18 2f       	mov	r17, r24
	for(uint8_t ledx = 0; ledx < 6; ledx++){
     2ce:	d0 e0       	ldi	r29, 0x00	; 0
     2d0:	0b c0       	rjmp	.+22     	; 0x2e8 <clearLeds+0x22>
		for(uint8_t ledy = 0; ledy < 6; ledy++){
			setButtonLed(ledx, ledy, mode);
     2d2:	41 2f       	mov	r20, r17
     2d4:	6c 2f       	mov	r22, r28
     2d6:	8d 2f       	mov	r24, r29
     2d8:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
}
	

void clearLeds(uint8_t mode){
	for(uint8_t ledx = 0; ledx < 6; ledx++){
		for(uint8_t ledy = 0; ledy < 6; ledy++){
     2dc:	cf 5f       	subi	r28, 0xFF	; 255
     2de:	c6 30       	cpi	r28, 0x06	; 6
     2e0:	c1 f7       	brne	.-16     	; 0x2d2 <clearLeds+0xc>
	ledMemory[segment] = val;
}
	

void clearLeds(uint8_t mode){
	for(uint8_t ledx = 0; ledx < 6; ledx++){
     2e2:	df 5f       	subi	r29, 0xFF	; 255
     2e4:	d6 30       	cpi	r29, 0x06	; 6
     2e6:	11 f0       	breq	.+4      	; 0x2ec <clearLeds+0x26>
void setScoreSegment(uint8_t segment, uint8_t val){
	ledMemory[segment] = val;
}
	

void clearLeds(uint8_t mode){
     2e8:	c0 e0       	ldi	r28, 0x00	; 0
     2ea:	f3 cf       	rjmp	.-26     	; 0x2d2 <clearLeds+0xc>
	for(uint8_t ledx = 0; ledx < 6; ledx++){
		for(uint8_t ledy = 0; ledy < 6; ledy++){
			setButtonLed(ledx, ledy, mode);
		}	
	}
}
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	1f 91       	pop	r17
     2f2:	08 95       	ret

000002f4 <__vector_33>:



ISR(TIMER3_COMPA_vect){
     2f4:	1f 92       	push	r1
     2f6:	0f 92       	push	r0
     2f8:	0f b6       	in	r0, 0x3f	; 63
     2fa:	0f 92       	push	r0
     2fc:	11 24       	eor	r1, r1
     2fe:	2f 93       	push	r18
     300:	3f 93       	push	r19
     302:	4f 93       	push	r20
     304:	5f 93       	push	r21
     306:	6f 93       	push	r22
     308:	7f 93       	push	r23
     30a:	8f 93       	push	r24
     30c:	9f 93       	push	r25
     30e:	af 93       	push	r26
     310:	bf 93       	push	r27
     312:	ef 93       	push	r30
     314:	ff 93       	push	r31
	// the row is in the lower nibble and column data is in the upper nibble
	// for each row the two registers need to be set and the other two need to be cleared
	
	// ledData for the matrices are stored as a byte array of the column data
	
	if (muxCounter < 3)
     316:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <muxCounter>
     31a:	83 30       	cpi	r24, 0x03	; 3
     31c:	90 f5       	brcc	.+100    	; 0x382 <__vector_33+0x8e>
	{
		ledData[3] = ((1 << muxCounter)) | ((ledMemory[9 + muxCounter] & 0b00000111)<<4);
     31e:	40 91 d9 02 	lds	r20, 0x02D9	; 0x8002d9 <muxCounter>
     322:	e0 91 d9 02 	lds	r30, 0x02D9	; 0x8002d9 <muxCounter>
     326:	f0 e0       	ldi	r31, 0x00	; 0
     328:	ed 5e       	subi	r30, 0xED	; 237
     32a:	fe 4f       	sbci	r31, 0xFE	; 254
     32c:	20 81       	ld	r18, Z
     32e:	27 70       	andi	r18, 0x07	; 7
     330:	60 e1       	ldi	r22, 0x10	; 16
     332:	26 9f       	mul	r18, r22
     334:	90 01       	movw	r18, r0
     336:	11 24       	eor	r1, r1
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	bc 01       	movw	r22, r24
     33e:	02 c0       	rjmp	.+4      	; 0x344 <__vector_33+0x50>
     340:	66 0f       	add	r22, r22
     342:	77 1f       	adc	r23, r23
     344:	4a 95       	dec	r20
     346:	e2 f7       	brpl	.-8      	; 0x340 <__vector_33+0x4c>
     348:	26 2b       	or	r18, r22
     34a:	a4 e0       	ldi	r26, 0x04	; 4
     34c:	b1 e0       	ldi	r27, 0x01	; 1
     34e:	13 96       	adiw	r26, 0x03	; 3
     350:	2c 93       	st	X, r18
     352:	13 97       	sbiw	r26, 0x03	; 3
		ledData[0] = 0;
     354:	1c 92       	st	X, r1
		ledData[1] = 0;
     356:	11 96       	adiw	r26, 0x01	; 1
     358:	1c 92       	st	X, r1
     35a:	11 97       	sbiw	r26, 0x01	; 1
		ledData[2] = ((1 << muxCounter)) | ((ledMemory[9 + muxCounter] & 0b00111000)<<1);
     35c:	30 91 d9 02 	lds	r19, 0x02D9	; 0x8002d9 <muxCounter>
     360:	e0 91 d9 02 	lds	r30, 0x02D9	; 0x8002d9 <muxCounter>
     364:	f0 e0       	ldi	r31, 0x00	; 0
     366:	ed 5e       	subi	r30, 0xED	; 237
     368:	fe 4f       	sbci	r31, 0xFE	; 254
     36a:	20 81       	ld	r18, Z
     36c:	28 73       	andi	r18, 0x38	; 56
     36e:	22 0f       	add	r18, r18
     370:	02 c0       	rjmp	.+4      	; 0x376 <__vector_33+0x82>
     372:	88 0f       	add	r24, r24
     374:	99 1f       	adc	r25, r25
     376:	3a 95       	dec	r19
     378:	e2 f7       	brpl	.-8      	; 0x372 <__vector_33+0x7e>
     37a:	82 2b       	or	r24, r18
     37c:	12 96       	adiw	r26, 0x02	; 2
     37e:	8c 93       	st	X, r24
     380:	33 c0       	rjmp	.+102    	; 0x3e8 <__vector_33+0xf4>
	}
	else{
		ledData[3] = 0;
     382:	a4 e0       	ldi	r26, 0x04	; 4
     384:	b1 e0       	ldi	r27, 0x01	; 1
     386:	13 96       	adiw	r26, 0x03	; 3
     388:	1c 92       	st	X, r1
     38a:	13 97       	sbiw	r26, 0x03	; 3
		ledData[0] = ((1 << (muxCounter-3))) | ((ledMemory[9 + muxCounter] & 0b00000111)<<4);
     38c:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <muxCounter>
     390:	e0 91 d9 02 	lds	r30, 0x02D9	; 0x8002d9 <muxCounter>
     394:	f0 e0       	ldi	r31, 0x00	; 0
     396:	ed 5e       	subi	r30, 0xED	; 237
     398:	fe 4f       	sbci	r31, 0xFE	; 254
     39a:	90 81       	ld	r25, Z
     39c:	83 50       	subi	r24, 0x03	; 3
     39e:	21 e0       	ldi	r18, 0x01	; 1
     3a0:	30 e0       	ldi	r19, 0x00	; 0
     3a2:	a9 01       	movw	r20, r18
     3a4:	02 c0       	rjmp	.+4      	; 0x3aa <__vector_33+0xb6>
     3a6:	44 0f       	add	r20, r20
     3a8:	55 1f       	adc	r21, r21
     3aa:	8a 95       	dec	r24
     3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <__vector_33+0xb2>
     3ae:	97 70       	andi	r25, 0x07	; 7
     3b0:	70 e1       	ldi	r23, 0x10	; 16
     3b2:	97 9f       	mul	r25, r23
     3b4:	c0 01       	movw	r24, r0
     3b6:	11 24       	eor	r1, r1
     3b8:	84 2b       	or	r24, r20
     3ba:	8c 93       	st	X, r24
		ledData[1] = ((1 << (muxCounter-3))) | ((ledMemory[9 + muxCounter] & 0b00111000)<<1);
     3bc:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <muxCounter>
     3c0:	e0 91 d9 02 	lds	r30, 0x02D9	; 0x8002d9 <muxCounter>
     3c4:	f0 e0       	ldi	r31, 0x00	; 0
     3c6:	ed 5e       	subi	r30, 0xED	; 237
     3c8:	fe 4f       	sbci	r31, 0xFE	; 254
     3ca:	80 81       	ld	r24, Z
     3cc:	93 50       	subi	r25, 0x03	; 3
     3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <__vector_33+0xe0>
     3d0:	22 0f       	add	r18, r18
     3d2:	33 1f       	adc	r19, r19
     3d4:	9a 95       	dec	r25
     3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <__vector_33+0xdc>
     3d8:	88 73       	andi	r24, 0x38	; 56
     3da:	88 0f       	add	r24, r24
     3dc:	28 2b       	or	r18, r24
     3de:	11 96       	adiw	r26, 0x01	; 1
     3e0:	2c 93       	st	X, r18
     3e2:	11 97       	sbiw	r26, 0x01	; 1
		ledData[2] = 0;
     3e4:	12 96       	adiw	r26, 0x02	; 2
     3e6:	1c 92       	st	X, r1
	}
	
	muxCounter = (muxCounter + 1) % 6;
     3e8:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <muxCounter>
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	01 96       	adiw	r24, 0x01	; 1
     3f0:	66 e0       	ldi	r22, 0x06	; 6
     3f2:	70 e0       	ldi	r23, 0x00	; 0
     3f4:	0e 94 02 17 	call	0x2e04	; 0x2e04 <__divmodhi4>
     3f8:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <muxCounter>
	
	// calculate data for score display
	
	ledData[5] = sevenSegmentDecode[ledMemory[scoreDigitCounter]];
     3fc:	e0 91 da 02 	lds	r30, 0x02DA	; 0x8002da <scoreDigitCounter>
     400:	f0 e0       	ldi	r31, 0x00	; 0
     402:	e6 5f       	subi	r30, 0xF6	; 246
     404:	fe 4f       	sbci	r31, 0xFE	; 254
     406:	e0 81       	ld	r30, Z
     408:	f0 e0       	ldi	r31, 0x00	; 0
     40a:	e9 5d       	subi	r30, 0xD9	; 217
     40c:	fe 4f       	sbci	r31, 0xFE	; 254
     40e:	80 81       	ld	r24, Z
     410:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <ledData+0x5>
	if (scoreDigitCounter == 0){
     414:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <scoreDigitCounter>
     418:	81 11       	cpse	r24, r1
     41a:	07 c0       	rjmp	.+14     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
		ledData[5] |= 1 << 7; // set MSB for D0
     41c:	e4 e0       	ldi	r30, 0x04	; 4
     41e:	f1 e0       	ldi	r31, 0x01	; 1
     420:	85 81       	ldd	r24, Z+5	; 0x05
     422:	80 68       	ori	r24, 0x80	; 128
     424:	85 83       	std	Z+5, r24	; 0x05
		ledData[4] = 0;
     426:	14 82       	std	Z+4, r1	; 0x04
     428:	0c c0       	rjmp	.+24     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
	}
	else{
		ledData[4] = 1 << (scoreDigitCounter - 1);
     42a:	20 91 da 02 	lds	r18, 0x02DA	; 0x8002da <scoreDigitCounter>
     42e:	21 50       	subi	r18, 0x01	; 1
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	02 c0       	rjmp	.+4      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     436:	88 0f       	add	r24, r24
     438:	99 1f       	adc	r25, r25
     43a:	2a 95       	dec	r18
     43c:	e2 f7       	brpl	.-8      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     43e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <ledData+0x4>
	}

	scoreDigitCounter = (scoreDigitCounter + 1) % 9;
     442:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <scoreDigitCounter>
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	01 96       	adiw	r24, 0x01	; 1
     44a:	69 e0       	ldi	r22, 0x09	; 9
     44c:	70 e0       	ldi	r23, 0x00	; 0
     44e:	0e 94 02 17 	call	0x2e04	; 0x2e04 <__divmodhi4>
     452:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <scoreDigitCounter>
	

	// clear contents of shift register and latch
	PORTB &= ~(1 << LED_L); // set led latch low
     456:	28 98       	cbi	0x05, 0	; 5
	PORTE &= ~(1 << LED_B); // blank leds
     458:	73 98       	cbi	0x0e, 3	; 14
	PORTB |= (1 << LED_L); // set led latch high
     45a:	28 9a       	sbi	0x05, 0	; 5
	PORTE |= (1 << LED_B); // unblank leds
     45c:	73 9a       	sbi	0x0e, 3	; 14
	PORTB &= ~(1 << LED_L); // set led latch low
     45e:	28 98       	cbi	0x05, 0	; 5
	spiByteCounter = 0;
     460:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <__data_end>
	SPDR0 = ledData[spiByteCounter++];
     464:	e0 91 d8 02 	lds	r30, 0x02D8	; 0x8002d8 <__data_end>
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	8e 0f       	add	r24, r30
     46c:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <__data_end>
     470:	f0 e0       	ldi	r31, 0x00	; 0
     472:	ec 5f       	subi	r30, 0xFC	; 252
     474:	fe 4f       	sbci	r31, 0xFE	; 254
     476:	80 81       	ld	r24, Z
     478:	8e bd       	out	0x2e, r24	; 46
}
     47a:	ff 91       	pop	r31
     47c:	ef 91       	pop	r30
     47e:	bf 91       	pop	r27
     480:	af 91       	pop	r26
     482:	9f 91       	pop	r25
     484:	8f 91       	pop	r24
     486:	7f 91       	pop	r23
     488:	6f 91       	pop	r22
     48a:	5f 91       	pop	r21
     48c:	4f 91       	pop	r20
     48e:	3f 91       	pop	r19
     490:	2f 91       	pop	r18
     492:	0f 90       	pop	r0
     494:	0f be       	out	0x3f, r0	; 63
     496:	0f 90       	pop	r0
     498:	1f 90       	pop	r1
     49a:	18 95       	reti

0000049c <__vector_34>:
	PORTD = 0xFF; 
	buttonMemory[muxCounter] = ~PINC;
	
}*/

ISR(TIMER3_COMPB_vect){
     49c:	1f 92       	push	r1
     49e:	0f 92       	push	r0
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	0f 92       	push	r0
     4a4:	11 24       	eor	r1, r1
     4a6:	2f 93       	push	r18
     4a8:	3f 93       	push	r19
     4aa:	8f 93       	push	r24
     4ac:	9f 93       	push	r25
     4ae:	ef 93       	push	r30
     4b0:	ff 93       	push	r31
	DDRD &= ~(1<<(muxCounter+2));
	buttonMemory[muxCounter] = ~PINC; 
	DDRD = 0xFF; 
	*/
	
	DDRD = 0xFF;
     4b2:	3f ef       	ldi	r19, 0xFF	; 255
     4b4:	3a b9       	out	0x0a, r19	; 10
	DDRC = 0x00;
     4b6:	17 b8       	out	0x07, r1	; 7
	
	PORTD = ~(1<<(muxCounter+2));
     4b8:	20 91 d9 02 	lds	r18, 0x02D9	; 0x8002d9 <muxCounter>
     4bc:	2e 5f       	subi	r18, 0xFE	; 254
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <__vector_34+0x2c>
     4c4:	88 0f       	add	r24, r24
     4c6:	99 1f       	adc	r25, r25
     4c8:	2a 95       	dec	r18
     4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <__vector_34+0x28>
     4cc:	80 95       	com	r24
     4ce:	8b b9       	out	0x0b, r24	; 11
	buttonMemory[muxCounter] = ~PINC;
     4d0:	e0 91 d9 02 	lds	r30, 0x02D9	; 0x8002d9 <muxCounter>
     4d4:	f0 e0       	ldi	r31, 0x00	; 0
     4d6:	86 b1       	in	r24, 0x06	; 6
     4d8:	80 95       	com	r24
     4da:	eb 51       	subi	r30, 0x1B	; 27
     4dc:	fd 4f       	sbci	r31, 0xFD	; 253
     4de:	80 83       	st	Z, r24
	PORTD = 0xFF;
     4e0:	3b b9       	out	0x0b, r19	; 11
}
     4e2:	ff 91       	pop	r31
     4e4:	ef 91       	pop	r30
     4e6:	9f 91       	pop	r25
     4e8:	8f 91       	pop	r24
     4ea:	3f 91       	pop	r19
     4ec:	2f 91       	pop	r18
     4ee:	0f 90       	pop	r0
     4f0:	0f be       	out	0x3f, r0	; 63
     4f2:	0f 90       	pop	r0
     4f4:	1f 90       	pop	r1
     4f6:	18 95       	reti

000004f8 <__vector_17>:

ISR(SPI0_STC_vect){
     4f8:	1f 92       	push	r1
     4fa:	0f 92       	push	r0
     4fc:	0f b6       	in	r0, 0x3f	; 63
     4fe:	0f 92       	push	r0
     500:	11 24       	eor	r1, r1
     502:	8f 93       	push	r24
     504:	ef 93       	push	r30
     506:	ff 93       	push	r31
	if (spiByteCounter >= 6){
     508:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <__data_end>
     50c:	86 30       	cpi	r24, 0x06	; 6
     50e:	10 f0       	brcs	.+4      	; 0x514 <__vector_17+0x1c>
		PORTB |= 1 << LED_L; // set led latch high
     510:	28 9a       	sbi	0x05, 0	; 5
		return;
     512:	0b c0       	rjmp	.+22     	; 0x52a <__vector_17+0x32>
	}
	SPDR0 = ledData[spiByteCounter++];
     514:	e0 91 d8 02 	lds	r30, 0x02D8	; 0x8002d8 <__data_end>
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	8e 0f       	add	r24, r30
     51c:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <__data_end>
     520:	f0 e0       	ldi	r31, 0x00	; 0
     522:	ec 5f       	subi	r30, 0xFC	; 252
     524:	fe 4f       	sbci	r31, 0xFE	; 254
     526:	80 81       	ld	r24, Z
     528:	8e bd       	out	0x2e, r24	; 46
}
     52a:	ff 91       	pop	r31
     52c:	ef 91       	pop	r30
     52e:	8f 91       	pop	r24
     530:	0f 90       	pop	r0
     532:	0f be       	out	0x3f, r0	; 63
     534:	0f 90       	pop	r0
     536:	1f 90       	pop	r1
     538:	18 95       	reti

0000053a <uart_putchar>:

static int uart_putchar(char c, FILE *stream);
static FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);

static int uart_putchar(char c, FILE *stream)
{
     53a:	cf 93       	push	r28
     53c:	c8 2f       	mov	r28, r24
	if (c == '\n')
     53e:	8a 30       	cpi	r24, 0x0A	; 10
     540:	19 f4       	brne	.+6      	; 0x548 <uart_putchar+0xe>
	uart_putchar('\r', stream);
     542:	8d e0       	ldi	r24, 0x0D	; 13
     544:	0e 94 9d 02 	call	0x53a	; 0x53a <uart_putchar>
	while(!(UCSR0A &( 1 << UDRE0)));
     548:	e0 ec       	ldi	r30, 0xC0	; 192
     54a:	f0 e0       	ldi	r31, 0x00	; 0
     54c:	80 81       	ld	r24, Z
     54e:	85 ff       	sbrs	r24, 5
     550:	fd cf       	rjmp	.-6      	; 0x54c <uart_putchar+0x12>
	UDR0 = c;
     552:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	return 0;
}
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	cf 91       	pop	r28
     55c:	08 95       	ret

0000055e <init_uart>:

void init_uart(){
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     55e:	88 e1       	ldi	r24, 0x18	; 24
     560:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (3<<UCSZ00);
     564:	86 e0       	ldi	r24, 0x06	; 6
     566:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0L = 51;
     56a:	83 e3       	ldi	r24, 0x33	; 51
     56c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     570:	08 95       	ret

00000572 <__vector_14>:

	}
}

ISR(TIMER0_COMPA_vect)		// audio interrupt
{
     572:	1f 92       	push	r1
     574:	0f 92       	push	r0
     576:	0f b6       	in	r0, 0x3f	; 63
     578:	0f 92       	push	r0
     57a:	11 24       	eor	r1, r1
     57c:	8f 93       	push	r24
     57e:	9f 93       	push	r25
     580:	ef 93       	push	r30
     582:	ff 93       	push	r31
	DDRB |= (1<<1);
     584:	21 9a       	sbi	0x04, 1	; 4
	soundPlaying = 1;
     586:	81 e0       	ldi	r24, 0x01	; 1
     588:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <soundPlaying>
	switch(note_index)
     58c:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <note_index>
     590:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <note_index+0x1>
     594:	86 30       	cpi	r24, 0x06	; 6
     596:	91 05       	cpc	r25, r1
     598:	09 f4       	brne	.+2      	; 0x59c <__vector_14+0x2a>
     59a:	4e c0       	rjmp	.+156    	; 0x638 <__vector_14+0xc6>
     59c:	30 f4       	brcc	.+12     	; 0x5aa <__vector_14+0x38>
     59e:	81 30       	cpi	r24, 0x01	; 1
     5a0:	91 05       	cpc	r25, r1
     5a2:	61 f0       	breq	.+24     	; 0x5bc <__vector_14+0x4a>
     5a4:	03 97       	sbiw	r24, 0x03	; 3
     5a6:	49 f1       	breq	.+82     	; 0x5fa <__vector_14+0x88>
     5a8:	7c c0       	rjmp	.+248    	; 0x6a2 <__vector_14+0x130>
     5aa:	8e 30       	cpi	r24, 0x0E	; 14
     5ac:	91 05       	cpc	r25, r1
     5ae:	09 f4       	brne	.+2      	; 0x5b2 <__vector_14+0x40>
     5b0:	62 c0       	rjmp	.+196    	; 0x676 <__vector_14+0x104>
     5b2:	80 34       	cpi	r24, 0x40	; 64
     5b4:	91 05       	cpc	r25, r1
     5b6:	09 f4       	brne	.+2      	; 0x5ba <__vector_14+0x48>
     5b8:	63 c0       	rjmp	.+198    	; 0x680 <__vector_14+0x10e>
     5ba:	73 c0       	rjmp	.+230    	; 0x6a2 <__vector_14+0x130>
	{	//every 8ms
		
		case 0+1:	//0ms, 8ms on
		ICR1 = notes[beep_index];	//1st note
     5bc:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <beep_index>
     5c0:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <beep_index+0x1>
     5c4:	ee 0f       	add	r30, r30
     5c6:	ff 1f       	adc	r31, r31
     5c8:	e1 54       	subi	r30, 0x41	; 65
     5ca:	fd 4f       	sbci	r31, 0xFD	; 253
     5cc:	80 81       	ld	r24, Z
     5ce:	91 81       	ldd	r25, Z+1	; 0x01
     5d0:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     5d4:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		OCR1A = notes[beep_index]/2;
     5d8:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <beep_index>
     5dc:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <beep_index+0x1>
     5e0:	ee 0f       	add	r30, r30
     5e2:	ff 1f       	adc	r31, r31
     5e4:	e1 54       	subi	r30, 0x41	; 65
     5e6:	fd 4f       	sbci	r31, 0xFD	; 253
     5e8:	80 81       	ld	r24, Z
     5ea:	91 81       	ldd	r25, Z+1	; 0x01
     5ec:	96 95       	lsr	r25
     5ee:	87 95       	ror	r24
     5f0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     5f4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		break;
     5f8:	54 c0       	rjmp	.+168    	; 0x6a2 <__vector_14+0x130>
		case 2+1:	// 16ms, 24, 32 on
		ICR1 = notes[beep_index+1];	//2nd note
     5fa:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <beep_index>
     5fe:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <beep_index+0x1>
     602:	ee 0f       	add	r30, r30
     604:	ff 1f       	adc	r31, r31
     606:	ef 53       	subi	r30, 0x3F	; 63
     608:	fd 4f       	sbci	r31, 0xFD	; 253
     60a:	80 81       	ld	r24, Z
     60c:	91 81       	ldd	r25, Z+1	; 0x01
     60e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     612:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		OCR1A = notes[beep_index]/2;
     616:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <beep_index>
     61a:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <beep_index+0x1>
     61e:	ee 0f       	add	r30, r30
     620:	ff 1f       	adc	r31, r31
     622:	e1 54       	subi	r30, 0x41	; 65
     624:	fd 4f       	sbci	r31, 0xFD	; 253
     626:	80 81       	ld	r24, Z
     628:	91 81       	ldd	r25, Z+1	; 0x01
     62a:	96 95       	lsr	r25
     62c:	87 95       	ror	r24
     62e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     632:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		break;
     636:	35 c0       	rjmp	.+106    	; 0x6a2 <__vector_14+0x130>
		case 5+1:	// 40ms, 48, 56, 64, 72, 80, 88, 96, on
		ICR1 = notes[beep_index+2];	// 3rd note
     638:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <beep_index>
     63c:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <beep_index+0x1>
     640:	ee 0f       	add	r30, r30
     642:	ff 1f       	adc	r31, r31
     644:	ed 53       	subi	r30, 0x3D	; 61
     646:	fd 4f       	sbci	r31, 0xFD	; 253
     648:	80 81       	ld	r24, Z
     64a:	91 81       	ldd	r25, Z+1	; 0x01
     64c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     650:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		OCR1A = notes[beep_index]/2;
     654:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <beep_index>
     658:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <beep_index+0x1>
     65c:	ee 0f       	add	r30, r30
     65e:	ff 1f       	adc	r31, r31
     660:	e1 54       	subi	r30, 0x41	; 65
     662:	fd 4f       	sbci	r31, 0xFD	; 253
     664:	80 81       	ld	r24, Z
     666:	91 81       	ldd	r25, Z+1	; 0x01
     668:	96 95       	lsr	r25
     66a:	87 95       	ror	r24
     66c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     670:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		break;
     674:	16 c0       	rjmp	.+44     	; 0x6a2 <__vector_14+0x130>
		case 13+1:
		//ICR1 = 0;					//off
		OCR1A = 0;
     676:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     67a:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		break;
     67e:	11 c0       	rjmp	.+34     	; 0x6a2 <__vector_14+0x130>
		
		case 63+1:
		beep_index = 0;
     680:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <beep_index+0x1>
     684:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <beep_index>
		note_index = -1;
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	9f ef       	ldi	r25, 0xFF	; 255
     68c:	90 93 e2 02 	sts	0x02E2, r25	; 0x8002e2 <note_index+0x1>
     690:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <note_index>
		TCCR0B &= ~(0b101 << CS00);
     694:	85 b5       	in	r24, 0x25	; 37
     696:	8a 7f       	andi	r24, 0xFA	; 250
     698:	85 bd       	out	0x25, r24	; 37
		TCNT0 = 0;
     69a:	16 bc       	out	0x26, r1	; 38
		DDRB &= ~(1<<1);
     69c:	21 98       	cbi	0x04, 1	; 4
		soundPlaying = 0;
     69e:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <soundPlaying>
		break;
	}
	note_index += 1;
     6a2:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <note_index>
     6a6:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <note_index+0x1>
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	90 93 e2 02 	sts	0x02E2, r25	; 0x8002e2 <note_index+0x1>
     6b0:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <note_index>
}
     6b4:	ff 91       	pop	r31
     6b6:	ef 91       	pop	r30
     6b8:	9f 91       	pop	r25
     6ba:	8f 91       	pop	r24
     6bc:	0f 90       	pop	r0
     6be:	0f be       	out	0x3f, r0	; 63
     6c0:	0f 90       	pop	r0
     6c2:	1f 90       	pop	r1
     6c4:	18 95       	reti

000006c6 <__vector_42>:

ISR(TIMER4_COMPA_vect){		// use timer 4 for decreasing game time every 1s
     6c6:	1f 92       	push	r1
     6c8:	0f 92       	push	r0
     6ca:	0f b6       	in	r0, 0x3f	; 63
     6cc:	0f 92       	push	r0
     6ce:	11 24       	eor	r1, r1
     6d0:	8f 93       	push	r24
	if(TimeRemaining > 0){
     6d2:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <TimeRemaining>
     6d6:	88 23       	and	r24, r24
     6d8:	29 f0       	breq	.+10     	; 0x6e4 <__vector_42+0x1e>
		TimeRemaining--;
     6da:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <TimeRemaining>
     6de:	81 50       	subi	r24, 0x01	; 1
     6e0:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <TimeRemaining>
	}
}
     6e4:	8f 91       	pop	r24
     6e6:	0f 90       	pop	r0
     6e8:	0f be       	out	0x3f, r0	; 63
     6ea:	0f 90       	pop	r0
     6ec:	1f 90       	pop	r1
     6ee:	18 95       	reti

000006f0 <ShowWinner>:
	}
	return;		// start the game

}

void ShowWinner(){
     6f0:	2f 92       	push	r2
     6f2:	3f 92       	push	r3
     6f4:	4f 92       	push	r4
     6f6:	5f 92       	push	r5
     6f8:	6f 92       	push	r6
     6fa:	7f 92       	push	r7
     6fc:	8f 92       	push	r8
     6fe:	af 92       	push	r10
     700:	bf 92       	push	r11
     702:	cf 92       	push	r12
     704:	df 92       	push	r13
     706:	ef 92       	push	r14
     708:	ff 92       	push	r15
     70a:	1f 93       	push	r17
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
	clearLeds(0);
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	0e 94 63 01 	call	0x2c6	; 0x2c6 <clearLeds>
	if(GameMode && (P1Score == P2Score)){
     716:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <GameMode>
     71a:	88 23       	and	r24, r24
     71c:	09 f4       	brne	.+2      	; 0x720 <ShowWinner+0x30>
     71e:	fb c0       	rjmp	.+502    	; 0x916 <__stack+0x17>
     720:	20 91 fc 02 	lds	r18, 0x02FC	; 0x8002fc <P1Score>
     724:	30 91 fd 02 	lds	r19, 0x02FD	; 0x8002fd <P1Score+0x1>
     728:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <P2Score>
     72c:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <P2Score+0x1>
     730:	28 17       	cp	r18, r24
     732:	39 07       	cpc	r19, r25
     734:	09 f0       	breq	.+2      	; 0x738 <ShowWinner+0x48>
     736:	ea c0       	rjmp	.+468    	; 0x90c <__stack+0xd>
		GameMode = 0;		// if there's a tie, just show 1p winning screen	
     738:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <GameMode>
     73c:	ec c0       	rjmp	.+472    	; 0x916 <__stack+0x17>
     73e:	74 2c       	mov	r7, r4
	}
	if(GameMode == 0){
		
		for(uint8_t count = 0; count < 24; count++){			// flash whole screen
			
			setScore(RIGHT, HighScore1P);
     740:	60 91 fa 02 	lds	r22, 0x02FA	; 0x8002fa <HighScore1P>
     744:	70 91 fb 02 	lds	r23, 0x02FB	; 0x8002fb <HighScore1P+0x1>
     748:	82 e0       	ldi	r24, 0x02	; 2
     74a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
			setScore(LEFT, HighScore1P);
     74e:	60 91 fa 02 	lds	r22, 0x02FA	; 0x8002fa <HighScore1P>
     752:	70 91 fb 02 	lds	r23, 0x02FB	; 0x8002fb <HighScore1P+0x1>
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
     75c:	e2 01       	movw	r28, r4
			
			for(uint8_t ledx = 0; ledx < 6; ledx++){
     75e:	81 2c       	mov	r8, r1
     760:	1a c0       	rjmp	.+52     	; 0x796 <ShowWinner+0xa6>
				for(uint8_t ledy = 0; ledy < 6; ledy++){
					setButtonLed(ledx, ledy, (ledx+ledy+count)%2 );
     762:	a5 01       	movw	r20, r10
     764:	41 70       	andi	r20, 0x01	; 1
     766:	50 78       	andi	r21, 0x80	; 128
     768:	55 23       	and	r21, r21
     76a:	34 f4       	brge	.+12     	; 0x778 <ShowWinner+0x88>
     76c:	41 50       	subi	r20, 0x01	; 1
     76e:	51 09       	sbc	r21, r1
     770:	4e 6f       	ori	r20, 0xFE	; 254
     772:	5f 6f       	ori	r21, 0xFF	; 255
     774:	4f 5f       	subi	r20, 0xFF	; 255
     776:	5f 4f       	sbci	r21, 0xFF	; 255
     778:	61 2f       	mov	r22, r17
     77a:	88 2d       	mov	r24, r8
     77c:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
			
			setScore(RIGHT, HighScore1P);
			setScore(LEFT, HighScore1P);
			
			for(uint8_t ledx = 0; ledx < 6; ledx++){
				for(uint8_t ledy = 0; ledy < 6; ledy++){
     780:	1f 5f       	subi	r17, 0xFF	; 255
     782:	2f ef       	ldi	r18, 0xFF	; 255
     784:	a2 1a       	sub	r10, r18
     786:	b2 0a       	sbc	r11, r18
     788:	16 30       	cpi	r17, 0x06	; 6
     78a:	59 f7       	brne	.-42     	; 0x762 <ShowWinner+0x72>
		for(uint8_t count = 0; count < 24; count++){			// flash whole screen
			
			setScore(RIGHT, HighScore1P);
			setScore(LEFT, HighScore1P);
			
			for(uint8_t ledx = 0; ledx < 6; ledx++){
     78c:	83 94       	inc	r8
     78e:	21 96       	adiw	r28, 0x01	; 1
     790:	86 e0       	ldi	r24, 0x06	; 6
     792:	88 16       	cp	r8, r24
     794:	19 f0       	breq	.+6      	; 0x79c <ShowWinner+0xac>
	}
	return;		// start the game

}

void ShowWinner(){
     796:	5e 01       	movw	r10, r28
     798:	10 e0       	ldi	r17, 0x00	; 0
     79a:	e3 cf       	rjmp	.-58     	; 0x762 <ShowWinner+0x72>
			for(uint8_t ledx = 0; ledx < 6; ledx++){
				for(uint8_t ledy = 0; ledy < 6; ledy++){
					setButtonLed(ledx, ledy, (ledx+ledy+count)%2 );
				}
			}
			if(SoundEnabled){
     79c:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <SoundEnabled>
     7a0:	88 23       	and	r24, r24
     7a2:	91 f0       	breq	.+36     	; 0x7c8 <ShowWinner+0xd8>
				DDRB |= (1<<1);	//play tone
     7a4:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[5+(count%4)];
     7a6:	e7 2d       	mov	r30, r7
     7a8:	e3 70       	andi	r30, 0x03	; 3
     7aa:	f0 e0       	ldi	r31, 0x00	; 0
     7ac:	ee 0f       	add	r30, r30
     7ae:	ff 1f       	adc	r31, r31
     7b0:	e7 53       	subi	r30, 0x37	; 55
     7b2:	fd 4f       	sbci	r31, 0xFD	; 253
     7b4:	80 81       	ld	r24, Z
     7b6:	91 81       	ldd	r25, Z+1	; 0x01
     7b8:	f6 01       	movw	r30, r12
     7ba:	91 83       	std	Z+1, r25	; 0x01
     7bc:	80 83       	st	Z, r24
				OCR1A = notes[5+(count%4)] / 2;
     7be:	96 95       	lsr	r25
     7c0:	87 95       	ror	r24
     7c2:	f7 01       	movw	r30, r14
     7c4:	91 83       	std	Z+1, r25	; 0x01
     7c6:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7c8:	ff ef       	ldi	r31, 0xFF	; 255
     7ca:	21 ee       	ldi	r18, 0xE1	; 225
     7cc:	84 e0       	ldi	r24, 0x04	; 4
     7ce:	f1 50       	subi	r31, 0x01	; 1
     7d0:	20 40       	sbci	r18, 0x00	; 0
     7d2:	80 40       	sbci	r24, 0x00	; 0
     7d4:	e1 f7       	brne	.-8      	; 0x7ce <ShowWinner+0xde>
     7d6:	00 c0       	rjmp	.+0      	; 0x7d8 <ShowWinner+0xe8>
     7d8:	00 00       	nop
     7da:	9f ef       	ldi	r25, 0xFF	; 255
     7dc:	49 1a       	sub	r4, r25
     7de:	59 0a       	sbc	r5, r25
	if(GameMode && (P1Score == P2Score)){
		GameMode = 0;		// if there's a tie, just show 1p winning screen	
	}
	if(GameMode == 0){
		
		for(uint8_t count = 0; count < 24; count++){			// flash whole screen
     7e0:	e8 e1       	ldi	r30, 0x18	; 24
     7e2:	4e 16       	cp	r4, r30
     7e4:	51 04       	cpc	r5, r1
     7e6:	09 f0       	breq	.+2      	; 0x7ea <ShowWinner+0xfa>
     7e8:	aa cf       	rjmp	.-172    	; 0x73e <ShowWinner+0x4e>
				ICR1 = notes[5+(count%4)];
				OCR1A = notes[5+(count%4)] / 2;
			}
			_delay_ms(100);
		}
		DDRB &= ~(1<<1);
     7ea:	21 98       	cbi	0x04, 1	; 4
     7ec:	a4 c0       	rjmp	.+328    	; 0x936 <__stack+0x37>
		}else{										//2p mode, show winner every time
		uint8_t winnerhalf = P1Score > P2Score ? 0 : 3; //index half based on winner
     7ee:	0f 2e       	mov	r0, r31
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	6f 2e       	mov	r6, r31
     7f4:	f0 2d       	mov	r31, r0
     7f6:	01 c0       	rjmp	.+2      	; 0x7fa <ShowWinner+0x10a>
     7f8:	61 2c       	mov	r6, r1
		
		clearLeds(0);
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	0e 94 63 01 	call	0x2c6	; 0x2c6 <clearLeds>
     800:	21 2c       	mov	r2, r1
     802:	31 2c       	mov	r3, r1
     804:	0f 2e       	mov	r0, r31
     806:	f3 e0       	ldi	r31, 0x03	; 3
     808:	7f 2e       	mov	r7, r31
     80a:	f0 2d       	mov	r31, r0
     80c:	76 0c       	add	r7, r6
					setButtonLed(winnerhalf+ledx, ledy, (ledx+ledy+count)%2 );
				}
			}
			if(SoundEnabled){
				DDRB |= (1<<1);	//play tone
				ICR1 = notes[5+(count%4)];
     80e:	0f 2e       	mov	r0, r31
     810:	f6 e8       	ldi	r31, 0x86	; 134
     812:	cf 2e       	mov	r12, r31
     814:	d1 2c       	mov	r13, r1
     816:	f0 2d       	mov	r31, r0
				OCR1A = notes[5+(count%4)] / 2;
     818:	0f 2e       	mov	r0, r31
     81a:	f8 e8       	ldi	r31, 0x88	; 136
     81c:	ef 2e       	mov	r14, r31
     81e:	f1 2c       	mov	r15, r1
     820:	f0 2d       	mov	r31, r0
     822:	52 2c       	mov	r5, r2
		uint8_t winnerhalf = P1Score > P2Score ? 0 : 3; //index half based on winner
		
		clearLeds(0);
		for(uint8_t count = 0; count < 24; count++){			// flash whole screen
			
			if(P1Score > P2Score){
     824:	60 91 fe 02 	lds	r22, 0x02FE	; 0x8002fe <P2Score>
     828:	70 91 ff 02 	lds	r23, 0x02FF	; 0x8002ff <P2Score+0x1>
     82c:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <P1Score>
     830:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <P1Score+0x1>
     834:	68 17       	cp	r22, r24
     836:	79 07       	cpc	r23, r25
     838:	a0 f4       	brcc	.+40     	; 0x862 <ShowWinner+0x172>
				setScoreSegment(RIGHT100, 16);
     83a:	60 e1       	ldi	r22, 0x10	; 16
     83c:	88 e0       	ldi	r24, 0x08	; 8
     83e:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
				setScoreSegment(RIGHT10, 16);
     842:	60 e1       	ldi	r22, 0x10	; 16
     844:	87 e0       	ldi	r24, 0x07	; 7
     846:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
				setScoreSegment(RIGHT1, 16);
     84a:	60 e1       	ldi	r22, 0x10	; 16
     84c:	86 e0       	ldi	r24, 0x06	; 6
     84e:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
				setScore(LEFT, P1Score);
     852:	60 91 fc 02 	lds	r22, 0x02FC	; 0x8002fc <P1Score>
     856:	70 91 fd 02 	lds	r23, 0x02FD	; 0x8002fd <P1Score+0x1>
     85a:	80 e0       	ldi	r24, 0x00	; 0
     85c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
     860:	67 c0       	rjmp	.+206    	; 0x930 <__stack+0x31>
			}else{
				setScore(RIGHT, P2Score);
     862:	82 e0       	ldi	r24, 0x02	; 2
     864:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
				setScoreSegment(LEFT100, 16);
     868:	60 e1       	ldi	r22, 0x10	; 16
     86a:	82 e0       	ldi	r24, 0x02	; 2
     86c:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
				setScoreSegment(LEFT10, 16);
     870:	60 e1       	ldi	r22, 0x10	; 16
     872:	81 e0       	ldi	r24, 0x01	; 1
     874:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
				setScoreSegment(LEFT1, 16);
     878:	60 e1       	ldi	r22, 0x10	; 16
     87a:	80 e0       	ldi	r24, 0x00	; 0
     87c:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
     880:	57 c0       	rjmp	.+174    	; 0x930 <__stack+0x31>
			}
			
			
			for(uint8_t ledx = 0; ledx < 3; ledx++){
				for(uint8_t ledy = 0; ledy < 6; ledy++){
					setButtonLed(winnerhalf+ledx, ledy, (ledx+ledy+count)%2 );
     882:	a5 01       	movw	r20, r10
     884:	41 70       	andi	r20, 0x01	; 1
     886:	50 78       	andi	r21, 0x80	; 128
     888:	55 23       	and	r21, r21
     88a:	34 f4       	brge	.+12     	; 0x898 <ShowWinner+0x1a8>
     88c:	41 50       	subi	r20, 0x01	; 1
     88e:	51 09       	sbc	r21, r1
     890:	4e 6f       	ori	r20, 0xFE	; 254
     892:	5f 6f       	ori	r21, 0xFF	; 255
     894:	4f 5f       	subi	r20, 0xFF	; 255
     896:	5f 4f       	sbci	r21, 0xFF	; 255
     898:	61 2f       	mov	r22, r17
     89a:	88 2d       	mov	r24, r8
     89c:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
				setScoreSegment(LEFT1, 16);
			}
			
			
			for(uint8_t ledx = 0; ledx < 3; ledx++){
				for(uint8_t ledy = 0; ledy < 6; ledy++){
     8a0:	1f 5f       	subi	r17, 0xFF	; 255
     8a2:	ff ef       	ldi	r31, 0xFF	; 255
     8a4:	af 1a       	sub	r10, r31
     8a6:	bf 0a       	sbc	r11, r31
     8a8:	16 30       	cpi	r17, 0x06	; 6
     8aa:	59 f7       	brne	.-42     	; 0x882 <ShowWinner+0x192>
     8ac:	21 96       	adiw	r28, 0x01	; 1
     8ae:	83 94       	inc	r8
				setScoreSegment(LEFT10, 16);
				setScoreSegment(LEFT1, 16);
			}
			
			
			for(uint8_t ledx = 0; ledx < 3; ledx++){
     8b0:	78 14       	cp	r7, r8
     8b2:	19 f0       	breq	.+6      	; 0x8ba <ShowWinner+0x1ca>
		}
		DDRB &= ~(1<<1);
		}else{										//2p mode, show winner every time
		uint8_t winnerhalf = P1Score > P2Score ? 0 : 3; //index half based on winner
		
		clearLeds(0);
     8b4:	5e 01       	movw	r10, r28
     8b6:	10 e0       	ldi	r17, 0x00	; 0
     8b8:	e4 cf       	rjmp	.-56     	; 0x882 <ShowWinner+0x192>
			for(uint8_t ledx = 0; ledx < 3; ledx++){
				for(uint8_t ledy = 0; ledy < 6; ledy++){
					setButtonLed(winnerhalf+ledx, ledy, (ledx+ledy+count)%2 );
				}
			}
			if(SoundEnabled){
     8ba:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <SoundEnabled>
     8be:	88 23       	and	r24, r24
     8c0:	91 f0       	breq	.+36     	; 0x8e6 <ShowWinner+0x1f6>
				DDRB |= (1<<1);	//play tone
     8c2:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[5+(count%4)];
     8c4:	e5 2d       	mov	r30, r5
     8c6:	e3 70       	andi	r30, 0x03	; 3
     8c8:	f0 e0       	ldi	r31, 0x00	; 0
     8ca:	ee 0f       	add	r30, r30
     8cc:	ff 1f       	adc	r31, r31
     8ce:	e7 53       	subi	r30, 0x37	; 55
     8d0:	fd 4f       	sbci	r31, 0xFD	; 253
     8d2:	80 81       	ld	r24, Z
     8d4:	91 81       	ldd	r25, Z+1	; 0x01
     8d6:	f6 01       	movw	r30, r12
     8d8:	91 83       	std	Z+1, r25	; 0x01
     8da:	80 83       	st	Z, r24
				OCR1A = notes[5+(count%4)] / 2;
     8dc:	96 95       	lsr	r25
     8de:	87 95       	ror	r24
     8e0:	f7 01       	movw	r30, r14
     8e2:	91 83       	std	Z+1, r25	; 0x01
     8e4:	80 83       	st	Z, r24
     8e6:	ff ef       	ldi	r31, 0xFF	; 255
     8e8:	21 ee       	ldi	r18, 0xE1	; 225
     8ea:	84 e0       	ldi	r24, 0x04	; 4
     8ec:	f1 50       	subi	r31, 0x01	; 1
     8ee:	20 40       	sbci	r18, 0x00	; 0
     8f0:	80 40       	sbci	r24, 0x00	; 0
     8f2:	e1 f7       	brne	.-8      	; 0x8ec <ShowWinner+0x1fc>
     8f4:	00 c0       	rjmp	.+0      	; 0x8f6 <ShowWinner+0x206>
     8f6:	00 00       	nop
     8f8:	9f ef       	ldi	r25, 0xFF	; 255
     8fa:	29 1a       	sub	r2, r25
     8fc:	39 0a       	sbc	r3, r25
		DDRB &= ~(1<<1);
		}else{										//2p mode, show winner every time
		uint8_t winnerhalf = P1Score > P2Score ? 0 : 3; //index half based on winner
		
		clearLeds(0);
		for(uint8_t count = 0; count < 24; count++){			// flash whole screen
     8fe:	e8 e1       	ldi	r30, 0x18	; 24
     900:	2e 16       	cp	r2, r30
     902:	31 04       	cpc	r3, r1
     904:	09 f0       	breq	.+2      	; 0x908 <__stack+0x9>
     906:	8d cf       	rjmp	.-230    	; 0x822 <ShowWinner+0x132>
				ICR1 = notes[5+(count%4)];
				OCR1A = notes[5+(count%4)] / 2;
			}
			_delay_ms(100);
		}
		DDRB &= ~(1<<1);
     908:	21 98       	cbi	0x04, 1	; 4
	}
}
     90a:	15 c0       	rjmp	.+42     	; 0x936 <__stack+0x37>
			}
			_delay_ms(100);
		}
		DDRB &= ~(1<<1);
		}else{										//2p mode, show winner every time
		uint8_t winnerhalf = P1Score > P2Score ? 0 : 3; //index half based on winner
     90c:	82 17       	cp	r24, r18
     90e:	93 07       	cpc	r25, r19
     910:	08 f4       	brcc	.+2      	; 0x914 <__stack+0x15>
     912:	72 cf       	rjmp	.-284    	; 0x7f8 <ShowWinner+0x108>
     914:	6c cf       	rjmp	.-296    	; 0x7ee <ShowWinner+0xfe>
	}
	return;		// start the game

}

void ShowWinner(){
     916:	41 2c       	mov	r4, r1
     918:	51 2c       	mov	r5, r1
					setButtonLed(ledx, ledy, (ledx+ledy+count)%2 );
				}
			}
			if(SoundEnabled){
				DDRB |= (1<<1);	//play tone
				ICR1 = notes[5+(count%4)];
     91a:	0f 2e       	mov	r0, r31
     91c:	f6 e8       	ldi	r31, 0x86	; 134
     91e:	cf 2e       	mov	r12, r31
     920:	d1 2c       	mov	r13, r1
     922:	f0 2d       	mov	r31, r0
				OCR1A = notes[5+(count%4)] / 2;
     924:	0f 2e       	mov	r0, r31
     926:	f8 e8       	ldi	r31, 0x88	; 136
     928:	ef 2e       	mov	r14, r31
     92a:	f1 2c       	mov	r15, r1
     92c:	f0 2d       	mov	r31, r0
     92e:	07 cf       	rjmp	.-498    	; 0x73e <ShowWinner+0x4e>
		}
		DDRB &= ~(1<<1);
		}else{										//2p mode, show winner every time
		uint8_t winnerhalf = P1Score > P2Score ? 0 : 3; //index half based on winner
		
		clearLeds(0);
     930:	86 2c       	mov	r8, r6
     932:	e1 01       	movw	r28, r2
     934:	bf cf       	rjmp	.-130    	; 0x8b4 <ShowWinner+0x1c4>
			}
			_delay_ms(100);
		}
		DDRB &= ~(1<<1);
	}
}
     936:	df 91       	pop	r29
     938:	cf 91       	pop	r28
     93a:	1f 91       	pop	r17
     93c:	ff 90       	pop	r15
     93e:	ef 90       	pop	r14
     940:	df 90       	pop	r13
     942:	cf 90       	pop	r12
     944:	bf 90       	pop	r11
     946:	af 90       	pop	r10
     948:	8f 90       	pop	r8
     94a:	7f 90       	pop	r7
     94c:	6f 90       	pop	r6
     94e:	5f 90       	pop	r5
     950:	4f 90       	pop	r4
     952:	3f 90       	pop	r3
     954:	2f 90       	pop	r2
     956:	08 95       	ret

00000958 <IncrementScore>:

void IncrementScore(uint8_t Player, uint16_t value){
	if(Player == 0){
     958:	81 11       	cpse	r24, r1
     95a:	11 c0       	rjmp	.+34     	; 0x97e <IncrementScore+0x26>
		P1Score += value;
		P1Score = P1Score > 999 ? 999 : P1Score;
     95c:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <P1Score>
     960:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <P1Score+0x1>
     964:	68 0f       	add	r22, r24
     966:	79 1f       	adc	r23, r25
     968:	68 3e       	cpi	r22, 0xE8	; 232
     96a:	83 e0       	ldi	r24, 0x03	; 3
     96c:	78 07       	cpc	r23, r24
     96e:	10 f0       	brcs	.+4      	; 0x974 <IncrementScore+0x1c>
     970:	67 ee       	ldi	r22, 0xE7	; 231
     972:	73 e0       	ldi	r23, 0x03	; 3
     974:	70 93 fd 02 	sts	0x02FD, r23	; 0x8002fd <P1Score+0x1>
     978:	60 93 fc 02 	sts	0x02FC, r22	; 0x8002fc <P1Score>
     97c:	08 95       	ret
		}else if(Player == 1){
     97e:	81 30       	cpi	r24, 0x01	; 1
     980:	81 f4       	brne	.+32     	; 0x9a2 <IncrementScore+0x4a>
		P2Score += value;
		P2Score = P2Score > 999 ? 999 : P2Score;
     982:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <P2Score>
     986:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <P2Score+0x1>
     98a:	68 0f       	add	r22, r24
     98c:	79 1f       	adc	r23, r25
     98e:	68 3e       	cpi	r22, 0xE8	; 232
     990:	83 e0       	ldi	r24, 0x03	; 3
     992:	78 07       	cpc	r23, r24
     994:	10 f0       	brcs	.+4      	; 0x99a <IncrementScore+0x42>
     996:	67 ee       	ldi	r22, 0xE7	; 231
     998:	73 e0       	ldi	r23, 0x03	; 3
     99a:	70 93 ff 02 	sts	0x02FF, r23	; 0x8002ff <P2Score+0x1>
     99e:	60 93 fe 02 	sts	0x02FE, r22	; 0x8002fe <P2Score>
     9a2:	08 95       	ret

000009a4 <playChirp>:
		_delay_ms(1000);
	}
}

void playChirp(uint8_t tone){
	if(!SoundEnabled){
     9a4:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <SoundEnabled>
     9a8:	99 23       	and	r25, r25
     9aa:	59 f0       	breq	.+22     	; 0x9c2 <playChirp+0x1e>
		return;
	}
	beep_index = tone;
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <beep_index+0x1>
     9b2:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <beep_index>
	note_index = 0;
     9b6:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <note_index+0x1>
     9ba:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <note_index>
	TCCR0B = (0b101 << CS00);	//turn on clock for speaker
     9be:	85 e0       	ldi	r24, 0x05	; 5
     9c0:	85 bd       	out	0x25, r24	; 37
     9c2:	08 95       	ret

000009c4 <Display321>:
2, 3, 2, 2, 2, 3, 2, 1, 0, 0, 0};
const uint8_t onledsY[33] = {1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5,
	1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5,
1, 2, 2, 3, 4, 5, 5, 5, 0, 0, 0};

void Display321(){
     9c4:	7f 92       	push	r7
     9c6:	8f 92       	push	r8
     9c8:	9f 92       	push	r9
     9ca:	af 92       	push	r10
     9cc:	bf 92       	push	r11
     9ce:	cf 92       	push	r12
     9d0:	df 92       	push	r13
     9d2:	ef 92       	push	r14
     9d4:	ff 92       	push	r15
     9d6:	0f 93       	push	r16
     9d8:	1f 93       	push	r17
     9da:	cf 93       	push	r28
     9dc:	df 93       	push	r29
	
	clearLeds(0);
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	0e 94 63 01 	call	0x2c6	; 0x2c6 <clearLeds>
	
	if(GameMode){	//light up 2p button
     9e4:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <GameMode>
     9e8:	88 23       	and	r24, r24
     9ea:	b1 f1       	breq	.+108    	; 0xa58 <Display321+0x94>
     9ec:	0f eb       	ldi	r16, 0xBF	; 191
     9ee:	12 e0       	ldi	r17, 0x02	; 2
     9f0:	c0 e0       	ldi	r28, 0x00	; 0
		for(uint8_t i = 0; i < 8; i++){
			setButtonLed(Player2ButtonX, Player2ButtonY, i%2);
			if(SoundEnabled){
				DDRB |= (1<<1);	//play page tone
				ICR1 = notes[i];
     9f2:	0f 2e       	mov	r0, r31
     9f4:	f6 e8       	ldi	r31, 0x86	; 134
     9f6:	cf 2e       	mov	r12, r31
     9f8:	d1 2c       	mov	r13, r1
     9fa:	f0 2d       	mov	r31, r0
				OCR1A = notes[i] / 2;
     9fc:	0f 2e       	mov	r0, r31
     9fe:	f8 e8       	ldi	r31, 0x88	; 136
     a00:	ef 2e       	mov	r14, r31
     a02:	f1 2c       	mov	r15, r1
     a04:	f0 2d       	mov	r31, r0
	
	clearLeds(0);
	
	if(GameMode){	//light up 2p button
		for(uint8_t i = 0; i < 8; i++){
			setButtonLed(Player2ButtonX, Player2ButtonY, i%2);
     a06:	4c 2f       	mov	r20, r28
     a08:	41 70       	andi	r20, 0x01	; 1
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	82 e0       	ldi	r24, 0x02	; 2
     a0e:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
			if(SoundEnabled){
     a12:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <SoundEnabled>
     a16:	88 23       	and	r24, r24
     a18:	79 f0       	breq	.+30     	; 0xa38 <Display321+0x74>
				DDRB |= (1<<1);	//play page tone
     a1a:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[i];
     a1c:	f8 01       	movw	r30, r16
     a1e:	80 81       	ld	r24, Z
     a20:	91 81       	ldd	r25, Z+1	; 0x01
     a22:	f6 01       	movw	r30, r12
     a24:	91 83       	std	Z+1, r25	; 0x01
     a26:	80 83       	st	Z, r24
				OCR1A = notes[i] / 2;
     a28:	f8 01       	movw	r30, r16
     a2a:	80 81       	ld	r24, Z
     a2c:	91 81       	ldd	r25, Z+1	; 0x01
     a2e:	96 95       	lsr	r25
     a30:	87 95       	ror	r24
     a32:	f7 01       	movw	r30, r14
     a34:	91 83       	std	Z+1, r25	; 0x01
     a36:	80 83       	st	Z, r24
     a38:	ff ef       	ldi	r31, 0xFF	; 255
     a3a:	26 e0       	ldi	r18, 0x06	; 6
     a3c:	83 e0       	ldi	r24, 0x03	; 3
     a3e:	f1 50       	subi	r31, 0x01	; 1
     a40:	20 40       	sbci	r18, 0x00	; 0
     a42:	80 40       	sbci	r24, 0x00	; 0
     a44:	e1 f7       	brne	.-8      	; 0xa3e <Display321+0x7a>
     a46:	00 c0       	rjmp	.+0      	; 0xa48 <Display321+0x84>
     a48:	00 00       	nop
			}
			_delay_ms(62);
			DDRB &= ~(1<<1);
     a4a:	21 98       	cbi	0x04, 1	; 4
void Display321(){
	
	clearLeds(0);
	
	if(GameMode){	//light up 2p button
		for(uint8_t i = 0; i < 8; i++){
     a4c:	cf 5f       	subi	r28, 0xFF	; 255
     a4e:	0e 5f       	subi	r16, 0xFE	; 254
     a50:	1f 4f       	sbci	r17, 0xFF	; 255
     a52:	c8 30       	cpi	r28, 0x08	; 8
     a54:	c1 f6       	brne	.-80     	; 0xa06 <Display321+0x42>
     a56:	35 c0       	rjmp	.+106    	; 0xac2 <Display321+0xfe>
     a58:	0f eb       	ldi	r16, 0xBF	; 191
     a5a:	12 e0       	ldi	r17, 0x02	; 2

void Display321(){
	
	clearLeds(0);
	
	if(GameMode){	//light up 2p button
     a5c:	c0 e0       	ldi	r28, 0x00	; 0
		}else{
		for(uint8_t i = 0; i < 8; i++){
			setButtonLed(Player1ButtonX, Player1ButtonY, i%2);
			if(SoundEnabled){
				DDRB |= (1<<1);	//play page tone
				ICR1 = notes[i];
     a5e:	0f 2e       	mov	r0, r31
     a60:	f6 e8       	ldi	r31, 0x86	; 134
     a62:	cf 2e       	mov	r12, r31
     a64:	d1 2c       	mov	r13, r1
     a66:	f0 2d       	mov	r31, r0
				OCR1A = notes[i] / 2;
     a68:	0f 2e       	mov	r0, r31
     a6a:	f8 e8       	ldi	r31, 0x88	; 136
     a6c:	ef 2e       	mov	r14, r31
     a6e:	f1 2c       	mov	r15, r1
     a70:	f0 2d       	mov	r31, r0
			_delay_ms(62);
			DDRB &= ~(1<<1);
		}
		}else{
		for(uint8_t i = 0; i < 8; i++){
			setButtonLed(Player1ButtonX, Player1ButtonY, i%2);
     a72:	4c 2f       	mov	r20, r28
     a74:	41 70       	andi	r20, 0x01	; 1
     a76:	60 e0       	ldi	r22, 0x00	; 0
     a78:	83 e0       	ldi	r24, 0x03	; 3
     a7a:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
			if(SoundEnabled){
     a7e:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <SoundEnabled>
     a82:	88 23       	and	r24, r24
     a84:	79 f0       	breq	.+30     	; 0xaa4 <Display321+0xe0>
				DDRB |= (1<<1);	//play page tone
     a86:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[i];
     a88:	f8 01       	movw	r30, r16
     a8a:	80 81       	ld	r24, Z
     a8c:	91 81       	ldd	r25, Z+1	; 0x01
     a8e:	f6 01       	movw	r30, r12
     a90:	91 83       	std	Z+1, r25	; 0x01
     a92:	80 83       	st	Z, r24
				OCR1A = notes[i] / 2;
     a94:	f8 01       	movw	r30, r16
     a96:	80 81       	ld	r24, Z
     a98:	91 81       	ldd	r25, Z+1	; 0x01
     a9a:	96 95       	lsr	r25
     a9c:	87 95       	ror	r24
     a9e:	f7 01       	movw	r30, r14
     aa0:	91 83       	std	Z+1, r25	; 0x01
     aa2:	80 83       	st	Z, r24
     aa4:	ff ef       	ldi	r31, 0xFF	; 255
     aa6:	26 e0       	ldi	r18, 0x06	; 6
     aa8:	83 e0       	ldi	r24, 0x03	; 3
     aaa:	f1 50       	subi	r31, 0x01	; 1
     aac:	20 40       	sbci	r18, 0x00	; 0
     aae:	80 40       	sbci	r24, 0x00	; 0
     ab0:	e1 f7       	brne	.-8      	; 0xaaa <Display321+0xe6>
     ab2:	00 c0       	rjmp	.+0      	; 0xab4 <Display321+0xf0>
     ab4:	00 00       	nop
			}
			_delay_ms(62);
			DDRB &= ~(1<<1);
     ab6:	21 98       	cbi	0x04, 1	; 4
			}
			_delay_ms(62);
			DDRB &= ~(1<<1);
		}
		}else{
		for(uint8_t i = 0; i < 8; i++){
     ab8:	cf 5f       	subi	r28, 0xFF	; 255
     aba:	0e 5f       	subi	r16, 0xFE	; 254
     abc:	1f 4f       	sbci	r17, 0xFF	; 255
     abe:	c8 30       	cpi	r28, 0x08	; 8
     ac0:	c1 f6       	brne	.-80     	; 0xa72 <Display321+0xae>
     ac2:	9f ef       	ldi	r25, 0xFF	; 255
     ac4:	ec eb       	ldi	r30, 0xBC	; 188
     ac6:	ff e1       	ldi	r31, 0x1F	; 31
     ac8:	91 50       	subi	r25, 0x01	; 1
     aca:	e0 40       	sbci	r30, 0x00	; 0
     acc:	f0 40       	sbci	r31, 0x00	; 0
     ace:	e1 f7       	brne	.-8      	; 0xac8 <Display321+0x104>
     ad0:	00 c0       	rjmp	.+0      	; 0xad2 <Display321+0x10e>
     ad2:	00 00       	nop
     ad4:	0f 2e       	mov	r0, r31
     ad6:	fd e7       	ldi	r31, 0x7D	; 125
     ad8:	8f 2e       	mov	r8, r31
     ada:	f2 e0       	ldi	r31, 0x02	; 2
     adc:	9f 2e       	mov	r9, r31
     ade:	f0 2d       	mov	r31, r0
     ae0:	0f 2e       	mov	r0, r31
     ae2:	fe e9       	ldi	r31, 0x9E	; 158
     ae4:	cf 2e       	mov	r12, r31
     ae6:	f2 e0       	ldi	r31, 0x02	; 2
     ae8:	df 2e       	mov	r13, r31
     aea:	f0 2d       	mov	r31, r0
     aec:	71 2c       	mov	r7, r1
     aee:	0f 2e       	mov	r0, r31
     af0:	f3 e0       	ldi	r31, 0x03	; 3
     af2:	ef 2e       	mov	r14, r31
     af4:	f1 2c       	mov	r15, r1
     af6:	f0 2d       	mov	r31, r0
	_delay_ms(650);
	for(uint8_t count = 3; count >= 1; count--){
		for(uint8_t disp = 0; disp < 3; disp++){
			setScore(disp, count);
		}
		printf("%d\n", count);
     af8:	0f 2e       	mov	r0, r31
     afa:	f6 e5       	ldi	r31, 0x56	; 86
     afc:	af 2e       	mov	r10, r31
     afe:	f1 e0       	ldi	r31, 0x01	; 1
     b00:	bf 2e       	mov	r11, r31
     b02:	f0 2d       	mov	r31, r0
     b04:	21 c0       	rjmp	.+66     	; 0xb48 <Display321+0x184>
		clearLeds(0);
		
		for(uint8_t index = 0; index < 11; index++){
			setButtonLed(onledsX[index + ((3-count)*11)], onledsY[index + ((3-count)*11)], 1);
     b06:	f4 01       	movw	r30, r8
     b08:	61 91       	ld	r22, Z+
     b0a:	4f 01       	movw	r8, r30
     b0c:	41 e0       	ldi	r20, 0x01	; 1
     b0e:	89 91       	ld	r24, Y+
     b10:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
			setScore(disp, count);
		}
		printf("%d\n", count);
		clearLeds(0);
		
		for(uint8_t index = 0; index < 11; index++){
     b14:	80 16       	cp	r8, r16
     b16:	91 06       	cpc	r9, r17
     b18:	b1 f7       	brne	.-20     	; 0xb06 <Display321+0x142>
			setButtonLed(onledsX[index + ((3-count)*11)], onledsY[index + ((3-count)*11)], 1);
		}
		playChirp(3-count);
     b1a:	87 2d       	mov	r24, r7
     b1c:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <playChirp>
     b20:	ff ef       	ldi	r31, 0xFF	; 255
     b22:	23 ed       	ldi	r18, 0xD3	; 211
     b24:	80 e3       	ldi	r24, 0x30	; 48
     b26:	f1 50       	subi	r31, 0x01	; 1
     b28:	20 40       	sbci	r18, 0x00	; 0
     b2a:	80 40       	sbci	r24, 0x00	; 0
     b2c:	e1 f7       	brne	.-8      	; 0xb26 <Display321+0x162>
     b2e:	00 c0       	rjmp	.+0      	; 0xb30 <Display321+0x16c>
     b30:	00 00       	nop
     b32:	91 e0       	ldi	r25, 0x01	; 1
     b34:	e9 1a       	sub	r14, r25
     b36:	f1 08       	sbc	r15, r1
     b38:	73 94       	inc	r7
     b3a:	eb e0       	ldi	r30, 0x0B	; 11
     b3c:	ce 0e       	add	r12, r30
     b3e:	d1 1c       	adc	r13, r1
     b40:	48 01       	movw	r8, r16
			DDRB &= ~(1<<1);
		}
	}

	_delay_ms(650);
	for(uint8_t count = 3; count >= 1; count--){
     b42:	f3 e0       	ldi	r31, 0x03	; 3
     b44:	7f 16       	cp	r7, r31
     b46:	f1 f0       	breq	.+60     	; 0xb84 <Display321+0x1c0>
		for(uint8_t disp = 0; disp < 3; disp++){
			setScore(disp, count);
     b48:	b7 01       	movw	r22, r14
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
     b50:	b7 01       	movw	r22, r14
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
     b58:	b7 01       	movw	r22, r14
     b5a:	82 e0       	ldi	r24, 0x02	; 2
     b5c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
		}
		printf("%d\n", count);
     b60:	ff 92       	push	r15
     b62:	ef 92       	push	r14
     b64:	bf 92       	push	r11
     b66:	af 92       	push	r10
     b68:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <printf>
		clearLeds(0);
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	0e 94 63 01 	call	0x2c6	; 0x2c6 <clearLeds>
     b72:	84 01       	movw	r16, r8
     b74:	05 5f       	subi	r16, 0xF5	; 245
     b76:	1f 4f       	sbci	r17, 0xFF	; 255
     b78:	0f 90       	pop	r0
     b7a:	0f 90       	pop	r0
     b7c:	0f 90       	pop	r0
     b7e:	0f 90       	pop	r0
     b80:	e6 01       	movw	r28, r12
     b82:	c1 cf       	rjmp	.-126    	; 0xb06 <Display321+0x142>
			setButtonLed(onledsX[index + ((3-count)*11)], onledsY[index + ((3-count)*11)], 1);
		}
		playChirp(3-count);
		_delay_ms(1000);
	}
}
     b84:	df 91       	pop	r29
     b86:	cf 91       	pop	r28
     b88:	1f 91       	pop	r17
     b8a:	0f 91       	pop	r16
     b8c:	ff 90       	pop	r15
     b8e:	ef 90       	pop	r14
     b90:	df 90       	pop	r13
     b92:	cf 90       	pop	r12
     b94:	bf 90       	pop	r11
     b96:	af 90       	pop	r10
     b98:	9f 90       	pop	r9
     b9a:	8f 90       	pop	r8
     b9c:	7f 90       	pop	r7
     b9e:	08 95       	ret

00000ba0 <Game>:
			return;
		}
	}
}

void Game(){
     ba0:	2f 92       	push	r2
     ba2:	3f 92       	push	r3
     ba4:	4f 92       	push	r4
     ba6:	5f 92       	push	r5
     ba8:	6f 92       	push	r6
     baa:	7f 92       	push	r7
     bac:	8f 92       	push	r8
     bae:	9f 92       	push	r9
     bb0:	af 92       	push	r10
     bb2:	bf 92       	push	r11
     bb4:	cf 92       	push	r12
     bb6:	df 92       	push	r13
     bb8:	ef 92       	push	r14
     bba:	ff 92       	push	r15
     bbc:	0f 93       	push	r16
     bbe:	1f 93       	push	r17
     bc0:	cf 93       	push	r28
     bc2:	df 93       	push	r29
     bc4:	cd b7       	in	r28, 0x3d	; 61
     bc6:	de b7       	in	r29, 0x3e	; 62
     bc8:	29 97       	sbiw	r28, 0x09	; 9
     bca:	0f b6       	in	r0, 0x3f	; 63
     bcc:	f8 94       	cli
     bce:	de bf       	out	0x3e, r29	; 62
     bd0:	0f be       	out	0x3f, r0	; 63
     bd2:	cd bf       	out	0x3d, r28	; 61

	// game mode is set when leaving attract mode
	Display321();
     bd4:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <Display321>
	printf("GAME START\n");
     bd8:	80 e4       	ldi	r24, 0x40	; 64
     bda:	91 e0       	ldi	r25, 0x01	; 1
     bdc:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <puts>
	
	P1Score = 0;			// reset scores and multipliers
     be0:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <P1Score+0x1>
     be4:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <P1Score>
	P2Score = 0;
     be8:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <P2Score+0x1>
     bec:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <P2Score>
	P1Multiplier = 1;
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <P1Multiplier>
	P2Multiplier = 1;
     bf6:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <P2Multiplier>
     bfa:	0f 2e       	mov	r0, r31
     bfc:	f1 e0       	ldi	r31, 0x01	; 1
     bfe:	af 2e       	mov	r10, r31
     c00:	f3 e0       	ldi	r31, 0x03	; 3
     c02:	bf 2e       	mov	r11, r31
     c04:	f0 2d       	mov	r31, r0
     c06:	0f 2e       	mov	r0, r31
     c08:	f0 ef       	ldi	r31, 0xF0	; 240
     c0a:	ef 2e       	mov	r14, r31
     c0c:	f2 e0       	ldi	r31, 0x02	; 2
     c0e:	ff 2e       	mov	r15, r31
     c10:	f0 2d       	mov	r31, r0
     c12:	0f 2e       	mov	r0, r31
     c14:	f4 e0       	ldi	r31, 0x04	; 4
     c16:	6f 2e       	mov	r6, r31
     c18:	f3 e0       	ldi	r31, 0x03	; 3
     c1a:	7f 2e       	mov	r7, r31
     c1c:	f0 2d       	mov	r31, r0
     c1e:	87 01       	movw	r16, r14

	// pick 6 random leds to enable regardless of mode
	// (3 left side 3 right side)
	for(int i = 0; i < 3; i++){
		gameledsX[i] = rand() % 3;			// turn 3 on right side
     c20:	0f 2e       	mov	r0, r31
     c22:	f3 e0       	ldi	r31, 0x03	; 3
     c24:	8f 2e       	mov	r8, r31
     c26:	91 2c       	mov	r9, r1
     c28:	f0 2d       	mov	r31, r0
		gameledsY[i] = 1+ (rand() % 5);
     c2a:	0f 2e       	mov	r0, r31
     c2c:	f5 e0       	ldi	r31, 0x05	; 5
     c2e:	cf 2e       	mov	r12, r31
     c30:	d1 2c       	mov	r13, r1
     c32:	f0 2d       	mov	r31, r0
     c34:	ba 82       	std	Y+2, r11	; 0x02
     c36:	a9 82       	std	Y+1, r10	; 0x01
	P2Multiplier = 1;

	// pick 6 random leds to enable regardless of mode
	// (3 left side 3 right side)
	for(int i = 0; i < 3; i++){
		gameledsX[i] = rand() % 3;			// turn 3 on right side
     c38:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <rand>
     c3c:	b4 01       	movw	r22, r8
     c3e:	0e 94 02 17 	call	0x2e04	; 0x2e04 <__divmodhi4>
     c42:	e9 81       	ldd	r30, Y+1	; 0x01
     c44:	fa 81       	ldd	r31, Y+2	; 0x02
     c46:	81 93       	st	Z+, r24
     c48:	fa 83       	std	Y+2, r31	; 0x02
     c4a:	e9 83       	std	Y+1, r30	; 0x01
		gameledsY[i] = 1+ (rand() % 5);
     c4c:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <rand>
     c50:	b6 01       	movw	r22, r12
     c52:	0e 94 02 17 	call	0x2e04	; 0x2e04 <__divmodhi4>
     c56:	8f 5f       	subi	r24, 0xFF	; 255
     c58:	f8 01       	movw	r30, r16
     c5a:	81 93       	st	Z+, r24
     c5c:	8f 01       	movw	r16, r30
		
		gameledsX[i+3] = 3 + rand() % 3;	// turn 3 on left side
     c5e:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <rand>
     c62:	b4 01       	movw	r22, r8
     c64:	0e 94 02 17 	call	0x2e04	; 0x2e04 <__divmodhi4>
     c68:	8d 5f       	subi	r24, 0xFD	; 253
     c6a:	e9 81       	ldd	r30, Y+1	; 0x01
     c6c:	fa 81       	ldd	r31, Y+2	; 0x02
     c6e:	82 83       	std	Z+2, r24	; 0x02
		gameledsY[i+3] = 1+(rand() % 5);
     c70:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <rand>
     c74:	b6 01       	movw	r22, r12
     c76:	0e 94 02 17 	call	0x2e04	; 0x2e04 <__divmodhi4>
     c7a:	8f 5f       	subi	r24, 0xFF	; 255
     c7c:	f8 01       	movw	r30, r16
     c7e:	82 83       	std	Z+2, r24	; 0x02
	P1Multiplier = 1;
	P2Multiplier = 1;

	// pick 6 random leds to enable regardless of mode
	// (3 left side 3 right side)
	for(int i = 0; i < 3; i++){
     c80:	29 81       	ldd	r18, Y+1	; 0x01
     c82:	3a 81       	ldd	r19, Y+2	; 0x02
     c84:	26 15       	cp	r18, r6
     c86:	37 05       	cpc	r19, r7
     c88:	b9 f6       	brne	.-82     	; 0xc38 <Game+0x98>
		gameledsY[i+3] = 1+(rand() % 5);
	}
	
	uint16_t ticksrem;			// used in resetting multiplier
	
	TimeRemaining = RoundTime;
     c8a:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <RoundTime>
     c8e:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <TimeRemaining>
	printf("round time %d\n", TimeRemaining);
     c92:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <TimeRemaining>
     c96:	1f 92       	push	r1
     c98:	8f 93       	push	r24
     c9a:	8b e4       	ldi	r24, 0x4B	; 75
     c9c:	91 e0       	ldi	r25, 0x01	; 1
     c9e:	9f 93       	push	r25
     ca0:	8f 93       	push	r24
     ca2:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <printf>
	TCNT4 = 0;					// reset timer
     ca6:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7e00a5>
     caa:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7e00a4>
	
	setScore(0, HighScore1P);	// will be replaced if 2p mode
     cae:	60 91 fa 02 	lds	r22, 0x02FA	; 0x8002fa <HighScore1P>
     cb2:	70 91 fb 02 	lds	r23, 0x02FB	; 0x8002fb <HighScore1P+0x1>
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
	uint8_t lastTime = TimeRemaining;
     cbc:	30 91 f9 02 	lds	r19, 0x02F9	; 0x8002f9 <TimeRemaining>
     cc0:	3b 83       	std	Y+3, r19	; 0x03
	while(TimeRemaining > 0){
     cc2:	0f 90       	pop	r0
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
						//gameLedsX[i]
						newX = 3 + (rand() % 3);
						}else{
						newX = rand() % 3;
					}
					newY = 1 + (rand() % 5);
     cca:	0f 2e       	mov	r0, r31
     ccc:	f5 e0       	ldi	r31, 0x05	; 5
     cce:	2f 2e       	mov	r2, r31
     cd0:	31 2c       	mov	r3, r1
     cd2:	f0 2d       	mov	r31, r0
     cd4:	0f 2e       	mov	r0, r31
     cd6:	f7 e0       	ldi	r31, 0x07	; 7
     cd8:	8f 2e       	mov	r8, r31
     cda:	f3 e0       	ldi	r31, 0x03	; 3
     cdc:	9f 2e       	mov	r9, r31
     cde:	f0 2d       	mov	r31, r0
	printf("round time %d\n", TimeRemaining);
	TCNT4 = 0;					// reset timer
	
	setScore(0, HighScore1P);	// will be replaced if 2p mode
	uint8_t lastTime = TimeRemaining;
	while(TimeRemaining > 0){
     ce0:	ea c1       	rjmp	.+980    	; 0x10b6 <Game+0x516>
		
		
		if((SoundEnabled) & (lastTime != TimeRemaining) & (soundPlaying == 0)){
     ce2:	40 91 f9 02 	lds	r20, 0x02F9	; 0x8002f9 <TimeRemaining>
     ce6:	50 91 0b 03 	lds	r21, 0x030B	; 0x80030b <soundPlaying>
     cea:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <SoundEnabled>
     cee:	28 2f       	mov	r18, r24
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	55 23       	and	r21, r21
     cf8:	11 f0       	breq	.+4      	; 0xcfe <Game+0x15e>
     cfa:	80 e0       	ldi	r24, 0x00	; 0
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	82 23       	and	r24, r18
     d00:	93 23       	and	r25, r19
     d02:	21 e0       	ldi	r18, 0x01	; 1
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	5b 81       	ldd	r21, Y+3	; 0x03
     d08:	54 13       	cpse	r21, r20
     d0a:	02 c0       	rjmp	.+4      	; 0xd10 <Game+0x170>
     d0c:	20 e0       	ldi	r18, 0x00	; 0
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	82 23       	and	r24, r18
     d12:	93 23       	and	r25, r19
     d14:	89 2b       	or	r24, r25
     d16:	89 f1       	breq	.+98     	; 0xd7a <Game+0x1da>
			lastTime = TimeRemaining;
     d18:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <TimeRemaining>
     d1c:	8b 83       	std	Y+3, r24	; 0x03
			DDRB |= (1<<1);	//make ticking noise
     d1e:	21 9a       	sbi	0x04, 1	; 4
			ICR1 = notes[4 + (TimeRemaining%2)];
     d20:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <TimeRemaining>
     d24:	81 70       	andi	r24, 0x01	; 1
     d26:	8c 83       	std	Y+4, r24	; 0x04
     d28:	1d 82       	std	Y+5, r1	; 0x05
     d2a:	ec 81       	ldd	r30, Y+4	; 0x04
     d2c:	fd 81       	ldd	r31, Y+5	; 0x05
     d2e:	34 96       	adiw	r30, 0x04	; 4
     d30:	ee 0f       	add	r30, r30
     d32:	ff 1f       	adc	r31, r31
     d34:	e1 54       	subi	r30, 0x41	; 65
     d36:	fd 4f       	sbci	r31, 0xFD	; 253
     d38:	80 81       	ld	r24, Z
     d3a:	91 81       	ldd	r25, Z+1	; 0x01
     d3c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     d40:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
			OCR1A = notes[4 + (TimeRemaining%2)] / 2;
     d44:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <TimeRemaining>
     d48:	81 70       	andi	r24, 0x01	; 1
     d4a:	8e 83       	std	Y+6, r24	; 0x06
     d4c:	1f 82       	std	Y+7, r1	; 0x07
     d4e:	ee 81       	ldd	r30, Y+6	; 0x06
     d50:	ff 81       	ldd	r31, Y+7	; 0x07
     d52:	34 96       	adiw	r30, 0x04	; 4
     d54:	ee 0f       	add	r30, r30
     d56:	ff 1f       	adc	r31, r31
     d58:	e1 54       	subi	r30, 0x41	; 65
     d5a:	fd 4f       	sbci	r31, 0xFD	; 253
     d5c:	80 81       	ld	r24, Z
     d5e:	91 81       	ldd	r25, Z+1	; 0x01
     d60:	96 95       	lsr	r25
     d62:	87 95       	ror	r24
     d64:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     d68:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d6c:	ef ea       	ldi	r30, 0xAF	; 175
     d6e:	f6 e3       	ldi	r31, 0x36	; 54
     d70:	31 97       	sbiw	r30, 0x01	; 1
     d72:	f1 f7       	brne	.-4      	; 0xd70 <Game+0x1d0>
     d74:	00 c0       	rjmp	.+0      	; 0xd76 <Game+0x1d6>
     d76:	00 00       	nop
			_delay_us(3500);
			DDRB &= ~(1<<1);
     d78:	21 98       	cbi	0x04, 1	; 4
		}
		//printf("%ds REMAINING\n", TimeRemaining);
		
		setScore(1, TimeRemaining);
     d7a:	60 91 f9 02 	lds	r22, 0x02F9	; 0x8002f9 <TimeRemaining>
     d7e:	70 e0       	ldi	r23, 0x00	; 0
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
		if(GameMode == 1){
     d86:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <GameMode>
     d8a:	81 30       	cpi	r24, 0x01	; 1
     d8c:	79 f4       	brne	.+30     	; 0xdac <Game+0x20c>
			setScore(0, P1Score);	// if 2p mode, show left p1 and right p2 scores
     d8e:	60 91 fc 02 	lds	r22, 0x02FC	; 0x8002fc <P1Score>
     d92:	70 91 fd 02 	lds	r23, 0x02FD	; 0x8002fd <P1Score+0x1>
     d96:	80 e0       	ldi	r24, 0x00	; 0
     d98:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
			setScore(2, P2Score);
     d9c:	60 91 fe 02 	lds	r22, 0x02FE	; 0x8002fe <P2Score>
     da0:	70 91 ff 02 	lds	r23, 0x02FF	; 0x8002ff <P2Score+0x1>
     da4:	82 e0       	ldi	r24, 0x02	; 2
     da6:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
     daa:	9a c1       	rjmp	.+820    	; 0x10e0 <Game+0x540>
			}else{
			setScore(2, P1Score);	// otherwise show p1 score and high score
     dac:	60 91 fc 02 	lds	r22, 0x02FC	; 0x8002fc <P1Score>
     db0:	70 91 fd 02 	lds	r23, 0x02FD	; 0x8002fd <P1Score+0x1>
     db4:	82 e0       	ldi	r24, 0x02	; 2
     db6:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
     dba:	92 c1       	rjmp	.+804    	; 0x10e0 <Game+0x540>
     dbc:	7a 82       	std	Y+2, r7	; 0x02
     dbe:	69 82       	std	Y+1, r6	; 0x01
     dc0:	c8 84       	ldd	r12, Y+8	; 0x08
     dc2:	d9 84       	ldd	r13, Y+9	; 0x09
		}

		for(uint8_t i = 0; i < 6; i++){
			if (isButtonDown(gameledsX[i], gameledsY[i]) ){
     dc4:	f3 01       	movw	r30, r6
     dc6:	60 81       	ld	r22, Z
     dc8:	f6 01       	movw	r30, r12
     dca:	80 81       	ld	r24, Z
     dcc:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
     dd0:	88 23       	and	r24, r24
     dd2:	09 f4       	brne	.+2      	; 0xdd6 <Game+0x236>
     dd4:	e9 c0       	rjmp	.+466    	; 0xfa8 <Game+0x408>
     dd6:	50 2e       	mov	r5, r16
     dd8:	01 2f       	mov	r16, r17

				uint8_t newX, newY;
				while(1){				// repeatedly search for new open location
					if(i >= 3){
     dda:	03 30       	cpi	r16, 0x03	; 3
     ddc:	48 f0       	brcs	.+18     	; 0xdf0 <Game+0x250>
						//gameLedsX[i]
						newX = 3 + (rand() % 3);
     dde:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <rand>
     de2:	63 e0       	ldi	r22, 0x03	; 3
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	0e 94 02 17 	call	0x2e04	; 0x2e04 <__divmodhi4>
     dea:	13 e0       	ldi	r17, 0x03	; 3
     dec:	18 0f       	add	r17, r24
     dee:	07 c0       	rjmp	.+14     	; 0xdfe <Game+0x25e>
						}else{
						newX = rand() % 3;
     df0:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <rand>
     df4:	63 e0       	ldi	r22, 0x03	; 3
     df6:	70 e0       	ldi	r23, 0x00	; 0
     df8:	0e 94 02 17 	call	0x2e04	; 0x2e04 <__divmodhi4>
     dfc:	18 2f       	mov	r17, r24
					}
					newY = 1 + (rand() % 5);
     dfe:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <rand>
     e02:	b1 01       	movw	r22, r2
     e04:	0e 94 02 17 	call	0x2e04	; 0x2e04 <__divmodhi4>
     e08:	8f 5f       	subi	r24, 0xFF	; 255
     e0a:	d7 01       	movw	r26, r14
     e0c:	f5 01       	movw	r30, r10
					//gameLedsY
					
					uint8_t clearSpot = 1;
     e0e:	25 2d       	mov	r18, r5
					for(uint8_t idx = 0; idx < 6; idx++){
						if((gameledsX[idx] == newX) && (gameledsY[idx] == newY)){
     e10:	91 91       	ld	r25, Z+
     e12:	19 13       	cpse	r17, r25
     e14:	04 c0       	rjmp	.+8      	; 0xe1e <Game+0x27e>
     e16:	9c 91       	ld	r25, X
     e18:	89 13       	cpse	r24, r25
     e1a:	01 c0       	rjmp	.+2      	; 0xe1e <Game+0x27e>
							clearSpot = 0;	// "new" location is in use
     e1c:	24 2d       	mov	r18, r4
     e1e:	11 96       	adiw	r26, 0x01	; 1
					}
					newY = 1 + (rand() % 5);
					//gameLedsY
					
					uint8_t clearSpot = 1;
					for(uint8_t idx = 0; idx < 6; idx++){
     e20:	e8 15       	cp	r30, r8
     e22:	f9 05       	cpc	r31, r9
     e24:	a9 f7       	brne	.-22     	; 0xe10 <Game+0x270>
						if((gameledsX[idx] == newX) && (gameledsY[idx] == newY)){
							clearSpot = 0;	// "new" location is in use
						}
					}
					if(clearSpot){
     e26:	22 23       	and	r18, r18
     e28:	c1 f2       	breq	.-80     	; 0xdda <Game+0x23a>
     e2a:	95 2d       	mov	r25, r5
     e2c:	51 2e       	mov	r5, r17
     e2e:	10 2f       	mov	r17, r16
     e30:	09 2f       	mov	r16, r25
						gameledsX[i] = newX;
     e32:	f6 01       	movw	r30, r12
     e34:	50 82       	st	Z, r5
						gameledsY[i] = newY;
     e36:	e9 81       	ldd	r30, Y+1	; 0x01
     e38:	fa 81       	ldd	r31, Y+2	; 0x02
     e3a:	80 83       	st	Z, r24
						break;
					}
					
				}

				if(GameMode == 0){
     e3c:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <GameMode>
     e40:	81 11       	cpse	r24, r1
     e42:	4f c0       	rjmp	.+158    	; 0xee2 <Game+0x342>
					IncrementScore(0, P1Multiplier);	// add score and inc multiplier (singleplayer)
     e44:	60 91 ec 02 	lds	r22, 0x02EC	; 0x8002ec <P1Multiplier>
     e48:	70 e0       	ldi	r23, 0x00	; 0
     e4a:	0e 94 ac 04 	call	0x958	; 0x958 <IncrementScore>
					playChirp(P1Multiplier);
     e4e:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <P1Multiplier>
     e52:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <playChirp>
					
					P1Multiplier = (P1Multiplier == MultiplierMax) ? MultiplierMax : (P1Multiplier + 1);
     e56:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <P1Multiplier>
     e5a:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <MultiplierMax>
     e5e:	98 17       	cp	r25, r24
     e60:	11 f0       	breq	.+4      	; 0xe66 <Game+0x2c6>
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	89 0f       	add	r24, r25
     e66:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <P1Multiplier>
					ticksrem = 15*MultTimeKill;
     e6a:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <MultTimeKill>
     e6e:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <MultTimeKill+0x1>
     e72:	4f e0       	ldi	r20, 0x0F	; 15
     e74:	48 9f       	mul	r20, r24
     e76:	90 01       	movw	r18, r0
     e78:	49 9f       	mul	r20, r25
     e7a:	30 0d       	add	r19, r0
     e7c:	11 24       	eor	r1, r1
					P1MultTimeT = OCR4A - TCNT4;	// subseconds counting down
     e7e:	e8 ea       	ldi	r30, 0xA8	; 168
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	91 81       	ldd	r25, Z+1	; 0x01
     e86:	e4 ea       	ldi	r30, 0xA4	; 164
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	40 81       	ld	r20, Z
     e8c:	51 81       	ldd	r21, Z+1	; 0x01
     e8e:	84 1b       	sub	r24, r20
     e90:	95 0b       	sbc	r25, r21
     e92:	90 93 f7 02 	sts	0x02F7, r25	; 0x8002f7 <P1MultTimeT+0x1>
     e96:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <P1MultTimeT>
					if(ticksrem > P1MultTimeT){		//
     e9a:	82 17       	cp	r24, r18
     e9c:	93 07       	cpc	r25, r19
     e9e:	b0 f4       	brcc	.+44     	; 0xecc <Game+0x32c>
						P1MultTimeS = TimeRemaining - MultiplierDecaySeconds;
     ea0:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <TimeRemaining>
     ea4:	81 50       	subi	r24, 0x01	; 1
     ea6:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <P1MultTimeS>
						P1MultTimeT = (OCR4A - (ticksrem - P2MultTimeT));
     eaa:	e8 ea       	ldi	r30, 0xA8	; 168
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	40 81       	ld	r20, Z
     eb0:	51 81       	ldd	r21, Z+1	; 0x01
     eb2:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <P2MultTimeT>
     eb6:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <P2MultTimeT+0x1>
     eba:	84 0f       	add	r24, r20
     ebc:	95 1f       	adc	r25, r21
     ebe:	82 1b       	sub	r24, r18
     ec0:	93 0b       	sbc	r25, r19
     ec2:	90 93 f7 02 	sts	0x02F7, r25	; 0x8002f7 <P1MultTimeT+0x1>
     ec6:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <P1MultTimeT>
     eca:	6e c0       	rjmp	.+220    	; 0xfa8 <Game+0x408>
						}else{
						P1MultTimeS = TimeRemaining;
     ecc:	40 91 f9 02 	lds	r20, 0x02F9	; 0x8002f9 <TimeRemaining>
     ed0:	40 93 00 03 	sts	0x0300, r20	; 0x800300 <P1MultTimeS>
						P1MultTimeT = P1MultTimeT - ticksrem;	// this second, earlier
     ed4:	82 1b       	sub	r24, r18
     ed6:	93 0b       	sbc	r25, r19
     ed8:	90 93 f7 02 	sts	0x02F7, r25	; 0x8002f7 <P1MultTimeT+0x1>
     edc:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <P1MultTimeT>
     ee0:	63 c0       	rjmp	.+198    	; 0xfa8 <Game+0x408>
					}
					
					}else{
					if(i >= 3){
     ee2:	13 30       	cpi	r17, 0x03	; 3
     ee4:	08 f4       	brcc	.+2      	; 0xee8 <Game+0x348>
     ee6:	4c c0       	rjmp	.+152    	; 0xf80 <Game+0x3e0>
						IncrementScore(1, P2Multiplier);	// add depending on side of button pressed
     ee8:	60 91 eb 02 	lds	r22, 0x02EB	; 0x8002eb <P2Multiplier>
     eec:	70 e0       	ldi	r23, 0x00	; 0
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	0e 94 ac 04 	call	0x958	; 0x958 <IncrementScore>
						playChirp(P2Multiplier);
     ef4:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <P2Multiplier>
     ef8:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <playChirp>
						
						P2Multiplier = (P2Multiplier == MultiplierMax) ? MultiplierMax : (P2Multiplier + 1);
     efc:	90 91 eb 02 	lds	r25, 0x02EB	; 0x8002eb <P2Multiplier>
     f00:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <MultiplierMax>
     f04:	98 17       	cp	r25, r24
     f06:	11 f0       	breq	.+4      	; 0xf0c <Game+0x36c>
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	89 0f       	add	r24, r25
     f0c:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <P2Multiplier>
						
						ticksrem = 15*MultTimeKill;
     f10:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <MultTimeKill>
     f14:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <MultTimeKill+0x1>
     f18:	4f e0       	ldi	r20, 0x0F	; 15
     f1a:	48 9f       	mul	r20, r24
     f1c:	90 01       	movw	r18, r0
     f1e:	49 9f       	mul	r20, r25
     f20:	30 0d       	add	r19, r0
     f22:	11 24       	eor	r1, r1
						P2MultTimeT = OCR4A - TCNT4;	// subseconds counting down
     f24:	e8 ea       	ldi	r30, 0xA8	; 168
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	91 81       	ldd	r25, Z+1	; 0x01
     f2c:	e4 ea       	ldi	r30, 0xA4	; 164
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	40 81       	ld	r20, Z
     f32:	51 81       	ldd	r21, Z+1	; 0x01
     f34:	84 1b       	sub	r24, r20
     f36:	95 0b       	sbc	r25, r21
     f38:	90 93 ef 02 	sts	0x02EF, r25	; 0x8002ef <P2MultTimeT+0x1>
     f3c:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <P2MultTimeT>
						if(ticksrem > P2MultTimeT){		// 
     f40:	82 17       	cp	r24, r18
     f42:	93 07       	cpc	r25, r19
     f44:	90 f4       	brcc	.+36     	; 0xf6a <Game+0x3ca>
							P2MultTimeS = TimeRemaining - MultiplierDecaySeconds;
     f46:	40 91 f9 02 	lds	r20, 0x02F9	; 0x8002f9 <TimeRemaining>
     f4a:	41 50       	subi	r20, 0x01	; 1
     f4c:	40 93 f8 02 	sts	0x02F8, r20	; 0x8002f8 <P2MultTimeS>
							P2MultTimeT = (OCR4A - (ticksrem - P2MultTimeT));
     f50:	e8 ea       	ldi	r30, 0xA8	; 168
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	40 81       	ld	r20, Z
     f56:	51 81       	ldd	r21, Z+1	; 0x01
     f58:	84 0f       	add	r24, r20
     f5a:	95 1f       	adc	r25, r21
     f5c:	82 1b       	sub	r24, r18
     f5e:	93 0b       	sbc	r25, r19
     f60:	90 93 ef 02 	sts	0x02EF, r25	; 0x8002ef <P2MultTimeT+0x1>
     f64:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <P2MultTimeT>
     f68:	1f c0       	rjmp	.+62     	; 0xfa8 <Game+0x408>
						}else{
							P2MultTimeS = TimeRemaining;
     f6a:	40 91 f9 02 	lds	r20, 0x02F9	; 0x8002f9 <TimeRemaining>
     f6e:	40 93 f8 02 	sts	0x02F8, r20	; 0x8002f8 <P2MultTimeS>
							P2MultTimeT = P2MultTimeT - ticksrem;	// this second, earlier
     f72:	82 1b       	sub	r24, r18
     f74:	93 0b       	sbc	r25, r19
     f76:	90 93 ef 02 	sts	0x02EF, r25	; 0x8002ef <P2MultTimeT+0x1>
     f7a:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <P2MultTimeT>
     f7e:	14 c0       	rjmp	.+40     	; 0xfa8 <Game+0x408>
						}
						
						}else{
						IncrementScore(0, P1Multiplier);
     f80:	60 91 ec 02 	lds	r22, 0x02EC	; 0x8002ec <P1Multiplier>
     f84:	70 e0       	ldi	r23, 0x00	; 0
     f86:	80 e0       	ldi	r24, 0x00	; 0
     f88:	0e 94 ac 04 	call	0x958	; 0x958 <IncrementScore>
						playChirp(P1Multiplier);
     f8c:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <P1Multiplier>
     f90:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <playChirp>
						
						P1Multiplier = (P1Multiplier == MultiplierMax) ? MultiplierMax : (P1Multiplier + 1);
     f94:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <P1Multiplier>
     f98:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <MultiplierMax>
     f9c:	98 17       	cp	r25, r24
     f9e:	11 f0       	breq	.+4      	; 0xfa4 <Game+0x404>
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	89 0f       	add	r24, r25
     fa4:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <P1Multiplier>
			setScore(2, P2Score);
			}else{
			setScore(2, P1Score);	// otherwise show p1 score and high score
		}

		for(uint8_t i = 0; i < 6; i++){
     fa8:	1f 5f       	subi	r17, 0xFF	; 255
     faa:	ff ef       	ldi	r31, 0xFF	; 255
     fac:	6f 1a       	sub	r6, r31
     fae:	7f 0a       	sbc	r7, r31
     fb0:	28 85       	ldd	r18, Y+8	; 0x08
     fb2:	39 85       	ldd	r19, Y+9	; 0x09
     fb4:	2f 5f       	subi	r18, 0xFF	; 255
     fb6:	3f 4f       	sbci	r19, 0xFF	; 255
     fb8:	39 87       	std	Y+9, r19	; 0x09
     fba:	28 87       	std	Y+8, r18	; 0x08
     fbc:	16 30       	cpi	r17, 0x06	; 6
     fbe:	09 f0       	breq	.+2      	; 0xfc2 <Game+0x422>
     fc0:	fd ce       	rjmp	.-518    	; 0xdbc <Game+0x21c>
		}
		
		
		
		
		if (P1Multiplier > 1){
     fc2:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <P1Multiplier>
     fc6:	82 30       	cpi	r24, 0x02	; 2
     fc8:	d0 f0       	brcs	.+52     	; 0xffe <Game+0x45e>
			uint16_t tcountdown = OCR4A - TCNT4;
     fca:	e8 ea       	ldi	r30, 0xA8	; 168
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	91 81       	ldd	r25, Z+1	; 0x01
     fd2:	e4 ea       	ldi	r30, 0xA4	; 164
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	40 81       	ld	r20, Z
     fd8:	51 81       	ldd	r21, Z+1	; 0x01
			if((TimeRemaining == P1MultTimeS) && (tcountdown <= P1MultTimeT)){
     fda:	30 91 f9 02 	lds	r19, 0x02F9	; 0x8002f9 <TimeRemaining>
     fde:	20 91 00 03 	lds	r18, 0x0300	; 0x800300 <P1MultTimeS>
     fe2:	32 13       	cpse	r19, r18
     fe4:	0c c0       	rjmp	.+24     	; 0xffe <Game+0x45e>
     fe6:	84 1b       	sub	r24, r20
     fe8:	95 0b       	sbc	r25, r21
     fea:	20 91 f6 02 	lds	r18, 0x02F6	; 0x8002f6 <P1MultTimeT>
     fee:	30 91 f7 02 	lds	r19, 0x02F7	; 0x8002f7 <P1MultTimeT+0x1>
     ff2:	28 17       	cp	r18, r24
     ff4:	39 07       	cpc	r19, r25
     ff6:	18 f0       	brcs	.+6      	; 0xffe <Game+0x45e>
				P1Multiplier = 1;
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <P1Multiplier>
			}
		}
		
		if (P2Multiplier > 1){
     ffe:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <P2Multiplier>
    1002:	82 30       	cpi	r24, 0x02	; 2
    1004:	08 f4       	brcc	.+2      	; 0x1008 <Game+0x468>
    1006:	73 c0       	rjmp	.+230    	; 0x10ee <Game+0x54e>
			uint16_t tcountdown = OCR4A - TCNT4;
    1008:	e8 ea       	ldi	r30, 0xA8	; 168
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	91 81       	ldd	r25, Z+1	; 0x01
    1010:	e4 ea       	ldi	r30, 0xA4	; 164
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	40 81       	ld	r20, Z
    1016:	51 81       	ldd	r21, Z+1	; 0x01
			if((TimeRemaining == P2MultTimeS) && (tcountdown <= P2MultTimeT)){
    1018:	30 91 f9 02 	lds	r19, 0x02F9	; 0x8002f9 <TimeRemaining>
    101c:	20 91 f8 02 	lds	r18, 0x02F8	; 0x8002f8 <P2MultTimeS>
    1020:	32 13       	cpse	r19, r18
    1022:	65 c0       	rjmp	.+202    	; 0x10ee <Game+0x54e>
    1024:	84 1b       	sub	r24, r20
    1026:	95 0b       	sbc	r25, r21
    1028:	20 91 ee 02 	lds	r18, 0x02EE	; 0x8002ee <P2MultTimeT>
    102c:	30 91 ef 02 	lds	r19, 0x02EF	; 0x8002ef <P2MultTimeT+0x1>
    1030:	28 17       	cp	r18, r24
    1032:	39 07       	cpc	r19, r25
    1034:	08 f4       	brcc	.+2      	; 0x1038 <Game+0x498>
    1036:	5b c0       	rjmp	.+182    	; 0x10ee <Game+0x54e>
				P2Multiplier = 1;
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <P2Multiplier>
    103e:	57 c0       	rjmp	.+174    	; 0x10ee <Game+0x54e>
		
		for(uint8_t ledIndexX = 0; ledIndexX < 6; ledIndexX++){
			for(uint8_t ledIndexY = 0; ledIndexY < 6; ledIndexY++){
				uint8_t found = 0;
				for(uint8_t ledIndex = 0; ledIndex < 6; ledIndex++){
					if((ledIndexX == gameledsX[ledIndex]) && (ledIndexY == gameledsY[ledIndex]))	//led is on in game
    1040:	81 91       	ld	r24, Z+
    1042:	29 81       	ldd	r18, Y+1	; 0x01
    1044:	82 13       	cpse	r24, r18
    1046:	04 c0       	rjmp	.+8      	; 0x1050 <Game+0x4b0>
    1048:	8c 91       	ld	r24, X
    104a:	38 85       	ldd	r19, Y+8	; 0x08
    104c:	83 17       	cp	r24, r19
    104e:	31 f0       	breq	.+12     	; 0x105c <Game+0x4bc>
    1050:	11 96       	adiw	r26, 0x01	; 1
		
		
		for(uint8_t ledIndexX = 0; ledIndexX < 6; ledIndexX++){
			for(uint8_t ledIndexY = 0; ledIndexY < 6; ledIndexY++){
				uint8_t found = 0;
				for(uint8_t ledIndex = 0; ledIndex < 6; ledIndex++){
    1052:	8e 16       	cp	r8, r30
    1054:	9f 06       	cpc	r9, r31
    1056:	a1 f7       	brne	.-24     	; 0x1040 <Game+0x4a0>
		}
		
		
		for(uint8_t ledIndexX = 0; ledIndexX < 6; ledIndexX++){
			for(uint8_t ledIndexY = 0; ledIndexY < 6; ledIndexY++){
				uint8_t found = 0;
    1058:	41 2f       	mov	r20, r17
    105a:	01 c0       	rjmp	.+2      	; 0x105e <Game+0x4be>
				for(uint8_t ledIndex = 0; ledIndex < 6; ledIndex++){
					if((ledIndexX == gameledsX[ledIndex]) && (ledIndexY == gameledsY[ledIndex]))	//led is on in game
					{
						found = 1;
    105c:	40 2f       	mov	r20, r16
						break;
					}
				}
				setButtonLed(ledIndexX, ledIndexY, found);
    105e:	68 85       	ldd	r22, Y+8	; 0x08
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
			}
		}
		
		
		for(uint8_t ledIndexX = 0; ledIndexX < 6; ledIndexX++){
			for(uint8_t ledIndexY = 0; ledIndexY < 6; ledIndexY++){
    1066:	48 85       	ldd	r20, Y+8	; 0x08
    1068:	4f 5f       	subi	r20, 0xFF	; 255
    106a:	48 87       	std	Y+8, r20	; 0x08
    106c:	46 30       	cpi	r20, 0x06	; 6
    106e:	19 f0       	breq	.+6      	; 0x1076 <Game+0x4d6>
					//gameLedsY
					
					uint8_t clearSpot = 1;
					for(uint8_t idx = 0; idx < 6; idx++){
						if((gameledsX[idx] == newX) && (gameledsY[idx] == newY)){
							clearSpot = 0;	// "new" location is in use
    1070:	d7 01       	movw	r26, r14
    1072:	f5 01       	movw	r30, r10
    1074:	e5 cf       	rjmp	.-54     	; 0x1040 <Game+0x4a0>
				P2Multiplier = 1;
			}
		}
		
		
		for(uint8_t ledIndexX = 0; ledIndexX < 6; ledIndexX++){
    1076:	59 81       	ldd	r21, Y+1	; 0x01
    1078:	5f 5f       	subi	r21, 0xFF	; 255
    107a:	59 83       	std	Y+1, r21	; 0x01
    107c:	56 30       	cpi	r21, 0x06	; 6
    107e:	11 f0       	breq	.+4      	; 0x1084 <Game+0x4e4>
			for(uint8_t ledIndexY = 0; ledIndexY < 6; ledIndexY++){
				uint8_t found = 0;
    1080:	18 86       	std	Y+8, r1	; 0x08
    1082:	f6 cf       	rjmp	.-20     	; 0x1070 <Game+0x4d0>
    1084:	0f 2e       	mov	r0, r31
    1086:	f6 ef       	ldi	r31, 0xF6	; 246
    1088:	cf 2e       	mov	r12, r31
    108a:	f2 e0       	ldi	r31, 0x02	; 2
    108c:	df 2e       	mov	r13, r31
    108e:	f0 2d       	mov	r31, r0
				P2Multiplier = 1;
			}
		}
		
		
		for(uint8_t ledIndexX = 0; ledIndexX < 6; ledIndexX++){
    1090:	85 01       	movw	r16, r10
    1092:	fa 82       	std	Y+2, r15	; 0x02
    1094:	e9 82       	std	Y+1, r14	; 0x01
				}
				setButtonLed(ledIndexX, ledIndexY, found);
			}
		}
		for(uint8_t ledIndex = 0; ledIndex < 6; ledIndex++){	//turn on game leds and turn others off
			setButtonLed(gameledsX[ledIndex], gameledsY[ledIndex], 1);
    1096:	e9 81       	ldd	r30, Y+1	; 0x01
    1098:	fa 81       	ldd	r31, Y+2	; 0x02
    109a:	61 91       	ld	r22, Z+
    109c:	fa 83       	std	Y+2, r31	; 0x02
    109e:	e9 83       	std	Y+1, r30	; 0x01
    10a0:	41 e0       	ldi	r20, 0x01	; 1
    10a2:	f8 01       	movw	r30, r16
    10a4:	81 91       	ld	r24, Z+
    10a6:	8f 01       	movw	r16, r30
    10a8:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
					}
				}
				setButtonLed(ledIndexX, ledIndexY, found);
			}
		}
		for(uint8_t ledIndex = 0; ledIndex < 6; ledIndex++){	//turn on game leds and turn others off
    10ac:	29 81       	ldd	r18, Y+1	; 0x01
    10ae:	3a 81       	ldd	r19, Y+2	; 0x02
    10b0:	c2 16       	cp	r12, r18
    10b2:	d3 06       	cpc	r13, r19
    10b4:	81 f7       	brne	.-32     	; 0x1096 <Game+0x4f6>
	printf("round time %d\n", TimeRemaining);
	TCNT4 = 0;					// reset timer
	
	setScore(0, HighScore1P);	// will be replaced if 2p mode
	uint8_t lastTime = TimeRemaining;
	while(TimeRemaining > 0){
    10b6:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <TimeRemaining>
    10ba:	81 11       	cpse	r24, r1
    10bc:	12 ce       	rjmp	.-988    	; 0xce2 <Game+0x142>
		}
		
		//_delay_ms(50);	// TODO maybe change this later

	}
	setScoreSegment(TIMER1, 18); // 18 is the dash
    10be:	62 e1       	ldi	r22, 0x12	; 18
    10c0:	83 e0       	ldi	r24, 0x03	; 3
    10c2:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
	setScoreSegment(TIMER10, 18);
    10c6:	62 e1       	ldi	r22, 0x12	; 18
    10c8:	84 e0       	ldi	r24, 0x04	; 4
    10ca:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
	setScoreSegment(TIMER100, 18);
    10ce:	62 e1       	ldi	r22, 0x12	; 18
    10d0:	85 e0       	ldi	r24, 0x05	; 5
    10d2:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
	printf("GAMa ovar\n");
    10d6:	8a e5       	ldi	r24, 0x5A	; 90
    10d8:	91 e0       	ldi	r25, 0x01	; 1
    10da:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <puts>
	// game is over, stop timer
	
}
    10de:	0b c0       	rjmp	.+22     	; 0x10f6 <Game+0x556>
	printf("GAME START\n");
	
	P1Score = 0;			// reset scores and multipliers
	P2Score = 0;
	P1Multiplier = 1;
	P2Multiplier = 1;
    10e0:	37 01       	movw	r6, r14
    10e2:	10 e0       	ldi	r17, 0x00	; 0
						newX = rand() % 3;
					}
					newY = 1 + (rand() % 5);
					//gameLedsY
					
					uint8_t clearSpot = 1;
    10e4:	01 e0       	ldi	r16, 0x01	; 1
					for(uint8_t idx = 0; idx < 6; idx++){
						if((gameledsX[idx] == newX) && (gameledsY[idx] == newY)){
							clearSpot = 0;	// "new" location is in use
    10e6:	41 2c       	mov	r4, r1
    10e8:	b9 86       	std	Y+9, r11	; 0x09
    10ea:	a8 86       	std	Y+8, r10	; 0x08
    10ec:	67 ce       	rjmp	.-818    	; 0xdbc <Game+0x21c>
		}
		
		
		for(uint8_t ledIndexX = 0; ledIndexX < 6; ledIndexX++){
			for(uint8_t ledIndexY = 0; ledIndexY < 6; ledIndexY++){
				uint8_t found = 0;
    10ee:	19 82       	std	Y+1, r1	; 0x01
    10f0:	10 e0       	ldi	r17, 0x00	; 0
				for(uint8_t ledIndex = 0; ledIndex < 6; ledIndex++){
					if((ledIndexX == gameledsX[ledIndex]) && (ledIndexY == gameledsY[ledIndex]))	//led is on in game
					{
						found = 1;
    10f2:	01 e0       	ldi	r16, 0x01	; 1
    10f4:	c5 cf       	rjmp	.-118    	; 0x1080 <Game+0x4e0>
	setScoreSegment(TIMER10, 18);
	setScoreSegment(TIMER100, 18);
	printf("GAMa ovar\n");
	// game is over, stop timer
	
}
    10f6:	29 96       	adiw	r28, 0x09	; 9
    10f8:	0f b6       	in	r0, 0x3f	; 63
    10fa:	f8 94       	cli
    10fc:	de bf       	out	0x3e, r29	; 62
    10fe:	0f be       	out	0x3f, r0	; 63
    1100:	cd bf       	out	0x3d, r28	; 61
    1102:	df 91       	pop	r29
    1104:	cf 91       	pop	r28
    1106:	1f 91       	pop	r17
    1108:	0f 91       	pop	r16
    110a:	ff 90       	pop	r15
    110c:	ef 90       	pop	r14
    110e:	df 90       	pop	r13
    1110:	cf 90       	pop	r12
    1112:	bf 90       	pop	r11
    1114:	af 90       	pop	r10
    1116:	9f 90       	pop	r9
    1118:	8f 90       	pop	r8
    111a:	7f 90       	pop	r7
    111c:	6f 90       	pop	r6
    111e:	5f 90       	pop	r5
    1120:	4f 90       	pop	r4
    1122:	3f 90       	pop	r3
    1124:	2f 90       	pop	r2
    1126:	08 95       	ret

00001128 <Bonus>:

void Bonus(){
    1128:	2f 92       	push	r2
    112a:	3f 92       	push	r3
    112c:	4f 92       	push	r4
    112e:	5f 92       	push	r5
    1130:	6f 92       	push	r6
    1132:	7f 92       	push	r7
    1134:	8f 92       	push	r8
    1136:	9f 92       	push	r9
    1138:	af 92       	push	r10
    113a:	bf 92       	push	r11
    113c:	cf 92       	push	r12
    113e:	df 92       	push	r13
    1140:	ef 92       	push	r14
    1142:	ff 92       	push	r15
    1144:	0f 93       	push	r16
    1146:	1f 93       	push	r17
    1148:	cf 93       	push	r28
    114a:	df 93       	push	r29
    114c:	cd b7       	in	r28, 0x3d	; 61
    114e:	de b7       	in	r29, 0x3e	; 62
    1150:	2b 97       	sbiw	r28, 0x0b	; 11
    1152:	0f b6       	in	r0, 0x3f	; 63
    1154:	f8 94       	cli
    1156:	de bf       	out	0x3e, r29	; 62
    1158:	0f be       	out	0x3f, r0	; 63
    115a:	cd bf       	out	0x3d, r28	; 61

	// blink leds to indicate bonus round start

	for(uint8_t blinkIndex = 0; blinkIndex < 6; blinkIndex++){
    115c:	10 e0       	ldi	r17, 0x00	; 0
		clearLeds(blinkIndex % 2);
		if(SoundEnabled){
			DDRB |= (1<<1);	//play page tone
			ICR1 = notes[blinkIndex % 2];
    115e:	0f 2e       	mov	r0, r31
    1160:	f6 e8       	ldi	r31, 0x86	; 134
    1162:	cf 2e       	mov	r12, r31
    1164:	d1 2c       	mov	r13, r1
    1166:	f0 2d       	mov	r31, r0
			OCR1A = notes[blinkIndex % 2] / 2;
    1168:	0f 2e       	mov	r0, r31
    116a:	f8 e8       	ldi	r31, 0x88	; 136
    116c:	ef 2e       	mov	r14, r31
    116e:	f1 2c       	mov	r15, r1
    1170:	f0 2d       	mov	r31, r0
void Bonus(){

	// blink leds to indicate bonus round start

	for(uint8_t blinkIndex = 0; blinkIndex < 6; blinkIndex++){
		clearLeds(blinkIndex % 2);
    1172:	01 2f       	mov	r16, r17
    1174:	01 70       	andi	r16, 0x01	; 1
    1176:	80 2f       	mov	r24, r16
    1178:	0e 94 63 01 	call	0x2c6	; 0x2c6 <clearLeds>
		if(SoundEnabled){
    117c:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <SoundEnabled>
    1180:	88 23       	and	r24, r24
    1182:	e1 f0       	breq	.+56     	; 0x11bc <Bonus+0x94>
			DDRB |= (1<<1);	//play page tone
    1184:	21 9a       	sbi	0x04, 1	; 4
			ICR1 = notes[blinkIndex % 2];
    1186:	e0 2f       	mov	r30, r16
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	ee 0f       	add	r30, r30
    118c:	ff 1f       	adc	r31, r31
    118e:	e1 54       	subi	r30, 0x41	; 65
    1190:	fd 4f       	sbci	r31, 0xFD	; 253
    1192:	80 81       	ld	r24, Z
    1194:	91 81       	ldd	r25, Z+1	; 0x01
    1196:	d6 01       	movw	r26, r12
    1198:	11 96       	adiw	r26, 0x01	; 1
    119a:	9c 93       	st	X, r25
    119c:	8e 93       	st	-X, r24
			OCR1A = notes[blinkIndex % 2] / 2;
    119e:	96 95       	lsr	r25
    11a0:	87 95       	ror	r24
    11a2:	f7 01       	movw	r30, r14
    11a4:	91 83       	std	Z+1, r25	; 0x01
    11a6:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    11a8:	ff e7       	ldi	r31, 0x7F	; 127
    11aa:	2a e1       	ldi	r18, 0x1A	; 26
    11ac:	56 e0       	ldi	r21, 0x06	; 6
    11ae:	f1 50       	subi	r31, 0x01	; 1
    11b0:	20 40       	sbci	r18, 0x00	; 0
    11b2:	50 40       	sbci	r21, 0x00	; 0
    11b4:	e1 f7       	brne	.-8      	; 0x11ae <Bonus+0x86>
    11b6:	00 c0       	rjmp	.+0      	; 0x11b8 <Bonus+0x90>
    11b8:	00 00       	nop
			_delay_ms(125);
			DDRB &= ~(1<<1);
    11ba:	21 98       	cbi	0x04, 1	; 4

void Bonus(){

	// blink leds to indicate bonus round start

	for(uint8_t blinkIndex = 0; blinkIndex < 6; blinkIndex++){
    11bc:	1f 5f       	subi	r17, 0xFF	; 255
    11be:	16 30       	cpi	r17, 0x06	; 6
    11c0:	c1 f6       	brne	.-80     	; 0x1172 <Bonus+0x4a>
    11c2:	8f ef       	ldi	r24, 0xFF	; 255
    11c4:	94 e3       	ldi	r25, 0x34	; 52
    11c6:	ac e0       	ldi	r26, 0x0C	; 12
    11c8:	81 50       	subi	r24, 0x01	; 1
    11ca:	90 40       	sbci	r25, 0x00	; 0
    11cc:	a0 40       	sbci	r26, 0x00	; 0
    11ce:	e1 f7       	brne	.-8      	; 0x11c8 <Bonus+0xa0>
    11d0:	00 c0       	rjmp	.+0      	; 0x11d2 <Bonus+0xaa>
    11d2:	00 00       	nop
		}
		
	}
	_delay_ms(250);
	
	Display321();
    11d4:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <Display321>

	TimeRemaining = BonusTime;
    11d8:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <BonusTime>
    11dc:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <TimeRemaining>
	
	printf("STARTING BONUS\n");
    11e0:	84 e6       	ldi	r24, 0x64	; 100
    11e2:	91 e0       	ldi	r25, 0x01	; 1
    11e4:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <puts>
	
	setScore(0, GameMode == 0 ? HighScore1P : HighScore2P);
    11e8:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <GameMode>
    11ec:	81 11       	cpse	r24, r1
    11ee:	05 c0       	rjmp	.+10     	; 0x11fa <Bonus+0xd2>
    11f0:	60 91 fa 02 	lds	r22, 0x02FA	; 0x8002fa <HighScore1P>
    11f4:	70 91 fb 02 	lds	r23, 0x02FB	; 0x8002fb <HighScore1P+0x1>
    11f8:	04 c0       	rjmp	.+8      	; 0x1202 <Bonus+0xda>
    11fa:	60 91 0e 03 	lds	r22, 0x030E	; 0x80030e <HighScore2P>
    11fe:	70 91 0f 03 	lds	r23, 0x030F	; 0x80030f <HighScore2P+0x1>
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
	uint8_t pressed[] = {0,0,0,0,0,0};
    1208:	fe 01       	movw	r30, r28
    120a:	31 96       	adiw	r30, 0x01	; 1
    120c:	86 e0       	ldi	r24, 0x06	; 6
    120e:	df 01       	movw	r26, r30
    1210:	1d 92       	st	X+, r1
    1212:	8a 95       	dec	r24
    1214:	e9 f7       	brne	.-6      	; 0x1210 <Bonus+0xe8>
	TCNT4 = 0;
    1216:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7e00a5>
    121a:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7e00a4>
	uint8_t lastTime = TimeRemaining;
    121e:	b0 91 f9 02 	lds	r27, 0x02F9	; 0x8002f9 <TimeRemaining>
    1222:	bf 83       	std	Y+7, r27	; 0x07
	while(TimeRemaining > 0){
		
		if(SoundEnabled & (lastTime != TimeRemaining) & (soundPlaying == 0)){
    1224:	88 24       	eor	r8, r8
    1226:	83 94       	inc	r8
    1228:	91 2c       	mov	r9, r1
		}

		for(uint8_t x = 0; x < 6; x++){
			for(uint8_t y = 1; y < 6; y++){
				uint8_t isavail = (pressed[x] & (1 << y)) == 0 ? 1 : 0;
				setButtonLed(x,y,isavail);
    122a:	44 24       	eor	r4, r4
    122c:	43 94       	inc	r4
    122e:	21 2c       	mov	r2, r1
	
	setScore(0, GameMode == 0 ? HighScore1P : HighScore2P);
	uint8_t pressed[] = {0,0,0,0,0,0};
	TCNT4 = 0;
	uint8_t lastTime = TimeRemaining;
	while(TimeRemaining > 0){
    1230:	ca c0       	rjmp	.+404    	; 0x13c6 <Bonus+0x29e>
		
		if(SoundEnabled & (lastTime != TimeRemaining) & (soundPlaying == 0)){
    1232:	40 91 f9 02 	lds	r20, 0x02F9	; 0x8002f9 <TimeRemaining>
    1236:	50 91 0b 03 	lds	r21, 0x030B	; 0x80030b <soundPlaying>
    123a:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <SoundEnabled>
    123e:	28 2f       	mov	r18, r24
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	c4 01       	movw	r24, r8
    1244:	55 23       	and	r21, r21
    1246:	11 f0       	breq	.+4      	; 0x124c <Bonus+0x124>
    1248:	80 e0       	ldi	r24, 0x00	; 0
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	82 23       	and	r24, r18
    124e:	93 23       	and	r25, r19
    1250:	94 01       	movw	r18, r8
    1252:	ef 81       	ldd	r30, Y+7	; 0x07
    1254:	e4 13       	cpse	r30, r20
    1256:	02 c0       	rjmp	.+4      	; 0x125c <Bonus+0x134>
    1258:	20 e0       	ldi	r18, 0x00	; 0
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	82 23       	and	r24, r18
    125e:	93 23       	and	r25, r19
    1260:	89 2b       	or	r24, r25
    1262:	91 f1       	breq	.+100    	; 0x12c8 <Bonus+0x1a0>
			lastTime = TimeRemaining;
    1264:	f0 91 f9 02 	lds	r31, 0x02F9	; 0x8002f9 <TimeRemaining>
    1268:	ff 83       	std	Y+7, r31	; 0x07
			DDRB |= (1<<1);	//make ticking noise
    126a:	21 9a       	sbi	0x04, 1	; 4
			ICR1 = notes[4 + (TimeRemaining%2)];
    126c:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <TimeRemaining>
    1270:	81 70       	andi	r24, 0x01	; 1
    1272:	88 87       	std	Y+8, r24	; 0x08
    1274:	19 86       	std	Y+9, r1	; 0x09
    1276:	e8 85       	ldd	r30, Y+8	; 0x08
    1278:	f9 85       	ldd	r31, Y+9	; 0x09
    127a:	34 96       	adiw	r30, 0x04	; 4
    127c:	ee 0f       	add	r30, r30
    127e:	ff 1f       	adc	r31, r31
    1280:	e1 54       	subi	r30, 0x41	; 65
    1282:	fd 4f       	sbci	r31, 0xFD	; 253
    1284:	80 81       	ld	r24, Z
    1286:	91 81       	ldd	r25, Z+1	; 0x01
    1288:	a6 e8       	ldi	r26, 0x86	; 134
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	11 96       	adiw	r26, 0x01	; 1
    128e:	9c 93       	st	X, r25
    1290:	8e 93       	st	-X, r24
			OCR1A = notes[4 + (TimeRemaining%2)] / 2;
    1292:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <TimeRemaining>
    1296:	81 70       	andi	r24, 0x01	; 1
    1298:	8a 87       	std	Y+10, r24	; 0x0a
    129a:	1b 86       	std	Y+11, r1	; 0x0b
    129c:	ea 85       	ldd	r30, Y+10	; 0x0a
    129e:	fb 85       	ldd	r31, Y+11	; 0x0b
    12a0:	34 96       	adiw	r30, 0x04	; 4
    12a2:	ee 0f       	add	r30, r30
    12a4:	ff 1f       	adc	r31, r31
    12a6:	e1 54       	subi	r30, 0x41	; 65
    12a8:	fd 4f       	sbci	r31, 0xFD	; 253
    12aa:	80 81       	ld	r24, Z
    12ac:	91 81       	ldd	r25, Z+1	; 0x01
    12ae:	96 95       	lsr	r25
    12b0:	87 95       	ror	r24
    12b2:	e8 e8       	ldi	r30, 0x88	; 136
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	91 83       	std	Z+1, r25	; 0x01
    12b8:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12ba:	8f ea       	ldi	r24, 0xAF	; 175
    12bc:	96 e3       	ldi	r25, 0x36	; 54
    12be:	01 97       	sbiw	r24, 0x01	; 1
    12c0:	f1 f7       	brne	.-4      	; 0x12be <Bonus+0x196>
    12c2:	00 c0       	rjmp	.+0      	; 0x12c4 <Bonus+0x19c>
    12c4:	00 00       	nop
			_delay_us(3500);
			DDRB &= ~(1<<1);
    12c6:	21 98       	cbi	0x04, 1	; 4
		}
		
		setScore(1, TimeRemaining);
    12c8:	60 91 f9 02 	lds	r22, 0x02F9	; 0x8002f9 <TimeRemaining>
    12cc:	70 e0       	ldi	r23, 0x00	; 0
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
		if(GameMode){
    12d4:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <GameMode>
    12d8:	88 23       	and	r24, r24
    12da:	79 f0       	breq	.+30     	; 0x12fa <Bonus+0x1d2>
			setScore(0, P1Score);	// if 2p mode, show left p1 and right p2 scores
    12dc:	60 91 fc 02 	lds	r22, 0x02FC	; 0x8002fc <P1Score>
    12e0:	70 91 fd 02 	lds	r23, 0x02FD	; 0x8002fd <P1Score+0x1>
    12e4:	80 e0       	ldi	r24, 0x00	; 0
    12e6:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
			setScore(2, P2Score);
    12ea:	60 91 fe 02 	lds	r22, 0x02FE	; 0x8002fe <P2Score>
    12ee:	70 91 ff 02 	lds	r23, 0x02FF	; 0x8002ff <P2Score+0x1>
    12f2:	82 e0       	ldi	r24, 0x02	; 2
    12f4:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
    12f8:	77 c0       	rjmp	.+238    	; 0x13e8 <Bonus+0x2c0>
			}else{
			setScore(2, P1Score);	// otherwise show p1 score and high score
    12fa:	60 91 fc 02 	lds	r22, 0x02FC	; 0x8002fc <P1Score>
    12fe:	70 91 fd 02 	lds	r23, 0x02FD	; 0x8002fd <P1Score+0x1>
    1302:	82 e0       	ldi	r24, 0x02	; 2
    1304:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
    1308:	6f c0       	rjmp	.+222    	; 0x13e8 <Bonus+0x2c0>
    130a:	b0 2e       	mov	r11, r16
		}

		for(uint8_t x = 0; x < 6; x++){
			for(uint8_t y = 1; y < 6; y++){
				uint8_t isavail = (pressed[x] & (1 << y)) == 0 ? 1 : 0;
    130c:	d7 01       	movw	r26, r14
    130e:	5c 90       	ld	r5, X
    1310:	30 2e       	mov	r3, r16
    1312:	85 2d       	mov	r24, r5
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	00 2e       	mov	r0, r16
    1318:	02 c0       	rjmp	.+4      	; 0x131e <Bonus+0x1f6>
    131a:	95 95       	asr	r25
    131c:	87 95       	ror	r24
    131e:	0a 94       	dec	r0
    1320:	e2 f7       	brpl	.-8      	; 0x131a <Bonus+0x1f2>
				setButtonLed(x,y,isavail);
    1322:	44 2d       	mov	r20, r4
    1324:	3c 01       	movw	r6, r24
    1326:	b1 e0       	ldi	r27, 0x01	; 1
    1328:	6b 22       	and	r6, r27
    132a:	77 24       	eor	r7, r7
    132c:	80 fd       	sbrc	r24, 0
    132e:	42 2d       	mov	r20, r2
    1330:	6b 2d       	mov	r22, r11
    1332:	8a 2d       	mov	r24, r10
    1334:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
				
				if(isButtonDown(x,y) && isavail){
    1338:	6b 2d       	mov	r22, r11
    133a:	8a 2d       	mov	r24, r10
    133c:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    1340:	88 23       	and	r24, r24
    1342:	71 f1       	breq	.+92     	; 0x13a0 <Bonus+0x278>
    1344:	67 28       	or	r6, r7
    1346:	61 f5       	brne	.+88     	; 0x13a0 <Bonus+0x278>
					playChirp(1);
    1348:	84 2d       	mov	r24, r4
    134a:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <playChirp>
					pressed[x] |= (1 << y);
    134e:	c4 01       	movw	r24, r8
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <Bonus+0x22e>
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	3a 94       	dec	r3
    1358:	e2 f7       	brpl	.-8      	; 0x1352 <Bonus+0x22a>
    135a:	58 2a       	or	r5, r24
    135c:	f6 01       	movw	r30, r12
    135e:	50 82       	st	Z, r5
					if((x >= 3) && (GameMode)){	//player 2 bonus
    1360:	f2 e0       	ldi	r31, 0x02	; 2
    1362:	fa 15       	cp	r31, r10
    1364:	88 f4       	brcc	.+34     	; 0x1388 <Bonus+0x260>
    1366:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <GameMode>
    136a:	88 23       	and	r24, r24
    136c:	69 f0       	breq	.+26     	; 0x1388 <Bonus+0x260>
						P2Score += BonusPointCount;
    136e:	20 91 10 03 	lds	r18, 0x0310	; 0x800310 <BonusPointCount>
    1372:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <P2Score>
    1376:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <P2Score+0x1>
    137a:	82 0f       	add	r24, r18
    137c:	91 1d       	adc	r25, r1
    137e:	90 93 ff 02 	sts	0x02FF, r25	; 0x8002ff <P2Score+0x1>
    1382:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <P2Score>
    1386:	0c c0       	rjmp	.+24     	; 0x13a0 <Bonus+0x278>
						}else{
						P1Score += BonusPointCount;
    1388:	20 91 10 03 	lds	r18, 0x0310	; 0x800310 <BonusPointCount>
    138c:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <P1Score>
    1390:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <P1Score+0x1>
    1394:	82 0f       	add	r24, r18
    1396:	91 1d       	adc	r25, r1
    1398:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <P1Score+0x1>
    139c:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <P1Score>
    13a0:	0f 5f       	subi	r16, 0xFF	; 255
    13a2:	1f 4f       	sbci	r17, 0xFF	; 255
			}else{
			setScore(2, P1Score);	// otherwise show p1 score and high score
		}

		for(uint8_t x = 0; x < 6; x++){
			for(uint8_t y = 1; y < 6; y++){
    13a4:	06 30       	cpi	r16, 0x06	; 6
    13a6:	11 05       	cpc	r17, r1
    13a8:	09 f0       	breq	.+2      	; 0x13ac <Bonus+0x284>
    13aa:	af cf       	rjmp	.-162    	; 0x130a <Bonus+0x1e2>
    13ac:	6a 2c       	mov	r6, r10
			setScore(2, P2Score);
			}else{
			setScore(2, P1Score);	// otherwise show p1 score and high score
		}

		for(uint8_t x = 0; x < 6; x++){
    13ae:	63 94       	inc	r6
    13b0:	2f ef       	ldi	r18, 0xFF	; 255
    13b2:	e2 1a       	sub	r14, r18
    13b4:	f2 0a       	sbc	r15, r18
    13b6:	56 e0       	ldi	r21, 0x06	; 6
    13b8:	65 16       	cp	r6, r21
    13ba:	29 f0       	breq	.+10     	; 0x13c6 <Bonus+0x29e>

void Bonus(){

	// blink leds to indicate bonus round start

	for(uint8_t blinkIndex = 0; blinkIndex < 6; blinkIndex++){
    13bc:	01 e0       	ldi	r16, 0x01	; 1
    13be:	10 e0       	ldi	r17, 0x00	; 0
    13c0:	67 01       	movw	r12, r14
    13c2:	a6 2c       	mov	r10, r6
    13c4:	a2 cf       	rjmp	.-188    	; 0x130a <Bonus+0x1e2>
	
	setScore(0, GameMode == 0 ? HighScore1P : HighScore2P);
	uint8_t pressed[] = {0,0,0,0,0,0};
	TCNT4 = 0;
	uint8_t lastTime = TimeRemaining;
	while(TimeRemaining > 0){
    13c6:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <TimeRemaining>
    13ca:	81 11       	cpse	r24, r1
    13cc:	32 cf       	rjmp	.-412    	; 0x1232 <Bonus+0x10a>
			}
		}
		
	}
	
	setScoreSegment(TIMER1, 18); // 18 is the dash
    13ce:	62 e1       	ldi	r22, 0x12	; 18
    13d0:	83 e0       	ldi	r24, 0x03	; 3
    13d2:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
	setScoreSegment(TIMER10, 18);
    13d6:	62 e1       	ldi	r22, 0x12	; 18
    13d8:	84 e0       	ldi	r24, 0x04	; 4
    13da:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
	setScoreSegment(TIMER100, 18);
    13de:	62 e1       	ldi	r22, 0x12	; 18
    13e0:	85 e0       	ldi	r24, 0x05	; 5
    13e2:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>

}
    13e6:	05 c0       	rjmp	.+10     	; 0x13f2 <Bonus+0x2ca>
    13e8:	ce 01       	movw	r24, r28
    13ea:	01 96       	adiw	r24, 0x01	; 1
    13ec:	7c 01       	movw	r14, r24

void Bonus(){

	// blink leds to indicate bonus round start

	for(uint8_t blinkIndex = 0; blinkIndex < 6; blinkIndex++){
    13ee:	61 2c       	mov	r6, r1
    13f0:	e5 cf       	rjmp	.-54     	; 0x13bc <Bonus+0x294>
	
	setScoreSegment(TIMER1, 18); // 18 is the dash
	setScoreSegment(TIMER10, 18);
	setScoreSegment(TIMER100, 18);

}
    13f2:	2b 96       	adiw	r28, 0x0b	; 11
    13f4:	0f b6       	in	r0, 0x3f	; 63
    13f6:	f8 94       	cli
    13f8:	de bf       	out	0x3e, r29	; 62
    13fa:	0f be       	out	0x3f, r0	; 63
    13fc:	cd bf       	out	0x3d, r28	; 61
    13fe:	df 91       	pop	r29
    1400:	cf 91       	pop	r28
    1402:	1f 91       	pop	r17
    1404:	0f 91       	pop	r16
    1406:	ff 90       	pop	r15
    1408:	ef 90       	pop	r14
    140a:	df 90       	pop	r13
    140c:	cf 90       	pop	r12
    140e:	bf 90       	pop	r11
    1410:	af 90       	pop	r10
    1412:	9f 90       	pop	r9
    1414:	8f 90       	pop	r8
    1416:	7f 90       	pop	r7
    1418:	6f 90       	pop	r6
    141a:	5f 90       	pop	r5
    141c:	4f 90       	pop	r4
    141e:	3f 90       	pop	r3
    1420:	2f 90       	pop	r2
    1422:	08 95       	ret

00001424 <AttractCheckGameStart>:
	TCCR0B = (0b101 << CS00);	//turn on clock for speaker
}

uint8_t attractButtonMemory[] = {0,0,0,0,0,0};
	
uint8_t AttractCheckGameStart(uint16_t count){
    1424:	2f 92       	push	r2
    1426:	3f 92       	push	r3
    1428:	4f 92       	push	r4
    142a:	5f 92       	push	r5
    142c:	6f 92       	push	r6
    142e:	7f 92       	push	r7
    1430:	8f 92       	push	r8
    1432:	9f 92       	push	r9
    1434:	af 92       	push	r10
    1436:	bf 92       	push	r11
    1438:	cf 92       	push	r12
    143a:	df 92       	push	r13
    143c:	ef 92       	push	r14
    143e:	ff 92       	push	r15
    1440:	0f 93       	push	r16
    1442:	1f 93       	push	r17
    1444:	cf 93       	push	r28
    1446:	df 93       	push	r29
    1448:	00 d0       	rcall	.+0      	; 0x144a <AttractCheckGameStart+0x26>
    144a:	00 d0       	rcall	.+0      	; 0x144c <AttractCheckGameStart+0x28>
    144c:	cd b7       	in	r28, 0x3d	; 61
    144e:	de b7       	in	r29, 0x3e	; 62
	// pauses some time while checking player button inputs, skip and start game if pressed
	for(uint16_t delayCount = 0; delayCount < count; delayCount++){
    1450:	00 97       	sbiw	r24, 0x00	; 0
    1452:	09 f4       	brne	.+2      	; 0x1456 <AttractCheckGameStart+0x32>
    1454:	bd c0       	rjmp	.+378    	; 0x15d0 <AttractCheckGameStart+0x1ac>
    1456:	9a 83       	std	Y+2, r25	; 0x02
    1458:	89 83       	std	Y+1, r24	; 0x01
    145a:	a1 2c       	mov	r10, r1
    145c:	b1 2c       	mov	r11, r1
						}
						_delay_ms(20);
						DDRB &= ~(1<<1);
					}
				}else{
					attractButtonMemory[x] &= ~(1 << y);
    145e:	01 e0       	ldi	r16, 0x01	; 1
    1460:	10 e0       	ldi	r17, 0x00	; 0
				if(isButtonDown(x,y)){
					if((attractButtonMemory[x] & (1 << y)) == 0){	//button not pressed
						attractButtonMemory[x] |= (1 << y);
						if(SoundEnabled){
							DDRB |= (1<<1);	//make ticking noise
							ICR1 = notes[rand() % 8];
    1462:	0f 2e       	mov	r0, r31
    1464:	f6 e8       	ldi	r31, 0x86	; 134
    1466:	8f 2e       	mov	r8, r31
    1468:	91 2c       	mov	r9, r1
    146a:	f0 2d       	mov	r31, r0
							OCR1A = notes[4 + (TimeRemaining%2)] / 2;
    146c:	0f 2e       	mov	r0, r31
    146e:	f8 e8       	ldi	r31, 0x88	; 136
    1470:	6f 2e       	mov	r6, r31
    1472:	71 2c       	mov	r7, r1
    1474:	f0 2d       	mov	r31, r0
	
uint8_t AttractCheckGameStart(uint16_t count){
	// pauses some time while checking player button inputs, skip and start game if pressed
	for(uint16_t delayCount = 0; delayCount < count; delayCount++){
		//delay some ms between each button light and check for game start
		if(isButtonDown(Player1ButtonX, Player1ButtonY) || isButtonDown(Player2ButtonX, Player2ButtonY)){
    1476:	60 e0       	ldi	r22, 0x00	; 0
    1478:	83 e0       	ldi	r24, 0x03	; 3
    147a:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    147e:	81 11       	cpse	r24, r1
    1480:	0d c0       	rjmp	.+26     	; 0x149c <AttractCheckGameStart+0x78>
    1482:	60 e0       	ldi	r22, 0x00	; 0
    1484:	82 e0       	ldi	r24, 0x02	; 2
    1486:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    148a:	28 2e       	mov	r2, r24
    148c:	81 11       	cpse	r24, r1
    148e:	06 c0       	rjmp	.+12     	; 0x149c <AttractCheckGameStart+0x78>
    1490:	8b ed       	ldi	r24, 0xDB	; 219
    1492:	92 e0       	ldi	r25, 0x02	; 2
    1494:	9c 83       	std	Y+4, r25	; 0x04
    1496:	8b 83       	std	Y+3, r24	; 0x03
    1498:	31 2c       	mov	r3, r1
    149a:	8a c0       	rjmp	.+276    	; 0x15b0 <AttractCheckGameStart+0x18c>
			GameMode = isButtonDown(Player2ButtonX, Player2ButtonY);
    149c:	60 e0       	ldi	r22, 0x00	; 0
    149e:	82 e0       	ldi	r24, 0x02	; 2
    14a0:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    14a4:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <GameMode>
			printf("STARTING %dP mode\n", GameMode+1);
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	01 96       	adiw	r24, 0x01	; 1
    14ac:	9f 93       	push	r25
    14ae:	8f 93       	push	r24
    14b0:	83 e7       	ldi	r24, 0x73	; 115
    14b2:	91 e0       	ldi	r25, 0x01	; 1
    14b4:	9f 93       	push	r25
    14b6:	8f 93       	push	r24
    14b8:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <printf>
			return 1;	// instantly return and quit waiting
    14bc:	0f 90       	pop	r0
    14be:	0f 90       	pop	r0
    14c0:	0f 90       	pop	r0
    14c2:	0f 90       	pop	r0
    14c4:	22 24       	eor	r2, r2
    14c6:	23 94       	inc	r2
    14c8:	84 c0       	rjmp	.+264    	; 0x15d2 <AttractCheckGameStart+0x1ae>
		}
		for(uint8_t x = 0; x < 6; x++){
			for(uint8_t y = 1; y < 6; y++){
				if(isButtonDown(x,y)){
    14ca:	64 2d       	mov	r22, r4
    14cc:	83 2d       	mov	r24, r3
    14ce:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    14d2:	88 23       	and	r24, r24
    14d4:	09 f4       	brne	.+2      	; 0x14d8 <AttractCheckGameStart+0xb4>
    14d6:	4e c0       	rjmp	.+156    	; 0x1574 <AttractCheckGameStart+0x150>
					if((attractButtonMemory[x] & (1 << y)) == 0){	//button not pressed
    14d8:	eb 81       	ldd	r30, Y+3	; 0x03
    14da:	fc 81       	ldd	r31, Y+4	; 0x04
    14dc:	20 81       	ld	r18, Z
    14de:	82 2f       	mov	r24, r18
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	04 2c       	mov	r0, r4
    14e4:	02 c0       	rjmp	.+4      	; 0x14ea <AttractCheckGameStart+0xc6>
    14e6:	95 95       	asr	r25
    14e8:	87 95       	ror	r24
    14ea:	0a 94       	dec	r0
    14ec:	e2 f7       	brpl	.-8      	; 0x14e6 <AttractCheckGameStart+0xc2>
    14ee:	80 fd       	sbrc	r24, 0
    14f0:	4e c0       	rjmp	.+156    	; 0x158e <AttractCheckGameStart+0x16a>
						attractButtonMemory[x] |= (1 << y);
    14f2:	c8 01       	movw	r24, r16
    14f4:	04 2c       	mov	r0, r4
    14f6:	02 c0       	rjmp	.+4      	; 0x14fc <AttractCheckGameStart+0xd8>
    14f8:	88 0f       	add	r24, r24
    14fa:	99 1f       	adc	r25, r25
    14fc:	0a 94       	dec	r0
    14fe:	e2 f7       	brpl	.-8      	; 0x14f8 <AttractCheckGameStart+0xd4>
    1500:	28 2b       	or	r18, r24
    1502:	f7 01       	movw	r30, r14
    1504:	20 83       	st	Z, r18
						if(SoundEnabled){
    1506:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <SoundEnabled>
    150a:	88 23       	and	r24, r24
    150c:	41 f1       	breq	.+80     	; 0x155e <AttractCheckGameStart+0x13a>
							DDRB |= (1<<1);	//make ticking noise
    150e:	21 9a       	sbi	0x04, 1	; 4
							ICR1 = notes[rand() % 8];
    1510:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <rand>
    1514:	87 70       	andi	r24, 0x07	; 7
    1516:	90 78       	andi	r25, 0x80	; 128
    1518:	99 23       	and	r25, r25
    151a:	24 f4       	brge	.+8      	; 0x1524 <AttractCheckGameStart+0x100>
    151c:	01 97       	sbiw	r24, 0x01	; 1
    151e:	88 6f       	ori	r24, 0xF8	; 248
    1520:	9f 6f       	ori	r25, 0xFF	; 255
    1522:	01 96       	adiw	r24, 0x01	; 1
    1524:	88 0f       	add	r24, r24
    1526:	99 1f       	adc	r25, r25
    1528:	fc 01       	movw	r30, r24
    152a:	e1 54       	subi	r30, 0x41	; 65
    152c:	fd 4f       	sbci	r31, 0xFD	; 253
    152e:	80 81       	ld	r24, Z
    1530:	91 81       	ldd	r25, Z+1	; 0x01
    1532:	f4 01       	movw	r30, r8
    1534:	91 83       	std	Z+1, r25	; 0x01
    1536:	80 83       	st	Z, r24
							OCR1A = notes[4 + (TimeRemaining%2)] / 2;
    1538:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <TimeRemaining>
    153c:	80 fb       	bst	r24, 0
    153e:	cc 24       	eor	r12, r12
    1540:	c0 f8       	bld	r12, 0
    1542:	d1 2c       	mov	r13, r1
    1544:	f6 01       	movw	r30, r12
    1546:	34 96       	adiw	r30, 0x04	; 4
    1548:	ee 0f       	add	r30, r30
    154a:	ff 1f       	adc	r31, r31
    154c:	e1 54       	subi	r30, 0x41	; 65
    154e:	fd 4f       	sbci	r31, 0xFD	; 253
    1550:	80 81       	ld	r24, Z
    1552:	91 81       	ldd	r25, Z+1	; 0x01
    1554:	96 95       	lsr	r25
    1556:	87 95       	ror	r24
    1558:	f3 01       	movw	r30, r6
    155a:	91 83       	std	Z+1, r25	; 0x01
    155c:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    155e:	ff ef       	ldi	r31, 0xFF	; 255
    1560:	29 ef       	ldi	r18, 0xF9	; 249
    1562:	80 e0       	ldi	r24, 0x00	; 0
    1564:	f1 50       	subi	r31, 0x01	; 1
    1566:	20 40       	sbci	r18, 0x00	; 0
    1568:	80 40       	sbci	r24, 0x00	; 0
    156a:	e1 f7       	brne	.-8      	; 0x1564 <AttractCheckGameStart+0x140>
    156c:	00 c0       	rjmp	.+0      	; 0x156e <AttractCheckGameStart+0x14a>
    156e:	00 00       	nop
						}
						_delay_ms(20);
						DDRB &= ~(1<<1);
    1570:	21 98       	cbi	0x04, 1	; 4
    1572:	0d c0       	rjmp	.+26     	; 0x158e <AttractCheckGameStart+0x16a>
					}
				}else{
					attractButtonMemory[x] &= ~(1 << y);
    1574:	c8 01       	movw	r24, r16
    1576:	04 2c       	mov	r0, r4
    1578:	02 c0       	rjmp	.+4      	; 0x157e <AttractCheckGameStart+0x15a>
    157a:	88 0f       	add	r24, r24
    157c:	99 1f       	adc	r25, r25
    157e:	0a 94       	dec	r0
    1580:	e2 f7       	brpl	.-8      	; 0x157a <AttractCheckGameStart+0x156>
    1582:	80 95       	com	r24
    1584:	eb 81       	ldd	r30, Y+3	; 0x03
    1586:	fc 81       	ldd	r31, Y+4	; 0x04
    1588:	90 81       	ld	r25, Z
    158a:	89 23       	and	r24, r25
    158c:	80 83       	st	Z, r24
    158e:	ff ef       	ldi	r31, 0xFF	; 255
    1590:	4f 1a       	sub	r4, r31
    1592:	5f 0a       	sbc	r5, r31
			GameMode = isButtonDown(Player2ButtonX, Player2ButtonY);
			printf("STARTING %dP mode\n", GameMode+1);
			return 1;	// instantly return and quit waiting
		}
		for(uint8_t x = 0; x < 6; x++){
			for(uint8_t y = 1; y < 6; y++){
    1594:	26 e0       	ldi	r18, 0x06	; 6
    1596:	42 16       	cp	r4, r18
    1598:	51 04       	cpc	r5, r1
    159a:	09 f0       	breq	.+2      	; 0x159e <AttractCheckGameStart+0x17a>
    159c:	96 cf       	rjmp	.-212    	; 0x14ca <AttractCheckGameStart+0xa6>
		if(isButtonDown(Player1ButtonX, Player1ButtonY) || isButtonDown(Player2ButtonX, Player2ButtonY)){
			GameMode = isButtonDown(Player2ButtonX, Player2ButtonY);
			printf("STARTING %dP mode\n", GameMode+1);
			return 1;	// instantly return and quit waiting
		}
		for(uint8_t x = 0; x < 6; x++){
    159e:	33 94       	inc	r3
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    15a2:	9c 81       	ldd	r25, Y+4	; 0x04
    15a4:	01 96       	adiw	r24, 0x01	; 1
    15a6:	9c 83       	std	Y+4, r25	; 0x04
    15a8:	8b 83       	std	Y+3, r24	; 0x03
    15aa:	96 e0       	ldi	r25, 0x06	; 6
    15ac:	39 16       	cp	r3, r25
    15ae:	31 f0       	breq	.+12     	; 0x15bc <AttractCheckGameStart+0x198>

uint8_t attractButtonMemory[] = {0,0,0,0,0,0};
	
uint8_t AttractCheckGameStart(uint16_t count){
	// pauses some time while checking player button inputs, skip and start game if pressed
	for(uint16_t delayCount = 0; delayCount < count; delayCount++){
    15b0:	44 24       	eor	r4, r4
    15b2:	43 94       	inc	r4
    15b4:	51 2c       	mov	r5, r1
    15b6:	eb 80       	ldd	r14, Y+3	; 0x03
    15b8:	fc 80       	ldd	r15, Y+4	; 0x04
    15ba:	87 cf       	rjmp	.-242    	; 0x14ca <AttractCheckGameStart+0xa6>
    15bc:	ef ef       	ldi	r30, 0xFF	; 255
    15be:	ae 1a       	sub	r10, r30
    15c0:	be 0a       	sbc	r11, r30
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	9a 81       	ldd	r25, Y+2	; 0x02
    15c6:	8a 15       	cp	r24, r10
    15c8:	9b 05       	cpc	r25, r11
    15ca:	09 f0       	breq	.+2      	; 0x15ce <AttractCheckGameStart+0x1aa>
    15cc:	54 cf       	rjmp	.-344    	; 0x1476 <AttractCheckGameStart+0x52>
    15ce:	01 c0       	rjmp	.+2      	; 0x15d2 <AttractCheckGameStart+0x1ae>
					attractButtonMemory[x] &= ~(1 << y);
				}
			}
		}
	}
	return 0;	// return that it finished without button presses
    15d0:	21 2c       	mov	r2, r1
}
    15d2:	82 2d       	mov	r24, r2
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	df 91       	pop	r29
    15de:	cf 91       	pop	r28
    15e0:	1f 91       	pop	r17
    15e2:	0f 91       	pop	r16
    15e4:	ff 90       	pop	r15
    15e6:	ef 90       	pop	r14
    15e8:	df 90       	pop	r13
    15ea:	cf 90       	pop	r12
    15ec:	bf 90       	pop	r11
    15ee:	af 90       	pop	r10
    15f0:	9f 90       	pop	r9
    15f2:	8f 90       	pop	r8
    15f4:	7f 90       	pop	r7
    15f6:	6f 90       	pop	r6
    15f8:	5f 90       	pop	r5
    15fa:	4f 90       	pop	r4
    15fc:	3f 90       	pop	r3
    15fe:	2f 90       	pop	r2
    1600:	08 95       	ret

00001602 <Attractive>:
	setScoreSegment(TIMER10, 18);
	setScoreSegment(TIMER100, 18);

}

void Attractive(){
    1602:	2f 92       	push	r2
    1604:	3f 92       	push	r3
    1606:	4f 92       	push	r4
    1608:	5f 92       	push	r5
    160a:	6f 92       	push	r6
    160c:	7f 92       	push	r7
    160e:	8f 92       	push	r8
    1610:	9f 92       	push	r9
    1612:	af 92       	push	r10
    1614:	bf 92       	push	r11
    1616:	cf 92       	push	r12
    1618:	df 92       	push	r13
    161a:	ef 92       	push	r14
    161c:	ff 92       	push	r15
    161e:	0f 93       	push	r16
    1620:	1f 93       	push	r17
    1622:	cf 93       	push	r28
    1624:	df 93       	push	r29
	setScore(2, HighScore1P);
    1626:	60 91 fa 02 	lds	r22, 0x02FA	; 0x8002fa <HighScore1P>
    162a:	70 91 fb 02 	lds	r23, 0x02FB	; 0x8002fb <HighScore1P+0x1>
    162e:	82 e0       	ldi	r24, 0x02	; 2
    1630:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
	
	setScoreSegment(TIMER1, 18); // 18 is the dash
    1634:	62 e1       	ldi	r22, 0x12	; 18
    1636:	83 e0       	ldi	r24, 0x03	; 3
    1638:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
	setScoreSegment(TIMER10, 18);
    163c:	62 e1       	ldi	r22, 0x12	; 18
    163e:	84 e0       	ldi	r24, 0x04	; 4
    1640:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
	setScoreSegment(TIMER100, 18);
    1644:	62 e1       	ldi	r22, 0x12	; 18
    1646:	85 e0       	ldi	r24, 0x05	; 5
    1648:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
	
	setScore(0, HighScore2P);
    164c:	60 91 0e 03 	lds	r22, 0x030E	; 0x80030e <HighScore2P>
    1650:	70 91 0f 03 	lds	r23, 0x030F	; 0x80030f <HighScore2P+0x1>
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
			break;
			
			case 1:
			for(uint8_t count = 0; count < 216; count++){
				
				uint8_t x = rand()%6;
    165a:	0f 2e       	mov	r0, r31
    165c:	f6 e0       	ldi	r31, 0x06	; 6
    165e:	af 2e       	mov	r10, r31
    1660:	b1 2c       	mov	r11, r1
    1662:	f0 2d       	mov	r31, r0
				uint8_t y = 1+(rand()%5);
    1664:	0f 2e       	mov	r0, r31
    1666:	f5 e0       	ldi	r31, 0x05	; 5
    1668:	cf 2e       	mov	r12, r31
    166a:	d1 2c       	mov	r13, r1
    166c:	f0 2d       	mov	r31, r0
				setButtonLed(x,y,!getButtonLed(x,y));
    166e:	f1 2c       	mov	r15, r1
				if( AttractCheckGameStart(260) ){
					goto EndAttract;
				}
				
				if(count % 12 == 0){
    1670:	0f 2e       	mov	r0, r31
    1672:	fb ea       	ldi	r31, 0xAB	; 171
    1674:	ef 2e       	mov	r14, r31
    1676:	f0 2d       	mov	r31, r0
			case 1:
			for(uint8_t count = 0; count < 216; count++){
				
				uint8_t x = rand()%6;
				uint8_t y = 1+(rand()%5);
				setButtonLed(x,y,!getButtonLed(x,y));
    1678:	99 24       	eor	r9, r9
    167a:	93 94       	inc	r9
			
			case 2:
			for(uint8_t count = 0; count < 24; count++){
				for(uint8_t y = 1; y < 6; y++){
					for(uint8_t x = 0; x < 6; x++){
						setButtonLed( (y%2)==0 ? x : (5-x) ,y,1);
    167c:	d5 e0       	ldi	r29, 0x05	; 5
	setScoreSegment(TIMER10, 18);
	setScoreSegment(TIMER100, 18);
	
	setScore(0, HighScore2P);
	while(1){
		uint8_t blinkyMode = rand() % 4;	// todo make random, ADD DISPLAY BLANKING
    167e:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <rand>
		switch(blinkyMode){	// multiple blinky modes (todo randomly pick one)
    1682:	83 70       	andi	r24, 0x03	; 3
    1684:	90 78       	andi	r25, 0x80	; 128
    1686:	99 23       	and	r25, r25
    1688:	24 f4       	brge	.+8      	; 0x1692 <Attractive+0x90>
    168a:	01 97       	sbiw	r24, 0x01	; 1
    168c:	8c 6f       	ori	r24, 0xFC	; 252
    168e:	9f 6f       	ori	r25, 0xFF	; 255
    1690:	01 96       	adiw	r24, 0x01	; 1
    1692:	99 27       	eor	r25, r25
    1694:	81 30       	cpi	r24, 0x01	; 1
    1696:	91 05       	cpc	r25, r1
    1698:	09 f4       	brne	.+2      	; 0x169c <Attractive+0x9a>
    169a:	84 c0       	rjmp	.+264    	; 0x17a4 <Attractive+0x1a2>
    169c:	24 f4       	brge	.+8      	; 0x16a6 <Attractive+0xa4>
    169e:	89 2b       	or	r24, r25
    16a0:	09 f4       	brne	.+2      	; 0x16a4 <Attractive+0xa2>
    16a2:	79 c0       	rjmp	.+242    	; 0x1796 <Attractive+0x194>
    16a4:	ec cf       	rjmp	.-40     	; 0x167e <Attractive+0x7c>
    16a6:	82 30       	cpi	r24, 0x02	; 2
    16a8:	91 05       	cpc	r25, r1
    16aa:	09 f4       	brne	.+2      	; 0x16ae <Attractive+0xac>
    16ac:	03 c1       	rjmp	.+518    	; 0x18b4 <Attractive+0x2b2>
    16ae:	03 97       	sbiw	r24, 0x03	; 3
    16b0:	09 f4       	brne	.+2      	; 0x16b4 <Attractive+0xb2>
    16b2:	79 c1       	rjmp	.+754    	; 0x19a6 <Attractive+0x3a4>
    16b4:	e4 cf       	rjmp	.-56     	; 0x167e <Attractive+0x7c>
			case 0:
			for(uint8_t count = 0; count < 2; count++){
				for(uint8_t y = 1; y < 6; y++){
					for(uint8_t x = 0; x < 6; x++){
						setButtonLed( (y%2)==0 ? x : (5-x) ,y,1);
    16b6:	47 2c       	mov	r4, r7
    16b8:	77 20       	and	r7, r7
    16ba:	19 f0       	breq	.+6      	; 0x16c2 <Attractive+0xc0>
    16bc:	8d 2f       	mov	r24, r29
    16be:	88 19       	sub	r24, r8
    16c0:	01 c0       	rjmp	.+2      	; 0x16c4 <Attractive+0xc2>
    16c2:	88 2d       	mov	r24, r8
    16c4:	41 e0       	ldi	r20, 0x01	; 1
    16c6:	6c 2f       	mov	r22, r28
    16c8:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
						if( AttractCheckGameStart(600) ){
    16cc:	88 e5       	ldi	r24, 0x58	; 88
    16ce:	92 e0       	ldi	r25, 0x02	; 2
    16d0:	0e 94 12 0a 	call	0x1424	; 0x1424 <AttractCheckGameStart>
    16d4:	81 11       	cpse	r24, r1
    16d6:	76 c1       	rjmp	.+748    	; 0x19c4 <Attractive+0x3c2>
		uint8_t blinkyMode = rand() % 4;	// todo make random, ADD DISPLAY BLANKING
		switch(blinkyMode){	// multiple blinky modes (todo randomly pick one)
			case 0:
			for(uint8_t count = 0; count < 2; count++){
				for(uint8_t y = 1; y < 6; y++){
					for(uint8_t x = 0; x < 6; x++){
    16d8:	83 94       	inc	r8
    16da:	86 e0       	ldi	r24, 0x06	; 6
    16dc:	88 12       	cpse	r8, r24
    16de:	eb cf       	rjmp	.-42     	; 0x16b6 <Attractive+0xb4>
						if( AttractCheckGameStart(600) ){
							
							goto EndAttract;
						}
					}
					setButtonLed(Player1ButtonX, Player1ButtonY, y%2);
    16e0:	44 2d       	mov	r20, r4
    16e2:	6f 2d       	mov	r22, r15
    16e4:	83 e0       	ldi	r24, 0x03	; 3
    16e6:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
					setButtonLed(Player2ButtonX, Player2ButtonY, (y+1) % 2);
    16ea:	a8 01       	movw	r20, r16
    16ec:	41 70       	andi	r20, 0x01	; 1
    16ee:	50 78       	andi	r21, 0x80	; 128
    16f0:	55 23       	and	r21, r21
    16f2:	34 f4       	brge	.+12     	; 0x1700 <Attractive+0xfe>
    16f4:	41 50       	subi	r20, 0x01	; 1
    16f6:	51 09       	sbc	r21, r1
    16f8:	4e 6f       	ori	r20, 0xFE	; 254
    16fa:	5f 6f       	ori	r21, 0xFF	; 255
    16fc:	4f 5f       	subi	r20, 0xFF	; 255
    16fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1700:	6f 2d       	mov	r22, r15
    1702:	82 e0       	ldi	r24, 0x02	; 2
    1704:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
	while(1){
		uint8_t blinkyMode = rand() % 4;	// todo make random, ADD DISPLAY BLANKING
		switch(blinkyMode){	// multiple blinky modes (todo randomly pick one)
			case 0:
			for(uint8_t count = 0; count < 2; count++){
				for(uint8_t y = 1; y < 6; y++){
    1708:	cf 5f       	subi	r28, 0xFF	; 255
    170a:	0f 5f       	subi	r16, 0xFF	; 255
    170c:	1f 4f       	sbci	r17, 0xFF	; 255
    170e:	c6 30       	cpi	r28, 0x06	; 6
    1710:	a1 f1       	breq	.+104    	; 0x177a <Attractive+0x178>
	setScoreSegment(TIMER10, 18);
	setScoreSegment(TIMER100, 18);

}

void Attractive(){
    1712:	81 2c       	mov	r8, r1
		switch(blinkyMode){	// multiple blinky modes (todo randomly pick one)
			case 0:
			for(uint8_t count = 0; count < 2; count++){
				for(uint8_t y = 1; y < 6; y++){
					for(uint8_t x = 0; x < 6; x++){
						setButtonLed( (y%2)==0 ? x : (5-x) ,y,1);
    1714:	8c 2f       	mov	r24, r28
    1716:	81 70       	andi	r24, 0x01	; 1
    1718:	78 2e       	mov	r7, r24
    171a:	cd cf       	rjmp	.-102    	; 0x16b6 <Attractive+0xb4>
					setButtonLed(Player1ButtonX, Player1ButtonY, y%2);
					setButtonLed(Player2ButtonX, Player2ButtonY, (y+1) % 2);
				}
				for(uint8_t y = 1; y < 6; y++){
					for(uint8_t x = 0; x < 6; x++){
						setButtonLed( (y%2)==0 ? x : (5-x) ,y,0);
    171c:	47 2c       	mov	r4, r7
    171e:	77 20       	and	r7, r7
    1720:	19 f0       	breq	.+6      	; 0x1728 <Attractive+0x126>
    1722:	8d 2f       	mov	r24, r29
    1724:	81 1b       	sub	r24, r17
    1726:	01 c0       	rjmp	.+2      	; 0x172a <Attractive+0x128>
    1728:	81 2f       	mov	r24, r17
    172a:	4f 2d       	mov	r20, r15
    172c:	6c 2f       	mov	r22, r28
    172e:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
						if( AttractCheckGameStart(600) ){
    1732:	88 e5       	ldi	r24, 0x58	; 88
    1734:	92 e0       	ldi	r25, 0x02	; 2
    1736:	0e 94 12 0a 	call	0x1424	; 0x1424 <AttractCheckGameStart>
    173a:	81 11       	cpse	r24, r1
    173c:	43 c1       	rjmp	.+646    	; 0x19c4 <Attractive+0x3c2>
					}
					setButtonLed(Player1ButtonX, Player1ButtonY, y%2);
					setButtonLed(Player2ButtonX, Player2ButtonY, (y+1) % 2);
				}
				for(uint8_t y = 1; y < 6; y++){
					for(uint8_t x = 0; x < 6; x++){
    173e:	1f 5f       	subi	r17, 0xFF	; 255
    1740:	16 30       	cpi	r17, 0x06	; 6
    1742:	61 f7       	brne	.-40     	; 0x171c <Attractive+0x11a>
						setButtonLed( (y%2)==0 ? x : (5-x) ,y,0);
						if( AttractCheckGameStart(600) ){
							goto EndAttract;
						}
					}
					setButtonLed(Player1ButtonX, Player1ButtonY, (y+1)%2);
    1744:	a1 01       	movw	r20, r2
    1746:	41 70       	andi	r20, 0x01	; 1
    1748:	50 78       	andi	r21, 0x80	; 128
    174a:	55 23       	and	r21, r21
    174c:	34 f4       	brge	.+12     	; 0x175a <Attractive+0x158>
    174e:	41 50       	subi	r20, 0x01	; 1
    1750:	51 09       	sbc	r21, r1
    1752:	4e 6f       	ori	r20, 0xFE	; 254
    1754:	5f 6f       	ori	r21, 0xFF	; 255
    1756:	4f 5f       	subi	r20, 0xFF	; 255
    1758:	5f 4f       	sbci	r21, 0xFF	; 255
    175a:	6f 2d       	mov	r22, r15
    175c:	83 e0       	ldi	r24, 0x03	; 3
    175e:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
					setButtonLed(Player2ButtonX, Player2ButtonY,(y) % 2);
    1762:	44 2d       	mov	r20, r4
    1764:	6f 2d       	mov	r22, r15
    1766:	82 e0       	ldi	r24, 0x02	; 2
    1768:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
						}
					}
					setButtonLed(Player1ButtonX, Player1ButtonY, y%2);
					setButtonLed(Player2ButtonX, Player2ButtonY, (y+1) % 2);
				}
				for(uint8_t y = 1; y < 6; y++){
    176c:	cf 5f       	subi	r28, 0xFF	; 255
    176e:	8f ef       	ldi	r24, 0xFF	; 255
    1770:	28 1a       	sub	r2, r24
    1772:	38 0a       	sbc	r3, r24
    1774:	c6 30       	cpi	r28, 0x06	; 6
    1776:	31 f4       	brne	.+12     	; 0x1784 <Attractive+0x182>
    1778:	0a c0       	rjmp	.+20     	; 0x178e <Attractive+0x18c>
    177a:	68 94       	set
    177c:	22 24       	eor	r2, r2
    177e:	21 f8       	bld	r2, 1
    1780:	31 2c       	mov	r3, r1
    1782:	c1 e0       	ldi	r28, 0x01	; 1
    1784:	10 e0       	ldi	r17, 0x00	; 0
					for(uint8_t x = 0; x < 6; x++){
						setButtonLed( (y%2)==0 ? x : (5-x) ,y,0);
    1786:	8c 2f       	mov	r24, r28
    1788:	81 70       	andi	r24, 0x01	; 1
    178a:	78 2e       	mov	r7, r24
    178c:	c7 cf       	rjmp	.-114    	; 0x171c <Attractive+0x11a>
    178e:	6a 94       	dec	r6
	setScore(0, HighScore2P);
	while(1){
		uint8_t blinkyMode = rand() % 4;	// todo make random, ADD DISPLAY BLANKING
		switch(blinkyMode){	// multiple blinky modes (todo randomly pick one)
			case 0:
			for(uint8_t count = 0; count < 2; count++){
    1790:	61 10       	cpse	r6, r1
    1792:	04 c0       	rjmp	.+8      	; 0x179c <Attractive+0x19a>
    1794:	74 cf       	rjmp	.-280    	; 0x167e <Attractive+0x7c>
	setScoreSegment(TIMER100, 18);
	
	setScore(0, HighScore2P);
	while(1){
		uint8_t blinkyMode = rand() % 4;	// todo make random, ADD DISPLAY BLANKING
		switch(blinkyMode){	// multiple blinky modes (todo randomly pick one)
    1796:	68 94       	set
    1798:	66 24       	eor	r6, r6
    179a:	61 f8       	bld	r6, 1
    179c:	02 e0       	ldi	r16, 0x02	; 2
    179e:	10 e0       	ldi	r17, 0x00	; 0
    17a0:	c1 e0       	ldi	r28, 0x01	; 1
    17a2:	b7 cf       	rjmp	.-146    	; 0x1712 <Attractive+0x110>
    17a4:	00 e0       	ldi	r16, 0x00	; 0
			break;
			
			case 1:
			for(uint8_t count = 0; count < 216; count++){
				
				uint8_t x = rand()%6;
    17a6:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <rand>
    17aa:	b5 01       	movw	r22, r10
    17ac:	0e 94 02 17 	call	0x2e04	; 0x2e04 <__divmodhi4>
    17b0:	88 2e       	mov	r8, r24
				uint8_t y = 1+(rand()%5);
    17b2:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <rand>
    17b6:	b6 01       	movw	r22, r12
    17b8:	0e 94 02 17 	call	0x2e04	; 0x2e04 <__divmodhi4>
    17bc:	11 e0       	ldi	r17, 0x01	; 1
    17be:	18 0f       	add	r17, r24
				setButtonLed(x,y,!getButtonLed(x,y));
    17c0:	61 2f       	mov	r22, r17
    17c2:	88 2d       	mov	r24, r8
    17c4:	0e 94 de 00 	call	0x1bc	; 0x1bc <getButtonLed>
    17c8:	49 2d       	mov	r20, r9
    17ca:	89 2b       	or	r24, r25
    17cc:	09 f0       	breq	.+2      	; 0x17d0 <Attractive+0x1ce>
    17ce:	4f 2d       	mov	r20, r15
    17d0:	61 2f       	mov	r22, r17
    17d2:	88 2d       	mov	r24, r8
    17d4:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
				if( AttractCheckGameStart(260) ){
    17d8:	84 e0       	ldi	r24, 0x04	; 4
    17da:	91 e0       	ldi	r25, 0x01	; 1
    17dc:	0e 94 12 0a 	call	0x1424	; 0x1424 <AttractCheckGameStart>
    17e0:	81 11       	cpse	r24, r1
    17e2:	f0 c0       	rjmp	.+480    	; 0x19c4 <Attractive+0x3c2>
					goto EndAttract;
				}
				
				if(count % 12 == 0){
    17e4:	0e 9d       	mul	r16, r14
    17e6:	81 2d       	mov	r24, r1
    17e8:	11 24       	eor	r1, r1
    17ea:	86 95       	lsr	r24
    17ec:	86 95       	lsr	r24
    17ee:	86 95       	lsr	r24
    17f0:	98 2f       	mov	r25, r24
    17f2:	99 0f       	add	r25, r25
    17f4:	89 0f       	add	r24, r25
    17f6:	88 0f       	add	r24, r24
    17f8:	88 0f       	add	r24, r24
    17fa:	08 13       	cpse	r16, r24
    17fc:	1f c0       	rjmp	.+62     	; 0x183c <Attractive+0x23a>
					setButtonLed(Player1ButtonX, Player1ButtonY, (count/12)%2);
    17fe:	0e 9d       	mul	r16, r14
    1800:	41 2d       	mov	r20, r1
    1802:	11 24       	eor	r1, r1
    1804:	14 2f       	mov	r17, r20
    1806:	16 95       	lsr	r17
    1808:	16 95       	lsr	r17
    180a:	16 95       	lsr	r17
    180c:	41 2f       	mov	r20, r17
    180e:	41 70       	andi	r20, 0x01	; 1
    1810:	6f 2d       	mov	r22, r15
    1812:	83 e0       	ldi	r24, 0x03	; 3
    1814:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
					setButtonLed(Player2ButtonX, Player2ButtonY,(1+(count/12))%2);
    1818:	41 2f       	mov	r20, r17
    181a:	50 e0       	ldi	r21, 0x00	; 0
    181c:	4f 5f       	subi	r20, 0xFF	; 255
    181e:	5f 4f       	sbci	r21, 0xFF	; 255
    1820:	41 70       	andi	r20, 0x01	; 1
    1822:	50 78       	andi	r21, 0x80	; 128
    1824:	55 23       	and	r21, r21
    1826:	34 f4       	brge	.+12     	; 0x1834 <Attractive+0x232>
    1828:	41 50       	subi	r20, 0x01	; 1
    182a:	51 09       	sbc	r21, r1
    182c:	4e 6f       	ori	r20, 0xFE	; 254
    182e:	5f 6f       	ori	r21, 0xFF	; 255
    1830:	4f 5f       	subi	r20, 0xFF	; 255
    1832:	5f 4f       	sbci	r21, 0xFF	; 255
    1834:	6f 2d       	mov	r22, r15
    1836:	82 e0       	ldi	r24, 0x02	; 2
    1838:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
				}
			}
			break;
			
			case 1:
			for(uint8_t count = 0; count < 216; count++){
    183c:	0f 5f       	subi	r16, 0xFF	; 255
    183e:	08 3d       	cpi	r16, 0xD8	; 216
    1840:	09 f0       	breq	.+2      	; 0x1844 <Attractive+0x242>
    1842:	b1 cf       	rjmp	.-158    	; 0x17a6 <Attractive+0x1a4>
    1844:	1c cf       	rjmp	.-456    	; 0x167e <Attractive+0x7c>
			
			case 2:
			for(uint8_t count = 0; count < 24; count++){
				for(uint8_t y = 1; y < 6; y++){
					for(uint8_t x = 0; x < 6; x++){
						setButtonLed( (y%2)==0 ? x : (5-x) ,y,1);
    1846:	57 2c       	mov	r5, r7
    1848:	77 20       	and	r7, r7
    184a:	19 f0       	breq	.+6      	; 0x1852 <Attractive+0x250>
    184c:	8d 2f       	mov	r24, r29
    184e:	8c 1b       	sub	r24, r28
    1850:	01 c0       	rjmp	.+2      	; 0x1854 <Attractive+0x252>
    1852:	8c 2f       	mov	r24, r28
    1854:	41 e0       	ldi	r20, 0x01	; 1
    1856:	66 2d       	mov	r22, r6
    1858:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
			
			
			case 2:
			for(uint8_t count = 0; count < 24; count++){
				for(uint8_t y = 1; y < 6; y++){
					for(uint8_t x = 0; x < 6; x++){
    185c:	cf 5f       	subi	r28, 0xFF	; 255
    185e:	c6 30       	cpi	r28, 0x06	; 6
    1860:	91 f7       	brne	.-28     	; 0x1846 <Attractive+0x244>
						setButtonLed( (y%2)==0 ? x : (5-x) ,y,1);
						
					}
					setButtonLed(Player1ButtonX, Player1ButtonY, y%2);
    1862:	45 2d       	mov	r20, r5
    1864:	6f 2d       	mov	r22, r15
    1866:	83 e0       	ldi	r24, 0x03	; 3
    1868:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
					setButtonLed(Player2ButtonX, Player2ButtonY, (y+1) % 2);
    186c:	a8 01       	movw	r20, r16
    186e:	41 70       	andi	r20, 0x01	; 1
    1870:	50 78       	andi	r21, 0x80	; 128
    1872:	55 23       	and	r21, r21
    1874:	34 f4       	brge	.+12     	; 0x1882 <Attractive+0x280>
    1876:	41 50       	subi	r20, 0x01	; 1
    1878:	51 09       	sbc	r21, r1
    187a:	4e 6f       	ori	r20, 0xFE	; 254
    187c:	5f 6f       	ori	r21, 0xFF	; 255
    187e:	4f 5f       	subi	r20, 0xFF	; 255
    1880:	5f 4f       	sbci	r21, 0xFF	; 255
    1882:	6f 2d       	mov	r22, r15
    1884:	82 e0       	ldi	r24, 0x02	; 2
    1886:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
			break;
			
			
			case 2:
			for(uint8_t count = 0; count < 24; count++){
				for(uint8_t y = 1; y < 6; y++){
    188a:	63 94       	inc	r6
    188c:	0f 5f       	subi	r16, 0xFF	; 255
    188e:	1f 4f       	sbci	r17, 0xFF	; 255
    1890:	86 e0       	ldi	r24, 0x06	; 6
    1892:	68 16       	cp	r6, r24
    1894:	29 f0       	breq	.+10     	; 0x18a0 <Attractive+0x29e>
	setScoreSegment(TIMER100, 18);
	
	setScore(0, HighScore2P);
	while(1){
		uint8_t blinkyMode = rand() % 4;	// todo make random, ADD DISPLAY BLANKING
		switch(blinkyMode){	// multiple blinky modes (todo randomly pick one)
    1896:	c0 e0       	ldi	r28, 0x00	; 0
			
			case 2:
			for(uint8_t count = 0; count < 24; count++){
				for(uint8_t y = 1; y < 6; y++){
					for(uint8_t x = 0; x < 6; x++){
						setButtonLed( (y%2)==0 ? x : (5-x) ,y,1);
    1898:	86 2d       	mov	r24, r6
    189a:	81 70       	andi	r24, 0x01	; 1
    189c:	78 2e       	mov	r7, r24
    189e:	d3 cf       	rjmp	.-90     	; 0x1846 <Attractive+0x244>
						
					}
					setButtonLed(Player1ButtonX, Player1ButtonY, y%2);
					setButtonLed(Player2ButtonX, Player2ButtonY, (y+1) % 2);
				}
				if( AttractCheckGameStart(1000) ){
    18a0:	88 ee       	ldi	r24, 0xE8	; 232
    18a2:	93 e0       	ldi	r25, 0x03	; 3
    18a4:	0e 94 12 0a 	call	0x1424	; 0x1424 <AttractCheckGameStart>
    18a8:	81 11       	cpse	r24, r1
    18aa:	8c c0       	rjmp	.+280    	; 0x19c4 <Attractive+0x3c2>
    18ac:	4a 94       	dec	r4
			}
			break;
			
			
			case 2:
			for(uint8_t count = 0; count < 24; count++){
    18ae:	41 10       	cpse	r4, r1
    18b0:	05 c0       	rjmp	.+10     	; 0x18bc <Attractive+0x2ba>
    18b2:	e5 ce       	rjmp	.-566    	; 0x167e <Attractive+0x7c>
	setScoreSegment(TIMER100, 18);
	
	setScore(0, HighScore2P);
	while(1){
		uint8_t blinkyMode = rand() % 4;	// todo make random, ADD DISPLAY BLANKING
		switch(blinkyMode){	// multiple blinky modes (todo randomly pick one)
    18b4:	0f 2e       	mov	r0, r31
    18b6:	f8 e1       	ldi	r31, 0x18	; 24
    18b8:	4f 2e       	mov	r4, r31
    18ba:	f0 2d       	mov	r31, r0
    18bc:	02 e0       	ldi	r16, 0x02	; 2
    18be:	10 e0       	ldi	r17, 0x00	; 0
    18c0:	66 24       	eor	r6, r6
    18c2:	63 94       	inc	r6
    18c4:	e8 cf       	rjmp	.-48     	; 0x1896 <Attractive+0x294>
			
			case 3:
			for(uint8_t count = 0; count < 2; count++){
				for(uint8_t x = 0; x < 6; x++){
					for(uint8_t y = 1; y < 6; y++){
						setButtonLed( (y%2)==0 ? x : (5-x) ,y,1);
    18c6:	80 fe       	sbrs	r8, 0
    18c8:	02 c0       	rjmp	.+4      	; 0x18ce <Attractive+0x2cc>
    18ca:	85 2d       	mov	r24, r5
    18cc:	01 c0       	rjmp	.+2      	; 0x18d0 <Attractive+0x2ce>
    18ce:	84 2d       	mov	r24, r4
    18d0:	41 e0       	ldi	r20, 0x01	; 1
    18d2:	68 2d       	mov	r22, r8
    18d4:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
						if( AttractCheckGameStart(600) ){
    18d8:	88 e5       	ldi	r24, 0x58	; 88
    18da:	92 e0       	ldi	r25, 0x02	; 2
    18dc:	0e 94 12 0a 	call	0x1424	; 0x1424 <AttractCheckGameStart>
    18e0:	81 11       	cpse	r24, r1
    18e2:	70 c0       	rjmp	.+224    	; 0x19c4 <Attractive+0x3c2>
			break;
			
			case 3:
			for(uint8_t count = 0; count < 2; count++){
				for(uint8_t x = 0; x < 6; x++){
					for(uint8_t y = 1; y < 6; y++){
    18e4:	83 94       	inc	r8
    18e6:	86 e0       	ldi	r24, 0x06	; 6
    18e8:	88 12       	cpse	r8, r24
    18ea:	ed cf       	rjmp	.-38     	; 0x18c6 <Attractive+0x2c4>
						if( AttractCheckGameStart(600) ){
							
							goto EndAttract;
						}
					}
					setButtonLed(Player1ButtonX, Player1ButtonY, x%2);
    18ec:	47 2d       	mov	r20, r7
    18ee:	41 70       	andi	r20, 0x01	; 1
    18f0:	6f 2d       	mov	r22, r15
    18f2:	83 e0       	ldi	r24, 0x03	; 3
    18f4:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
					setButtonLed(Player2ButtonX, Player2ButtonY, (x+1) % 2);
    18f8:	a8 01       	movw	r20, r16
    18fa:	41 70       	andi	r20, 0x01	; 1
    18fc:	50 78       	andi	r21, 0x80	; 128
    18fe:	55 23       	and	r21, r21
    1900:	34 f4       	brge	.+12     	; 0x190e <Attractive+0x30c>
    1902:	41 50       	subi	r20, 0x01	; 1
    1904:	51 09       	sbc	r21, r1
    1906:	4e 6f       	ori	r20, 0xFE	; 254
    1908:	5f 6f       	ori	r21, 0xFF	; 255
    190a:	4f 5f       	subi	r20, 0xFF	; 255
    190c:	5f 4f       	sbci	r21, 0xFF	; 255
    190e:	6f 2d       	mov	r22, r15
    1910:	82 e0       	ldi	r24, 0x02	; 2
    1912:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
			}
			break;
			
			case 3:
			for(uint8_t count = 0; count < 2; count++){
				for(uint8_t x = 0; x < 6; x++){
    1916:	73 94       	inc	r7
    1918:	0f 5f       	subi	r16, 0xFF	; 255
    191a:	1f 4f       	sbci	r17, 0xFF	; 255
    191c:	86 e0       	ldi	r24, 0x06	; 6
    191e:	78 16       	cp	r7, r24
    1920:	a9 f1       	breq	.+106    	; 0x198c <Attractive+0x38a>
	setScoreSegment(TIMER100, 18);
	
	setScore(0, HighScore2P);
	while(1){
		uint8_t blinkyMode = rand() % 4;	// todo make random, ADD DISPLAY BLANKING
		switch(blinkyMode){	// multiple blinky modes (todo randomly pick one)
    1922:	88 24       	eor	r8, r8
    1924:	83 94       	inc	r8
    1926:	47 2c       	mov	r4, r7
			
			case 3:
			for(uint8_t count = 0; count < 2; count++){
				for(uint8_t x = 0; x < 6; x++){
					for(uint8_t y = 1; y < 6; y++){
						setButtonLed( (y%2)==0 ? x : (5-x) ,y,1);
    1928:	5d 2e       	mov	r5, r29
    192a:	57 18       	sub	r5, r7
    192c:	cc cf       	rjmp	.-104    	; 0x18c6 <Attractive+0x2c4>
					setButtonLed(Player1ButtonX, Player1ButtonY, x%2);
					setButtonLed(Player2ButtonX, Player2ButtonY, (x+1) % 2);
				}
				for(uint8_t x = 0; x < 6; x++){
					for(uint8_t y = 1; y < 6; y++){
						setButtonLed( (y%2)==0 ? x : (5-x) ,y,0);
    192e:	80 fe       	sbrs	r8, 0
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <Attractive+0x334>
    1932:	85 2d       	mov	r24, r5
    1934:	01 c0       	rjmp	.+2      	; 0x1938 <Attractive+0x336>
    1936:	84 2d       	mov	r24, r4
    1938:	4f 2d       	mov	r20, r15
    193a:	68 2d       	mov	r22, r8
    193c:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
						if( AttractCheckGameStart(600) ){
    1940:	88 e5       	ldi	r24, 0x58	; 88
    1942:	92 e0       	ldi	r25, 0x02	; 2
    1944:	0e 94 12 0a 	call	0x1424	; 0x1424 <AttractCheckGameStart>
    1948:	81 11       	cpse	r24, r1
    194a:	3c c0       	rjmp	.+120    	; 0x19c4 <Attractive+0x3c2>
					}
					setButtonLed(Player1ButtonX, Player1ButtonY, x%2);
					setButtonLed(Player2ButtonX, Player2ButtonY, (x+1) % 2);
				}
				for(uint8_t x = 0; x < 6; x++){
					for(uint8_t y = 1; y < 6; y++){
    194c:	83 94       	inc	r8
    194e:	86 e0       	ldi	r24, 0x06	; 6
    1950:	88 12       	cpse	r8, r24
    1952:	ed cf       	rjmp	.-38     	; 0x192e <Attractive+0x32c>
						setButtonLed( (y%2)==0 ? x : (5-x) ,y,0);
						if( AttractCheckGameStart(600) ){
							goto EndAttract;
						}
					}
					setButtonLed(Player1ButtonX, Player1ButtonY, (x+1)%2);
    1954:	a8 01       	movw	r20, r16
    1956:	41 70       	andi	r20, 0x01	; 1
    1958:	50 78       	andi	r21, 0x80	; 128
    195a:	55 23       	and	r21, r21
    195c:	34 f4       	brge	.+12     	; 0x196a <Attractive+0x368>
    195e:	41 50       	subi	r20, 0x01	; 1
    1960:	51 09       	sbc	r21, r1
    1962:	4e 6f       	ori	r20, 0xFE	; 254
    1964:	5f 6f       	ori	r21, 0xFF	; 255
    1966:	4f 5f       	subi	r20, 0xFF	; 255
    1968:	5f 4f       	sbci	r21, 0xFF	; 255
    196a:	6f 2d       	mov	r22, r15
    196c:	83 e0       	ldi	r24, 0x03	; 3
    196e:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
					setButtonLed(Player2ButtonX, Player2ButtonY,(x) % 2);
    1972:	47 2d       	mov	r20, r7
    1974:	41 70       	andi	r20, 0x01	; 1
    1976:	6f 2d       	mov	r22, r15
    1978:	82 e0       	ldi	r24, 0x02	; 2
    197a:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
						}
					}
					setButtonLed(Player1ButtonX, Player1ButtonY, x%2);
					setButtonLed(Player2ButtonX, Player2ButtonY, (x+1) % 2);
				}
				for(uint8_t x = 0; x < 6; x++){
    197e:	73 94       	inc	r7
    1980:	0f 5f       	subi	r16, 0xFF	; 255
    1982:	1f 4f       	sbci	r17, 0xFF	; 255
    1984:	86 e0       	ldi	r24, 0x06	; 6
    1986:	78 12       	cpse	r7, r24
    1988:	04 c0       	rjmp	.+8      	; 0x1992 <Attractive+0x390>
    198a:	09 c0       	rjmp	.+18     	; 0x199e <Attractive+0x39c>
    198c:	01 e0       	ldi	r16, 0x01	; 1
    198e:	10 e0       	ldi	r17, 0x00	; 0
    1990:	71 2c       	mov	r7, r1
    1992:	88 24       	eor	r8, r8
    1994:	83 94       	inc	r8
    1996:	47 2c       	mov	r4, r7
					for(uint8_t y = 1; y < 6; y++){
						setButtonLed( (y%2)==0 ? x : (5-x) ,y,0);
    1998:	5d 2e       	mov	r5, r29
    199a:	57 18       	sub	r5, r7
    199c:	c8 cf       	rjmp	.-112    	; 0x192e <Attractive+0x32c>
    199e:	6a 94       	dec	r6
				}
			}
			break;
			
			case 3:
			for(uint8_t count = 0; count < 2; count++){
    19a0:	61 10       	cpse	r6, r1
    19a2:	04 c0       	rjmp	.+8      	; 0x19ac <Attractive+0x3aa>
    19a4:	6c ce       	rjmp	.-808    	; 0x167e <Attractive+0x7c>
	setScoreSegment(TIMER100, 18);
	
	setScore(0, HighScore2P);
	while(1){
		uint8_t blinkyMode = rand() % 4;	// todo make random, ADD DISPLAY BLANKING
		switch(blinkyMode){	// multiple blinky modes (todo randomly pick one)
    19a6:	68 94       	set
    19a8:	66 24       	eor	r6, r6
    19aa:	61 f8       	bld	r6, 1
    19ac:	01 e0       	ldi	r16, 0x01	; 1
    19ae:	10 e0       	ldi	r17, 0x00	; 0
    19b0:	71 2c       	mov	r7, r1
    19b2:	b7 cf       	rjmp	.-146    	; 0x1922 <Attractive+0x320>
			
		}
	}
	EndAttract:
	for(uint8_t scoredisp = 0; scoredisp < 9; scoredisp++){
		setScoreSegment(scoredisp, 16);	//turn off the displays
    19b4:	60 e1       	ldi	r22, 0x10	; 16
    19b6:	8c 2f       	mov	r24, r28
    19b8:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			break;
			
		}
	}
	EndAttract:
	for(uint8_t scoredisp = 0; scoredisp < 9; scoredisp++){
    19bc:	cf 5f       	subi	r28, 0xFF	; 255
    19be:	c9 30       	cpi	r28, 0x09	; 9
    19c0:	c9 f7       	brne	.-14     	; 0x19b4 <Attractive+0x3b2>
    19c2:	02 c0       	rjmp	.+4      	; 0x19c8 <Attractive+0x3c6>
	setScoreSegment(TIMER100, 18);
	
	setScore(0, HighScore2P);
	while(1){
		uint8_t blinkyMode = rand() % 4;	// todo make random, ADD DISPLAY BLANKING
		switch(blinkyMode){	// multiple blinky modes (todo randomly pick one)
    19c4:	c0 e0       	ldi	r28, 0x00	; 0
    19c6:	f6 cf       	rjmp	.-20     	; 0x19b4 <Attractive+0x3b2>
	for(uint8_t scoredisp = 0; scoredisp < 9; scoredisp++){
		setScoreSegment(scoredisp, 16);	//turn off the displays
	}
	return;		// start the game

}
    19c8:	df 91       	pop	r29
    19ca:	cf 91       	pop	r28
    19cc:	1f 91       	pop	r17
    19ce:	0f 91       	pop	r16
    19d0:	ff 90       	pop	r15
    19d2:	ef 90       	pop	r14
    19d4:	df 90       	pop	r13
    19d6:	cf 90       	pop	r12
    19d8:	bf 90       	pop	r11
    19da:	af 90       	pop	r10
    19dc:	9f 90       	pop	r9
    19de:	8f 90       	pop	r8
    19e0:	7f 90       	pop	r7
    19e2:	6f 90       	pop	r6
    19e4:	5f 90       	pop	r5
    19e6:	4f 90       	pop	r4
    19e8:	3f 90       	pop	r3
    19ea:	2f 90       	pop	r2
    19ec:	08 95       	ret

000019ee <EEPROM_write>:


void EEPROM_write(uint16_t uiAddress, uint8_t ucData)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
    19ee:	f9 99       	sbic	0x1f, 1	; 31
    19f0:	fe cf       	rjmp	.-4      	; 0x19ee <EEPROM_write>
	;
	/* Set up address and Data Registers */
	EEAR = uiAddress;
    19f2:	92 bd       	out	0x22, r25	; 34
    19f4:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
    19f6:	60 bd       	out	0x20, r22	; 32
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMPE);
    19f8:	fa 9a       	sbi	0x1f, 2	; 31
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEPE);
    19fa:	f9 9a       	sbi	0x1f, 1	; 31
    19fc:	08 95       	ret

000019fe <debugMode>:
	if(TimeRemaining > 0){
		TimeRemaining--;
	}
}

void debugMode(){
    19fe:	3f 92       	push	r3
    1a00:	4f 92       	push	r4
    1a02:	5f 92       	push	r5
    1a04:	6f 92       	push	r6
    1a06:	7f 92       	push	r7
    1a08:	8f 92       	push	r8
    1a0a:	9f 92       	push	r9
    1a0c:	af 92       	push	r10
    1a0e:	bf 92       	push	r11
    1a10:	cf 92       	push	r12
    1a12:	df 92       	push	r13
    1a14:	ef 92       	push	r14
    1a16:	ff 92       	push	r15
    1a18:	0f 93       	push	r16
    1a1a:	1f 93       	push	r17
    1a1c:	cf 93       	push	r28
    1a1e:	df 93       	push	r29
	uint8_t page = 0;
	uint8_t maxpages = 7;
	
	DDRB |= (1<<1);
    1a20:	21 9a       	sbi	0x04, 1	; 4
	ICR1 = notes[0];		// play debug tone
    1a22:	a6 e8       	ldi	r26, 0x86	; 134
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	61 ec       	ldi	r22, 0xC1	; 193
    1a28:	71 e1       	ldi	r23, 0x11	; 17
    1a2a:	11 96       	adiw	r26, 0x01	; 1
    1a2c:	7c 93       	st	X, r23
    1a2e:	6e 93       	st	-X, r22
	OCR1A = notes[0] / 2;
    1a30:	e8 e8       	ldi	r30, 0x88	; 136
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	40 ee       	ldi	r20, 0xE0	; 224
    1a36:	58 e0       	ldi	r21, 0x08	; 8
    1a38:	51 83       	std	Z+1, r21	; 0x01
    1a3a:	40 83       	st	Z, r20
    1a3c:	1f ef       	ldi	r17, 0xFF	; 255
    1a3e:	21 ee       	ldi	r18, 0xE1	; 225
    1a40:	84 e0       	ldi	r24, 0x04	; 4
    1a42:	11 50       	subi	r17, 0x01	; 1
    1a44:	20 40       	sbci	r18, 0x00	; 0
    1a46:	80 40       	sbci	r24, 0x00	; 0
    1a48:	e1 f7       	brne	.-8      	; 0x1a42 <debugMode+0x44>
    1a4a:	00 c0       	rjmp	.+0      	; 0x1a4c <debugMode+0x4e>
    1a4c:	00 00       	nop
	_delay_ms(100);
	ICR1 = notes[1];
    1a4e:	22 ed       	ldi	r18, 0xD2	; 210
    1a50:	3f e0       	ldi	r19, 0x0F	; 15
    1a52:	11 96       	adiw	r26, 0x01	; 1
    1a54:	3c 93       	st	X, r19
    1a56:	2e 93       	st	-X, r18
	OCR1A = notes[1] / 2;
    1a58:	89 ee       	ldi	r24, 0xE9	; 233
    1a5a:	97 e0       	ldi	r25, 0x07	; 7
    1a5c:	91 83       	std	Z+1, r25	; 0x01
    1a5e:	80 83       	st	Z, r24
    1a60:	cf ef       	ldi	r28, 0xFF	; 255
    1a62:	d1 ee       	ldi	r29, 0xE1	; 225
    1a64:	14 e0       	ldi	r17, 0x04	; 4
    1a66:	c1 50       	subi	r28, 0x01	; 1
    1a68:	d0 40       	sbci	r29, 0x00	; 0
    1a6a:	10 40       	sbci	r17, 0x00	; 0
    1a6c:	e1 f7       	brne	.-8      	; 0x1a66 <debugMode+0x68>
    1a6e:	00 c0       	rjmp	.+0      	; 0x1a70 <debugMode+0x72>
    1a70:	00 00       	nop
	_delay_ms(100);
	ICR1 = notes[0];
    1a72:	11 96       	adiw	r26, 0x01	; 1
    1a74:	7c 93       	st	X, r23
    1a76:	6e 93       	st	-X, r22
	OCR1A = notes[0] / 2;
    1a78:	51 83       	std	Z+1, r21	; 0x01
    1a7a:	40 83       	st	Z, r20
    1a7c:	4f ef       	ldi	r20, 0xFF	; 255
    1a7e:	51 ee       	ldi	r21, 0xE1	; 225
    1a80:	64 e0       	ldi	r22, 0x04	; 4
    1a82:	41 50       	subi	r20, 0x01	; 1
    1a84:	50 40       	sbci	r21, 0x00	; 0
    1a86:	60 40       	sbci	r22, 0x00	; 0
    1a88:	e1 f7       	brne	.-8      	; 0x1a82 <debugMode+0x84>
    1a8a:	00 c0       	rjmp	.+0      	; 0x1a8c <debugMode+0x8e>
    1a8c:	00 00       	nop
	_delay_ms(100);
	ICR1 = notes[1];
    1a8e:	11 96       	adiw	r26, 0x01	; 1
    1a90:	3c 93       	st	X, r19
    1a92:	2e 93       	st	-X, r18
	OCR1A = notes[1] / 2;
    1a94:	91 83       	std	Z+1, r25	; 0x01
    1a96:	80 83       	st	Z, r24
    1a98:	8f ef       	ldi	r24, 0xFF	; 255
    1a9a:	91 ee       	ldi	r25, 0xE1	; 225
    1a9c:	c4 e0       	ldi	r28, 0x04	; 4
    1a9e:	81 50       	subi	r24, 0x01	; 1
    1aa0:	90 40       	sbci	r25, 0x00	; 0
    1aa2:	c0 40       	sbci	r28, 0x00	; 0
    1aa4:	e1 f7       	brne	.-8      	; 0x1a9e <debugMode+0xa0>
    1aa6:	00 c0       	rjmp	.+0      	; 0x1aa8 <debugMode+0xaa>
    1aa8:	00 00       	nop
	_delay_ms(100);
	DDRB &= ~(1<<1);
    1aaa:	21 98       	cbi	0x04, 1	; 4
	
	while(isButtonDown(0,1)){
    1aac:	61 e0       	ldi	r22, 0x01	; 1
    1aae:	80 e0       	ldi	r24, 0x00	; 0
    1ab0:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    1ab4:	81 11       	cpse	r24, r1
    1ab6:	fa cf       	rjmp	.-12     	; 0x1aac <debugMode+0xae>
    1ab8:	df ef       	ldi	r29, 0xFF	; 255
    1aba:	e0 e7       	ldi	r30, 0x70	; 112
    1abc:	f2 e0       	ldi	r31, 0x02	; 2
    1abe:	d1 50       	subi	r29, 0x01	; 1
    1ac0:	e0 40       	sbci	r30, 0x00	; 0
    1ac2:	f0 40       	sbci	r31, 0x00	; 0
    1ac4:	e1 f7       	brne	.-8      	; 0x1abe <debugMode+0xc0>
    1ac6:	00 c0       	rjmp	.+0      	; 0x1ac8 <debugMode+0xca>
    1ac8:	00 00       	nop
		TimeRemaining--;
	}
}

void debugMode(){
	uint8_t page = 0;
    1aca:	31 2c       	mov	r3, r1
						TCNT4 = 6250;
					}
				}
			}
			if(isButtonDown(1,4)){	//DOWN
				TCNT4 = 0;
    1acc:	c4 ea       	ldi	r28, 0xA4	; 164
    1ace:	d0 e0       	ldi	r29, 0x00	; 0
				SoundEnabled = (SoundEnabled + 1) % 2;
				
				DDRB |= (1<<1);	//play tone
				ICR1 = notes[1];
    1ad0:	0f 2e       	mov	r0, r31
    1ad2:	f6 e8       	ldi	r31, 0x86	; 134
    1ad4:	ef 2e       	mov	r14, r31
    1ad6:	f1 2c       	mov	r15, r1
    1ad8:	f0 2d       	mov	r31, r0
    1ada:	0f 2e       	mov	r0, r31
    1adc:	f2 ed       	ldi	r31, 0xD2	; 210
    1ade:	af 2e       	mov	r10, r31
    1ae0:	ff e0       	ldi	r31, 0x0F	; 15
    1ae2:	bf 2e       	mov	r11, r31
    1ae4:	f0 2d       	mov	r31, r0
				OCR1A = notes[1] / 2;
    1ae6:	08 e8       	ldi	r16, 0x88	; 136
    1ae8:	10 e0       	ldi	r17, 0x00	; 0
    1aea:	0f 2e       	mov	r0, r31
    1aec:	f9 ee       	ldi	r31, 0xE9	; 233
    1aee:	cf 2e       	mov	r12, r31
    1af0:	f7 e0       	ldi	r31, 0x07	; 7
    1af2:	df 2e       	mov	r13, r31
    1af4:	f0 2d       	mov	r31, r0
				
				while(isButtonDown(1,4)){
					setScore(LEFT, SoundEnabled);
					if(TCNT4 > 6500){
						SoundEnabled = (SoundEnabled + 1) % 2;
						TCNT4 = 6250;
    1af6:	0f 2e       	mov	r0, r31
    1af8:	fa e6       	ldi	r31, 0x6A	; 106
    1afa:	8f 2e       	mov	r8, r31
    1afc:	f8 e1       	ldi	r31, 0x18	; 24
    1afe:	9f 2e       	mov	r9, r31
    1b00:	f0 2d       	mov	r31, r0
			if(isButtonDown(1,3)){	//UP
				TCNT4 = 0;
				SoundEnabled = (SoundEnabled + 1) % 2;
				
				DDRB |= (1<<1);	//play tone
				ICR1 = notes[2];
    1b02:	0f 2e       	mov	r0, r31
    1b04:	fe ee       	ldi	r31, 0xEE	; 238
    1b06:	4f 2e       	mov	r4, r31
    1b08:	fe e0       	ldi	r31, 0x0E	; 14
    1b0a:	5f 2e       	mov	r5, r31
    1b0c:	f0 2d       	mov	r31, r0
					}
				}
			}
			if(isButtonDown(1,4)){	//DOWN
				TCNT4 = 0;
				MultTimeKill = (MultTimeKill + 999) % 1000;
    1b0e:	0f 2e       	mov	r0, r31
    1b10:	f8 ee       	ldi	r31, 0xE8	; 232
    1b12:	6f 2e       	mov	r6, r31
    1b14:	f3 e0       	ldi	r31, 0x03	; 3
    1b16:	7f 2e       	mov	r7, r31
    1b18:	f0 2d       	mov	r31, r0
	}
	_delay_ms(50);
	
	while(1){
		
		switch(page){
    1b1a:	83 2d       	mov	r24, r3
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	87 30       	cpi	r24, 0x07	; 7
    1b20:	91 05       	cpc	r25, r1
    1b22:	08 f0       	brcs	.+2      	; 0x1b26 <debugMode+0x128>
    1b24:	8a c6       	rjmp	.+3348   	; 0x283a <debugMode+0xe3c>
    1b26:	fc 01       	movw	r30, r24
    1b28:	e6 5a       	subi	r30, 0xA6	; 166
    1b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2c:	0c 94 16 17 	jmp	0x2e2c	; 0x2e2c <__tablejump2__>
			case 0:	//high score 1p
			setScoreSegment(RIGHT100, 19);	//HI-SC1
    1b30:	63 e1       	ldi	r22, 0x13	; 19
    1b32:	88 e0       	ldi	r24, 0x08	; 8
    1b34:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(RIGHT10, 1);
    1b38:	61 e0       	ldi	r22, 0x01	; 1
    1b3a:	87 e0       	ldi	r24, 0x07	; 7
    1b3c:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(RIGHT1, 18);
    1b40:	62 e1       	ldi	r22, 0x12	; 18
    1b42:	86 e0       	ldi	r24, 0x06	; 6
    1b44:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(TIMER100, 5);
    1b48:	65 e0       	ldi	r22, 0x05	; 5
    1b4a:	85 e0       	ldi	r24, 0x05	; 5
    1b4c:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(TIMER10, 0xC);
    1b50:	6c e0       	ldi	r22, 0x0C	; 12
    1b52:	84 e0       	ldi	r24, 0x04	; 4
    1b54:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(TIMER1, 1);
    1b58:	61 e0       	ldi	r22, 0x01	; 1
    1b5a:	83 e0       	ldi	r24, 0x03	; 3
    1b5c:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScore(LEFT, HighScore1P);
    1b60:	60 91 fa 02 	lds	r22, 0x02FA	; 0x8002fa <HighScore1P>
    1b64:	70 91 fb 02 	lds	r23, 0x02FB	; 0x8002fb <HighScore1P+0x1>
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
			
			setButtonLed(2,2,1);		// RESET score led
    1b6e:	41 e0       	ldi	r20, 0x01	; 1
    1b70:	62 e0       	ldi	r22, 0x02	; 2
    1b72:	82 e0       	ldi	r24, 0x02	; 2
    1b74:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
			
			if(isButtonDown(2,2)){
    1b78:	62 e0       	ldi	r22, 0x02	; 2
    1b7a:	82 e0       	ldi	r24, 0x02	; 2
    1b7c:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    1b80:	88 23       	and	r24, r24
    1b82:	21 f1       	breq	.+72     	; 0x1bcc <debugMode+0x1ce>
				HighScore1P = 0;
    1b84:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <HighScore1P+0x1>
    1b88:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <HighScore1P>
				setScore(LEFT, HighScore1P);
    1b8c:	60 e0       	ldi	r22, 0x00	; 0
    1b8e:	70 e0       	ldi	r23, 0x00	; 0
    1b90:	80 e0       	ldi	r24, 0x00	; 0
    1b92:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
				DDRB |= (1<<1);	//play reset
    1b96:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[3];
    1b98:	8d e4       	ldi	r24, 0x4D	; 77
    1b9a:	9d e0       	ldi	r25, 0x0D	; 13
    1b9c:	f7 01       	movw	r30, r14
    1b9e:	91 83       	std	Z+1, r25	; 0x01
    1ba0:	80 83       	st	Z, r24
				OCR1A = notes[3] / 2;
    1ba2:	86 ea       	ldi	r24, 0xA6	; 166
    1ba4:	96 e0       	ldi	r25, 0x06	; 6
    1ba6:	f8 01       	movw	r30, r16
    1ba8:	91 83       	std	Z+1, r25	; 0x01
    1baa:	80 83       	st	Z, r24
    1bac:	ff e7       	ldi	r31, 0x7F	; 127
    1bae:	25 eb       	ldi	r18, 0xB5	; 181
    1bb0:	41 e0       	ldi	r20, 0x01	; 1
    1bb2:	f1 50       	subi	r31, 0x01	; 1
    1bb4:	20 40       	sbci	r18, 0x00	; 0
    1bb6:	40 40       	sbci	r20, 0x00	; 0
    1bb8:	e1 f7       	brne	.-8      	; 0x1bb2 <debugMode+0x1b4>
    1bba:	00 c0       	rjmp	.+0      	; 0x1bbc <debugMode+0x1be>
    1bbc:	00 00       	nop
				_delay_ms(35);
				DDRB &= ~(1<<1);
    1bbe:	21 98       	cbi	0x04, 1	; 4
				while(isButtonDown(2,2))
    1bc0:	62 e0       	ldi	r22, 0x02	; 2
    1bc2:	82 e0       	ldi	r24, 0x02	; 2
    1bc4:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    1bc8:	81 11       	cpse	r24, r1
    1bca:	fa cf       	rjmp	.-12     	; 0x1bc0 <debugMode+0x1c2>
				{
					//wait for unpush
				}
			}
			
			if(isButtonDown(1,3)){	//UP
    1bcc:	63 e0       	ldi	r22, 0x03	; 3
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    1bd4:	88 23       	and	r24, r24
    1bd6:	09 f4       	brne	.+2      	; 0x1bda <debugMode+0x1dc>
    1bd8:	6f c0       	rjmp	.+222    	; 0x1cb8 <debugMode+0x2ba>
				TCNT4 = 0;
    1bda:	19 82       	std	Y+1, r1	; 0x01
    1bdc:	18 82       	st	Y, r1
				HighScore1P = (HighScore1P + 1) % 1000;
    1bde:	40 91 fa 02 	lds	r20, 0x02FA	; 0x8002fa <HighScore1P>
    1be2:	50 91 fb 02 	lds	r21, 0x02FB	; 0x8002fb <HighScore1P+0x1>
    1be6:	4f 5f       	subi	r20, 0xFF	; 255
    1be8:	5f 4f       	sbci	r21, 0xFF	; 255
    1bea:	9a 01       	movw	r18, r20
    1bec:	36 95       	lsr	r19
    1bee:	27 95       	ror	r18
    1bf0:	36 95       	lsr	r19
    1bf2:	27 95       	ror	r18
    1bf4:	36 95       	lsr	r19
    1bf6:	27 95       	ror	r18
    1bf8:	a5 ec       	ldi	r26, 0xC5	; 197
    1bfa:	b0 e2       	ldi	r27, 0x20	; 32
    1bfc:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__umulhisi3>
    1c00:	92 95       	swap	r25
    1c02:	82 95       	swap	r24
    1c04:	8f 70       	andi	r24, 0x0F	; 15
    1c06:	89 27       	eor	r24, r25
    1c08:	9f 70       	andi	r25, 0x0F	; 15
    1c0a:	89 27       	eor	r24, r25
    1c0c:	86 9d       	mul	r24, r6
    1c0e:	90 01       	movw	r18, r0
    1c10:	87 9d       	mul	r24, r7
    1c12:	30 0d       	add	r19, r0
    1c14:	96 9d       	mul	r25, r6
    1c16:	30 0d       	add	r19, r0
    1c18:	11 24       	eor	r1, r1
    1c1a:	42 1b       	sub	r20, r18
    1c1c:	53 0b       	sbc	r21, r19
    1c1e:	50 93 fb 02 	sts	0x02FB, r21	; 0x8002fb <HighScore1P+0x1>
    1c22:	40 93 fa 02 	sts	0x02FA, r20	; 0x8002fa <HighScore1P>
				
				DDRB |= (1<<1);	//play tone
    1c26:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[2];
    1c28:	f7 01       	movw	r30, r14
    1c2a:	51 82       	std	Z+1, r5	; 0x01
    1c2c:	40 82       	st	Z, r4
				OCR1A = notes[2] / 2;
    1c2e:	47 e7       	ldi	r20, 0x77	; 119
    1c30:	57 e0       	ldi	r21, 0x07	; 7
    1c32:	f8 01       	movw	r30, r16
    1c34:	51 83       	std	Z+1, r21	; 0x01
    1c36:	40 83       	st	Z, r20
    1c38:	8f e5       	ldi	r24, 0x5F	; 95
    1c3a:	9a ee       	ldi	r25, 0xEA	; 234
    1c3c:	01 97       	sbiw	r24, 0x01	; 1
    1c3e:	f1 f7       	brne	.-4      	; 0x1c3c <debugMode+0x23e>
    1c40:	00 c0       	rjmp	.+0      	; 0x1c42 <debugMode+0x244>
    1c42:	00 00       	nop
				_delay_ms(15);
				DDRB &= ~(1<<1);
    1c44:	21 98       	cbi	0x04, 1	; 4
				
				while(isButtonDown(1,3)){
    1c46:	32 c0       	rjmp	.+100    	; 0x1cac <debugMode+0x2ae>
					setScore(LEFT, HighScore1P);
    1c48:	60 91 fa 02 	lds	r22, 0x02FA	; 0x8002fa <HighScore1P>
    1c4c:	70 91 fb 02 	lds	r23, 0x02FB	; 0x8002fb <HighScore1P+0x1>
    1c50:	80 e0       	ldi	r24, 0x00	; 0
    1c52:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
					if(TCNT4 > 6500){
    1c56:	88 81       	ld	r24, Y
    1c58:	99 81       	ldd	r25, Y+1	; 0x01
    1c5a:	85 36       	cpi	r24, 0x65	; 101
    1c5c:	99 41       	sbci	r25, 0x19	; 25
    1c5e:	30 f1       	brcs	.+76     	; 0x1cac <debugMode+0x2ae>
						HighScore1P = (HighScore1P + 1) % 1000;
    1c60:	40 91 fa 02 	lds	r20, 0x02FA	; 0x8002fa <HighScore1P>
    1c64:	50 91 fb 02 	lds	r21, 0x02FB	; 0x8002fb <HighScore1P+0x1>
    1c68:	4f 5f       	subi	r20, 0xFF	; 255
    1c6a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c6c:	9a 01       	movw	r18, r20
    1c6e:	36 95       	lsr	r19
    1c70:	27 95       	ror	r18
    1c72:	36 95       	lsr	r19
    1c74:	27 95       	ror	r18
    1c76:	36 95       	lsr	r19
    1c78:	27 95       	ror	r18
    1c7a:	a5 ec       	ldi	r26, 0xC5	; 197
    1c7c:	b0 e2       	ldi	r27, 0x20	; 32
    1c7e:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__umulhisi3>
    1c82:	92 95       	swap	r25
    1c84:	82 95       	swap	r24
    1c86:	8f 70       	andi	r24, 0x0F	; 15
    1c88:	89 27       	eor	r24, r25
    1c8a:	9f 70       	andi	r25, 0x0F	; 15
    1c8c:	89 27       	eor	r24, r25
    1c8e:	86 9d       	mul	r24, r6
    1c90:	90 01       	movw	r18, r0
    1c92:	87 9d       	mul	r24, r7
    1c94:	30 0d       	add	r19, r0
    1c96:	96 9d       	mul	r25, r6
    1c98:	30 0d       	add	r19, r0
    1c9a:	11 24       	eor	r1, r1
    1c9c:	42 1b       	sub	r20, r18
    1c9e:	53 0b       	sbc	r21, r19
    1ca0:	50 93 fb 02 	sts	0x02FB, r21	; 0x8002fb <HighScore1P+0x1>
    1ca4:	40 93 fa 02 	sts	0x02FA, r20	; 0x8002fa <HighScore1P>
						TCNT4 = 6250;
    1ca8:	99 82       	std	Y+1, r9	; 0x01
    1caa:	88 82       	st	Y, r8
				ICR1 = notes[2];
				OCR1A = notes[2] / 2;
				_delay_ms(15);
				DDRB &= ~(1<<1);
				
				while(isButtonDown(1,3)){
    1cac:	63 e0       	ldi	r22, 0x03	; 3
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    1cb4:	81 11       	cpse	r24, r1
    1cb6:	c8 cf       	rjmp	.-112    	; 0x1c48 <debugMode+0x24a>
						HighScore1P = (HighScore1P + 1) % 1000;
						TCNT4 = 6250;
					}
				}	
			}
			if(isButtonDown(1,4)){	//DOWN
    1cb8:	64 e0       	ldi	r22, 0x04	; 4
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    1cc0:	88 23       	and	r24, r24
    1cc2:	09 f4       	brne	.+2      	; 0x1cc6 <debugMode+0x2c8>
    1cc4:	ba c5       	rjmp	.+2932   	; 0x283a <debugMode+0xe3c>
				TCNT4 = 0;
    1cc6:	19 82       	std	Y+1, r1	; 0x01
    1cc8:	18 82       	st	Y, r1
				HighScore1P = (HighScore1P + 999) % 1000;
    1cca:	40 91 fa 02 	lds	r20, 0x02FA	; 0x8002fa <HighScore1P>
    1cce:	50 91 fb 02 	lds	r21, 0x02FB	; 0x8002fb <HighScore1P+0x1>
    1cd2:	49 51       	subi	r20, 0x19	; 25
    1cd4:	5c 4f       	sbci	r21, 0xFC	; 252
    1cd6:	9a 01       	movw	r18, r20
    1cd8:	36 95       	lsr	r19
    1cda:	27 95       	ror	r18
    1cdc:	36 95       	lsr	r19
    1cde:	27 95       	ror	r18
    1ce0:	36 95       	lsr	r19
    1ce2:	27 95       	ror	r18
    1ce4:	a5 ec       	ldi	r26, 0xC5	; 197
    1ce6:	b0 e2       	ldi	r27, 0x20	; 32
    1ce8:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__umulhisi3>
    1cec:	92 95       	swap	r25
    1cee:	82 95       	swap	r24
    1cf0:	8f 70       	andi	r24, 0x0F	; 15
    1cf2:	89 27       	eor	r24, r25
    1cf4:	9f 70       	andi	r25, 0x0F	; 15
    1cf6:	89 27       	eor	r24, r25
    1cf8:	86 9d       	mul	r24, r6
    1cfa:	90 01       	movw	r18, r0
    1cfc:	87 9d       	mul	r24, r7
    1cfe:	30 0d       	add	r19, r0
    1d00:	96 9d       	mul	r25, r6
    1d02:	30 0d       	add	r19, r0
    1d04:	11 24       	eor	r1, r1
    1d06:	42 1b       	sub	r20, r18
    1d08:	53 0b       	sbc	r21, r19
    1d0a:	50 93 fb 02 	sts	0x02FB, r21	; 0x8002fb <HighScore1P+0x1>
    1d0e:	40 93 fa 02 	sts	0x02FA, r20	; 0x8002fa <HighScore1P>
				
				DDRB |= (1<<1);	//play tone
    1d12:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[1];
    1d14:	f7 01       	movw	r30, r14
    1d16:	b1 82       	std	Z+1, r11	; 0x01
    1d18:	a0 82       	st	Z, r10
				OCR1A = notes[1] / 2;
    1d1a:	f8 01       	movw	r30, r16
    1d1c:	d1 82       	std	Z+1, r13	; 0x01
    1d1e:	c0 82       	st	Z, r12
    1d20:	8f e5       	ldi	r24, 0x5F	; 95
    1d22:	9a ee       	ldi	r25, 0xEA	; 234
    1d24:	01 97       	sbiw	r24, 0x01	; 1
    1d26:	f1 f7       	brne	.-4      	; 0x1d24 <debugMode+0x326>
    1d28:	00 c0       	rjmp	.+0      	; 0x1d2a <debugMode+0x32c>
    1d2a:	00 00       	nop
				_delay_ms(15);
				DDRB &= ~(1<<1);
    1d2c:	21 98       	cbi	0x04, 1	; 4
				
				while(isButtonDown(1,4)){
    1d2e:	32 c0       	rjmp	.+100    	; 0x1d94 <debugMode+0x396>
					setScore(LEFT, HighScore1P);
    1d30:	60 91 fa 02 	lds	r22, 0x02FA	; 0x8002fa <HighScore1P>
    1d34:	70 91 fb 02 	lds	r23, 0x02FB	; 0x8002fb <HighScore1P+0x1>
    1d38:	80 e0       	ldi	r24, 0x00	; 0
    1d3a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
					if(TCNT4 > 6500){
    1d3e:	88 81       	ld	r24, Y
    1d40:	99 81       	ldd	r25, Y+1	; 0x01
    1d42:	85 36       	cpi	r24, 0x65	; 101
    1d44:	99 41       	sbci	r25, 0x19	; 25
    1d46:	30 f1       	brcs	.+76     	; 0x1d94 <debugMode+0x396>
						HighScore1P = (HighScore1P + 999) % 1000;
    1d48:	40 91 fa 02 	lds	r20, 0x02FA	; 0x8002fa <HighScore1P>
    1d4c:	50 91 fb 02 	lds	r21, 0x02FB	; 0x8002fb <HighScore1P+0x1>
    1d50:	49 51       	subi	r20, 0x19	; 25
    1d52:	5c 4f       	sbci	r21, 0xFC	; 252
    1d54:	9a 01       	movw	r18, r20
    1d56:	36 95       	lsr	r19
    1d58:	27 95       	ror	r18
    1d5a:	36 95       	lsr	r19
    1d5c:	27 95       	ror	r18
    1d5e:	36 95       	lsr	r19
    1d60:	27 95       	ror	r18
    1d62:	a5 ec       	ldi	r26, 0xC5	; 197
    1d64:	b0 e2       	ldi	r27, 0x20	; 32
    1d66:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__umulhisi3>
    1d6a:	92 95       	swap	r25
    1d6c:	82 95       	swap	r24
    1d6e:	8f 70       	andi	r24, 0x0F	; 15
    1d70:	89 27       	eor	r24, r25
    1d72:	9f 70       	andi	r25, 0x0F	; 15
    1d74:	89 27       	eor	r24, r25
    1d76:	86 9d       	mul	r24, r6
    1d78:	90 01       	movw	r18, r0
    1d7a:	87 9d       	mul	r24, r7
    1d7c:	30 0d       	add	r19, r0
    1d7e:	96 9d       	mul	r25, r6
    1d80:	30 0d       	add	r19, r0
    1d82:	11 24       	eor	r1, r1
    1d84:	42 1b       	sub	r20, r18
    1d86:	53 0b       	sbc	r21, r19
    1d88:	50 93 fb 02 	sts	0x02FB, r21	; 0x8002fb <HighScore1P+0x1>
    1d8c:	40 93 fa 02 	sts	0x02FA, r20	; 0x8002fa <HighScore1P>
						TCNT4 = 6250;
    1d90:	99 82       	std	Y+1, r9	; 0x01
    1d92:	88 82       	st	Y, r8
				ICR1 = notes[1];
				OCR1A = notes[1] / 2;
				_delay_ms(15);
				DDRB &= ~(1<<1);
				
				while(isButtonDown(1,4)){
    1d94:	64 e0       	ldi	r22, 0x04	; 4
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    1d9c:	81 11       	cpse	r24, r1
    1d9e:	c8 cf       	rjmp	.-112    	; 0x1d30 <debugMode+0x332>
    1da0:	4c c5       	rjmp	.+2712   	; 0x283a <debugMode+0xe3c>
			
			
			
			
			case 1:	//high score 2p
			setScoreSegment(RIGHT100, 19);	//HI-SC2
    1da2:	63 e1       	ldi	r22, 0x13	; 19
    1da4:	88 e0       	ldi	r24, 0x08	; 8
    1da6:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(RIGHT10, 1);
    1daa:	61 e0       	ldi	r22, 0x01	; 1
    1dac:	87 e0       	ldi	r24, 0x07	; 7
    1dae:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(RIGHT1, 18);
    1db2:	62 e1       	ldi	r22, 0x12	; 18
    1db4:	86 e0       	ldi	r24, 0x06	; 6
    1db6:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(TIMER100, 5);
    1dba:	65 e0       	ldi	r22, 0x05	; 5
    1dbc:	85 e0       	ldi	r24, 0x05	; 5
    1dbe:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(TIMER10, 0xC);
    1dc2:	6c e0       	ldi	r22, 0x0C	; 12
    1dc4:	84 e0       	ldi	r24, 0x04	; 4
    1dc6:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(TIMER1, 2);
    1dca:	62 e0       	ldi	r22, 0x02	; 2
    1dcc:	83 e0       	ldi	r24, 0x03	; 3
    1dce:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScore(LEFT, HighScore2P);
    1dd2:	60 91 0e 03 	lds	r22, 0x030E	; 0x80030e <HighScore2P>
    1dd6:	70 91 0f 03 	lds	r23, 0x030F	; 0x80030f <HighScore2P+0x1>
    1dda:	80 e0       	ldi	r24, 0x00	; 0
    1ddc:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
			
			setButtonLed(2,2,1);		// RESET score led
    1de0:	41 e0       	ldi	r20, 0x01	; 1
    1de2:	62 e0       	ldi	r22, 0x02	; 2
    1de4:	82 e0       	ldi	r24, 0x02	; 2
    1de6:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
			
			if(isButtonDown(2,2)){
    1dea:	62 e0       	ldi	r22, 0x02	; 2
    1dec:	82 e0       	ldi	r24, 0x02	; 2
    1dee:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    1df2:	88 23       	and	r24, r24
    1df4:	31 f1       	breq	.+76     	; 0x1e42 <debugMode+0x444>
				HighScore2P = 0;
    1df6:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <HighScore2P+0x1>
    1dfa:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <HighScore2P>
				setScore(LEFT, HighScore1P);
    1dfe:	60 91 fa 02 	lds	r22, 0x02FA	; 0x8002fa <HighScore1P>
    1e02:	70 91 fb 02 	lds	r23, 0x02FB	; 0x8002fb <HighScore1P+0x1>
    1e06:	80 e0       	ldi	r24, 0x00	; 0
    1e08:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
				DDRB |= (1<<1);	//play reset
    1e0c:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[3];
    1e0e:	8d e4       	ldi	r24, 0x4D	; 77
    1e10:	9d e0       	ldi	r25, 0x0D	; 13
    1e12:	f7 01       	movw	r30, r14
    1e14:	91 83       	std	Z+1, r25	; 0x01
    1e16:	80 83       	st	Z, r24
				OCR1A = notes[3] / 2;
    1e18:	86 ea       	ldi	r24, 0xA6	; 166
    1e1a:	96 e0       	ldi	r25, 0x06	; 6
    1e1c:	f8 01       	movw	r30, r16
    1e1e:	91 83       	std	Z+1, r25	; 0x01
    1e20:	80 83       	st	Z, r24
    1e22:	ff e7       	ldi	r31, 0x7F	; 127
    1e24:	25 eb       	ldi	r18, 0xB5	; 181
    1e26:	41 e0       	ldi	r20, 0x01	; 1
    1e28:	f1 50       	subi	r31, 0x01	; 1
    1e2a:	20 40       	sbci	r18, 0x00	; 0
    1e2c:	40 40       	sbci	r20, 0x00	; 0
    1e2e:	e1 f7       	brne	.-8      	; 0x1e28 <debugMode+0x42a>
    1e30:	00 c0       	rjmp	.+0      	; 0x1e32 <debugMode+0x434>
    1e32:	00 00       	nop
				_delay_ms(35);
				DDRB &= ~(1<<1);
    1e34:	21 98       	cbi	0x04, 1	; 4
				while(isButtonDown(2,2))
    1e36:	62 e0       	ldi	r22, 0x02	; 2
    1e38:	82 e0       	ldi	r24, 0x02	; 2
    1e3a:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    1e3e:	81 11       	cpse	r24, r1
    1e40:	fa cf       	rjmp	.-12     	; 0x1e36 <debugMode+0x438>
				{
					//wait for unpush
				}
			}
			
			if(isButtonDown(1,3)){	//UP
    1e42:	63 e0       	ldi	r22, 0x03	; 3
    1e44:	81 e0       	ldi	r24, 0x01	; 1
    1e46:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    1e4a:	88 23       	and	r24, r24
    1e4c:	09 f4       	brne	.+2      	; 0x1e50 <debugMode+0x452>
    1e4e:	6f c0       	rjmp	.+222    	; 0x1f2e <debugMode+0x530>
				TCNT4 = 0;
    1e50:	19 82       	std	Y+1, r1	; 0x01
    1e52:	18 82       	st	Y, r1
				HighScore2P = (HighScore2P + 1) % 1000;
    1e54:	40 91 0e 03 	lds	r20, 0x030E	; 0x80030e <HighScore2P>
    1e58:	50 91 0f 03 	lds	r21, 0x030F	; 0x80030f <HighScore2P+0x1>
    1e5c:	4f 5f       	subi	r20, 0xFF	; 255
    1e5e:	5f 4f       	sbci	r21, 0xFF	; 255
    1e60:	9a 01       	movw	r18, r20
    1e62:	36 95       	lsr	r19
    1e64:	27 95       	ror	r18
    1e66:	36 95       	lsr	r19
    1e68:	27 95       	ror	r18
    1e6a:	36 95       	lsr	r19
    1e6c:	27 95       	ror	r18
    1e6e:	a5 ec       	ldi	r26, 0xC5	; 197
    1e70:	b0 e2       	ldi	r27, 0x20	; 32
    1e72:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__umulhisi3>
    1e76:	92 95       	swap	r25
    1e78:	82 95       	swap	r24
    1e7a:	8f 70       	andi	r24, 0x0F	; 15
    1e7c:	89 27       	eor	r24, r25
    1e7e:	9f 70       	andi	r25, 0x0F	; 15
    1e80:	89 27       	eor	r24, r25
    1e82:	86 9d       	mul	r24, r6
    1e84:	90 01       	movw	r18, r0
    1e86:	87 9d       	mul	r24, r7
    1e88:	30 0d       	add	r19, r0
    1e8a:	96 9d       	mul	r25, r6
    1e8c:	30 0d       	add	r19, r0
    1e8e:	11 24       	eor	r1, r1
    1e90:	42 1b       	sub	r20, r18
    1e92:	53 0b       	sbc	r21, r19
    1e94:	50 93 0f 03 	sts	0x030F, r21	; 0x80030f <HighScore2P+0x1>
    1e98:	40 93 0e 03 	sts	0x030E, r20	; 0x80030e <HighScore2P>
				
				DDRB |= (1<<1);	//play tone
    1e9c:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[2];
    1e9e:	f7 01       	movw	r30, r14
    1ea0:	51 82       	std	Z+1, r5	; 0x01
    1ea2:	40 82       	st	Z, r4
				OCR1A = notes[2] / 2;
    1ea4:	47 e7       	ldi	r20, 0x77	; 119
    1ea6:	57 e0       	ldi	r21, 0x07	; 7
    1ea8:	f8 01       	movw	r30, r16
    1eaa:	51 83       	std	Z+1, r21	; 0x01
    1eac:	40 83       	st	Z, r20
    1eae:	8f e5       	ldi	r24, 0x5F	; 95
    1eb0:	9a ee       	ldi	r25, 0xEA	; 234
    1eb2:	01 97       	sbiw	r24, 0x01	; 1
    1eb4:	f1 f7       	brne	.-4      	; 0x1eb2 <debugMode+0x4b4>
    1eb6:	00 c0       	rjmp	.+0      	; 0x1eb8 <debugMode+0x4ba>
    1eb8:	00 00       	nop
				_delay_ms(15);
				DDRB &= ~(1<<1);
    1eba:	21 98       	cbi	0x04, 1	; 4
				
				while(isButtonDown(1,3)){
    1ebc:	32 c0       	rjmp	.+100    	; 0x1f22 <debugMode+0x524>
					setScore(LEFT, HighScore2P);
    1ebe:	60 91 0e 03 	lds	r22, 0x030E	; 0x80030e <HighScore2P>
    1ec2:	70 91 0f 03 	lds	r23, 0x030F	; 0x80030f <HighScore2P+0x1>
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
					if(TCNT4 > 6500){
    1ecc:	88 81       	ld	r24, Y
    1ece:	99 81       	ldd	r25, Y+1	; 0x01
    1ed0:	85 36       	cpi	r24, 0x65	; 101
    1ed2:	99 41       	sbci	r25, 0x19	; 25
    1ed4:	30 f1       	brcs	.+76     	; 0x1f22 <debugMode+0x524>
						HighScore2P = (HighScore2P + 1) % 1000;
    1ed6:	40 91 0e 03 	lds	r20, 0x030E	; 0x80030e <HighScore2P>
    1eda:	50 91 0f 03 	lds	r21, 0x030F	; 0x80030f <HighScore2P+0x1>
    1ede:	4f 5f       	subi	r20, 0xFF	; 255
    1ee0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ee2:	9a 01       	movw	r18, r20
    1ee4:	36 95       	lsr	r19
    1ee6:	27 95       	ror	r18
    1ee8:	36 95       	lsr	r19
    1eea:	27 95       	ror	r18
    1eec:	36 95       	lsr	r19
    1eee:	27 95       	ror	r18
    1ef0:	a5 ec       	ldi	r26, 0xC5	; 197
    1ef2:	b0 e2       	ldi	r27, 0x20	; 32
    1ef4:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__umulhisi3>
    1ef8:	92 95       	swap	r25
    1efa:	82 95       	swap	r24
    1efc:	8f 70       	andi	r24, 0x0F	; 15
    1efe:	89 27       	eor	r24, r25
    1f00:	9f 70       	andi	r25, 0x0F	; 15
    1f02:	89 27       	eor	r24, r25
    1f04:	86 9d       	mul	r24, r6
    1f06:	90 01       	movw	r18, r0
    1f08:	87 9d       	mul	r24, r7
    1f0a:	30 0d       	add	r19, r0
    1f0c:	96 9d       	mul	r25, r6
    1f0e:	30 0d       	add	r19, r0
    1f10:	11 24       	eor	r1, r1
    1f12:	42 1b       	sub	r20, r18
    1f14:	53 0b       	sbc	r21, r19
    1f16:	50 93 0f 03 	sts	0x030F, r21	; 0x80030f <HighScore2P+0x1>
    1f1a:	40 93 0e 03 	sts	0x030E, r20	; 0x80030e <HighScore2P>
						TCNT4 = 6250;
    1f1e:	99 82       	std	Y+1, r9	; 0x01
    1f20:	88 82       	st	Y, r8
				ICR1 = notes[2];
				OCR1A = notes[2] / 2;
				_delay_ms(15);
				DDRB &= ~(1<<1);
				
				while(isButtonDown(1,3)){
    1f22:	63 e0       	ldi	r22, 0x03	; 3
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    1f2a:	81 11       	cpse	r24, r1
    1f2c:	c8 cf       	rjmp	.-112    	; 0x1ebe <debugMode+0x4c0>
						HighScore2P = (HighScore2P + 1) % 1000;
						TCNT4 = 6250;
					}
				}
			}
			if(isButtonDown(1,4)){	//DOWN
    1f2e:	64 e0       	ldi	r22, 0x04	; 4
    1f30:	81 e0       	ldi	r24, 0x01	; 1
    1f32:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    1f36:	88 23       	and	r24, r24
    1f38:	09 f4       	brne	.+2      	; 0x1f3c <debugMode+0x53e>
    1f3a:	7f c4       	rjmp	.+2302   	; 0x283a <debugMode+0xe3c>
				TCNT4 = 0;
    1f3c:	19 82       	std	Y+1, r1	; 0x01
    1f3e:	18 82       	st	Y, r1
				HighScore2P = (HighScore2P + 999) % 1000;
    1f40:	40 91 0e 03 	lds	r20, 0x030E	; 0x80030e <HighScore2P>
    1f44:	50 91 0f 03 	lds	r21, 0x030F	; 0x80030f <HighScore2P+0x1>
    1f48:	49 51       	subi	r20, 0x19	; 25
    1f4a:	5c 4f       	sbci	r21, 0xFC	; 252
    1f4c:	9a 01       	movw	r18, r20
    1f4e:	36 95       	lsr	r19
    1f50:	27 95       	ror	r18
    1f52:	36 95       	lsr	r19
    1f54:	27 95       	ror	r18
    1f56:	36 95       	lsr	r19
    1f58:	27 95       	ror	r18
    1f5a:	a5 ec       	ldi	r26, 0xC5	; 197
    1f5c:	b0 e2       	ldi	r27, 0x20	; 32
    1f5e:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__umulhisi3>
    1f62:	92 95       	swap	r25
    1f64:	82 95       	swap	r24
    1f66:	8f 70       	andi	r24, 0x0F	; 15
    1f68:	89 27       	eor	r24, r25
    1f6a:	9f 70       	andi	r25, 0x0F	; 15
    1f6c:	89 27       	eor	r24, r25
    1f6e:	86 9d       	mul	r24, r6
    1f70:	90 01       	movw	r18, r0
    1f72:	87 9d       	mul	r24, r7
    1f74:	30 0d       	add	r19, r0
    1f76:	96 9d       	mul	r25, r6
    1f78:	30 0d       	add	r19, r0
    1f7a:	11 24       	eor	r1, r1
    1f7c:	42 1b       	sub	r20, r18
    1f7e:	53 0b       	sbc	r21, r19
    1f80:	50 93 0f 03 	sts	0x030F, r21	; 0x80030f <HighScore2P+0x1>
    1f84:	40 93 0e 03 	sts	0x030E, r20	; 0x80030e <HighScore2P>
				
				DDRB |= (1<<1);	//play tone
    1f88:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[1];
    1f8a:	f7 01       	movw	r30, r14
    1f8c:	b1 82       	std	Z+1, r11	; 0x01
    1f8e:	a0 82       	st	Z, r10
				OCR1A = notes[1] / 2;
    1f90:	f8 01       	movw	r30, r16
    1f92:	d1 82       	std	Z+1, r13	; 0x01
    1f94:	c0 82       	st	Z, r12
    1f96:	8f e5       	ldi	r24, 0x5F	; 95
    1f98:	9a ee       	ldi	r25, 0xEA	; 234
    1f9a:	01 97       	sbiw	r24, 0x01	; 1
    1f9c:	f1 f7       	brne	.-4      	; 0x1f9a <debugMode+0x59c>
    1f9e:	00 c0       	rjmp	.+0      	; 0x1fa0 <debugMode+0x5a2>
    1fa0:	00 00       	nop
				_delay_ms(15);
				DDRB &= ~(1<<1);
    1fa2:	21 98       	cbi	0x04, 1	; 4
				
				while(isButtonDown(1,4)){
    1fa4:	32 c0       	rjmp	.+100    	; 0x200a <debugMode+0x60c>
					setScore(LEFT, HighScore2P);
    1fa6:	60 91 0e 03 	lds	r22, 0x030E	; 0x80030e <HighScore2P>
    1faa:	70 91 0f 03 	lds	r23, 0x030F	; 0x80030f <HighScore2P+0x1>
    1fae:	80 e0       	ldi	r24, 0x00	; 0
    1fb0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
					if(TCNT4 > 6500){
    1fb4:	88 81       	ld	r24, Y
    1fb6:	99 81       	ldd	r25, Y+1	; 0x01
    1fb8:	85 36       	cpi	r24, 0x65	; 101
    1fba:	99 41       	sbci	r25, 0x19	; 25
    1fbc:	30 f1       	brcs	.+76     	; 0x200a <debugMode+0x60c>
						HighScore2P = (HighScore2P + 999) % 1000;
    1fbe:	40 91 0e 03 	lds	r20, 0x030E	; 0x80030e <HighScore2P>
    1fc2:	50 91 0f 03 	lds	r21, 0x030F	; 0x80030f <HighScore2P+0x1>
    1fc6:	49 51       	subi	r20, 0x19	; 25
    1fc8:	5c 4f       	sbci	r21, 0xFC	; 252
    1fca:	9a 01       	movw	r18, r20
    1fcc:	36 95       	lsr	r19
    1fce:	27 95       	ror	r18
    1fd0:	36 95       	lsr	r19
    1fd2:	27 95       	ror	r18
    1fd4:	36 95       	lsr	r19
    1fd6:	27 95       	ror	r18
    1fd8:	a5 ec       	ldi	r26, 0xC5	; 197
    1fda:	b0 e2       	ldi	r27, 0x20	; 32
    1fdc:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__umulhisi3>
    1fe0:	92 95       	swap	r25
    1fe2:	82 95       	swap	r24
    1fe4:	8f 70       	andi	r24, 0x0F	; 15
    1fe6:	89 27       	eor	r24, r25
    1fe8:	9f 70       	andi	r25, 0x0F	; 15
    1fea:	89 27       	eor	r24, r25
    1fec:	86 9d       	mul	r24, r6
    1fee:	90 01       	movw	r18, r0
    1ff0:	87 9d       	mul	r24, r7
    1ff2:	30 0d       	add	r19, r0
    1ff4:	96 9d       	mul	r25, r6
    1ff6:	30 0d       	add	r19, r0
    1ff8:	11 24       	eor	r1, r1
    1ffa:	42 1b       	sub	r20, r18
    1ffc:	53 0b       	sbc	r21, r19
    1ffe:	50 93 0f 03 	sts	0x030F, r21	; 0x80030f <HighScore2P+0x1>
    2002:	40 93 0e 03 	sts	0x030E, r20	; 0x80030e <HighScore2P>
						TCNT4 = 6250;
    2006:	99 82       	std	Y+1, r9	; 0x01
    2008:	88 82       	st	Y, r8
				ICR1 = notes[1];
				OCR1A = notes[1] / 2;
				_delay_ms(15);
				DDRB &= ~(1<<1);
				
				while(isButtonDown(1,4)){
    200a:	64 e0       	ldi	r22, 0x04	; 4
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    2012:	81 11       	cpse	r24, r1
    2014:	c8 cf       	rjmp	.-112    	; 0x1fa6 <debugMode+0x5a8>
    2016:	11 c4       	rjmp	.+2082   	; 0x283a <debugMode+0xe3c>
			break;		//*************END HIGH SCORE 2p
			
			
			
			case 2:	//round time
			setScoreSegment(RIGHT100, 20);	//rnd tn
    2018:	64 e1       	ldi	r22, 0x14	; 20
    201a:	88 e0       	ldi	r24, 0x08	; 8
    201c:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(RIGHT10, 21);
    2020:	65 e1       	ldi	r22, 0x15	; 21
    2022:	87 e0       	ldi	r24, 0x07	; 7
    2024:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(RIGHT1, 0xd);
    2028:	6d e0       	ldi	r22, 0x0D	; 13
    202a:	86 e0       	ldi	r24, 0x06	; 6
    202c:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(TIMER100, 16);
    2030:	60 e1       	ldi	r22, 0x10	; 16
    2032:	85 e0       	ldi	r24, 0x05	; 5
    2034:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(TIMER10, 22);
    2038:	66 e1       	ldi	r22, 0x16	; 22
    203a:	84 e0       	ldi	r24, 0x04	; 4
    203c:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(TIMER1, 21);
    2040:	65 e1       	ldi	r22, 0x15	; 21
    2042:	83 e0       	ldi	r24, 0x03	; 3
    2044:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScore(LEFT, RoundTime);
    2048:	60 91 0a 03 	lds	r22, 0x030A	; 0x80030a <RoundTime>
    204c:	70 e0       	ldi	r23, 0x00	; 0
    204e:	80 e0       	ldi	r24, 0x00	; 0
    2050:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
			
			setButtonLed(2,2,1);		// RESET score led
    2054:	41 e0       	ldi	r20, 0x01	; 1
    2056:	62 e0       	ldi	r22, 0x02	; 2
    2058:	82 e0       	ldi	r24, 0x02	; 2
    205a:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
			
			if(isButtonDown(2,2)){
    205e:	62 e0       	ldi	r22, 0x02	; 2
    2060:	82 e0       	ldi	r24, 0x02	; 2
    2062:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    2066:	88 23       	and	r24, r24
    2068:	19 f1       	breq	.+70     	; 0x20b0 <debugMode+0x6b2>
				RoundTime = 40;
    206a:	88 e2       	ldi	r24, 0x28	; 40
    206c:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <RoundTime>
				setScore(LEFT, RoundTime);
    2070:	68 e2       	ldi	r22, 0x28	; 40
    2072:	70 e0       	ldi	r23, 0x00	; 0
    2074:	80 e0       	ldi	r24, 0x00	; 0
    2076:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
				DDRB |= (1<<1);	//play reset
    207a:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[3];
    207c:	8d e4       	ldi	r24, 0x4D	; 77
    207e:	9d e0       	ldi	r25, 0x0D	; 13
    2080:	f7 01       	movw	r30, r14
    2082:	91 83       	std	Z+1, r25	; 0x01
    2084:	80 83       	st	Z, r24
				OCR1A = notes[3] / 2;
    2086:	86 ea       	ldi	r24, 0xA6	; 166
    2088:	96 e0       	ldi	r25, 0x06	; 6
    208a:	f8 01       	movw	r30, r16
    208c:	91 83       	std	Z+1, r25	; 0x01
    208e:	80 83       	st	Z, r24
    2090:	ff e7       	ldi	r31, 0x7F	; 127
    2092:	25 eb       	ldi	r18, 0xB5	; 181
    2094:	41 e0       	ldi	r20, 0x01	; 1
    2096:	f1 50       	subi	r31, 0x01	; 1
    2098:	20 40       	sbci	r18, 0x00	; 0
    209a:	40 40       	sbci	r20, 0x00	; 0
    209c:	e1 f7       	brne	.-8      	; 0x2096 <debugMode+0x698>
    209e:	00 c0       	rjmp	.+0      	; 0x20a0 <debugMode+0x6a2>
    20a0:	00 00       	nop
				_delay_ms(35);
				DDRB &= ~(1<<1);
    20a2:	21 98       	cbi	0x04, 1	; 4
				while(isButtonDown(2,2))
    20a4:	62 e0       	ldi	r22, 0x02	; 2
    20a6:	82 e0       	ldi	r24, 0x02	; 2
    20a8:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    20ac:	81 11       	cpse	r24, r1
    20ae:	fa cf       	rjmp	.-12     	; 0x20a4 <debugMode+0x6a6>
				{
					//wait for unpush
				}
			}
			
			if(isButtonDown(1,3)){	//UP
    20b0:	63 e0       	ldi	r22, 0x03	; 3
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    20b8:	88 23       	and	r24, r24
    20ba:	81 f1       	breq	.+96     	; 0x211c <debugMode+0x71e>
				TCNT4 = 0;
    20bc:	19 82       	std	Y+1, r1	; 0x01
    20be:	18 82       	st	Y, r1
				RoundTime = (RoundTime + 1);
    20c0:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <RoundTime>
    20c4:	8f 5f       	subi	r24, 0xFF	; 255
    20c6:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <RoundTime>
				
				DDRB |= (1<<1);	//play tone
    20ca:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[2];
    20cc:	f7 01       	movw	r30, r14
    20ce:	51 82       	std	Z+1, r5	; 0x01
    20d0:	40 82       	st	Z, r4
				OCR1A = notes[2] / 2;
    20d2:	47 e7       	ldi	r20, 0x77	; 119
    20d4:	57 e0       	ldi	r21, 0x07	; 7
    20d6:	f8 01       	movw	r30, r16
    20d8:	51 83       	std	Z+1, r21	; 0x01
    20da:	40 83       	st	Z, r20
    20dc:	8f e5       	ldi	r24, 0x5F	; 95
    20de:	9a ee       	ldi	r25, 0xEA	; 234
    20e0:	01 97       	sbiw	r24, 0x01	; 1
    20e2:	f1 f7       	brne	.-4      	; 0x20e0 <debugMode+0x6e2>
    20e4:	00 c0       	rjmp	.+0      	; 0x20e6 <debugMode+0x6e8>
    20e6:	00 00       	nop
				_delay_ms(15);
				DDRB &= ~(1<<1);
    20e8:	21 98       	cbi	0x04, 1	; 4
				
				while(isButtonDown(1,3)){
    20ea:	12 c0       	rjmp	.+36     	; 0x2110 <debugMode+0x712>
					setScore(LEFT, RoundTime);
    20ec:	60 91 0a 03 	lds	r22, 0x030A	; 0x80030a <RoundTime>
    20f0:	70 e0       	ldi	r23, 0x00	; 0
    20f2:	80 e0       	ldi	r24, 0x00	; 0
    20f4:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
					if(TCNT4 > 6500){
    20f8:	88 81       	ld	r24, Y
    20fa:	99 81       	ldd	r25, Y+1	; 0x01
    20fc:	85 36       	cpi	r24, 0x65	; 101
    20fe:	99 41       	sbci	r25, 0x19	; 25
    2100:	38 f0       	brcs	.+14     	; 0x2110 <debugMode+0x712>
						RoundTime = (RoundTime + 1);
    2102:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <RoundTime>
    2106:	8f 5f       	subi	r24, 0xFF	; 255
    2108:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <RoundTime>
						TCNT4 = 6250;
    210c:	99 82       	std	Y+1, r9	; 0x01
    210e:	88 82       	st	Y, r8
				ICR1 = notes[2];
				OCR1A = notes[2] / 2;
				_delay_ms(15);
				DDRB &= ~(1<<1);
				
				while(isButtonDown(1,3)){
    2110:	63 e0       	ldi	r22, 0x03	; 3
    2112:	81 e0       	ldi	r24, 0x01	; 1
    2114:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    2118:	81 11       	cpse	r24, r1
    211a:	e8 cf       	rjmp	.-48     	; 0x20ec <debugMode+0x6ee>
						RoundTime = (RoundTime + 1);
						TCNT4 = 6250;
					}
				}
			}
			if(isButtonDown(1,4)){	//DOWN
    211c:	64 e0       	ldi	r22, 0x04	; 4
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    2124:	88 23       	and	r24, r24
    2126:	09 f4       	brne	.+2      	; 0x212a <debugMode+0x72c>
    2128:	88 c3       	rjmp	.+1808   	; 0x283a <debugMode+0xe3c>
				TCNT4 = 0;
    212a:	19 82       	std	Y+1, r1	; 0x01
    212c:	18 82       	st	Y, r1
				RoundTime = (RoundTime + 255);
    212e:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <RoundTime>
    2132:	81 50       	subi	r24, 0x01	; 1
    2134:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <RoundTime>
				
				DDRB |= (1<<1);	//play tone
    2138:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[1];
    213a:	f7 01       	movw	r30, r14
    213c:	b1 82       	std	Z+1, r11	; 0x01
    213e:	a0 82       	st	Z, r10
				OCR1A = notes[1] / 2;
    2140:	f8 01       	movw	r30, r16
    2142:	d1 82       	std	Z+1, r13	; 0x01
    2144:	c0 82       	st	Z, r12
    2146:	8f e5       	ldi	r24, 0x5F	; 95
    2148:	9a ee       	ldi	r25, 0xEA	; 234
    214a:	01 97       	sbiw	r24, 0x01	; 1
    214c:	f1 f7       	brne	.-4      	; 0x214a <debugMode+0x74c>
    214e:	00 c0       	rjmp	.+0      	; 0x2150 <debugMode+0x752>
    2150:	00 00       	nop
				_delay_ms(15);
				DDRB &= ~(1<<1);
    2152:	21 98       	cbi	0x04, 1	; 4
				
				while(isButtonDown(1,4)){
    2154:	12 c0       	rjmp	.+36     	; 0x217a <debugMode+0x77c>
					setScore(LEFT, RoundTime);
    2156:	60 91 0a 03 	lds	r22, 0x030A	; 0x80030a <RoundTime>
    215a:	70 e0       	ldi	r23, 0x00	; 0
    215c:	80 e0       	ldi	r24, 0x00	; 0
    215e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
					if(TCNT4 > 6500){
    2162:	88 81       	ld	r24, Y
    2164:	99 81       	ldd	r25, Y+1	; 0x01
    2166:	85 36       	cpi	r24, 0x65	; 101
    2168:	99 41       	sbci	r25, 0x19	; 25
    216a:	38 f0       	brcs	.+14     	; 0x217a <debugMode+0x77c>
						RoundTime = (RoundTime + 255);
    216c:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <RoundTime>
    2170:	81 50       	subi	r24, 0x01	; 1
    2172:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <RoundTime>
						TCNT4 = 6250;
    2176:	99 82       	std	Y+1, r9	; 0x01
    2178:	88 82       	st	Y, r8
				ICR1 = notes[1];
				OCR1A = notes[1] / 2;
				_delay_ms(15);
				DDRB &= ~(1<<1);
				
				while(isButtonDown(1,4)){
    217a:	64 e0       	ldi	r22, 0x04	; 4
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    2182:	81 11       	cpse	r24, r1
    2184:	e8 cf       	rjmp	.-48     	; 0x2156 <debugMode+0x758>
    2186:	59 c3       	rjmp	.+1714   	; 0x283a <debugMode+0xe3c>
			
			
			
			
			case 3:	//bonus time
			setScoreSegment(RIGHT100, 0xb);	//rnd tn
    2188:	6b e0       	ldi	r22, 0x0B	; 11
    218a:	88 e0       	ldi	r24, 0x08	; 8
    218c:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(RIGHT10, 21);
    2190:	65 e1       	ldi	r22, 0x15	; 21
    2192:	87 e0       	ldi	r24, 0x07	; 7
    2194:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(RIGHT1, 5);
    2198:	65 e0       	ldi	r22, 0x05	; 5
    219a:	86 e0       	ldi	r24, 0x06	; 6
    219c:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(TIMER100, 16);
    21a0:	60 e1       	ldi	r22, 0x10	; 16
    21a2:	85 e0       	ldi	r24, 0x05	; 5
    21a4:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(TIMER10, 22);
    21a8:	66 e1       	ldi	r22, 0x16	; 22
    21aa:	84 e0       	ldi	r24, 0x04	; 4
    21ac:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(TIMER1, 21);
    21b0:	65 e1       	ldi	r22, 0x15	; 21
    21b2:	83 e0       	ldi	r24, 0x03	; 3
    21b4:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScore(LEFT, BonusTime);
    21b8:	60 91 ed 02 	lds	r22, 0x02ED	; 0x8002ed <BonusTime>
    21bc:	70 e0       	ldi	r23, 0x00	; 0
    21be:	80 e0       	ldi	r24, 0x00	; 0
    21c0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
			
			setButtonLed(2,2,1);		// RESET score led
    21c4:	41 e0       	ldi	r20, 0x01	; 1
    21c6:	62 e0       	ldi	r22, 0x02	; 2
    21c8:	82 e0       	ldi	r24, 0x02	; 2
    21ca:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
			
			if(isButtonDown(2,2)){
    21ce:	62 e0       	ldi	r22, 0x02	; 2
    21d0:	82 e0       	ldi	r24, 0x02	; 2
    21d2:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    21d6:	88 23       	and	r24, r24
    21d8:	19 f1       	breq	.+70     	; 0x2220 <debugMode+0x822>
				BonusTime = 3;
    21da:	83 e0       	ldi	r24, 0x03	; 3
    21dc:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <BonusTime>
				setScore(LEFT, BonusTime);
    21e0:	63 e0       	ldi	r22, 0x03	; 3
    21e2:	70 e0       	ldi	r23, 0x00	; 0
    21e4:	80 e0       	ldi	r24, 0x00	; 0
    21e6:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
				DDRB |= (1<<1);	//play reset
    21ea:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[3];
    21ec:	8d e4       	ldi	r24, 0x4D	; 77
    21ee:	9d e0       	ldi	r25, 0x0D	; 13
    21f0:	f7 01       	movw	r30, r14
    21f2:	91 83       	std	Z+1, r25	; 0x01
    21f4:	80 83       	st	Z, r24
				OCR1A = notes[3] / 2;
    21f6:	86 ea       	ldi	r24, 0xA6	; 166
    21f8:	96 e0       	ldi	r25, 0x06	; 6
    21fa:	f8 01       	movw	r30, r16
    21fc:	91 83       	std	Z+1, r25	; 0x01
    21fe:	80 83       	st	Z, r24
    2200:	ff e7       	ldi	r31, 0x7F	; 127
    2202:	25 eb       	ldi	r18, 0xB5	; 181
    2204:	41 e0       	ldi	r20, 0x01	; 1
    2206:	f1 50       	subi	r31, 0x01	; 1
    2208:	20 40       	sbci	r18, 0x00	; 0
    220a:	40 40       	sbci	r20, 0x00	; 0
    220c:	e1 f7       	brne	.-8      	; 0x2206 <debugMode+0x808>
    220e:	00 c0       	rjmp	.+0      	; 0x2210 <debugMode+0x812>
    2210:	00 00       	nop
				_delay_ms(35);
				DDRB &= ~(1<<1);
    2212:	21 98       	cbi	0x04, 1	; 4
				while(isButtonDown(2,2))
    2214:	62 e0       	ldi	r22, 0x02	; 2
    2216:	82 e0       	ldi	r24, 0x02	; 2
    2218:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    221c:	81 11       	cpse	r24, r1
    221e:	fa cf       	rjmp	.-12     	; 0x2214 <debugMode+0x816>
				{
					//wait for unpush
				}
			}
			
			if(isButtonDown(1,3)){	//UP
    2220:	63 e0       	ldi	r22, 0x03	; 3
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    2228:	88 23       	and	r24, r24
    222a:	81 f1       	breq	.+96     	; 0x228c <debugMode+0x88e>
				TCNT4 = 0;
    222c:	19 82       	std	Y+1, r1	; 0x01
    222e:	18 82       	st	Y, r1
				BonusTime = (BonusTime + 1);
    2230:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <BonusTime>
    2234:	8f 5f       	subi	r24, 0xFF	; 255
    2236:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <BonusTime>
				
				DDRB |= (1<<1);	//play tone
    223a:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[2];
    223c:	f7 01       	movw	r30, r14
    223e:	51 82       	std	Z+1, r5	; 0x01
    2240:	40 82       	st	Z, r4
				OCR1A = notes[2] / 2;
    2242:	47 e7       	ldi	r20, 0x77	; 119
    2244:	57 e0       	ldi	r21, 0x07	; 7
    2246:	f8 01       	movw	r30, r16
    2248:	51 83       	std	Z+1, r21	; 0x01
    224a:	40 83       	st	Z, r20
    224c:	8f e5       	ldi	r24, 0x5F	; 95
    224e:	9a ee       	ldi	r25, 0xEA	; 234
    2250:	01 97       	sbiw	r24, 0x01	; 1
    2252:	f1 f7       	brne	.-4      	; 0x2250 <debugMode+0x852>
    2254:	00 c0       	rjmp	.+0      	; 0x2256 <debugMode+0x858>
    2256:	00 00       	nop
				_delay_ms(15);
				DDRB &= ~(1<<1);
    2258:	21 98       	cbi	0x04, 1	; 4
				
				while(isButtonDown(1,3)){
    225a:	12 c0       	rjmp	.+36     	; 0x2280 <debugMode+0x882>
					setScore(LEFT, BonusTime);
    225c:	60 91 ed 02 	lds	r22, 0x02ED	; 0x8002ed <BonusTime>
    2260:	70 e0       	ldi	r23, 0x00	; 0
    2262:	80 e0       	ldi	r24, 0x00	; 0
    2264:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
					if(TCNT4 > 6500){
    2268:	88 81       	ld	r24, Y
    226a:	99 81       	ldd	r25, Y+1	; 0x01
    226c:	85 36       	cpi	r24, 0x65	; 101
    226e:	99 41       	sbci	r25, 0x19	; 25
    2270:	38 f0       	brcs	.+14     	; 0x2280 <debugMode+0x882>
						BonusTime = (BonusTime + 1);
    2272:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <BonusTime>
    2276:	8f 5f       	subi	r24, 0xFF	; 255
    2278:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <BonusTime>
						TCNT4 = 6250;
    227c:	99 82       	std	Y+1, r9	; 0x01
    227e:	88 82       	st	Y, r8
				ICR1 = notes[2];
				OCR1A = notes[2] / 2;
				_delay_ms(15);
				DDRB &= ~(1<<1);
				
				while(isButtonDown(1,3)){
    2280:	63 e0       	ldi	r22, 0x03	; 3
    2282:	81 e0       	ldi	r24, 0x01	; 1
    2284:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    2288:	81 11       	cpse	r24, r1
    228a:	e8 cf       	rjmp	.-48     	; 0x225c <debugMode+0x85e>
						BonusTime = (BonusTime + 1);
						TCNT4 = 6250;
					}
				}
			}
			if(isButtonDown(1,4)){	//DOWN
    228c:	64 e0       	ldi	r22, 0x04	; 4
    228e:	81 e0       	ldi	r24, 0x01	; 1
    2290:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    2294:	88 23       	and	r24, r24
    2296:	09 f4       	brne	.+2      	; 0x229a <debugMode+0x89c>
    2298:	d0 c2       	rjmp	.+1440   	; 0x283a <debugMode+0xe3c>
				TCNT4 = 0;
    229a:	19 82       	std	Y+1, r1	; 0x01
    229c:	18 82       	st	Y, r1
				BonusTime = (BonusTime + 255);
    229e:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <BonusTime>
    22a2:	81 50       	subi	r24, 0x01	; 1
    22a4:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <BonusTime>
				
				DDRB |= (1<<1);	//play tone
    22a8:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[1];
    22aa:	f7 01       	movw	r30, r14
    22ac:	b1 82       	std	Z+1, r11	; 0x01
    22ae:	a0 82       	st	Z, r10
				OCR1A = notes[1] / 2;
    22b0:	f8 01       	movw	r30, r16
    22b2:	d1 82       	std	Z+1, r13	; 0x01
    22b4:	c0 82       	st	Z, r12
    22b6:	8f e5       	ldi	r24, 0x5F	; 95
    22b8:	9a ee       	ldi	r25, 0xEA	; 234
    22ba:	01 97       	sbiw	r24, 0x01	; 1
    22bc:	f1 f7       	brne	.-4      	; 0x22ba <debugMode+0x8bc>
    22be:	00 c0       	rjmp	.+0      	; 0x22c0 <debugMode+0x8c2>
    22c0:	00 00       	nop
				_delay_ms(15);
				DDRB &= ~(1<<1);
    22c2:	21 98       	cbi	0x04, 1	; 4
				
				while(isButtonDown(1,4)){
    22c4:	12 c0       	rjmp	.+36     	; 0x22ea <debugMode+0x8ec>
					setScore(LEFT, BonusTime);
    22c6:	60 91 ed 02 	lds	r22, 0x02ED	; 0x8002ed <BonusTime>
    22ca:	70 e0       	ldi	r23, 0x00	; 0
    22cc:	80 e0       	ldi	r24, 0x00	; 0
    22ce:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
					if(TCNT4 > 6500){
    22d2:	88 81       	ld	r24, Y
    22d4:	99 81       	ldd	r25, Y+1	; 0x01
    22d6:	85 36       	cpi	r24, 0x65	; 101
    22d8:	99 41       	sbci	r25, 0x19	; 25
    22da:	38 f0       	brcs	.+14     	; 0x22ea <debugMode+0x8ec>
						BonusTime = (BonusTime + 255);
    22dc:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <BonusTime>
    22e0:	81 50       	subi	r24, 0x01	; 1
    22e2:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <BonusTime>
						TCNT4 = 6250;
    22e6:	99 82       	std	Y+1, r9	; 0x01
    22e8:	88 82       	st	Y, r8
				ICR1 = notes[1];
				OCR1A = notes[1] / 2;
				_delay_ms(15);
				DDRB &= ~(1<<1);
				
				while(isButtonDown(1,4)){
    22ea:	64 e0       	ldi	r22, 0x04	; 4
    22ec:	81 e0       	ldi	r24, 0x01	; 1
    22ee:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    22f2:	81 11       	cpse	r24, r1
    22f4:	e8 cf       	rjmp	.-48     	; 0x22c6 <debugMode+0x8c8>
    22f6:	a1 c2       	rjmp	.+1346   	; 0x283a <debugMode+0xe3c>
			
			
			
			
			case 4:	//multiplier ticks
			setScoreSegment(RIGHT100, 0xE);	//3ul tck
    22f8:	6e e0       	ldi	r22, 0x0E	; 14
    22fa:	88 e0       	ldi	r24, 0x08	; 8
    22fc:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(RIGHT10, 23);
    2300:	67 e1       	ldi	r22, 0x17	; 23
    2302:	87 e0       	ldi	r24, 0x07	; 7
    2304:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(RIGHT1, 1);
    2308:	61 e0       	ldi	r22, 0x01	; 1
    230a:	86 e0       	ldi	r24, 0x06	; 6
    230c:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(TIMER100, 22);
    2310:	66 e1       	ldi	r22, 0x16	; 22
    2312:	85 e0       	ldi	r24, 0x05	; 5
    2314:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(TIMER10, 0xc);
    2318:	6c e0       	ldi	r22, 0x0C	; 12
    231a:	84 e0       	ldi	r24, 0x04	; 4
    231c:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(TIMER1, 0xc);
    2320:	6c e0       	ldi	r22, 0x0C	; 12
    2322:	83 e0       	ldi	r24, 0x03	; 3
    2324:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScore(LEFT, MultTimeKill);
    2328:	60 91 0c 03 	lds	r22, 0x030C	; 0x80030c <MultTimeKill>
    232c:	70 91 0d 03 	lds	r23, 0x030D	; 0x80030d <MultTimeKill+0x1>
    2330:	80 e0       	ldi	r24, 0x00	; 0
    2332:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
			
			setButtonLed(2,2,1);		// RESET score led
    2336:	41 e0       	ldi	r20, 0x01	; 1
    2338:	62 e0       	ldi	r22, 0x02	; 2
    233a:	82 e0       	ldi	r24, 0x02	; 2
    233c:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
			
			if(isButtonDown(2,2)){
    2340:	62 e0       	ldi	r22, 0x02	; 2
    2342:	82 e0       	ldi	r24, 0x02	; 2
    2344:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    2348:	88 23       	and	r24, r24
    234a:	31 f1       	breq	.+76     	; 0x2398 <debugMode+0x99a>
				MultTimeKill = 999;
    234c:	87 ee       	ldi	r24, 0xE7	; 231
    234e:	93 e0       	ldi	r25, 0x03	; 3
    2350:	90 93 0d 03 	sts	0x030D, r25	; 0x80030d <MultTimeKill+0x1>
    2354:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <MultTimeKill>
				setScore(LEFT, MultTimeKill);
    2358:	67 ee       	ldi	r22, 0xE7	; 231
    235a:	73 e0       	ldi	r23, 0x03	; 3
    235c:	80 e0       	ldi	r24, 0x00	; 0
    235e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
				DDRB |= (1<<1);	//play reset
    2362:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[3];
    2364:	8d e4       	ldi	r24, 0x4D	; 77
    2366:	9d e0       	ldi	r25, 0x0D	; 13
    2368:	f7 01       	movw	r30, r14
    236a:	91 83       	std	Z+1, r25	; 0x01
    236c:	80 83       	st	Z, r24
				OCR1A = notes[3] / 2;
    236e:	86 ea       	ldi	r24, 0xA6	; 166
    2370:	96 e0       	ldi	r25, 0x06	; 6
    2372:	f8 01       	movw	r30, r16
    2374:	91 83       	std	Z+1, r25	; 0x01
    2376:	80 83       	st	Z, r24
    2378:	ff e7       	ldi	r31, 0x7F	; 127
    237a:	25 eb       	ldi	r18, 0xB5	; 181
    237c:	41 e0       	ldi	r20, 0x01	; 1
    237e:	f1 50       	subi	r31, 0x01	; 1
    2380:	20 40       	sbci	r18, 0x00	; 0
    2382:	40 40       	sbci	r20, 0x00	; 0
    2384:	e1 f7       	brne	.-8      	; 0x237e <debugMode+0x980>
    2386:	00 c0       	rjmp	.+0      	; 0x2388 <debugMode+0x98a>
    2388:	00 00       	nop
				_delay_ms(35);
				DDRB &= ~(1<<1);
    238a:	21 98       	cbi	0x04, 1	; 4
				while(isButtonDown(2,2))
    238c:	62 e0       	ldi	r22, 0x02	; 2
    238e:	82 e0       	ldi	r24, 0x02	; 2
    2390:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    2394:	81 11       	cpse	r24, r1
    2396:	fa cf       	rjmp	.-12     	; 0x238c <debugMode+0x98e>
				{
					//wait for unpush
				}
			}
			
			if(isButtonDown(1,3)){	//UP
    2398:	63 e0       	ldi	r22, 0x03	; 3
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    23a0:	88 23       	and	r24, r24
    23a2:	09 f4       	brne	.+2      	; 0x23a6 <debugMode+0x9a8>
    23a4:	6f c0       	rjmp	.+222    	; 0x2484 <debugMode+0xa86>
				TCNT4 = 0;
    23a6:	19 82       	std	Y+1, r1	; 0x01
    23a8:	18 82       	st	Y, r1
				MultTimeKill = (MultTimeKill + 1) % 1000;
    23aa:	40 91 0c 03 	lds	r20, 0x030C	; 0x80030c <MultTimeKill>
    23ae:	50 91 0d 03 	lds	r21, 0x030D	; 0x80030d <MultTimeKill+0x1>
    23b2:	4f 5f       	subi	r20, 0xFF	; 255
    23b4:	5f 4f       	sbci	r21, 0xFF	; 255
    23b6:	9a 01       	movw	r18, r20
    23b8:	36 95       	lsr	r19
    23ba:	27 95       	ror	r18
    23bc:	36 95       	lsr	r19
    23be:	27 95       	ror	r18
    23c0:	36 95       	lsr	r19
    23c2:	27 95       	ror	r18
    23c4:	a5 ec       	ldi	r26, 0xC5	; 197
    23c6:	b0 e2       	ldi	r27, 0x20	; 32
    23c8:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__umulhisi3>
    23cc:	92 95       	swap	r25
    23ce:	82 95       	swap	r24
    23d0:	8f 70       	andi	r24, 0x0F	; 15
    23d2:	89 27       	eor	r24, r25
    23d4:	9f 70       	andi	r25, 0x0F	; 15
    23d6:	89 27       	eor	r24, r25
    23d8:	86 9d       	mul	r24, r6
    23da:	90 01       	movw	r18, r0
    23dc:	87 9d       	mul	r24, r7
    23de:	30 0d       	add	r19, r0
    23e0:	96 9d       	mul	r25, r6
    23e2:	30 0d       	add	r19, r0
    23e4:	11 24       	eor	r1, r1
    23e6:	42 1b       	sub	r20, r18
    23e8:	53 0b       	sbc	r21, r19
    23ea:	50 93 0d 03 	sts	0x030D, r21	; 0x80030d <MultTimeKill+0x1>
    23ee:	40 93 0c 03 	sts	0x030C, r20	; 0x80030c <MultTimeKill>
				
				DDRB |= (1<<1);	//play tone
    23f2:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[2];
    23f4:	f7 01       	movw	r30, r14
    23f6:	51 82       	std	Z+1, r5	; 0x01
    23f8:	40 82       	st	Z, r4
				OCR1A = notes[2] / 2;
    23fa:	47 e7       	ldi	r20, 0x77	; 119
    23fc:	57 e0       	ldi	r21, 0x07	; 7
    23fe:	f8 01       	movw	r30, r16
    2400:	51 83       	std	Z+1, r21	; 0x01
    2402:	40 83       	st	Z, r20
    2404:	8f e5       	ldi	r24, 0x5F	; 95
    2406:	9a ee       	ldi	r25, 0xEA	; 234
    2408:	01 97       	sbiw	r24, 0x01	; 1
    240a:	f1 f7       	brne	.-4      	; 0x2408 <debugMode+0xa0a>
    240c:	00 c0       	rjmp	.+0      	; 0x240e <debugMode+0xa10>
    240e:	00 00       	nop
				_delay_ms(15);
				DDRB &= ~(1<<1);
    2410:	21 98       	cbi	0x04, 1	; 4
				
				while(isButtonDown(1,3)){
    2412:	32 c0       	rjmp	.+100    	; 0x2478 <debugMode+0xa7a>
					setScore(LEFT, MultTimeKill);
    2414:	60 91 0c 03 	lds	r22, 0x030C	; 0x80030c <MultTimeKill>
    2418:	70 91 0d 03 	lds	r23, 0x030D	; 0x80030d <MultTimeKill+0x1>
    241c:	80 e0       	ldi	r24, 0x00	; 0
    241e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
					if(TCNT4 > 6500){
    2422:	88 81       	ld	r24, Y
    2424:	99 81       	ldd	r25, Y+1	; 0x01
    2426:	85 36       	cpi	r24, 0x65	; 101
    2428:	99 41       	sbci	r25, 0x19	; 25
    242a:	30 f1       	brcs	.+76     	; 0x2478 <debugMode+0xa7a>
						MultTimeKill = (MultTimeKill + 1) % 1000;
    242c:	40 91 0c 03 	lds	r20, 0x030C	; 0x80030c <MultTimeKill>
    2430:	50 91 0d 03 	lds	r21, 0x030D	; 0x80030d <MultTimeKill+0x1>
    2434:	4f 5f       	subi	r20, 0xFF	; 255
    2436:	5f 4f       	sbci	r21, 0xFF	; 255
    2438:	9a 01       	movw	r18, r20
    243a:	36 95       	lsr	r19
    243c:	27 95       	ror	r18
    243e:	36 95       	lsr	r19
    2440:	27 95       	ror	r18
    2442:	36 95       	lsr	r19
    2444:	27 95       	ror	r18
    2446:	a5 ec       	ldi	r26, 0xC5	; 197
    2448:	b0 e2       	ldi	r27, 0x20	; 32
    244a:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__umulhisi3>
    244e:	92 95       	swap	r25
    2450:	82 95       	swap	r24
    2452:	8f 70       	andi	r24, 0x0F	; 15
    2454:	89 27       	eor	r24, r25
    2456:	9f 70       	andi	r25, 0x0F	; 15
    2458:	89 27       	eor	r24, r25
    245a:	86 9d       	mul	r24, r6
    245c:	90 01       	movw	r18, r0
    245e:	87 9d       	mul	r24, r7
    2460:	30 0d       	add	r19, r0
    2462:	96 9d       	mul	r25, r6
    2464:	30 0d       	add	r19, r0
    2466:	11 24       	eor	r1, r1
    2468:	42 1b       	sub	r20, r18
    246a:	53 0b       	sbc	r21, r19
    246c:	50 93 0d 03 	sts	0x030D, r21	; 0x80030d <MultTimeKill+0x1>
    2470:	40 93 0c 03 	sts	0x030C, r20	; 0x80030c <MultTimeKill>
						TCNT4 = 6250;
    2474:	99 82       	std	Y+1, r9	; 0x01
    2476:	88 82       	st	Y, r8
				ICR1 = notes[2];
				OCR1A = notes[2] / 2;
				_delay_ms(15);
				DDRB &= ~(1<<1);
				
				while(isButtonDown(1,3)){
    2478:	63 e0       	ldi	r22, 0x03	; 3
    247a:	81 e0       	ldi	r24, 0x01	; 1
    247c:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    2480:	81 11       	cpse	r24, r1
    2482:	c8 cf       	rjmp	.-112    	; 0x2414 <debugMode+0xa16>
						MultTimeKill = (MultTimeKill + 1) % 1000;
						TCNT4 = 6250;
					}
				}
			}
			if(isButtonDown(1,4)){	//DOWN
    2484:	64 e0       	ldi	r22, 0x04	; 4
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    248c:	88 23       	and	r24, r24
    248e:	09 f4       	brne	.+2      	; 0x2492 <debugMode+0xa94>
    2490:	d4 c1       	rjmp	.+936    	; 0x283a <debugMode+0xe3c>
				TCNT4 = 0;
    2492:	19 82       	std	Y+1, r1	; 0x01
    2494:	18 82       	st	Y, r1
				MultTimeKill = (MultTimeKill + 999) % 1000;
    2496:	40 91 0c 03 	lds	r20, 0x030C	; 0x80030c <MultTimeKill>
    249a:	50 91 0d 03 	lds	r21, 0x030D	; 0x80030d <MultTimeKill+0x1>
    249e:	49 51       	subi	r20, 0x19	; 25
    24a0:	5c 4f       	sbci	r21, 0xFC	; 252
    24a2:	9a 01       	movw	r18, r20
    24a4:	36 95       	lsr	r19
    24a6:	27 95       	ror	r18
    24a8:	36 95       	lsr	r19
    24aa:	27 95       	ror	r18
    24ac:	36 95       	lsr	r19
    24ae:	27 95       	ror	r18
    24b0:	a5 ec       	ldi	r26, 0xC5	; 197
    24b2:	b0 e2       	ldi	r27, 0x20	; 32
    24b4:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__umulhisi3>
    24b8:	92 95       	swap	r25
    24ba:	82 95       	swap	r24
    24bc:	8f 70       	andi	r24, 0x0F	; 15
    24be:	89 27       	eor	r24, r25
    24c0:	9f 70       	andi	r25, 0x0F	; 15
    24c2:	89 27       	eor	r24, r25
    24c4:	86 9d       	mul	r24, r6
    24c6:	90 01       	movw	r18, r0
    24c8:	87 9d       	mul	r24, r7
    24ca:	30 0d       	add	r19, r0
    24cc:	96 9d       	mul	r25, r6
    24ce:	30 0d       	add	r19, r0
    24d0:	11 24       	eor	r1, r1
    24d2:	42 1b       	sub	r20, r18
    24d4:	53 0b       	sbc	r21, r19
    24d6:	50 93 0d 03 	sts	0x030D, r21	; 0x80030d <MultTimeKill+0x1>
    24da:	40 93 0c 03 	sts	0x030C, r20	; 0x80030c <MultTimeKill>
				
				DDRB |= (1<<1);	//play tone
    24de:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[1];
    24e0:	f7 01       	movw	r30, r14
    24e2:	b1 82       	std	Z+1, r11	; 0x01
    24e4:	a0 82       	st	Z, r10
				OCR1A = notes[1] / 2;
    24e6:	f8 01       	movw	r30, r16
    24e8:	d1 82       	std	Z+1, r13	; 0x01
    24ea:	c0 82       	st	Z, r12
    24ec:	8f e5       	ldi	r24, 0x5F	; 95
    24ee:	9a ee       	ldi	r25, 0xEA	; 234
    24f0:	01 97       	sbiw	r24, 0x01	; 1
    24f2:	f1 f7       	brne	.-4      	; 0x24f0 <debugMode+0xaf2>
    24f4:	00 c0       	rjmp	.+0      	; 0x24f6 <debugMode+0xaf8>
    24f6:	00 00       	nop
				_delay_ms(15);
				DDRB &= ~(1<<1);
    24f8:	21 98       	cbi	0x04, 1	; 4
				
				while(isButtonDown(1,4)){
    24fa:	32 c0       	rjmp	.+100    	; 0x2560 <debugMode+0xb62>
					setScore(LEFT, MultTimeKill);
    24fc:	60 91 0c 03 	lds	r22, 0x030C	; 0x80030c <MultTimeKill>
    2500:	70 91 0d 03 	lds	r23, 0x030D	; 0x80030d <MultTimeKill+0x1>
    2504:	80 e0       	ldi	r24, 0x00	; 0
    2506:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
					if(TCNT4 > 6500){
    250a:	88 81       	ld	r24, Y
    250c:	99 81       	ldd	r25, Y+1	; 0x01
    250e:	85 36       	cpi	r24, 0x65	; 101
    2510:	99 41       	sbci	r25, 0x19	; 25
    2512:	30 f1       	brcs	.+76     	; 0x2560 <debugMode+0xb62>
						MultTimeKill = (MultTimeKill + 999) % 1000;
    2514:	40 91 0c 03 	lds	r20, 0x030C	; 0x80030c <MultTimeKill>
    2518:	50 91 0d 03 	lds	r21, 0x030D	; 0x80030d <MultTimeKill+0x1>
    251c:	49 51       	subi	r20, 0x19	; 25
    251e:	5c 4f       	sbci	r21, 0xFC	; 252
    2520:	9a 01       	movw	r18, r20
    2522:	36 95       	lsr	r19
    2524:	27 95       	ror	r18
    2526:	36 95       	lsr	r19
    2528:	27 95       	ror	r18
    252a:	36 95       	lsr	r19
    252c:	27 95       	ror	r18
    252e:	a5 ec       	ldi	r26, 0xC5	; 197
    2530:	b0 e2       	ldi	r27, 0x20	; 32
    2532:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__umulhisi3>
    2536:	92 95       	swap	r25
    2538:	82 95       	swap	r24
    253a:	8f 70       	andi	r24, 0x0F	; 15
    253c:	89 27       	eor	r24, r25
    253e:	9f 70       	andi	r25, 0x0F	; 15
    2540:	89 27       	eor	r24, r25
    2542:	86 9d       	mul	r24, r6
    2544:	90 01       	movw	r18, r0
    2546:	87 9d       	mul	r24, r7
    2548:	30 0d       	add	r19, r0
    254a:	96 9d       	mul	r25, r6
    254c:	30 0d       	add	r19, r0
    254e:	11 24       	eor	r1, r1
    2550:	42 1b       	sub	r20, r18
    2552:	53 0b       	sbc	r21, r19
    2554:	50 93 0d 03 	sts	0x030D, r21	; 0x80030d <MultTimeKill+0x1>
    2558:	40 93 0c 03 	sts	0x030C, r20	; 0x80030c <MultTimeKill>
						TCNT4 = 6250;
    255c:	99 82       	std	Y+1, r9	; 0x01
    255e:	88 82       	st	Y, r8
				ICR1 = notes[1];
				OCR1A = notes[1] / 2;
				_delay_ms(15);
				DDRB &= ~(1<<1);
				
				while(isButtonDown(1,4)){
    2560:	64 e0       	ldi	r22, 0x04	; 4
    2562:	81 e0       	ldi	r24, 0x01	; 1
    2564:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    2568:	81 11       	cpse	r24, r1
    256a:	c8 cf       	rjmp	.-112    	; 0x24fc <debugMode+0xafe>
    256c:	66 c1       	rjmp	.+716    	; 0x283a <debugMode+0xe3c>
			
			
			
			
			case 5:	//bonus round points
			setScoreSegment(RIGHT100, 0xb);	//3ul tck
    256e:	6b e0       	ldi	r22, 0x0B	; 11
    2570:	88 e0       	ldi	r24, 0x08	; 8
    2572:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(RIGHT10, 21);
    2576:	65 e1       	ldi	r22, 0x15	; 21
    2578:	87 e0       	ldi	r24, 0x07	; 7
    257a:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(RIGHT1, 5);
    257e:	65 e0       	ldi	r22, 0x05	; 5
    2580:	86 e0       	ldi	r24, 0x06	; 6
    2582:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(TIMER100, 24);
    2586:	68 e1       	ldi	r22, 0x18	; 24
    2588:	85 e0       	ldi	r24, 0x05	; 5
    258a:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(TIMER10, 22);
    258e:	66 e1       	ldi	r22, 0x16	; 22
    2590:	84 e0       	ldi	r24, 0x04	; 4
    2592:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(TIMER1, 5);
    2596:	65 e0       	ldi	r22, 0x05	; 5
    2598:	83 e0       	ldi	r24, 0x03	; 3
    259a:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScore(LEFT, BonusPointCount);
    259e:	60 91 10 03 	lds	r22, 0x0310	; 0x800310 <BonusPointCount>
    25a2:	70 e0       	ldi	r23, 0x00	; 0
    25a4:	80 e0       	ldi	r24, 0x00	; 0
    25a6:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
			
			setButtonLed(2,2,1);		// RESET score led
    25aa:	41 e0       	ldi	r20, 0x01	; 1
    25ac:	62 e0       	ldi	r22, 0x02	; 2
    25ae:	82 e0       	ldi	r24, 0x02	; 2
    25b0:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
			
			if(isButtonDown(2,2)){
    25b4:	62 e0       	ldi	r22, 0x02	; 2
    25b6:	82 e0       	ldi	r24, 0x02	; 2
    25b8:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    25bc:	88 23       	and	r24, r24
    25be:	19 f1       	breq	.+70     	; 0x2606 <debugMode+0xc08>
				BonusPointCount = 2;
    25c0:	82 e0       	ldi	r24, 0x02	; 2
    25c2:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <BonusPointCount>
				setScore(LEFT, BonusPointCount);
    25c6:	62 e0       	ldi	r22, 0x02	; 2
    25c8:	70 e0       	ldi	r23, 0x00	; 0
    25ca:	80 e0       	ldi	r24, 0x00	; 0
    25cc:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
				DDRB |= (1<<1);	//play reset
    25d0:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[3];
    25d2:	8d e4       	ldi	r24, 0x4D	; 77
    25d4:	9d e0       	ldi	r25, 0x0D	; 13
    25d6:	f7 01       	movw	r30, r14
    25d8:	91 83       	std	Z+1, r25	; 0x01
    25da:	80 83       	st	Z, r24
				OCR1A = notes[3] / 2;
    25dc:	86 ea       	ldi	r24, 0xA6	; 166
    25de:	96 e0       	ldi	r25, 0x06	; 6
    25e0:	f8 01       	movw	r30, r16
    25e2:	91 83       	std	Z+1, r25	; 0x01
    25e4:	80 83       	st	Z, r24
    25e6:	ff e7       	ldi	r31, 0x7F	; 127
    25e8:	25 eb       	ldi	r18, 0xB5	; 181
    25ea:	41 e0       	ldi	r20, 0x01	; 1
    25ec:	f1 50       	subi	r31, 0x01	; 1
    25ee:	20 40       	sbci	r18, 0x00	; 0
    25f0:	40 40       	sbci	r20, 0x00	; 0
    25f2:	e1 f7       	brne	.-8      	; 0x25ec <debugMode+0xbee>
    25f4:	00 c0       	rjmp	.+0      	; 0x25f6 <debugMode+0xbf8>
    25f6:	00 00       	nop
				_delay_ms(35);
				DDRB &= ~(1<<1);
    25f8:	21 98       	cbi	0x04, 1	; 4
				while(isButtonDown(2,2))
    25fa:	62 e0       	ldi	r22, 0x02	; 2
    25fc:	82 e0       	ldi	r24, 0x02	; 2
    25fe:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    2602:	81 11       	cpse	r24, r1
    2604:	fa cf       	rjmp	.-12     	; 0x25fa <debugMode+0xbfc>
				{
					//wait for unpush
				}
			}
			
			if(isButtonDown(1,3)){	//UP
    2606:	63 e0       	ldi	r22, 0x03	; 3
    2608:	81 e0       	ldi	r24, 0x01	; 1
    260a:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    260e:	88 23       	and	r24, r24
    2610:	81 f1       	breq	.+96     	; 0x2672 <debugMode+0xc74>
				TCNT4 = 0;
    2612:	19 82       	std	Y+1, r1	; 0x01
    2614:	18 82       	st	Y, r1
				BonusPointCount = (BonusPointCount + 1);
    2616:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <BonusPointCount>
    261a:	8f 5f       	subi	r24, 0xFF	; 255
    261c:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <BonusPointCount>
				
				DDRB |= (1<<1);	//play tone
    2620:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[2];
    2622:	f7 01       	movw	r30, r14
    2624:	51 82       	std	Z+1, r5	; 0x01
    2626:	40 82       	st	Z, r4
				OCR1A = notes[2] / 2;
    2628:	47 e7       	ldi	r20, 0x77	; 119
    262a:	57 e0       	ldi	r21, 0x07	; 7
    262c:	f8 01       	movw	r30, r16
    262e:	51 83       	std	Z+1, r21	; 0x01
    2630:	40 83       	st	Z, r20
    2632:	8f e5       	ldi	r24, 0x5F	; 95
    2634:	9a ee       	ldi	r25, 0xEA	; 234
    2636:	01 97       	sbiw	r24, 0x01	; 1
    2638:	f1 f7       	brne	.-4      	; 0x2636 <debugMode+0xc38>
    263a:	00 c0       	rjmp	.+0      	; 0x263c <debugMode+0xc3e>
    263c:	00 00       	nop
				_delay_ms(15);
				DDRB &= ~(1<<1);
    263e:	21 98       	cbi	0x04, 1	; 4
				
				while(isButtonDown(1,3)){
    2640:	12 c0       	rjmp	.+36     	; 0x2666 <debugMode+0xc68>
					setScore(LEFT, BonusPointCount);
    2642:	60 91 10 03 	lds	r22, 0x0310	; 0x800310 <BonusPointCount>
    2646:	70 e0       	ldi	r23, 0x00	; 0
    2648:	80 e0       	ldi	r24, 0x00	; 0
    264a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
					if(TCNT4 > 6500){
    264e:	88 81       	ld	r24, Y
    2650:	99 81       	ldd	r25, Y+1	; 0x01
    2652:	85 36       	cpi	r24, 0x65	; 101
    2654:	99 41       	sbci	r25, 0x19	; 25
    2656:	38 f0       	brcs	.+14     	; 0x2666 <debugMode+0xc68>
						BonusPointCount = (BonusPointCount + 1);
    2658:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <BonusPointCount>
    265c:	8f 5f       	subi	r24, 0xFF	; 255
    265e:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <BonusPointCount>
						TCNT4 = 6250;
    2662:	99 82       	std	Y+1, r9	; 0x01
    2664:	88 82       	st	Y, r8
				ICR1 = notes[2];
				OCR1A = notes[2] / 2;
				_delay_ms(15);
				DDRB &= ~(1<<1);
				
				while(isButtonDown(1,3)){
    2666:	63 e0       	ldi	r22, 0x03	; 3
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    266e:	81 11       	cpse	r24, r1
    2670:	e8 cf       	rjmp	.-48     	; 0x2642 <debugMode+0xc44>
						BonusPointCount = (BonusPointCount + 1);
						TCNT4 = 6250;
					}
				}
			}
			if(isButtonDown(1,4)){	//DOWN
    2672:	64 e0       	ldi	r22, 0x04	; 4
    2674:	81 e0       	ldi	r24, 0x01	; 1
    2676:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    267a:	88 23       	and	r24, r24
    267c:	09 f4       	brne	.+2      	; 0x2680 <debugMode+0xc82>
    267e:	dd c0       	rjmp	.+442    	; 0x283a <debugMode+0xe3c>
				TCNT4 = 0;
    2680:	19 82       	std	Y+1, r1	; 0x01
    2682:	18 82       	st	Y, r1
				BonusPointCount = (BonusPointCount + 255);
    2684:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <BonusPointCount>
    2688:	81 50       	subi	r24, 0x01	; 1
    268a:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <BonusPointCount>
				
				DDRB |= (1<<1);	//play tone
    268e:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[1];
    2690:	f7 01       	movw	r30, r14
    2692:	b1 82       	std	Z+1, r11	; 0x01
    2694:	a0 82       	st	Z, r10
				OCR1A = notes[1] / 2;
    2696:	f8 01       	movw	r30, r16
    2698:	d1 82       	std	Z+1, r13	; 0x01
    269a:	c0 82       	st	Z, r12
    269c:	8f e5       	ldi	r24, 0x5F	; 95
    269e:	9a ee       	ldi	r25, 0xEA	; 234
    26a0:	01 97       	sbiw	r24, 0x01	; 1
    26a2:	f1 f7       	brne	.-4      	; 0x26a0 <debugMode+0xca2>
    26a4:	00 c0       	rjmp	.+0      	; 0x26a6 <debugMode+0xca8>
    26a6:	00 00       	nop
				_delay_ms(15);
				DDRB &= ~(1<<1);
    26a8:	21 98       	cbi	0x04, 1	; 4
				
				while(isButtonDown(1,4)){
    26aa:	12 c0       	rjmp	.+36     	; 0x26d0 <debugMode+0xcd2>
					setScore(LEFT, BonusPointCount);
    26ac:	60 91 10 03 	lds	r22, 0x0310	; 0x800310 <BonusPointCount>
    26b0:	70 e0       	ldi	r23, 0x00	; 0
    26b2:	80 e0       	ldi	r24, 0x00	; 0
    26b4:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
					if(TCNT4 > 6500){
    26b8:	88 81       	ld	r24, Y
    26ba:	99 81       	ldd	r25, Y+1	; 0x01
    26bc:	85 36       	cpi	r24, 0x65	; 101
    26be:	99 41       	sbci	r25, 0x19	; 25
    26c0:	38 f0       	brcs	.+14     	; 0x26d0 <debugMode+0xcd2>
						BonusPointCount = (BonusPointCount + 255);
    26c2:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <BonusPointCount>
    26c6:	81 50       	subi	r24, 0x01	; 1
    26c8:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <BonusPointCount>
						TCNT4 = 6250;
    26cc:	99 82       	std	Y+1, r9	; 0x01
    26ce:	88 82       	st	Y, r8
				ICR1 = notes[1];
				OCR1A = notes[1] / 2;
				_delay_ms(15);
				DDRB &= ~(1<<1);
				
				while(isButtonDown(1,4)){
    26d0:	64 e0       	ldi	r22, 0x04	; 4
    26d2:	81 e0       	ldi	r24, 0x01	; 1
    26d4:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    26d8:	81 11       	cpse	r24, r1
    26da:	e8 cf       	rjmp	.-48     	; 0x26ac <debugMode+0xcae>
    26dc:	ae c0       	rjmp	.+348    	; 0x283a <debugMode+0xe3c>
			
			
			
			
			case 6:	//sound on
			setScoreSegment(RIGHT100, 5);
    26de:	65 e0       	ldi	r22, 0x05	; 5
    26e0:	88 e0       	ldi	r24, 0x08	; 8
    26e2:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(RIGHT10, 21);
    26e6:	65 e1       	ldi	r22, 0x15	; 21
    26e8:	87 e0       	ldi	r24, 0x07	; 7
    26ea:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(RIGHT1, 0xd);
    26ee:	6d e0       	ldi	r22, 0x0D	; 13
    26f0:	86 e0       	ldi	r24, 0x06	; 6
    26f2:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(TIMER100, 16);
    26f6:	60 e1       	ldi	r22, 0x10	; 16
    26f8:	85 e0       	ldi	r24, 0x05	; 5
    26fa:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(TIMER10, 16);
    26fe:	60 e1       	ldi	r22, 0x10	; 16
    2700:	84 e0       	ldi	r24, 0x04	; 4
    2702:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(TIMER1, 16);
    2706:	60 e1       	ldi	r22, 0x10	; 16
    2708:	83 e0       	ldi	r24, 0x03	; 3
    270a:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			
			setScore(LEFT, SoundEnabled);
    270e:	60 91 07 03 	lds	r22, 0x0307	; 0x800307 <SoundEnabled>
    2712:	70 e0       	ldi	r23, 0x00	; 0
    2714:	80 e0       	ldi	r24, 0x00	; 0
    2716:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>

			if(isButtonDown(1,3)){	//UP
    271a:	63 e0       	ldi	r22, 0x03	; 3
    271c:	81 e0       	ldi	r24, 0x01	; 1
    271e:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    2722:	88 23       	and	r24, r24
    2724:	09 f4       	brne	.+2      	; 0x2728 <debugMode+0xd2a>
    2726:	42 c0       	rjmp	.+132    	; 0x27ac <debugMode+0xdae>
				TCNT4 = 0;
    2728:	19 82       	std	Y+1, r1	; 0x01
    272a:	18 82       	st	Y, r1
				SoundEnabled = (SoundEnabled + 1) % 2;
    272c:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <SoundEnabled>
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	01 96       	adiw	r24, 0x01	; 1
    2734:	81 70       	andi	r24, 0x01	; 1
    2736:	90 78       	andi	r25, 0x80	; 128
    2738:	99 23       	and	r25, r25
    273a:	24 f4       	brge	.+8      	; 0x2744 <debugMode+0xd46>
    273c:	01 97       	sbiw	r24, 0x01	; 1
    273e:	8e 6f       	ori	r24, 0xFE	; 254
    2740:	9f 6f       	ori	r25, 0xFF	; 255
    2742:	01 96       	adiw	r24, 0x01	; 1
    2744:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <SoundEnabled>
				
				DDRB |= (1<<1);	//play tone
    2748:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[2];
    274a:	f7 01       	movw	r30, r14
    274c:	51 82       	std	Z+1, r5	; 0x01
    274e:	40 82       	st	Z, r4
				OCR1A = notes[2] / 2;
    2750:	47 e7       	ldi	r20, 0x77	; 119
    2752:	57 e0       	ldi	r21, 0x07	; 7
    2754:	f8 01       	movw	r30, r16
    2756:	51 83       	std	Z+1, r21	; 0x01
    2758:	40 83       	st	Z, r20
    275a:	8f e5       	ldi	r24, 0x5F	; 95
    275c:	9a ee       	ldi	r25, 0xEA	; 234
    275e:	01 97       	sbiw	r24, 0x01	; 1
    2760:	f1 f7       	brne	.-4      	; 0x275e <debugMode+0xd60>
    2762:	00 c0       	rjmp	.+0      	; 0x2764 <debugMode+0xd66>
    2764:	00 00       	nop
				_delay_ms(15);
				DDRB &= ~(1<<1);
    2766:	21 98       	cbi	0x04, 1	; 4
				
				while(isButtonDown(1,3)){
    2768:	1b c0       	rjmp	.+54     	; 0x27a0 <debugMode+0xda2>
					setScore(LEFT, SoundEnabled);
    276a:	60 91 07 03 	lds	r22, 0x0307	; 0x800307 <SoundEnabled>
    276e:	70 e0       	ldi	r23, 0x00	; 0
    2770:	80 e0       	ldi	r24, 0x00	; 0
    2772:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
					if(TCNT4 > 6500){
    2776:	88 81       	ld	r24, Y
    2778:	99 81       	ldd	r25, Y+1	; 0x01
    277a:	85 36       	cpi	r24, 0x65	; 101
    277c:	99 41       	sbci	r25, 0x19	; 25
    277e:	80 f0       	brcs	.+32     	; 0x27a0 <debugMode+0xda2>
						SoundEnabled = (SoundEnabled + 1) % 2;
    2780:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <SoundEnabled>
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	01 96       	adiw	r24, 0x01	; 1
    2788:	81 70       	andi	r24, 0x01	; 1
    278a:	90 78       	andi	r25, 0x80	; 128
    278c:	99 23       	and	r25, r25
    278e:	24 f4       	brge	.+8      	; 0x2798 <debugMode+0xd9a>
    2790:	01 97       	sbiw	r24, 0x01	; 1
    2792:	8e 6f       	ori	r24, 0xFE	; 254
    2794:	9f 6f       	ori	r25, 0xFF	; 255
    2796:	01 96       	adiw	r24, 0x01	; 1
    2798:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <SoundEnabled>
						TCNT4 = 6250;
    279c:	99 82       	std	Y+1, r9	; 0x01
    279e:	88 82       	st	Y, r8
				ICR1 = notes[2];
				OCR1A = notes[2] / 2;
				_delay_ms(15);
				DDRB &= ~(1<<1);
				
				while(isButtonDown(1,3)){
    27a0:	63 e0       	ldi	r22, 0x03	; 3
    27a2:	81 e0       	ldi	r24, 0x01	; 1
    27a4:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    27a8:	81 11       	cpse	r24, r1
    27aa:	df cf       	rjmp	.-66     	; 0x276a <debugMode+0xd6c>
						SoundEnabled = (SoundEnabled + 1) % 2;
						TCNT4 = 6250;
					}
				}
			}
			if(isButtonDown(1,4)){	//DOWN
    27ac:	64 e0       	ldi	r22, 0x04	; 4
    27ae:	81 e0       	ldi	r24, 0x01	; 1
    27b0:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    27b4:	88 23       	and	r24, r24
    27b6:	09 f4       	brne	.+2      	; 0x27ba <debugMode+0xdbc>
    27b8:	40 c0       	rjmp	.+128    	; 0x283a <debugMode+0xe3c>
				TCNT4 = 0;
    27ba:	19 82       	std	Y+1, r1	; 0x01
    27bc:	18 82       	st	Y, r1
				SoundEnabled = (SoundEnabled + 1) % 2;
    27be:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <SoundEnabled>
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	01 96       	adiw	r24, 0x01	; 1
    27c6:	81 70       	andi	r24, 0x01	; 1
    27c8:	90 78       	andi	r25, 0x80	; 128
    27ca:	99 23       	and	r25, r25
    27cc:	24 f4       	brge	.+8      	; 0x27d6 <debugMode+0xdd8>
    27ce:	01 97       	sbiw	r24, 0x01	; 1
    27d0:	8e 6f       	ori	r24, 0xFE	; 254
    27d2:	9f 6f       	ori	r25, 0xFF	; 255
    27d4:	01 96       	adiw	r24, 0x01	; 1
    27d6:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <SoundEnabled>
				
				DDRB |= (1<<1);	//play tone
    27da:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[1];
    27dc:	f7 01       	movw	r30, r14
    27de:	b1 82       	std	Z+1, r11	; 0x01
    27e0:	a0 82       	st	Z, r10
				OCR1A = notes[1] / 2;
    27e2:	f8 01       	movw	r30, r16
    27e4:	d1 82       	std	Z+1, r13	; 0x01
    27e6:	c0 82       	st	Z, r12
    27e8:	8f e5       	ldi	r24, 0x5F	; 95
    27ea:	9a ee       	ldi	r25, 0xEA	; 234
    27ec:	01 97       	sbiw	r24, 0x01	; 1
    27ee:	f1 f7       	brne	.-4      	; 0x27ec <debugMode+0xdee>
    27f0:	00 c0       	rjmp	.+0      	; 0x27f2 <debugMode+0xdf4>
    27f2:	00 00       	nop
				_delay_ms(15);
				DDRB &= ~(1<<1);
    27f4:	21 98       	cbi	0x04, 1	; 4
				
				while(isButtonDown(1,4)){
    27f6:	1b c0       	rjmp	.+54     	; 0x282e <debugMode+0xe30>
					setScore(LEFT, SoundEnabled);
    27f8:	60 91 07 03 	lds	r22, 0x0307	; 0x800307 <SoundEnabled>
    27fc:	70 e0       	ldi	r23, 0x00	; 0
    27fe:	80 e0       	ldi	r24, 0x00	; 0
    2800:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
					if(TCNT4 > 6500){
    2804:	88 81       	ld	r24, Y
    2806:	99 81       	ldd	r25, Y+1	; 0x01
    2808:	85 36       	cpi	r24, 0x65	; 101
    280a:	99 41       	sbci	r25, 0x19	; 25
    280c:	80 f0       	brcs	.+32     	; 0x282e <debugMode+0xe30>
						SoundEnabled = (SoundEnabled + 1) % 2;
    280e:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <SoundEnabled>
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	01 96       	adiw	r24, 0x01	; 1
    2816:	81 70       	andi	r24, 0x01	; 1
    2818:	90 78       	andi	r25, 0x80	; 128
    281a:	99 23       	and	r25, r25
    281c:	24 f4       	brge	.+8      	; 0x2826 <debugMode+0xe28>
    281e:	01 97       	sbiw	r24, 0x01	; 1
    2820:	8e 6f       	ori	r24, 0xFE	; 254
    2822:	9f 6f       	ori	r25, 0xFF	; 255
    2824:	01 96       	adiw	r24, 0x01	; 1
    2826:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <SoundEnabled>
						TCNT4 = 6250;
    282a:	99 82       	std	Y+1, r9	; 0x01
    282c:	88 82       	st	Y, r8
				ICR1 = notes[1];
				OCR1A = notes[1] / 2;
				_delay_ms(15);
				DDRB &= ~(1<<1);
				
				while(isButtonDown(1,4)){
    282e:	64 e0       	ldi	r22, 0x04	; 4
    2830:	81 e0       	ldi	r24, 0x01	; 1
    2832:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    2836:	81 11       	cpse	r24, r1
    2838:	df cf       	rjmp	.-66     	; 0x27f8 <debugMode+0xdfa>





		setButtonLed(0,4,1);	//NEXT button
    283a:	41 e0       	ldi	r20, 0x01	; 1
    283c:	64 e0       	ldi	r22, 0x04	; 4
    283e:	80 e0       	ldi	r24, 0x00	; 0
    2840:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
		setButtonLed(2,4,1);	//PREV button
    2844:	41 e0       	ldi	r20, 0x01	; 1
    2846:	64 e0       	ldi	r22, 0x04	; 4
    2848:	82 e0       	ldi	r24, 0x02	; 2
    284a:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
		setButtonLed(1,3,1);	//UP button
    284e:	41 e0       	ldi	r20, 0x01	; 1
    2850:	63 e0       	ldi	r22, 0x03	; 3
    2852:	81 e0       	ldi	r24, 0x01	; 1
    2854:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
		setButtonLed(1,4,1);	//DOWN button
    2858:	41 e0       	ldi	r20, 0x01	; 1
    285a:	64 e0       	ldi	r22, 0x04	; 4
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
		setButtonLed(0,1,1);	//CLOSE button
    2862:	41 e0       	ldi	r20, 0x01	; 1
    2864:	61 e0       	ldi	r22, 0x01	; 1
    2866:	80 e0       	ldi	r24, 0x00	; 0
    2868:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
		
		if(isButtonDown(0,4)){	// goto next page
    286c:	64 e0       	ldi	r22, 0x04	; 4
    286e:	80 e0       	ldi	r24, 0x00	; 0
    2870:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    2874:	88 23       	and	r24, r24
    2876:	b1 f1       	breq	.+108    	; 0x28e4 <debugMode+0xee6>
			page = (page+1) % maxpages;
    2878:	83 2d       	mov	r24, r3
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	01 96       	adiw	r24, 0x01	; 1
    287e:	67 e0       	ldi	r22, 0x07	; 7
    2880:	70 e0       	ldi	r23, 0x00	; 0
    2882:	0e 94 02 17 	call	0x2e04	; 0x2e04 <__divmodhi4>
    2886:	38 2e       	mov	r3, r24
			
			DDRB |= (1<<1);	//play page tone
    2888:	21 9a       	sbi	0x04, 1	; 4
			ICR1 = notes[0];
    288a:	81 ec       	ldi	r24, 0xC1	; 193
    288c:	91 e1       	ldi	r25, 0x11	; 17
    288e:	f7 01       	movw	r30, r14
    2890:	91 83       	std	Z+1, r25	; 0x01
    2892:	80 83       	st	Z, r24
			OCR1A = notes[0] / 2;
    2894:	80 ee       	ldi	r24, 0xE0	; 224
    2896:	98 e0       	ldi	r25, 0x08	; 8
    2898:	f8 01       	movw	r30, r16
    289a:	91 83       	std	Z+1, r25	; 0x01
    289c:	80 83       	st	Z, r24
    289e:	ff e7       	ldi	r31, 0x7F	; 127
    28a0:	25 eb       	ldi	r18, 0xB5	; 181
    28a2:	41 e0       	ldi	r20, 0x01	; 1
    28a4:	f1 50       	subi	r31, 0x01	; 1
    28a6:	20 40       	sbci	r18, 0x00	; 0
    28a8:	40 40       	sbci	r20, 0x00	; 0
    28aa:	e1 f7       	brne	.-8      	; 0x28a4 <debugMode+0xea6>
    28ac:	00 c0       	rjmp	.+0      	; 0x28ae <debugMode+0xeb0>
    28ae:	00 00       	nop
			_delay_ms(35);
			DDRB &= ~(1<<1);
    28b0:	21 98       	cbi	0x04, 1	; 4
			
			while(isButtonDown(0,4)){
    28b2:	64 e0       	ldi	r22, 0x04	; 4
    28b4:	80 e0       	ldi	r24, 0x00	; 0
    28b6:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    28ba:	81 11       	cpse	r24, r1
    28bc:	fa cf       	rjmp	.-12     	; 0x28b2 <debugMode+0xeb4>
				;				//wait until button release
			}
			DDRB |= (1<<1);	//play page tone
    28be:	21 9a       	sbi	0x04, 1	; 4
			ICR1 = notes[1];
    28c0:	f7 01       	movw	r30, r14
    28c2:	b1 82       	std	Z+1, r11	; 0x01
    28c4:	a0 82       	st	Z, r10
			OCR1A = notes[1] / 2;
    28c6:	f8 01       	movw	r30, r16
    28c8:	d1 82       	std	Z+1, r13	; 0x01
    28ca:	c0 82       	st	Z, r12
    28cc:	ff e7       	ldi	r31, 0x7F	; 127
    28ce:	25 eb       	ldi	r18, 0xB5	; 181
    28d0:	41 e0       	ldi	r20, 0x01	; 1
    28d2:	f1 50       	subi	r31, 0x01	; 1
    28d4:	20 40       	sbci	r18, 0x00	; 0
    28d6:	40 40       	sbci	r20, 0x00	; 0
    28d8:	e1 f7       	brne	.-8      	; 0x28d2 <debugMode+0xed4>
    28da:	00 c0       	rjmp	.+0      	; 0x28dc <debugMode+0xede>
    28dc:	00 00       	nop
			_delay_ms(35);
			DDRB &= ~(1<<1);
    28de:	21 98       	cbi	0x04, 1	; 4
			
			clearLeds(0);
    28e0:	0e 94 63 01 	call	0x2c6	; 0x2c6 <clearLeds>
			
		}
		if(isButtonDown(2,4)){	// goto next page
    28e4:	64 e0       	ldi	r22, 0x04	; 4
    28e6:	82 e0       	ldi	r24, 0x02	; 2
    28e8:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    28ec:	88 23       	and	r24, r24
    28ee:	b1 f1       	breq	.+108    	; 0x295c <debugMode+0xf5e>
			page = (page + maxpages - 1) % maxpages;
    28f0:	83 2d       	mov	r24, r3
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	06 96       	adiw	r24, 0x06	; 6
    28f6:	67 e0       	ldi	r22, 0x07	; 7
    28f8:	70 e0       	ldi	r23, 0x00	; 0
    28fa:	0e 94 02 17 	call	0x2e04	; 0x2e04 <__divmodhi4>
    28fe:	38 2e       	mov	r3, r24
			
			DDRB |= (1<<1);	//play page tone
    2900:	21 9a       	sbi	0x04, 1	; 4
			ICR1 = notes[0];
    2902:	81 ec       	ldi	r24, 0xC1	; 193
    2904:	91 e1       	ldi	r25, 0x11	; 17
    2906:	f7 01       	movw	r30, r14
    2908:	91 83       	std	Z+1, r25	; 0x01
    290a:	80 83       	st	Z, r24
			OCR1A = notes[0] / 2;
    290c:	80 ee       	ldi	r24, 0xE0	; 224
    290e:	98 e0       	ldi	r25, 0x08	; 8
    2910:	f8 01       	movw	r30, r16
    2912:	91 83       	std	Z+1, r25	; 0x01
    2914:	80 83       	st	Z, r24
    2916:	ff e7       	ldi	r31, 0x7F	; 127
    2918:	25 eb       	ldi	r18, 0xB5	; 181
    291a:	41 e0       	ldi	r20, 0x01	; 1
    291c:	f1 50       	subi	r31, 0x01	; 1
    291e:	20 40       	sbci	r18, 0x00	; 0
    2920:	40 40       	sbci	r20, 0x00	; 0
    2922:	e1 f7       	brne	.-8      	; 0x291c <debugMode+0xf1e>
    2924:	00 c0       	rjmp	.+0      	; 0x2926 <debugMode+0xf28>
    2926:	00 00       	nop
			_delay_ms(35);
			DDRB &= ~(1<<1);
    2928:	21 98       	cbi	0x04, 1	; 4
			
			while(isButtonDown(2,4)){
    292a:	64 e0       	ldi	r22, 0x04	; 4
    292c:	82 e0       	ldi	r24, 0x02	; 2
    292e:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    2932:	81 11       	cpse	r24, r1
    2934:	fa cf       	rjmp	.-12     	; 0x292a <debugMode+0xf2c>
				;				//wait until button release
			}
			DDRB |= (1<<1);	//play page tone
    2936:	21 9a       	sbi	0x04, 1	; 4
			ICR1 = notes[1];
    2938:	f7 01       	movw	r30, r14
    293a:	b1 82       	std	Z+1, r11	; 0x01
    293c:	a0 82       	st	Z, r10
			OCR1A = notes[1] / 2;
    293e:	f8 01       	movw	r30, r16
    2940:	d1 82       	std	Z+1, r13	; 0x01
    2942:	c0 82       	st	Z, r12
    2944:	ff e7       	ldi	r31, 0x7F	; 127
    2946:	25 eb       	ldi	r18, 0xB5	; 181
    2948:	41 e0       	ldi	r20, 0x01	; 1
    294a:	f1 50       	subi	r31, 0x01	; 1
    294c:	20 40       	sbci	r18, 0x00	; 0
    294e:	40 40       	sbci	r20, 0x00	; 0
    2950:	e1 f7       	brne	.-8      	; 0x294a <debugMode+0xf4c>
    2952:	00 c0       	rjmp	.+0      	; 0x2954 <debugMode+0xf56>
    2954:	00 00       	nop
			_delay_ms(35);
			DDRB &= ~(1<<1);
    2956:	21 98       	cbi	0x04, 1	; 4
			
			clearLeds(0);
    2958:	0e 94 63 01 	call	0x2c6	; 0x2c6 <clearLeds>
		}
		if(isButtonDown(0,1)){	//CLOSE debug
    295c:	61 e0       	ldi	r22, 0x01	; 1
    295e:	80 e0       	ldi	r24, 0x00	; 0
    2960:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    2964:	88 23       	and	r24, r24
    2966:	09 f4       	brne	.+2      	; 0x296a <debugMode+0xf6c>
    2968:	d8 c8       	rjmp	.-3664   	; 0x1b1a <debugMode+0x11c>
			//first SAVE all values
			DDRB |= (1<<1);	//play page tone
    296a:	21 9a       	sbi	0x04, 1	; 4
			ICR1 = notes[3];
    296c:	a6 e8       	ldi	r26, 0x86	; 134
    296e:	b0 e0       	ldi	r27, 0x00	; 0
    2970:	2d e4       	ldi	r18, 0x4D	; 77
    2972:	3d e0       	ldi	r19, 0x0D	; 13
    2974:	11 96       	adiw	r26, 0x01	; 1
    2976:	3c 93       	st	X, r19
    2978:	2e 93       	st	-X, r18
			OCR1A = notes[3] / 2;
    297a:	e8 e8       	ldi	r30, 0x88	; 136
    297c:	f0 e0       	ldi	r31, 0x00	; 0
    297e:	86 ea       	ldi	r24, 0xA6	; 166
    2980:	96 e0       	ldi	r25, 0x06	; 6
    2982:	91 83       	std	Z+1, r25	; 0x01
    2984:	80 83       	st	Z, r24
    2986:	5f e7       	ldi	r21, 0x7F	; 127
    2988:	65 eb       	ldi	r22, 0xB5	; 181
    298a:	c1 e0       	ldi	r28, 0x01	; 1
    298c:	51 50       	subi	r21, 0x01	; 1
    298e:	60 40       	sbci	r22, 0x00	; 0
    2990:	c0 40       	sbci	r28, 0x00	; 0
    2992:	e1 f7       	brne	.-8      	; 0x298c <debugMode+0xf8e>
    2994:	00 c0       	rjmp	.+0      	; 0x2996 <debugMode+0xf98>
    2996:	00 00       	nop
			_delay_ms(35);
			DDRB &= ~(1<<1);
    2998:	21 98       	cbi	0x04, 1	; 4
    299a:	df e7       	ldi	r29, 0x7F	; 127
    299c:	15 eb       	ldi	r17, 0xB5	; 181
    299e:	41 e0       	ldi	r20, 0x01	; 1
    29a0:	d1 50       	subi	r29, 0x01	; 1
    29a2:	10 40       	sbci	r17, 0x00	; 0
    29a4:	40 40       	sbci	r20, 0x00	; 0
    29a6:	e1 f7       	brne	.-8      	; 0x29a0 <debugMode+0xfa2>
    29a8:	00 c0       	rjmp	.+0      	; 0x29aa <debugMode+0xfac>
    29aa:	00 00       	nop
			_delay_ms(35);
			DDRB |= (1<<1);	//play page tone
    29ac:	21 9a       	sbi	0x04, 1	; 4
			ICR1 = notes[3];
    29ae:	11 96       	adiw	r26, 0x01	; 1
    29b0:	3c 93       	st	X, r19
    29b2:	2e 93       	st	-X, r18
			OCR1A = notes[3] / 2;
    29b4:	91 83       	std	Z+1, r25	; 0x01
    29b6:	80 83       	st	Z, r24
    29b8:	5f e7       	ldi	r21, 0x7F	; 127
    29ba:	65 eb       	ldi	r22, 0xB5	; 181
    29bc:	81 e0       	ldi	r24, 0x01	; 1
    29be:	51 50       	subi	r21, 0x01	; 1
    29c0:	60 40       	sbci	r22, 0x00	; 0
    29c2:	80 40       	sbci	r24, 0x00	; 0
    29c4:	e1 f7       	brne	.-8      	; 0x29be <debugMode+0xfc0>
    29c6:	00 c0       	rjmp	.+0      	; 0x29c8 <debugMode+0xfca>
    29c8:	00 00       	nop
			_delay_ms(35);
			DDRB &= ~(1<<1);
    29ca:	21 98       	cbi	0x04, 1	; 4
			
			EEPROM_write(EEP_ADDR_HighScore1P_H, HighScore1P >> 8);
    29cc:	60 91 fb 02 	lds	r22, 0x02FB	; 0x8002fb <HighScore1P+0x1>
    29d0:	80 e0       	ldi	r24, 0x00	; 0
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <EEPROM_write>
			EEPROM_write(EEP_ADDR_HighScore1P_L, HighScore1P & 0xFF);
    29d8:	60 91 fa 02 	lds	r22, 0x02FA	; 0x8002fa <HighScore1P>
    29dc:	81 e0       	ldi	r24, 0x01	; 1
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <EEPROM_write>
			EEPROM_write(EEP_ADDR_HighScore2P_H, HighScore2P >> 8);
    29e4:	60 91 0f 03 	lds	r22, 0x030F	; 0x80030f <HighScore2P+0x1>
    29e8:	82 e0       	ldi	r24, 0x02	; 2
    29ea:	90 e0       	ldi	r25, 0x00	; 0
    29ec:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <EEPROM_write>
			EEPROM_write(EEP_ADDR_HighScore2P_L, HighScore2P & 0xFF);
    29f0:	60 91 0e 03 	lds	r22, 0x030E	; 0x80030e <HighScore2P>
    29f4:	83 e0       	ldi	r24, 0x03	; 3
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <EEPROM_write>
			EEPROM_write(EEP_ADDR_RoundTime, RoundTime);
    29fc:	60 91 0a 03 	lds	r22, 0x030A	; 0x80030a <RoundTime>
    2a00:	80 e1       	ldi	r24, 0x10	; 16
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <EEPROM_write>
			EEPROM_write(EEP_ADDR_BonusTime, BonusTime);
    2a08:	60 91 ed 02 	lds	r22, 0x02ED	; 0x8002ed <BonusTime>
    2a0c:	80 e2       	ldi	r24, 0x20	; 32
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <EEPROM_write>
			EEPROM_write(EEP_ADDR_MultTimeKill_H, MultTimeKill >> 8);
    2a14:	60 91 0d 03 	lds	r22, 0x030D	; 0x80030d <MultTimeKill+0x1>
    2a18:	80 e8       	ldi	r24, 0x80	; 128
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <EEPROM_write>
			EEPROM_write(EEP_ADDR_MultTimeKill_L, MultTimeKill & 0xFF);
    2a20:	60 91 0c 03 	lds	r22, 0x030C	; 0x80030c <MultTimeKill>
    2a24:	81 e8       	ldi	r24, 0x81	; 129
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <EEPROM_write>
			EEPROM_write(EEP_ADDR_SoundEnabled, SoundEnabled);
    2a2c:	60 91 07 03 	lds	r22, 0x0307	; 0x800307 <SoundEnabled>
    2a30:	80 e7       	ldi	r24, 0x70	; 112
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <EEPROM_write>
			EEPROM_write(EEP_ADDR_BonusPtCount, BonusPointCount);
    2a38:	60 91 10 03 	lds	r22, 0x0310	; 0x800310 <BonusPointCount>
    2a3c:	80 e6       	ldi	r24, 0x60	; 96
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <EEPROM_write>
			
			return;
		}
	}
}
    2a44:	df 91       	pop	r29
    2a46:	cf 91       	pop	r28
    2a48:	1f 91       	pop	r17
    2a4a:	0f 91       	pop	r16
    2a4c:	ff 90       	pop	r15
    2a4e:	ef 90       	pop	r14
    2a50:	df 90       	pop	r13
    2a52:	cf 90       	pop	r12
    2a54:	bf 90       	pop	r11
    2a56:	af 90       	pop	r10
    2a58:	9f 90       	pop	r9
    2a5a:	8f 90       	pop	r8
    2a5c:	7f 90       	pop	r7
    2a5e:	6f 90       	pop	r6
    2a60:	5f 90       	pop	r5
    2a62:	4f 90       	pop	r4
    2a64:	3f 90       	pop	r3
    2a66:	08 95       	ret

00002a68 <EEPROM_read>:
}

uint8_t EEPROM_read(uint16_t uiAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
    2a68:	f9 99       	sbic	0x1f, 1	; 31
    2a6a:	fe cf       	rjmp	.-4      	; 0x2a68 <EEPROM_read>
	;
	/* Set up address register */
	EEAR = uiAddress;
    2a6c:	92 bd       	out	0x22, r25	; 34
    2a6e:	81 bd       	out	0x21, r24	; 33
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
    2a70:	f8 9a       	sbi	0x1f, 0	; 31
	/* Return data from Data Register */
	return EEDR;
    2a72:	80 b5       	in	r24, 0x20	; 32
}
    2a74:	08 95       	ret

00002a76 <main>:
	UBRR0L = 51;
}

int main(void)
{
	usbQcInit();
    2a76:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <usbQcInit>
	QCset12V();
    2a7a:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <QCset12V>
	
	buttonsInit();
    2a7e:	0e 94 9f 00 	call	0x13e	; 0x13e <buttonsInit>
	init_uart();
    2a82:	0e 94 af 02 	call	0x55e	; 0x55e <init_uart>
	stdout = &mystdout;
    2a86:	89 e1       	ldi	r24, 0x19	; 25
    2a88:	91 e0       	ldi	r25, 0x01	; 1
    2a8a:	90 93 14 03 	sts	0x0314, r25	; 0x800314 <__iob+0x3>
    2a8e:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <__iob+0x2>
	printf("\n\nWelcome to bartending robot OS ver 4.7B\n");
    2a92:	86 e8       	ldi	r24, 0x86	; 134
    2a94:	91 e0       	ldi	r25, 0x01	; 1
    2a96:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <puts>
	
	sei();
    2a9a:	78 94       	sei
	setScoreSegment(6, 0x11);
	_delay_ms(100);
	}*/
	
	// initialize timer0 for audio circuit
	DDRB |= (1 << DDB1) | (1 << DDB5); // output speaker pin B1
    2a9c:	84 b1       	in	r24, 0x04	; 4
    2a9e:	82 62       	ori	r24, 0x22	; 34
    2aa0:	84 b9       	out	0x04, r24	; 4
	ICR1 = 0;	// TOP of counter, start OFF
    2aa2:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    2aa6:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	OCR1A = 0; //0x1FFF;	// OFF at
    2aaa:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    2aae:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TCCR1A |= (1 << COM1A1) | (1 << WGM11); //|(0 << COM1B1);
    2ab2:	e0 e8       	ldi	r30, 0x80	; 128
    2ab4:	f0 e0       	ldi	r31, 0x00	; 0
    2ab6:	80 81       	ld	r24, Z
    2ab8:	82 68       	ori	r24, 0x82	; 130
    2aba:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12 ) | (1 << WGM13) | (1 << CS41);
    2abc:	e1 e8       	ldi	r30, 0x81	; 129
    2abe:	f0 e0       	ldi	r31, 0x00	; 0
    2ac0:	80 81       	ld	r24, Z
    2ac2:	8a 61       	ori	r24, 0x1A	; 26
    2ac4:	80 83       	st	Z, r24
	PORTB &= ~(1 << 1);
    2ac6:	29 98       	cbi	0x05, 1	; 5
	
	TCCR0A = (1 << WGM01);	// enable CTC mode timer 0
    2ac8:	82 e0       	ldi	r24, 0x02	; 2
    2aca:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0;		//disable clock for timer0, as it will be enabled when "beeped"
    2acc:	15 bc       	out	0x25, r1	; 37
	OCR0A = 125;
    2ace:	9d e7       	ldi	r25, 0x7D	; 125
    2ad0:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = ( 1 << OCIE0A );
    2ad2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	
	printf("AUDIO TIMERS & PORT SET\n");
    2ad6:	80 eb       	ldi	r24, 0xB0	; 176
    2ad8:	91 e0       	ldi	r25, 0x01	; 1
    2ada:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <puts>

	//load values from eeprom
	
	

	HighScore1P = (EEPROM_read(EEP_ADDR_HighScore1P_H) << 8) | (EEPROM_read(EEP_ADDR_HighScore1P_L));
    2ade:	80 e0       	ldi	r24, 0x00	; 0
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	0e 94 34 15 	call	0x2a68	; 0x2a68 <EEPROM_read>
    2ae6:	c8 2f       	mov	r28, r24
    2ae8:	81 e0       	ldi	r24, 0x01	; 1
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	0e 94 34 15 	call	0x2a68	; 0x2a68 <EEPROM_read>
    2af0:	2c 2f       	mov	r18, r28
    2af2:	30 e0       	ldi	r19, 0x00	; 0
    2af4:	32 2f       	mov	r19, r18
    2af6:	22 27       	eor	r18, r18
    2af8:	28 2b       	or	r18, r24
    2afa:	30 93 fb 02 	sts	0x02FB, r19	; 0x8002fb <HighScore1P+0x1>
    2afe:	20 93 fa 02 	sts	0x02FA, r18	; 0x8002fa <HighScore1P>
	HighScore2P = (EEPROM_read(EEP_ADDR_HighScore2P_H) << 8) | (EEPROM_read(EEP_ADDR_HighScore2P_L));
    2b02:	82 e0       	ldi	r24, 0x02	; 2
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	0e 94 34 15 	call	0x2a68	; 0x2a68 <EEPROM_read>
    2b0a:	c8 2f       	mov	r28, r24
    2b0c:	83 e0       	ldi	r24, 0x03	; 3
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	0e 94 34 15 	call	0x2a68	; 0x2a68 <EEPROM_read>
    2b14:	2c 2f       	mov	r18, r28
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	32 2f       	mov	r19, r18
    2b1a:	22 27       	eor	r18, r18
    2b1c:	28 2b       	or	r18, r24
    2b1e:	30 93 0f 03 	sts	0x030F, r19	; 0x80030f <HighScore2P+0x1>
    2b22:	20 93 0e 03 	sts	0x030E, r18	; 0x80030e <HighScore2P>
	RoundTime = EEPROM_read(EEP_ADDR_RoundTime);
    2b26:	80 e1       	ldi	r24, 0x10	; 16
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	0e 94 34 15 	call	0x2a68	; 0x2a68 <EEPROM_read>
    2b2e:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <RoundTime>
	BonusTime = EEPROM_read(EEP_ADDR_BonusTime);
    2b32:	80 e2       	ldi	r24, 0x20	; 32
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	0e 94 34 15 	call	0x2a68	; 0x2a68 <EEPROM_read>
    2b3a:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <BonusTime>
	MultiplierMax = EEPROM_read(EEP_ADDR_MultMax);
    2b3e:	80 e5       	ldi	r24, 0x50	; 80
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	0e 94 34 15 	call	0x2a68	; 0x2a68 <EEPROM_read>
    2b46:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <MultiplierMax>
	BonusPointCount = EEPROM_read(EEP_ADDR_BonusPtCount);
    2b4a:	80 e6       	ldi	r24, 0x60	; 96
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	0e 94 34 15 	call	0x2a68	; 0x2a68 <EEPROM_read>
    2b52:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <BonusPointCount>
	SoundEnabled = EEPROM_read(EEP_ADDR_SoundEnabled);
    2b56:	80 e7       	ldi	r24, 0x70	; 112
    2b58:	90 e0       	ldi	r25, 0x00	; 0
    2b5a:	0e 94 34 15 	call	0x2a68	; 0x2a68 <EEPROM_read>
    2b5e:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <SoundEnabled>
	MultTimeKill = (EEPROM_read(EEP_ADDR_MultTimeKill_H) << 8) | (EEPROM_read(EEP_ADDR_MultTimeKill_L));
    2b62:	80 e8       	ldi	r24, 0x80	; 128
    2b64:	90 e0       	ldi	r25, 0x00	; 0
    2b66:	0e 94 34 15 	call	0x2a68	; 0x2a68 <EEPROM_read>
    2b6a:	c8 2f       	mov	r28, r24
    2b6c:	81 e8       	ldi	r24, 0x81	; 129
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	0e 94 34 15 	call	0x2a68	; 0x2a68 <EEPROM_read>
    2b74:	2c 2f       	mov	r18, r28
    2b76:	30 e0       	ldi	r19, 0x00	; 0
    2b78:	32 2f       	mov	r19, r18
    2b7a:	22 27       	eor	r18, r18
    2b7c:	28 2b       	or	r18, r24
    2b7e:	30 93 0d 03 	sts	0x030D, r19	; 0x80030d <MultTimeKill+0x1>
    2b82:	20 93 0c 03 	sts	0x030C, r18	; 0x80030c <MultTimeKill>
	
	// load random value from eeprom as seed and write new random value
	srand((EEPROM_read(EEP_ADDR_RandomSeed_H) << 8) | EEPROM_read(EEP_ADDR_RandomSeed_L));
    2b86:	80 e4       	ldi	r24, 0x40	; 64
    2b88:	90 e0       	ldi	r25, 0x00	; 0
    2b8a:	0e 94 34 15 	call	0x2a68	; 0x2a68 <EEPROM_read>
    2b8e:	c8 2f       	mov	r28, r24
    2b90:	81 e4       	ldi	r24, 0x41	; 65
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	0e 94 34 15 	call	0x2a68	; 0x2a68 <EEPROM_read>
    2b98:	2c 2f       	mov	r18, r28
    2b9a:	30 e0       	ldi	r19, 0x00	; 0
    2b9c:	32 2f       	mov	r19, r18
    2b9e:	22 27       	eor	r18, r18
    2ba0:	a9 01       	movw	r20, r18
    2ba2:	48 2b       	or	r20, r24
    2ba4:	ca 01       	movw	r24, r20
    2ba6:	0e 94 90 17 	call	0x2f20	; 0x2f20 <srand>
	EEPROM_write(EEP_ADDR_RandomSeed_H, rand()%256 );
    2baa:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <rand>
    2bae:	90 78       	andi	r25, 0x80	; 128
    2bb0:	99 23       	and	r25, r25
    2bb2:	1c f4       	brge	.+6      	; 0x2bba <main+0x144>
    2bb4:	01 97       	sbiw	r24, 0x01	; 1
    2bb6:	9f 6f       	ori	r25, 0xFF	; 255
    2bb8:	01 96       	adiw	r24, 0x01	; 1
    2bba:	68 2f       	mov	r22, r24
    2bbc:	80 e4       	ldi	r24, 0x40	; 64
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <EEPROM_write>
	EEPROM_write(EEP_ADDR_RandomSeed_L, rand()%256 );
    2bc4:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <rand>
    2bc8:	90 78       	andi	r25, 0x80	; 128
    2bca:	99 23       	and	r25, r25
    2bcc:	1c f4       	brge	.+6      	; 0x2bd4 <main+0x15e>
    2bce:	01 97       	sbiw	r24, 0x01	; 1
    2bd0:	9f 6f       	ori	r25, 0xFF	; 255
    2bd2:	01 96       	adiw	r24, 0x01	; 1
    2bd4:	68 2f       	mov	r22, r24
    2bd6:	81 e4       	ldi	r24, 0x41	; 65
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <EEPROM_write>
	
	printf("EEPROM VALUES SET:\n");
    2bde:	88 ec       	ldi	r24, 0xC8	; 200
    2be0:	91 e0       	ldi	r25, 0x01	; 1
    2be2:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <puts>
	printf("HS1P: %d \t HS2P: %d \t RT: %d \t BT: %d \t MMAX: %d \t BPC: %d \t SND: %d \t MulTck: %d \n",HighScore1P, HighScore2P, RoundTime, BonusTime, MultiplierMax, BonusPointCount, SoundEnabled, MultTimeKill);
    2be6:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <MultTimeKill+0x1>
    2bea:	8f 93       	push	r24
    2bec:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <MultTimeKill>
    2bf0:	8f 93       	push	r24
    2bf2:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <SoundEnabled>
    2bf6:	1f 92       	push	r1
    2bf8:	8f 93       	push	r24
    2bfa:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <BonusPointCount>
    2bfe:	1f 92       	push	r1
    2c00:	8f 93       	push	r24
    2c02:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <MultiplierMax>
    2c06:	1f 92       	push	r1
    2c08:	8f 93       	push	r24
    2c0a:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <BonusTime>
    2c0e:	1f 92       	push	r1
    2c10:	8f 93       	push	r24
    2c12:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <RoundTime>
    2c16:	1f 92       	push	r1
    2c18:	8f 93       	push	r24
    2c1a:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <HighScore2P+0x1>
    2c1e:	8f 93       	push	r24
    2c20:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <HighScore2P>
    2c24:	8f 93       	push	r24
    2c26:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <HighScore1P+0x1>
    2c2a:	8f 93       	push	r24
    2c2c:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <HighScore1P>
    2c30:	8f 93       	push	r24
    2c32:	8b ed       	ldi	r24, 0xDB	; 219
    2c34:	91 e0       	ldi	r25, 0x01	; 1
    2c36:	9f 93       	push	r25
    2c38:	8f 93       	push	r24
    2c3a:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <printf>
	printf("RANDOMSEED: 0x%X%X\n\n", EEPROM_read(EEP_ADDR_RandomSeed_H), EEPROM_read(EEP_ADDR_RandomSeed_L));
    2c3e:	81 e4       	ldi	r24, 0x41	; 65
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	0e 94 34 15 	call	0x2a68	; 0x2a68 <EEPROM_read>
    2c46:	c8 2f       	mov	r28, r24
    2c48:	80 e4       	ldi	r24, 0x40	; 64
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	0e 94 34 15 	call	0x2a68	; 0x2a68 <EEPROM_read>
    2c50:	1f 92       	push	r1
    2c52:	cf 93       	push	r28
    2c54:	1f 92       	push	r1
    2c56:	8f 93       	push	r24
    2c58:	8f e2       	ldi	r24, 0x2F	; 47
    2c5a:	92 e0       	ldi	r25, 0x02	; 2
    2c5c:	9f 93       	push	r25
    2c5e:	8f 93       	push	r24
    2c60:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <printf>
	
	
	
	
	// set up timer4 for game timer
	TCCR4B = (1 << WGM42)|(0b101 << CS40);	// enable timer 0 (game timer)
    2c64:	8d e0       	ldi	r24, 0x0D	; 13
    2c66:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
	TIMSK4 = (1 << OCIE4A);
    2c6a:	82 e0       	ldi	r24, 0x02	; 2
    2c6c:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7e0072>
	OCR4A = 15625;			// set up for 1s
    2c70:	89 e0       	ldi	r24, 0x09	; 9
    2c72:	9d e3       	ldi	r25, 0x3D	; 61
    2c74:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    2c78:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>

	sei();
    2c7c:	78 94       	sei
    2c7e:	8d b7       	in	r24, 0x3d	; 61
    2c80:	9e b7       	in	r25, 0x3e	; 62
    2c82:	48 96       	adiw	r24, 0x18	; 24
    2c84:	0f b6       	in	r0, 0x3f	; 63
    2c86:	f8 94       	cli
    2c88:	9e bf       	out	0x3e, r25	; 62
    2c8a:	0f be       	out	0x3f, r0	; 63
    2c8c:	8d bf       	out	0x3d, r24	; 61
	
	}
	}
	}*/
	
	for(uint8_t dispindex = 0; dispindex < 9; dispindex++){
    2c8e:	c0 e0       	ldi	r28, 0x00	; 0
		setScoreSegment(dispindex, 18);
    2c90:	62 e1       	ldi	r22, 0x12	; 18
    2c92:	8c 2f       	mov	r24, r28
    2c94:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
	
	}
	}
	}*/
	
	for(uint8_t dispindex = 0; dispindex < 9; dispindex++){
    2c98:	cf 5f       	subi	r28, 0xFF	; 255
    2c9a:	c9 30       	cpi	r28, 0x09	; 9
    2c9c:	c9 f7       	brne	.-14     	; 0x2c90 <main+0x21a>
		setScoreSegment(dispindex, 18);
	}
	if(isButtonDown(DebugButtonX, DebugButtonY)){
    2c9e:	61 e0       	ldi	r22, 0x01	; 1
    2ca0:	80 e0       	ldi	r24, 0x00	; 0
    2ca2:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    2ca6:	81 11       	cpse	r24, r1
		debugMode();
    2ca8:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <debugMode>
			}
			}else{
			if((P1Score > HighScore2P) || (P2Score > HighScore2P)){
				HighScore2P = (P1Score > P2Score ? P1Score : P2Score);
				EEPROM_write(EEP_ADDR_HighScore2P_H, HighScore2P >> 8);
				EEPROM_write(EEP_ADDR_HighScore2P_L, HighScore2P & 0xFF);
    2cac:	ce e0       	ldi	r28, 0x0E	; 14
    2cae:	d3 e0       	ldi	r29, 0x03	; 3
		Bonus();
		
		if(GameMode == 0){
			if(P1Score > HighScore1P){
				HighScore1P = P1Score;
				printf("new high score %d", HighScore1P);
    2cb0:	0b e6       	ldi	r16, 0x6B	; 107
    2cb2:	12 e0       	ldi	r17, 0x02	; 2
				EEPROM_write(EEP_ADDR_HighScore1P_H, HighScore1P >> 8);
				EEPROM_write(EEP_ADDR_HighScore1P_L, HighScore1P & 0xFF);
    2cb4:	0f 2e       	mov	r0, r31
    2cb6:	fa ef       	ldi	r31, 0xFA	; 250
    2cb8:	ef 2e       	mov	r14, r31
    2cba:	f2 e0       	ldi	r31, 0x02	; 2
    2cbc:	ff 2e       	mov	r15, r31
    2cbe:	f0 2d       	mov	r31, r0
		debugMode();
	}

	while (1)
	{
		printf("\n\n\nSTARTING ATTRACT MODE\n");
    2cc0:	84 e4       	ldi	r24, 0x44	; 68
    2cc2:	92 e0       	ldi	r25, 0x02	; 2
    2cc4:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <puts>
		Attractive();		// loop thru patterns until game start is pressed (TODO IMPLEMENT DEBUG PATTERN)
    2cc8:	0e 94 01 0b 	call	0x1602	; 0x1602 <Attractive>
		printf("STARTING GAME\n");
    2ccc:	8d e5       	ldi	r24, 0x5D	; 93
    2cce:	92 e0       	ldi	r25, 0x02	; 2
    2cd0:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <puts>
		Game();
    2cd4:	0e 94 d0 05 	call	0xba0	; 0xba0 <Game>
    2cd8:	9f ef       	ldi	r25, 0xFF	; 255
    2cda:	ee e9       	ldi	r30, 0x9E	; 158
    2cdc:	f4 e2       	ldi	r31, 0x24	; 36
    2cde:	91 50       	subi	r25, 0x01	; 1
    2ce0:	e0 40       	sbci	r30, 0x00	; 0
    2ce2:	f0 40       	sbci	r31, 0x00	; 0
    2ce4:	e1 f7       	brne	.-8      	; 0x2cde <main+0x268>
    2ce6:	00 c0       	rjmp	.+0      	; 0x2ce8 <main+0x272>
    2ce8:	00 00       	nop
		_delay_ms(750);
		Bonus();
    2cea:	0e 94 94 08 	call	0x1128	; 0x1128 <Bonus>
		
		if(GameMode == 0){
    2cee:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <GameMode>
    2cf2:	81 11       	cpse	r24, r1
    2cf4:	29 c0       	rjmp	.+82     	; 0x2d48 <main+0x2d2>
			if(P1Score > HighScore1P){
    2cf6:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <P1Score>
    2cfa:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <P1Score+0x1>
    2cfe:	20 91 fa 02 	lds	r18, 0x02FA	; 0x8002fa <HighScore1P>
    2d02:	30 91 fb 02 	lds	r19, 0x02FB	; 0x8002fb <HighScore1P+0x1>
    2d06:	28 17       	cp	r18, r24
    2d08:	39 07       	cpc	r19, r25
    2d0a:	08 f0       	brcs	.+2      	; 0x2d0e <main+0x298>
    2d0c:	47 c0       	rjmp	.+142    	; 0x2d9c <main+0x326>
				HighScore1P = P1Score;
    2d0e:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <HighScore1P+0x1>
    2d12:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <HighScore1P>
				printf("new high score %d", HighScore1P);
    2d16:	9f 93       	push	r25
    2d18:	8f 93       	push	r24
    2d1a:	1f 93       	push	r17
    2d1c:	0f 93       	push	r16
    2d1e:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <printf>
				EEPROM_write(EEP_ADDR_HighScore1P_H, HighScore1P >> 8);
    2d22:	60 91 fb 02 	lds	r22, 0x02FB	; 0x8002fb <HighScore1P+0x1>
    2d26:	80 e0       	ldi	r24, 0x00	; 0
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <EEPROM_write>
				EEPROM_write(EEP_ADDR_HighScore1P_L, HighScore1P & 0xFF);
    2d2e:	f7 01       	movw	r30, r14
    2d30:	60 81       	ld	r22, Z
    2d32:	81 e0       	ldi	r24, 0x01	; 1
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <EEPROM_write>
				
				ShowWinner();			//if new high score, flash screen
    2d3a:	0e 94 78 03 	call	0x6f0	; 0x6f0 <ShowWinner>
    2d3e:	0f 90       	pop	r0
    2d40:	0f 90       	pop	r0
    2d42:	0f 90       	pop	r0
    2d44:	0f 90       	pop	r0
    2d46:	2a c0       	rjmp	.+84     	; 0x2d9c <main+0x326>
			}
			}else{
			if((P1Score > HighScore2P) || (P2Score > HighScore2P)){
    2d48:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <P1Score>
    2d4c:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <P1Score+0x1>
    2d50:	20 91 0e 03 	lds	r18, 0x030E	; 0x80030e <HighScore2P>
    2d54:	30 91 0f 03 	lds	r19, 0x030F	; 0x80030f <HighScore2P+0x1>
    2d58:	28 17       	cp	r18, r24
    2d5a:	39 07       	cpc	r19, r25
    2d5c:	38 f0       	brcs	.+14     	; 0x2d6c <main+0x2f6>
    2d5e:	40 91 fe 02 	lds	r20, 0x02FE	; 0x8002fe <P2Score>
    2d62:	50 91 ff 02 	lds	r21, 0x02FF	; 0x8002ff <P2Score+0x1>
    2d66:	24 17       	cp	r18, r20
    2d68:	35 07       	cpc	r19, r21
    2d6a:	b0 f4       	brcc	.+44     	; 0x2d98 <main+0x322>
				HighScore2P = (P1Score > P2Score ? P1Score : P2Score);
    2d6c:	20 91 fe 02 	lds	r18, 0x02FE	; 0x8002fe <P2Score>
    2d70:	30 91 ff 02 	lds	r19, 0x02FF	; 0x8002ff <P2Score+0x1>
    2d74:	28 17       	cp	r18, r24
    2d76:	39 07       	cpc	r19, r25
    2d78:	08 f4       	brcc	.+2      	; 0x2d7c <main+0x306>
    2d7a:	9c 01       	movw	r18, r24
    2d7c:	30 93 0f 03 	sts	0x030F, r19	; 0x80030f <HighScore2P+0x1>
    2d80:	20 93 0e 03 	sts	0x030E, r18	; 0x80030e <HighScore2P>
				EEPROM_write(EEP_ADDR_HighScore2P_H, HighScore2P >> 8);
    2d84:	63 2f       	mov	r22, r19
    2d86:	82 e0       	ldi	r24, 0x02	; 2
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <EEPROM_write>
				EEPROM_write(EEP_ADDR_HighScore2P_L, HighScore2P & 0xFF);
    2d8e:	68 81       	ld	r22, Y
    2d90:	83 e0       	ldi	r24, 0x03	; 3
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <EEPROM_write>
			}
			ShowWinner();				//if 2 player mode show winner anyway
    2d98:	0e 94 78 03 	call	0x6f0	; 0x6f0 <ShowWinner>
    2d9c:	ff ef       	ldi	r31, 0xFF	; 255
    2d9e:	2e e9       	ldi	r18, 0x9E	; 158
    2da0:	44 e2       	ldi	r20, 0x24	; 36
    2da2:	f1 50       	subi	r31, 0x01	; 1
    2da4:	20 40       	sbci	r18, 0x00	; 0
    2da6:	40 40       	sbci	r20, 0x00	; 0
    2da8:	e1 f7       	brne	.-8      	; 0x2da2 <main+0x32c>
    2daa:	00 c0       	rjmp	.+0      	; 0x2dac <main+0x336>
    2dac:	00 00       	nop
    2dae:	88 cf       	rjmp	.-240    	; 0x2cc0 <main+0x24a>

00002db0 <_dm0V>:
	_dp600mV();
	_dm600mV();
}

void _dm0V(){
	QC_PORT &= ~(1 << QC_DM);
    2db0:	70 98       	cbi	0x0e, 0	; 14
	QC_DDR |= 1 << QC_DM;
    2db2:	68 9a       	sbi	0x0d, 0	; 13
    2db4:	08 95       	ret

00002db6 <_dp600mV>:
}

void _dp600mV(){
	QC_DDR &= ~(1 << QC_DP);
    2db6:	69 98       	cbi	0x0d, 1	; 13
    2db8:	08 95       	ret

00002dba <QCset5V>:
	_delay_ms(2);
	
}

void QCset5V(){
	_dp600mV();
    2dba:	0e 94 db 16 	call	0x2db6	; 0x2db6 <_dp600mV>
	_dm0V();
    2dbe:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <_dm0V>
    2dc2:	08 95       	ret

00002dc4 <_dm600mV>:
void _dp600mV(){
	QC_DDR &= ~(1 << QC_DP);
}

void _dm600mV(){
	QC_DDR &= ~(1 << QC_DM);
    2dc4:	68 98       	cbi	0x0d, 0	; 13
    2dc6:	08 95       	ret

00002dc8 <_handshake>:
	_handshake();
	QCset5V();
}

void _handshake(){
	_dm600mV();
    2dc8:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <_dm600mV>
    2dcc:	2f ef       	ldi	r18, 0xFF	; 255
    2dce:	8d e3       	ldi	r24, 0x3D	; 61
    2dd0:	99 e4       	ldi	r25, 0x49	; 73
    2dd2:	21 50       	subi	r18, 0x01	; 1
    2dd4:	80 40       	sbci	r24, 0x00	; 0
    2dd6:	90 40       	sbci	r25, 0x00	; 0
    2dd8:	e1 f7       	brne	.-8      	; 0x2dd2 <_handshake+0xa>
    2dda:	00 c0       	rjmp	.+0      	; 0x2ddc <_handshake+0x14>
    2ddc:	00 00       	nop
	_delay_ms(1500);
	_dm0V();
    2dde:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <_dm0V>
    2de2:	8f e3       	ldi	r24, 0x3F	; 63
    2de4:	9f e1       	ldi	r25, 0x1F	; 31
    2de6:	01 97       	sbiw	r24, 0x01	; 1
    2de8:	f1 f7       	brne	.-4      	; 0x2de6 <_handshake+0x1e>
    2dea:	00 c0       	rjmp	.+0      	; 0x2dec <_handshake+0x24>
    2dec:	00 00       	nop
    2dee:	08 95       	ret

00002df0 <usbQcInit>:
#include "usbQc.h"
#define F_CPU 16000000UL
#include <util/delay.h>

void usbQcInit(){
	_handshake();
    2df0:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <_handshake>
	QCset5V();
    2df4:	0e 94 dd 16 	call	0x2dba	; 0x2dba <QCset5V>
    2df8:	08 95       	ret

00002dfa <QCset12V>:
	_dm600mV();
	
}

void QCset12V(){
	_dp600mV();
    2dfa:	0e 94 db 16 	call	0x2db6	; 0x2db6 <_dp600mV>
	_dm600mV();
    2dfe:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <_dm600mV>
    2e02:	08 95       	ret

00002e04 <__divmodhi4>:
    2e04:	97 fb       	bst	r25, 7
    2e06:	07 2e       	mov	r0, r23
    2e08:	16 f4       	brtc	.+4      	; 0x2e0e <__divmodhi4+0xa>
    2e0a:	00 94       	com	r0
    2e0c:	07 d0       	rcall	.+14     	; 0x2e1c <__divmodhi4_neg1>
    2e0e:	77 fd       	sbrc	r23, 7
    2e10:	09 d0       	rcall	.+18     	; 0x2e24 <__divmodhi4_neg2>
    2e12:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <__udivmodhi4>
    2e16:	07 fc       	sbrc	r0, 7
    2e18:	05 d0       	rcall	.+10     	; 0x2e24 <__divmodhi4_neg2>
    2e1a:	3e f4       	brtc	.+14     	; 0x2e2a <__divmodhi4_exit>

00002e1c <__divmodhi4_neg1>:
    2e1c:	90 95       	com	r25
    2e1e:	81 95       	neg	r24
    2e20:	9f 4f       	sbci	r25, 0xFF	; 255
    2e22:	08 95       	ret

00002e24 <__divmodhi4_neg2>:
    2e24:	70 95       	com	r23
    2e26:	61 95       	neg	r22
    2e28:	7f 4f       	sbci	r23, 0xFF	; 255

00002e2a <__divmodhi4_exit>:
    2e2a:	08 95       	ret

00002e2c <__tablejump2__>:
    2e2c:	ee 0f       	add	r30, r30
    2e2e:	ff 1f       	adc	r31, r31
    2e30:	05 90       	lpm	r0, Z+
    2e32:	f4 91       	lpm	r31, Z
    2e34:	e0 2d       	mov	r30, r0
    2e36:	09 94       	ijmp

00002e38 <__umulhisi3>:
    2e38:	a2 9f       	mul	r26, r18
    2e3a:	b0 01       	movw	r22, r0
    2e3c:	b3 9f       	mul	r27, r19
    2e3e:	c0 01       	movw	r24, r0
    2e40:	a3 9f       	mul	r26, r19
    2e42:	70 0d       	add	r23, r0
    2e44:	81 1d       	adc	r24, r1
    2e46:	11 24       	eor	r1, r1
    2e48:	91 1d       	adc	r25, r1
    2e4a:	b2 9f       	mul	r27, r18
    2e4c:	70 0d       	add	r23, r0
    2e4e:	81 1d       	adc	r24, r1
    2e50:	11 24       	eor	r1, r1
    2e52:	91 1d       	adc	r25, r1
    2e54:	08 95       	ret

00002e56 <__udivmodhi4>:
    2e56:	aa 1b       	sub	r26, r26
    2e58:	bb 1b       	sub	r27, r27
    2e5a:	51 e1       	ldi	r21, 0x11	; 17
    2e5c:	07 c0       	rjmp	.+14     	; 0x2e6c <__udivmodhi4_ep>

00002e5e <__udivmodhi4_loop>:
    2e5e:	aa 1f       	adc	r26, r26
    2e60:	bb 1f       	adc	r27, r27
    2e62:	a6 17       	cp	r26, r22
    2e64:	b7 07       	cpc	r27, r23
    2e66:	10 f0       	brcs	.+4      	; 0x2e6c <__udivmodhi4_ep>
    2e68:	a6 1b       	sub	r26, r22
    2e6a:	b7 0b       	sbc	r27, r23

00002e6c <__udivmodhi4_ep>:
    2e6c:	88 1f       	adc	r24, r24
    2e6e:	99 1f       	adc	r25, r25
    2e70:	5a 95       	dec	r21
    2e72:	a9 f7       	brne	.-22     	; 0x2e5e <__udivmodhi4_loop>
    2e74:	80 95       	com	r24
    2e76:	90 95       	com	r25
    2e78:	bc 01       	movw	r22, r24
    2e7a:	cd 01       	movw	r24, r26
    2e7c:	08 95       	ret

00002e7e <do_rand>:
    2e7e:	8f 92       	push	r8
    2e80:	9f 92       	push	r9
    2e82:	af 92       	push	r10
    2e84:	bf 92       	push	r11
    2e86:	cf 92       	push	r12
    2e88:	df 92       	push	r13
    2e8a:	ef 92       	push	r14
    2e8c:	ff 92       	push	r15
    2e8e:	cf 93       	push	r28
    2e90:	df 93       	push	r29
    2e92:	ec 01       	movw	r28, r24
    2e94:	68 81       	ld	r22, Y
    2e96:	79 81       	ldd	r23, Y+1	; 0x01
    2e98:	8a 81       	ldd	r24, Y+2	; 0x02
    2e9a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e9c:	61 15       	cp	r22, r1
    2e9e:	71 05       	cpc	r23, r1
    2ea0:	81 05       	cpc	r24, r1
    2ea2:	91 05       	cpc	r25, r1
    2ea4:	21 f4       	brne	.+8      	; 0x2eae <do_rand+0x30>
    2ea6:	64 e2       	ldi	r22, 0x24	; 36
    2ea8:	79 ed       	ldi	r23, 0xD9	; 217
    2eaa:	8b e5       	ldi	r24, 0x5B	; 91
    2eac:	97 e0       	ldi	r25, 0x07	; 7
    2eae:	2d e1       	ldi	r18, 0x1D	; 29
    2eb0:	33 ef       	ldi	r19, 0xF3	; 243
    2eb2:	41 e0       	ldi	r20, 0x01	; 1
    2eb4:	50 e0       	ldi	r21, 0x00	; 0
    2eb6:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <__divmodsi4>
    2eba:	49 01       	movw	r8, r18
    2ebc:	5a 01       	movw	r10, r20
    2ebe:	9b 01       	movw	r18, r22
    2ec0:	ac 01       	movw	r20, r24
    2ec2:	a7 ea       	ldi	r26, 0xA7	; 167
    2ec4:	b1 e4       	ldi	r27, 0x41	; 65
    2ec6:	0e 94 91 1a 	call	0x3522	; 0x3522 <__muluhisi3>
    2eca:	6b 01       	movw	r12, r22
    2ecc:	7c 01       	movw	r14, r24
    2ece:	ac ee       	ldi	r26, 0xEC	; 236
    2ed0:	b4 ef       	ldi	r27, 0xF4	; 244
    2ed2:	a5 01       	movw	r20, r10
    2ed4:	94 01       	movw	r18, r8
    2ed6:	0e 94 9f 1a 	call	0x353e	; 0x353e <__mulohisi3>
    2eda:	dc 01       	movw	r26, r24
    2edc:	cb 01       	movw	r24, r22
    2ede:	8c 0d       	add	r24, r12
    2ee0:	9d 1d       	adc	r25, r13
    2ee2:	ae 1d       	adc	r26, r14
    2ee4:	bf 1d       	adc	r27, r15
    2ee6:	b7 ff       	sbrs	r27, 7
    2ee8:	03 c0       	rjmp	.+6      	; 0x2ef0 <do_rand+0x72>
    2eea:	01 97       	sbiw	r24, 0x01	; 1
    2eec:	a1 09       	sbc	r26, r1
    2eee:	b0 48       	sbci	r27, 0x80	; 128
    2ef0:	88 83       	st	Y, r24
    2ef2:	99 83       	std	Y+1, r25	; 0x01
    2ef4:	aa 83       	std	Y+2, r26	; 0x02
    2ef6:	bb 83       	std	Y+3, r27	; 0x03
    2ef8:	9f 77       	andi	r25, 0x7F	; 127
    2efa:	df 91       	pop	r29
    2efc:	cf 91       	pop	r28
    2efe:	ff 90       	pop	r15
    2f00:	ef 90       	pop	r14
    2f02:	df 90       	pop	r13
    2f04:	cf 90       	pop	r12
    2f06:	bf 90       	pop	r11
    2f08:	af 90       	pop	r10
    2f0a:	9f 90       	pop	r9
    2f0c:	8f 90       	pop	r8
    2f0e:	08 95       	ret

00002f10 <rand_r>:
    2f10:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <do_rand>
    2f14:	08 95       	ret

00002f16 <rand>:
    2f16:	80 e0       	ldi	r24, 0x00	; 0
    2f18:	91 e0       	ldi	r25, 0x01	; 1
    2f1a:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <do_rand>
    2f1e:	08 95       	ret

00002f20 <srand>:
    2f20:	a0 e0       	ldi	r26, 0x00	; 0
    2f22:	b0 e0       	ldi	r27, 0x00	; 0
    2f24:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    2f28:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    2f2c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    2f30:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    2f34:	08 95       	ret

00002f36 <printf>:
    2f36:	a0 e0       	ldi	r26, 0x00	; 0
    2f38:	b0 e0       	ldi	r27, 0x00	; 0
    2f3a:	e1 ea       	ldi	r30, 0xA1	; 161
    2f3c:	f7 e1       	ldi	r31, 0x17	; 23
    2f3e:	0c 94 b4 1a 	jmp	0x3568	; 0x3568 <__prologue_saves__+0x20>
    2f42:	ae 01       	movw	r20, r28
    2f44:	4b 5f       	subi	r20, 0xFB	; 251
    2f46:	5f 4f       	sbci	r21, 0xFF	; 255
    2f48:	fa 01       	movw	r30, r20
    2f4a:	61 91       	ld	r22, Z+
    2f4c:	71 91       	ld	r23, Z+
    2f4e:	af 01       	movw	r20, r30
    2f50:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <__iob+0x2>
    2f54:	90 91 14 03 	lds	r25, 0x0314	; 0x800314 <__iob+0x3>
    2f58:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <vfprintf>
    2f5c:	e2 e0       	ldi	r30, 0x02	; 2
    2f5e:	0c 94 d0 1a 	jmp	0x35a0	; 0x35a0 <__epilogue_restores__+0x20>

00002f62 <puts>:
    2f62:	0f 93       	push	r16
    2f64:	1f 93       	push	r17
    2f66:	cf 93       	push	r28
    2f68:	df 93       	push	r29
    2f6a:	e0 91 13 03 	lds	r30, 0x0313	; 0x800313 <__iob+0x2>
    2f6e:	f0 91 14 03 	lds	r31, 0x0314	; 0x800314 <__iob+0x3>
    2f72:	23 81       	ldd	r18, Z+3	; 0x03
    2f74:	21 ff       	sbrs	r18, 1
    2f76:	1b c0       	rjmp	.+54     	; 0x2fae <puts+0x4c>
    2f78:	8c 01       	movw	r16, r24
    2f7a:	d0 e0       	ldi	r29, 0x00	; 0
    2f7c:	c0 e0       	ldi	r28, 0x00	; 0
    2f7e:	f8 01       	movw	r30, r16
    2f80:	81 91       	ld	r24, Z+
    2f82:	8f 01       	movw	r16, r30
    2f84:	60 91 13 03 	lds	r22, 0x0313	; 0x800313 <__iob+0x2>
    2f88:	70 91 14 03 	lds	r23, 0x0314	; 0x800314 <__iob+0x3>
    2f8c:	db 01       	movw	r26, r22
    2f8e:	18 96       	adiw	r26, 0x08	; 8
    2f90:	ed 91       	ld	r30, X+
    2f92:	fc 91       	ld	r31, X
    2f94:	19 97       	sbiw	r26, 0x09	; 9
    2f96:	88 23       	and	r24, r24
    2f98:	31 f0       	breq	.+12     	; 0x2fa6 <puts+0x44>
    2f9a:	09 95       	icall
    2f9c:	89 2b       	or	r24, r25
    2f9e:	79 f3       	breq	.-34     	; 0x2f7e <puts+0x1c>
    2fa0:	df ef       	ldi	r29, 0xFF	; 255
    2fa2:	cf ef       	ldi	r28, 0xFF	; 255
    2fa4:	ec cf       	rjmp	.-40     	; 0x2f7e <puts+0x1c>
    2fa6:	8a e0       	ldi	r24, 0x0A	; 10
    2fa8:	09 95       	icall
    2faa:	89 2b       	or	r24, r25
    2fac:	19 f0       	breq	.+6      	; 0x2fb4 <puts+0x52>
    2fae:	8f ef       	ldi	r24, 0xFF	; 255
    2fb0:	9f ef       	ldi	r25, 0xFF	; 255
    2fb2:	02 c0       	rjmp	.+4      	; 0x2fb8 <puts+0x56>
    2fb4:	8d 2f       	mov	r24, r29
    2fb6:	9c 2f       	mov	r25, r28
    2fb8:	df 91       	pop	r29
    2fba:	cf 91       	pop	r28
    2fbc:	1f 91       	pop	r17
    2fbe:	0f 91       	pop	r16
    2fc0:	08 95       	ret

00002fc2 <vfprintf>:
    2fc2:	ab e0       	ldi	r26, 0x0B	; 11
    2fc4:	b0 e0       	ldi	r27, 0x00	; 0
    2fc6:	e7 ee       	ldi	r30, 0xE7	; 231
    2fc8:	f7 e1       	ldi	r31, 0x17	; 23
    2fca:	0c 94 a4 1a 	jmp	0x3548	; 0x3548 <__prologue_saves__>
    2fce:	6c 01       	movw	r12, r24
    2fd0:	7b 01       	movw	r14, r22
    2fd2:	8a 01       	movw	r16, r20
    2fd4:	fc 01       	movw	r30, r24
    2fd6:	17 82       	std	Z+7, r1	; 0x07
    2fd8:	16 82       	std	Z+6, r1	; 0x06
    2fda:	83 81       	ldd	r24, Z+3	; 0x03
    2fdc:	81 ff       	sbrs	r24, 1
    2fde:	cc c1       	rjmp	.+920    	; 0x3378 <vfprintf+0x3b6>
    2fe0:	ce 01       	movw	r24, r28
    2fe2:	01 96       	adiw	r24, 0x01	; 1
    2fe4:	3c 01       	movw	r6, r24
    2fe6:	f6 01       	movw	r30, r12
    2fe8:	93 81       	ldd	r25, Z+3	; 0x03
    2fea:	f7 01       	movw	r30, r14
    2fec:	93 fd       	sbrc	r25, 3
    2fee:	85 91       	lpm	r24, Z+
    2ff0:	93 ff       	sbrs	r25, 3
    2ff2:	81 91       	ld	r24, Z+
    2ff4:	7f 01       	movw	r14, r30
    2ff6:	88 23       	and	r24, r24
    2ff8:	09 f4       	brne	.+2      	; 0x2ffc <vfprintf+0x3a>
    2ffa:	ba c1       	rjmp	.+884    	; 0x3370 <vfprintf+0x3ae>
    2ffc:	85 32       	cpi	r24, 0x25	; 37
    2ffe:	39 f4       	brne	.+14     	; 0x300e <vfprintf+0x4c>
    3000:	93 fd       	sbrc	r25, 3
    3002:	85 91       	lpm	r24, Z+
    3004:	93 ff       	sbrs	r25, 3
    3006:	81 91       	ld	r24, Z+
    3008:	7f 01       	movw	r14, r30
    300a:	85 32       	cpi	r24, 0x25	; 37
    300c:	29 f4       	brne	.+10     	; 0x3018 <vfprintf+0x56>
    300e:	b6 01       	movw	r22, r12
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <fputc>
    3016:	e7 cf       	rjmp	.-50     	; 0x2fe6 <vfprintf+0x24>
    3018:	91 2c       	mov	r9, r1
    301a:	21 2c       	mov	r2, r1
    301c:	31 2c       	mov	r3, r1
    301e:	ff e1       	ldi	r31, 0x1F	; 31
    3020:	f3 15       	cp	r31, r3
    3022:	d8 f0       	brcs	.+54     	; 0x305a <vfprintf+0x98>
    3024:	8b 32       	cpi	r24, 0x2B	; 43
    3026:	79 f0       	breq	.+30     	; 0x3046 <vfprintf+0x84>
    3028:	38 f4       	brcc	.+14     	; 0x3038 <vfprintf+0x76>
    302a:	80 32       	cpi	r24, 0x20	; 32
    302c:	79 f0       	breq	.+30     	; 0x304c <vfprintf+0x8a>
    302e:	83 32       	cpi	r24, 0x23	; 35
    3030:	a1 f4       	brne	.+40     	; 0x305a <vfprintf+0x98>
    3032:	23 2d       	mov	r18, r3
    3034:	20 61       	ori	r18, 0x10	; 16
    3036:	1d c0       	rjmp	.+58     	; 0x3072 <vfprintf+0xb0>
    3038:	8d 32       	cpi	r24, 0x2D	; 45
    303a:	61 f0       	breq	.+24     	; 0x3054 <vfprintf+0x92>
    303c:	80 33       	cpi	r24, 0x30	; 48
    303e:	69 f4       	brne	.+26     	; 0x305a <vfprintf+0x98>
    3040:	23 2d       	mov	r18, r3
    3042:	21 60       	ori	r18, 0x01	; 1
    3044:	16 c0       	rjmp	.+44     	; 0x3072 <vfprintf+0xb0>
    3046:	83 2d       	mov	r24, r3
    3048:	82 60       	ori	r24, 0x02	; 2
    304a:	38 2e       	mov	r3, r24
    304c:	e3 2d       	mov	r30, r3
    304e:	e4 60       	ori	r30, 0x04	; 4
    3050:	3e 2e       	mov	r3, r30
    3052:	2a c0       	rjmp	.+84     	; 0x30a8 <vfprintf+0xe6>
    3054:	f3 2d       	mov	r31, r3
    3056:	f8 60       	ori	r31, 0x08	; 8
    3058:	1d c0       	rjmp	.+58     	; 0x3094 <vfprintf+0xd2>
    305a:	37 fc       	sbrc	r3, 7
    305c:	2d c0       	rjmp	.+90     	; 0x30b8 <vfprintf+0xf6>
    305e:	20 ed       	ldi	r18, 0xD0	; 208
    3060:	28 0f       	add	r18, r24
    3062:	2a 30       	cpi	r18, 0x0A	; 10
    3064:	40 f0       	brcs	.+16     	; 0x3076 <vfprintf+0xb4>
    3066:	8e 32       	cpi	r24, 0x2E	; 46
    3068:	b9 f4       	brne	.+46     	; 0x3098 <vfprintf+0xd6>
    306a:	36 fc       	sbrc	r3, 6
    306c:	81 c1       	rjmp	.+770    	; 0x3370 <vfprintf+0x3ae>
    306e:	23 2d       	mov	r18, r3
    3070:	20 64       	ori	r18, 0x40	; 64
    3072:	32 2e       	mov	r3, r18
    3074:	19 c0       	rjmp	.+50     	; 0x30a8 <vfprintf+0xe6>
    3076:	36 fe       	sbrs	r3, 6
    3078:	06 c0       	rjmp	.+12     	; 0x3086 <vfprintf+0xc4>
    307a:	8a e0       	ldi	r24, 0x0A	; 10
    307c:	98 9e       	mul	r9, r24
    307e:	20 0d       	add	r18, r0
    3080:	11 24       	eor	r1, r1
    3082:	92 2e       	mov	r9, r18
    3084:	11 c0       	rjmp	.+34     	; 0x30a8 <vfprintf+0xe6>
    3086:	ea e0       	ldi	r30, 0x0A	; 10
    3088:	2e 9e       	mul	r2, r30
    308a:	20 0d       	add	r18, r0
    308c:	11 24       	eor	r1, r1
    308e:	22 2e       	mov	r2, r18
    3090:	f3 2d       	mov	r31, r3
    3092:	f0 62       	ori	r31, 0x20	; 32
    3094:	3f 2e       	mov	r3, r31
    3096:	08 c0       	rjmp	.+16     	; 0x30a8 <vfprintf+0xe6>
    3098:	8c 36       	cpi	r24, 0x6C	; 108
    309a:	21 f4       	brne	.+8      	; 0x30a4 <vfprintf+0xe2>
    309c:	83 2d       	mov	r24, r3
    309e:	80 68       	ori	r24, 0x80	; 128
    30a0:	38 2e       	mov	r3, r24
    30a2:	02 c0       	rjmp	.+4      	; 0x30a8 <vfprintf+0xe6>
    30a4:	88 36       	cpi	r24, 0x68	; 104
    30a6:	41 f4       	brne	.+16     	; 0x30b8 <vfprintf+0xf6>
    30a8:	f7 01       	movw	r30, r14
    30aa:	93 fd       	sbrc	r25, 3
    30ac:	85 91       	lpm	r24, Z+
    30ae:	93 ff       	sbrs	r25, 3
    30b0:	81 91       	ld	r24, Z+
    30b2:	7f 01       	movw	r14, r30
    30b4:	81 11       	cpse	r24, r1
    30b6:	b3 cf       	rjmp	.-154    	; 0x301e <vfprintf+0x5c>
    30b8:	98 2f       	mov	r25, r24
    30ba:	9f 7d       	andi	r25, 0xDF	; 223
    30bc:	95 54       	subi	r25, 0x45	; 69
    30be:	93 30       	cpi	r25, 0x03	; 3
    30c0:	28 f4       	brcc	.+10     	; 0x30cc <vfprintf+0x10a>
    30c2:	0c 5f       	subi	r16, 0xFC	; 252
    30c4:	1f 4f       	sbci	r17, 0xFF	; 255
    30c6:	9f e3       	ldi	r25, 0x3F	; 63
    30c8:	99 83       	std	Y+1, r25	; 0x01
    30ca:	0d c0       	rjmp	.+26     	; 0x30e6 <vfprintf+0x124>
    30cc:	83 36       	cpi	r24, 0x63	; 99
    30ce:	31 f0       	breq	.+12     	; 0x30dc <vfprintf+0x11a>
    30d0:	83 37       	cpi	r24, 0x73	; 115
    30d2:	71 f0       	breq	.+28     	; 0x30f0 <vfprintf+0x12e>
    30d4:	83 35       	cpi	r24, 0x53	; 83
    30d6:	09 f0       	breq	.+2      	; 0x30da <vfprintf+0x118>
    30d8:	59 c0       	rjmp	.+178    	; 0x318c <vfprintf+0x1ca>
    30da:	21 c0       	rjmp	.+66     	; 0x311e <vfprintf+0x15c>
    30dc:	f8 01       	movw	r30, r16
    30de:	80 81       	ld	r24, Z
    30e0:	89 83       	std	Y+1, r24	; 0x01
    30e2:	0e 5f       	subi	r16, 0xFE	; 254
    30e4:	1f 4f       	sbci	r17, 0xFF	; 255
    30e6:	88 24       	eor	r8, r8
    30e8:	83 94       	inc	r8
    30ea:	91 2c       	mov	r9, r1
    30ec:	53 01       	movw	r10, r6
    30ee:	13 c0       	rjmp	.+38     	; 0x3116 <vfprintf+0x154>
    30f0:	28 01       	movw	r4, r16
    30f2:	f2 e0       	ldi	r31, 0x02	; 2
    30f4:	4f 0e       	add	r4, r31
    30f6:	51 1c       	adc	r5, r1
    30f8:	f8 01       	movw	r30, r16
    30fa:	a0 80       	ld	r10, Z
    30fc:	b1 80       	ldd	r11, Z+1	; 0x01
    30fe:	36 fe       	sbrs	r3, 6
    3100:	03 c0       	rjmp	.+6      	; 0x3108 <vfprintf+0x146>
    3102:	69 2d       	mov	r22, r9
    3104:	70 e0       	ldi	r23, 0x00	; 0
    3106:	02 c0       	rjmp	.+4      	; 0x310c <vfprintf+0x14a>
    3108:	6f ef       	ldi	r22, 0xFF	; 255
    310a:	7f ef       	ldi	r23, 0xFF	; 255
    310c:	c5 01       	movw	r24, r10
    310e:	0e 94 cd 19 	call	0x339a	; 0x339a <strnlen>
    3112:	4c 01       	movw	r8, r24
    3114:	82 01       	movw	r16, r4
    3116:	f3 2d       	mov	r31, r3
    3118:	ff 77       	andi	r31, 0x7F	; 127
    311a:	3f 2e       	mov	r3, r31
    311c:	16 c0       	rjmp	.+44     	; 0x314a <vfprintf+0x188>
    311e:	28 01       	movw	r4, r16
    3120:	22 e0       	ldi	r18, 0x02	; 2
    3122:	42 0e       	add	r4, r18
    3124:	51 1c       	adc	r5, r1
    3126:	f8 01       	movw	r30, r16
    3128:	a0 80       	ld	r10, Z
    312a:	b1 80       	ldd	r11, Z+1	; 0x01
    312c:	36 fe       	sbrs	r3, 6
    312e:	03 c0       	rjmp	.+6      	; 0x3136 <vfprintf+0x174>
    3130:	69 2d       	mov	r22, r9
    3132:	70 e0       	ldi	r23, 0x00	; 0
    3134:	02 c0       	rjmp	.+4      	; 0x313a <vfprintf+0x178>
    3136:	6f ef       	ldi	r22, 0xFF	; 255
    3138:	7f ef       	ldi	r23, 0xFF	; 255
    313a:	c5 01       	movw	r24, r10
    313c:	0e 94 c2 19 	call	0x3384	; 0x3384 <strnlen_P>
    3140:	4c 01       	movw	r8, r24
    3142:	f3 2d       	mov	r31, r3
    3144:	f0 68       	ori	r31, 0x80	; 128
    3146:	3f 2e       	mov	r3, r31
    3148:	82 01       	movw	r16, r4
    314a:	33 fc       	sbrc	r3, 3
    314c:	1b c0       	rjmp	.+54     	; 0x3184 <vfprintf+0x1c2>
    314e:	82 2d       	mov	r24, r2
    3150:	90 e0       	ldi	r25, 0x00	; 0
    3152:	88 16       	cp	r8, r24
    3154:	99 06       	cpc	r9, r25
    3156:	b0 f4       	brcc	.+44     	; 0x3184 <vfprintf+0x1c2>
    3158:	b6 01       	movw	r22, r12
    315a:	80 e2       	ldi	r24, 0x20	; 32
    315c:	90 e0       	ldi	r25, 0x00	; 0
    315e:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <fputc>
    3162:	2a 94       	dec	r2
    3164:	f4 cf       	rjmp	.-24     	; 0x314e <vfprintf+0x18c>
    3166:	f5 01       	movw	r30, r10
    3168:	37 fc       	sbrc	r3, 7
    316a:	85 91       	lpm	r24, Z+
    316c:	37 fe       	sbrs	r3, 7
    316e:	81 91       	ld	r24, Z+
    3170:	5f 01       	movw	r10, r30
    3172:	b6 01       	movw	r22, r12
    3174:	90 e0       	ldi	r25, 0x00	; 0
    3176:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <fputc>
    317a:	21 10       	cpse	r2, r1
    317c:	2a 94       	dec	r2
    317e:	21 e0       	ldi	r18, 0x01	; 1
    3180:	82 1a       	sub	r8, r18
    3182:	91 08       	sbc	r9, r1
    3184:	81 14       	cp	r8, r1
    3186:	91 04       	cpc	r9, r1
    3188:	71 f7       	brne	.-36     	; 0x3166 <vfprintf+0x1a4>
    318a:	e8 c0       	rjmp	.+464    	; 0x335c <vfprintf+0x39a>
    318c:	84 36       	cpi	r24, 0x64	; 100
    318e:	11 f0       	breq	.+4      	; 0x3194 <vfprintf+0x1d2>
    3190:	89 36       	cpi	r24, 0x69	; 105
    3192:	41 f5       	brne	.+80     	; 0x31e4 <vfprintf+0x222>
    3194:	f8 01       	movw	r30, r16
    3196:	37 fe       	sbrs	r3, 7
    3198:	07 c0       	rjmp	.+14     	; 0x31a8 <vfprintf+0x1e6>
    319a:	60 81       	ld	r22, Z
    319c:	71 81       	ldd	r23, Z+1	; 0x01
    319e:	82 81       	ldd	r24, Z+2	; 0x02
    31a0:	93 81       	ldd	r25, Z+3	; 0x03
    31a2:	0c 5f       	subi	r16, 0xFC	; 252
    31a4:	1f 4f       	sbci	r17, 0xFF	; 255
    31a6:	08 c0       	rjmp	.+16     	; 0x31b8 <vfprintf+0x1f6>
    31a8:	60 81       	ld	r22, Z
    31aa:	71 81       	ldd	r23, Z+1	; 0x01
    31ac:	07 2e       	mov	r0, r23
    31ae:	00 0c       	add	r0, r0
    31b0:	88 0b       	sbc	r24, r24
    31b2:	99 0b       	sbc	r25, r25
    31b4:	0e 5f       	subi	r16, 0xFE	; 254
    31b6:	1f 4f       	sbci	r17, 0xFF	; 255
    31b8:	f3 2d       	mov	r31, r3
    31ba:	ff 76       	andi	r31, 0x6F	; 111
    31bc:	3f 2e       	mov	r3, r31
    31be:	97 ff       	sbrs	r25, 7
    31c0:	09 c0       	rjmp	.+18     	; 0x31d4 <vfprintf+0x212>
    31c2:	90 95       	com	r25
    31c4:	80 95       	com	r24
    31c6:	70 95       	com	r23
    31c8:	61 95       	neg	r22
    31ca:	7f 4f       	sbci	r23, 0xFF	; 255
    31cc:	8f 4f       	sbci	r24, 0xFF	; 255
    31ce:	9f 4f       	sbci	r25, 0xFF	; 255
    31d0:	f0 68       	ori	r31, 0x80	; 128
    31d2:	3f 2e       	mov	r3, r31
    31d4:	2a e0       	ldi	r18, 0x0A	; 10
    31d6:	30 e0       	ldi	r19, 0x00	; 0
    31d8:	a3 01       	movw	r20, r6
    31da:	0e 94 14 1a 	call	0x3428	; 0x3428 <__ultoa_invert>
    31de:	88 2e       	mov	r8, r24
    31e0:	86 18       	sub	r8, r6
    31e2:	45 c0       	rjmp	.+138    	; 0x326e <vfprintf+0x2ac>
    31e4:	85 37       	cpi	r24, 0x75	; 117
    31e6:	31 f4       	brne	.+12     	; 0x31f4 <vfprintf+0x232>
    31e8:	23 2d       	mov	r18, r3
    31ea:	2f 7e       	andi	r18, 0xEF	; 239
    31ec:	b2 2e       	mov	r11, r18
    31ee:	2a e0       	ldi	r18, 0x0A	; 10
    31f0:	30 e0       	ldi	r19, 0x00	; 0
    31f2:	25 c0       	rjmp	.+74     	; 0x323e <vfprintf+0x27c>
    31f4:	93 2d       	mov	r25, r3
    31f6:	99 7f       	andi	r25, 0xF9	; 249
    31f8:	b9 2e       	mov	r11, r25
    31fa:	8f 36       	cpi	r24, 0x6F	; 111
    31fc:	c1 f0       	breq	.+48     	; 0x322e <vfprintf+0x26c>
    31fe:	18 f4       	brcc	.+6      	; 0x3206 <vfprintf+0x244>
    3200:	88 35       	cpi	r24, 0x58	; 88
    3202:	79 f0       	breq	.+30     	; 0x3222 <vfprintf+0x260>
    3204:	b5 c0       	rjmp	.+362    	; 0x3370 <vfprintf+0x3ae>
    3206:	80 37       	cpi	r24, 0x70	; 112
    3208:	19 f0       	breq	.+6      	; 0x3210 <vfprintf+0x24e>
    320a:	88 37       	cpi	r24, 0x78	; 120
    320c:	21 f0       	breq	.+8      	; 0x3216 <vfprintf+0x254>
    320e:	b0 c0       	rjmp	.+352    	; 0x3370 <vfprintf+0x3ae>
    3210:	e9 2f       	mov	r30, r25
    3212:	e0 61       	ori	r30, 0x10	; 16
    3214:	be 2e       	mov	r11, r30
    3216:	b4 fe       	sbrs	r11, 4
    3218:	0d c0       	rjmp	.+26     	; 0x3234 <vfprintf+0x272>
    321a:	fb 2d       	mov	r31, r11
    321c:	f4 60       	ori	r31, 0x04	; 4
    321e:	bf 2e       	mov	r11, r31
    3220:	09 c0       	rjmp	.+18     	; 0x3234 <vfprintf+0x272>
    3222:	34 fe       	sbrs	r3, 4
    3224:	0a c0       	rjmp	.+20     	; 0x323a <vfprintf+0x278>
    3226:	29 2f       	mov	r18, r25
    3228:	26 60       	ori	r18, 0x06	; 6
    322a:	b2 2e       	mov	r11, r18
    322c:	06 c0       	rjmp	.+12     	; 0x323a <vfprintf+0x278>
    322e:	28 e0       	ldi	r18, 0x08	; 8
    3230:	30 e0       	ldi	r19, 0x00	; 0
    3232:	05 c0       	rjmp	.+10     	; 0x323e <vfprintf+0x27c>
    3234:	20 e1       	ldi	r18, 0x10	; 16
    3236:	30 e0       	ldi	r19, 0x00	; 0
    3238:	02 c0       	rjmp	.+4      	; 0x323e <vfprintf+0x27c>
    323a:	20 e1       	ldi	r18, 0x10	; 16
    323c:	32 e0       	ldi	r19, 0x02	; 2
    323e:	f8 01       	movw	r30, r16
    3240:	b7 fe       	sbrs	r11, 7
    3242:	07 c0       	rjmp	.+14     	; 0x3252 <vfprintf+0x290>
    3244:	60 81       	ld	r22, Z
    3246:	71 81       	ldd	r23, Z+1	; 0x01
    3248:	82 81       	ldd	r24, Z+2	; 0x02
    324a:	93 81       	ldd	r25, Z+3	; 0x03
    324c:	0c 5f       	subi	r16, 0xFC	; 252
    324e:	1f 4f       	sbci	r17, 0xFF	; 255
    3250:	06 c0       	rjmp	.+12     	; 0x325e <vfprintf+0x29c>
    3252:	60 81       	ld	r22, Z
    3254:	71 81       	ldd	r23, Z+1	; 0x01
    3256:	80 e0       	ldi	r24, 0x00	; 0
    3258:	90 e0       	ldi	r25, 0x00	; 0
    325a:	0e 5f       	subi	r16, 0xFE	; 254
    325c:	1f 4f       	sbci	r17, 0xFF	; 255
    325e:	a3 01       	movw	r20, r6
    3260:	0e 94 14 1a 	call	0x3428	; 0x3428 <__ultoa_invert>
    3264:	88 2e       	mov	r8, r24
    3266:	86 18       	sub	r8, r6
    3268:	fb 2d       	mov	r31, r11
    326a:	ff 77       	andi	r31, 0x7F	; 127
    326c:	3f 2e       	mov	r3, r31
    326e:	36 fe       	sbrs	r3, 6
    3270:	0d c0       	rjmp	.+26     	; 0x328c <vfprintf+0x2ca>
    3272:	23 2d       	mov	r18, r3
    3274:	2e 7f       	andi	r18, 0xFE	; 254
    3276:	a2 2e       	mov	r10, r18
    3278:	89 14       	cp	r8, r9
    327a:	58 f4       	brcc	.+22     	; 0x3292 <vfprintf+0x2d0>
    327c:	34 fe       	sbrs	r3, 4
    327e:	0b c0       	rjmp	.+22     	; 0x3296 <vfprintf+0x2d4>
    3280:	32 fc       	sbrc	r3, 2
    3282:	09 c0       	rjmp	.+18     	; 0x3296 <vfprintf+0x2d4>
    3284:	83 2d       	mov	r24, r3
    3286:	8e 7e       	andi	r24, 0xEE	; 238
    3288:	a8 2e       	mov	r10, r24
    328a:	05 c0       	rjmp	.+10     	; 0x3296 <vfprintf+0x2d4>
    328c:	b8 2c       	mov	r11, r8
    328e:	a3 2c       	mov	r10, r3
    3290:	03 c0       	rjmp	.+6      	; 0x3298 <vfprintf+0x2d6>
    3292:	b8 2c       	mov	r11, r8
    3294:	01 c0       	rjmp	.+2      	; 0x3298 <vfprintf+0x2d6>
    3296:	b9 2c       	mov	r11, r9
    3298:	a4 fe       	sbrs	r10, 4
    329a:	0f c0       	rjmp	.+30     	; 0x32ba <vfprintf+0x2f8>
    329c:	fe 01       	movw	r30, r28
    329e:	e8 0d       	add	r30, r8
    32a0:	f1 1d       	adc	r31, r1
    32a2:	80 81       	ld	r24, Z
    32a4:	80 33       	cpi	r24, 0x30	; 48
    32a6:	21 f4       	brne	.+8      	; 0x32b0 <vfprintf+0x2ee>
    32a8:	9a 2d       	mov	r25, r10
    32aa:	99 7e       	andi	r25, 0xE9	; 233
    32ac:	a9 2e       	mov	r10, r25
    32ae:	09 c0       	rjmp	.+18     	; 0x32c2 <vfprintf+0x300>
    32b0:	a2 fe       	sbrs	r10, 2
    32b2:	06 c0       	rjmp	.+12     	; 0x32c0 <vfprintf+0x2fe>
    32b4:	b3 94       	inc	r11
    32b6:	b3 94       	inc	r11
    32b8:	04 c0       	rjmp	.+8      	; 0x32c2 <vfprintf+0x300>
    32ba:	8a 2d       	mov	r24, r10
    32bc:	86 78       	andi	r24, 0x86	; 134
    32be:	09 f0       	breq	.+2      	; 0x32c2 <vfprintf+0x300>
    32c0:	b3 94       	inc	r11
    32c2:	a3 fc       	sbrc	r10, 3
    32c4:	11 c0       	rjmp	.+34     	; 0x32e8 <vfprintf+0x326>
    32c6:	a0 fe       	sbrs	r10, 0
    32c8:	06 c0       	rjmp	.+12     	; 0x32d6 <vfprintf+0x314>
    32ca:	b2 14       	cp	r11, r2
    32cc:	88 f4       	brcc	.+34     	; 0x32f0 <vfprintf+0x32e>
    32ce:	28 0c       	add	r2, r8
    32d0:	92 2c       	mov	r9, r2
    32d2:	9b 18       	sub	r9, r11
    32d4:	0e c0       	rjmp	.+28     	; 0x32f2 <vfprintf+0x330>
    32d6:	b2 14       	cp	r11, r2
    32d8:	60 f4       	brcc	.+24     	; 0x32f2 <vfprintf+0x330>
    32da:	b6 01       	movw	r22, r12
    32dc:	80 e2       	ldi	r24, 0x20	; 32
    32de:	90 e0       	ldi	r25, 0x00	; 0
    32e0:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <fputc>
    32e4:	b3 94       	inc	r11
    32e6:	f7 cf       	rjmp	.-18     	; 0x32d6 <vfprintf+0x314>
    32e8:	b2 14       	cp	r11, r2
    32ea:	18 f4       	brcc	.+6      	; 0x32f2 <vfprintf+0x330>
    32ec:	2b 18       	sub	r2, r11
    32ee:	02 c0       	rjmp	.+4      	; 0x32f4 <vfprintf+0x332>
    32f0:	98 2c       	mov	r9, r8
    32f2:	21 2c       	mov	r2, r1
    32f4:	a4 fe       	sbrs	r10, 4
    32f6:	10 c0       	rjmp	.+32     	; 0x3318 <vfprintf+0x356>
    32f8:	b6 01       	movw	r22, r12
    32fa:	80 e3       	ldi	r24, 0x30	; 48
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <fputc>
    3302:	a2 fe       	sbrs	r10, 2
    3304:	17 c0       	rjmp	.+46     	; 0x3334 <vfprintf+0x372>
    3306:	a1 fc       	sbrc	r10, 1
    3308:	03 c0       	rjmp	.+6      	; 0x3310 <vfprintf+0x34e>
    330a:	88 e7       	ldi	r24, 0x78	; 120
    330c:	90 e0       	ldi	r25, 0x00	; 0
    330e:	02 c0       	rjmp	.+4      	; 0x3314 <vfprintf+0x352>
    3310:	88 e5       	ldi	r24, 0x58	; 88
    3312:	90 e0       	ldi	r25, 0x00	; 0
    3314:	b6 01       	movw	r22, r12
    3316:	0c c0       	rjmp	.+24     	; 0x3330 <vfprintf+0x36e>
    3318:	8a 2d       	mov	r24, r10
    331a:	86 78       	andi	r24, 0x86	; 134
    331c:	59 f0       	breq	.+22     	; 0x3334 <vfprintf+0x372>
    331e:	a1 fe       	sbrs	r10, 1
    3320:	02 c0       	rjmp	.+4      	; 0x3326 <vfprintf+0x364>
    3322:	8b e2       	ldi	r24, 0x2B	; 43
    3324:	01 c0       	rjmp	.+2      	; 0x3328 <vfprintf+0x366>
    3326:	80 e2       	ldi	r24, 0x20	; 32
    3328:	a7 fc       	sbrc	r10, 7
    332a:	8d e2       	ldi	r24, 0x2D	; 45
    332c:	b6 01       	movw	r22, r12
    332e:	90 e0       	ldi	r25, 0x00	; 0
    3330:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <fputc>
    3334:	89 14       	cp	r8, r9
    3336:	38 f4       	brcc	.+14     	; 0x3346 <vfprintf+0x384>
    3338:	b6 01       	movw	r22, r12
    333a:	80 e3       	ldi	r24, 0x30	; 48
    333c:	90 e0       	ldi	r25, 0x00	; 0
    333e:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <fputc>
    3342:	9a 94       	dec	r9
    3344:	f7 cf       	rjmp	.-18     	; 0x3334 <vfprintf+0x372>
    3346:	8a 94       	dec	r8
    3348:	f3 01       	movw	r30, r6
    334a:	e8 0d       	add	r30, r8
    334c:	f1 1d       	adc	r31, r1
    334e:	80 81       	ld	r24, Z
    3350:	b6 01       	movw	r22, r12
    3352:	90 e0       	ldi	r25, 0x00	; 0
    3354:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <fputc>
    3358:	81 10       	cpse	r8, r1
    335a:	f5 cf       	rjmp	.-22     	; 0x3346 <vfprintf+0x384>
    335c:	22 20       	and	r2, r2
    335e:	09 f4       	brne	.+2      	; 0x3362 <vfprintf+0x3a0>
    3360:	42 ce       	rjmp	.-892    	; 0x2fe6 <vfprintf+0x24>
    3362:	b6 01       	movw	r22, r12
    3364:	80 e2       	ldi	r24, 0x20	; 32
    3366:	90 e0       	ldi	r25, 0x00	; 0
    3368:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <fputc>
    336c:	2a 94       	dec	r2
    336e:	f6 cf       	rjmp	.-20     	; 0x335c <vfprintf+0x39a>
    3370:	f6 01       	movw	r30, r12
    3372:	86 81       	ldd	r24, Z+6	; 0x06
    3374:	97 81       	ldd	r25, Z+7	; 0x07
    3376:	02 c0       	rjmp	.+4      	; 0x337c <vfprintf+0x3ba>
    3378:	8f ef       	ldi	r24, 0xFF	; 255
    337a:	9f ef       	ldi	r25, 0xFF	; 255
    337c:	2b 96       	adiw	r28, 0x0b	; 11
    337e:	e2 e1       	ldi	r30, 0x12	; 18
    3380:	0c 94 c0 1a 	jmp	0x3580	; 0x3580 <__epilogue_restores__>

00003384 <strnlen_P>:
    3384:	fc 01       	movw	r30, r24
    3386:	05 90       	lpm	r0, Z+
    3388:	61 50       	subi	r22, 0x01	; 1
    338a:	70 40       	sbci	r23, 0x00	; 0
    338c:	01 10       	cpse	r0, r1
    338e:	d8 f7       	brcc	.-10     	; 0x3386 <strnlen_P+0x2>
    3390:	80 95       	com	r24
    3392:	90 95       	com	r25
    3394:	8e 0f       	add	r24, r30
    3396:	9f 1f       	adc	r25, r31
    3398:	08 95       	ret

0000339a <strnlen>:
    339a:	fc 01       	movw	r30, r24
    339c:	61 50       	subi	r22, 0x01	; 1
    339e:	70 40       	sbci	r23, 0x00	; 0
    33a0:	01 90       	ld	r0, Z+
    33a2:	01 10       	cpse	r0, r1
    33a4:	d8 f7       	brcc	.-10     	; 0x339c <strnlen+0x2>
    33a6:	80 95       	com	r24
    33a8:	90 95       	com	r25
    33aa:	8e 0f       	add	r24, r30
    33ac:	9f 1f       	adc	r25, r31
    33ae:	08 95       	ret

000033b0 <fputc>:
    33b0:	0f 93       	push	r16
    33b2:	1f 93       	push	r17
    33b4:	cf 93       	push	r28
    33b6:	df 93       	push	r29
    33b8:	fb 01       	movw	r30, r22
    33ba:	23 81       	ldd	r18, Z+3	; 0x03
    33bc:	21 fd       	sbrc	r18, 1
    33be:	03 c0       	rjmp	.+6      	; 0x33c6 <fputc+0x16>
    33c0:	8f ef       	ldi	r24, 0xFF	; 255
    33c2:	9f ef       	ldi	r25, 0xFF	; 255
    33c4:	2c c0       	rjmp	.+88     	; 0x341e <fputc+0x6e>
    33c6:	22 ff       	sbrs	r18, 2
    33c8:	16 c0       	rjmp	.+44     	; 0x33f6 <fputc+0x46>
    33ca:	46 81       	ldd	r20, Z+6	; 0x06
    33cc:	57 81       	ldd	r21, Z+7	; 0x07
    33ce:	24 81       	ldd	r18, Z+4	; 0x04
    33d0:	35 81       	ldd	r19, Z+5	; 0x05
    33d2:	42 17       	cp	r20, r18
    33d4:	53 07       	cpc	r21, r19
    33d6:	44 f4       	brge	.+16     	; 0x33e8 <fputc+0x38>
    33d8:	a0 81       	ld	r26, Z
    33da:	b1 81       	ldd	r27, Z+1	; 0x01
    33dc:	9d 01       	movw	r18, r26
    33de:	2f 5f       	subi	r18, 0xFF	; 255
    33e0:	3f 4f       	sbci	r19, 0xFF	; 255
    33e2:	31 83       	std	Z+1, r19	; 0x01
    33e4:	20 83       	st	Z, r18
    33e6:	8c 93       	st	X, r24
    33e8:	26 81       	ldd	r18, Z+6	; 0x06
    33ea:	37 81       	ldd	r19, Z+7	; 0x07
    33ec:	2f 5f       	subi	r18, 0xFF	; 255
    33ee:	3f 4f       	sbci	r19, 0xFF	; 255
    33f0:	37 83       	std	Z+7, r19	; 0x07
    33f2:	26 83       	std	Z+6, r18	; 0x06
    33f4:	14 c0       	rjmp	.+40     	; 0x341e <fputc+0x6e>
    33f6:	8b 01       	movw	r16, r22
    33f8:	ec 01       	movw	r28, r24
    33fa:	fb 01       	movw	r30, r22
    33fc:	00 84       	ldd	r0, Z+8	; 0x08
    33fe:	f1 85       	ldd	r31, Z+9	; 0x09
    3400:	e0 2d       	mov	r30, r0
    3402:	09 95       	icall
    3404:	89 2b       	or	r24, r25
    3406:	e1 f6       	brne	.-72     	; 0x33c0 <fputc+0x10>
    3408:	d8 01       	movw	r26, r16
    340a:	16 96       	adiw	r26, 0x06	; 6
    340c:	8d 91       	ld	r24, X+
    340e:	9c 91       	ld	r25, X
    3410:	17 97       	sbiw	r26, 0x07	; 7
    3412:	01 96       	adiw	r24, 0x01	; 1
    3414:	17 96       	adiw	r26, 0x07	; 7
    3416:	9c 93       	st	X, r25
    3418:	8e 93       	st	-X, r24
    341a:	16 97       	sbiw	r26, 0x06	; 6
    341c:	ce 01       	movw	r24, r28
    341e:	df 91       	pop	r29
    3420:	cf 91       	pop	r28
    3422:	1f 91       	pop	r17
    3424:	0f 91       	pop	r16
    3426:	08 95       	ret

00003428 <__ultoa_invert>:
    3428:	fa 01       	movw	r30, r20
    342a:	aa 27       	eor	r26, r26
    342c:	28 30       	cpi	r18, 0x08	; 8
    342e:	51 f1       	breq	.+84     	; 0x3484 <__ultoa_invert+0x5c>
    3430:	20 31       	cpi	r18, 0x10	; 16
    3432:	81 f1       	breq	.+96     	; 0x3494 <__ultoa_invert+0x6c>
    3434:	e8 94       	clt
    3436:	6f 93       	push	r22
    3438:	6e 7f       	andi	r22, 0xFE	; 254
    343a:	6e 5f       	subi	r22, 0xFE	; 254
    343c:	7f 4f       	sbci	r23, 0xFF	; 255
    343e:	8f 4f       	sbci	r24, 0xFF	; 255
    3440:	9f 4f       	sbci	r25, 0xFF	; 255
    3442:	af 4f       	sbci	r26, 0xFF	; 255
    3444:	b1 e0       	ldi	r27, 0x01	; 1
    3446:	3e d0       	rcall	.+124    	; 0x34c4 <__ultoa_invert+0x9c>
    3448:	b4 e0       	ldi	r27, 0x04	; 4
    344a:	3c d0       	rcall	.+120    	; 0x34c4 <__ultoa_invert+0x9c>
    344c:	67 0f       	add	r22, r23
    344e:	78 1f       	adc	r23, r24
    3450:	89 1f       	adc	r24, r25
    3452:	9a 1f       	adc	r25, r26
    3454:	a1 1d       	adc	r26, r1
    3456:	68 0f       	add	r22, r24
    3458:	79 1f       	adc	r23, r25
    345a:	8a 1f       	adc	r24, r26
    345c:	91 1d       	adc	r25, r1
    345e:	a1 1d       	adc	r26, r1
    3460:	6a 0f       	add	r22, r26
    3462:	71 1d       	adc	r23, r1
    3464:	81 1d       	adc	r24, r1
    3466:	91 1d       	adc	r25, r1
    3468:	a1 1d       	adc	r26, r1
    346a:	20 d0       	rcall	.+64     	; 0x34ac <__ultoa_invert+0x84>
    346c:	09 f4       	brne	.+2      	; 0x3470 <__ultoa_invert+0x48>
    346e:	68 94       	set
    3470:	3f 91       	pop	r19
    3472:	2a e0       	ldi	r18, 0x0A	; 10
    3474:	26 9f       	mul	r18, r22
    3476:	11 24       	eor	r1, r1
    3478:	30 19       	sub	r19, r0
    347a:	30 5d       	subi	r19, 0xD0	; 208
    347c:	31 93       	st	Z+, r19
    347e:	de f6       	brtc	.-74     	; 0x3436 <__ultoa_invert+0xe>
    3480:	cf 01       	movw	r24, r30
    3482:	08 95       	ret
    3484:	46 2f       	mov	r20, r22
    3486:	47 70       	andi	r20, 0x07	; 7
    3488:	40 5d       	subi	r20, 0xD0	; 208
    348a:	41 93       	st	Z+, r20
    348c:	b3 e0       	ldi	r27, 0x03	; 3
    348e:	0f d0       	rcall	.+30     	; 0x34ae <__ultoa_invert+0x86>
    3490:	c9 f7       	brne	.-14     	; 0x3484 <__ultoa_invert+0x5c>
    3492:	f6 cf       	rjmp	.-20     	; 0x3480 <__ultoa_invert+0x58>
    3494:	46 2f       	mov	r20, r22
    3496:	4f 70       	andi	r20, 0x0F	; 15
    3498:	40 5d       	subi	r20, 0xD0	; 208
    349a:	4a 33       	cpi	r20, 0x3A	; 58
    349c:	18 f0       	brcs	.+6      	; 0x34a4 <__ultoa_invert+0x7c>
    349e:	49 5d       	subi	r20, 0xD9	; 217
    34a0:	31 fd       	sbrc	r19, 1
    34a2:	40 52       	subi	r20, 0x20	; 32
    34a4:	41 93       	st	Z+, r20
    34a6:	02 d0       	rcall	.+4      	; 0x34ac <__ultoa_invert+0x84>
    34a8:	a9 f7       	brne	.-22     	; 0x3494 <__ultoa_invert+0x6c>
    34aa:	ea cf       	rjmp	.-44     	; 0x3480 <__ultoa_invert+0x58>
    34ac:	b4 e0       	ldi	r27, 0x04	; 4
    34ae:	a6 95       	lsr	r26
    34b0:	97 95       	ror	r25
    34b2:	87 95       	ror	r24
    34b4:	77 95       	ror	r23
    34b6:	67 95       	ror	r22
    34b8:	ba 95       	dec	r27
    34ba:	c9 f7       	brne	.-14     	; 0x34ae <__ultoa_invert+0x86>
    34bc:	00 97       	sbiw	r24, 0x00	; 0
    34be:	61 05       	cpc	r22, r1
    34c0:	71 05       	cpc	r23, r1
    34c2:	08 95       	ret
    34c4:	9b 01       	movw	r18, r22
    34c6:	ac 01       	movw	r20, r24
    34c8:	0a 2e       	mov	r0, r26
    34ca:	06 94       	lsr	r0
    34cc:	57 95       	ror	r21
    34ce:	47 95       	ror	r20
    34d0:	37 95       	ror	r19
    34d2:	27 95       	ror	r18
    34d4:	ba 95       	dec	r27
    34d6:	c9 f7       	brne	.-14     	; 0x34ca <__ultoa_invert+0xa2>
    34d8:	62 0f       	add	r22, r18
    34da:	73 1f       	adc	r23, r19
    34dc:	84 1f       	adc	r24, r20
    34de:	95 1f       	adc	r25, r21
    34e0:	a0 1d       	adc	r26, r0
    34e2:	08 95       	ret

000034e4 <__divmodsi4>:
    34e4:	05 2e       	mov	r0, r21
    34e6:	97 fb       	bst	r25, 7
    34e8:	1e f4       	brtc	.+6      	; 0x34f0 <__divmodsi4+0xc>
    34ea:	00 94       	com	r0
    34ec:	0e 94 89 1a 	call	0x3512	; 0x3512 <__negsi2>
    34f0:	57 fd       	sbrc	r21, 7
    34f2:	07 d0       	rcall	.+14     	; 0x3502 <__divmodsi4_neg2>
    34f4:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <__udivmodsi4>
    34f8:	07 fc       	sbrc	r0, 7
    34fa:	03 d0       	rcall	.+6      	; 0x3502 <__divmodsi4_neg2>
    34fc:	4e f4       	brtc	.+18     	; 0x3510 <__divmodsi4_exit>
    34fe:	0c 94 89 1a 	jmp	0x3512	; 0x3512 <__negsi2>

00003502 <__divmodsi4_neg2>:
    3502:	50 95       	com	r21
    3504:	40 95       	com	r20
    3506:	30 95       	com	r19
    3508:	21 95       	neg	r18
    350a:	3f 4f       	sbci	r19, 0xFF	; 255
    350c:	4f 4f       	sbci	r20, 0xFF	; 255
    350e:	5f 4f       	sbci	r21, 0xFF	; 255

00003510 <__divmodsi4_exit>:
    3510:	08 95       	ret

00003512 <__negsi2>:
    3512:	90 95       	com	r25
    3514:	80 95       	com	r24
    3516:	70 95       	com	r23
    3518:	61 95       	neg	r22
    351a:	7f 4f       	sbci	r23, 0xFF	; 255
    351c:	8f 4f       	sbci	r24, 0xFF	; 255
    351e:	9f 4f       	sbci	r25, 0xFF	; 255
    3520:	08 95       	ret

00003522 <__muluhisi3>:
    3522:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__umulhisi3>
    3526:	a5 9f       	mul	r26, r21
    3528:	90 0d       	add	r25, r0
    352a:	b4 9f       	mul	r27, r20
    352c:	90 0d       	add	r25, r0
    352e:	a4 9f       	mul	r26, r20
    3530:	80 0d       	add	r24, r0
    3532:	91 1d       	adc	r25, r1
    3534:	11 24       	eor	r1, r1
    3536:	08 95       	ret

00003538 <__mulshisi3>:
    3538:	b7 ff       	sbrs	r27, 7
    353a:	0c 94 91 1a 	jmp	0x3522	; 0x3522 <__muluhisi3>

0000353e <__mulohisi3>:
    353e:	0e 94 91 1a 	call	0x3522	; 0x3522 <__muluhisi3>
    3542:	82 1b       	sub	r24, r18
    3544:	93 0b       	sbc	r25, r19
    3546:	08 95       	ret

00003548 <__prologue_saves__>:
    3548:	2f 92       	push	r2
    354a:	3f 92       	push	r3
    354c:	4f 92       	push	r4
    354e:	5f 92       	push	r5
    3550:	6f 92       	push	r6
    3552:	7f 92       	push	r7
    3554:	8f 92       	push	r8
    3556:	9f 92       	push	r9
    3558:	af 92       	push	r10
    355a:	bf 92       	push	r11
    355c:	cf 92       	push	r12
    355e:	df 92       	push	r13
    3560:	ef 92       	push	r14
    3562:	ff 92       	push	r15
    3564:	0f 93       	push	r16
    3566:	1f 93       	push	r17
    3568:	cf 93       	push	r28
    356a:	df 93       	push	r29
    356c:	cd b7       	in	r28, 0x3d	; 61
    356e:	de b7       	in	r29, 0x3e	; 62
    3570:	ca 1b       	sub	r28, r26
    3572:	db 0b       	sbc	r29, r27
    3574:	0f b6       	in	r0, 0x3f	; 63
    3576:	f8 94       	cli
    3578:	de bf       	out	0x3e, r29	; 62
    357a:	0f be       	out	0x3f, r0	; 63
    357c:	cd bf       	out	0x3d, r28	; 61
    357e:	09 94       	ijmp

00003580 <__epilogue_restores__>:
    3580:	2a 88       	ldd	r2, Y+18	; 0x12
    3582:	39 88       	ldd	r3, Y+17	; 0x11
    3584:	48 88       	ldd	r4, Y+16	; 0x10
    3586:	5f 84       	ldd	r5, Y+15	; 0x0f
    3588:	6e 84       	ldd	r6, Y+14	; 0x0e
    358a:	7d 84       	ldd	r7, Y+13	; 0x0d
    358c:	8c 84       	ldd	r8, Y+12	; 0x0c
    358e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3590:	aa 84       	ldd	r10, Y+10	; 0x0a
    3592:	b9 84       	ldd	r11, Y+9	; 0x09
    3594:	c8 84       	ldd	r12, Y+8	; 0x08
    3596:	df 80       	ldd	r13, Y+7	; 0x07
    3598:	ee 80       	ldd	r14, Y+6	; 0x06
    359a:	fd 80       	ldd	r15, Y+5	; 0x05
    359c:	0c 81       	ldd	r16, Y+4	; 0x04
    359e:	1b 81       	ldd	r17, Y+3	; 0x03
    35a0:	aa 81       	ldd	r26, Y+2	; 0x02
    35a2:	b9 81       	ldd	r27, Y+1	; 0x01
    35a4:	ce 0f       	add	r28, r30
    35a6:	d1 1d       	adc	r29, r1
    35a8:	0f b6       	in	r0, 0x3f	; 63
    35aa:	f8 94       	cli
    35ac:	de bf       	out	0x3e, r29	; 62
    35ae:	0f be       	out	0x3f, r0	; 63
    35b0:	cd bf       	out	0x3d, r28	; 61
    35b2:	ed 01       	movw	r28, r26
    35b4:	08 95       	ret

000035b6 <__udivmodsi4>:
    35b6:	a1 e2       	ldi	r26, 0x21	; 33
    35b8:	1a 2e       	mov	r1, r26
    35ba:	aa 1b       	sub	r26, r26
    35bc:	bb 1b       	sub	r27, r27
    35be:	fd 01       	movw	r30, r26
    35c0:	0d c0       	rjmp	.+26     	; 0x35dc <__udivmodsi4_ep>

000035c2 <__udivmodsi4_loop>:
    35c2:	aa 1f       	adc	r26, r26
    35c4:	bb 1f       	adc	r27, r27
    35c6:	ee 1f       	adc	r30, r30
    35c8:	ff 1f       	adc	r31, r31
    35ca:	a2 17       	cp	r26, r18
    35cc:	b3 07       	cpc	r27, r19
    35ce:	e4 07       	cpc	r30, r20
    35d0:	f5 07       	cpc	r31, r21
    35d2:	20 f0       	brcs	.+8      	; 0x35dc <__udivmodsi4_ep>
    35d4:	a2 1b       	sub	r26, r18
    35d6:	b3 0b       	sbc	r27, r19
    35d8:	e4 0b       	sbc	r30, r20
    35da:	f5 0b       	sbc	r31, r21

000035dc <__udivmodsi4_ep>:
    35dc:	66 1f       	adc	r22, r22
    35de:	77 1f       	adc	r23, r23
    35e0:	88 1f       	adc	r24, r24
    35e2:	99 1f       	adc	r25, r25
    35e4:	1a 94       	dec	r1
    35e6:	69 f7       	brne	.-38     	; 0x35c2 <__udivmodsi4_loop>
    35e8:	60 95       	com	r22
    35ea:	70 95       	com	r23
    35ec:	80 95       	com	r24
    35ee:	90 95       	com	r25
    35f0:	9b 01       	movw	r18, r22
    35f2:	ac 01       	movw	r20, r24
    35f4:	bd 01       	movw	r22, r26
    35f6:	cf 01       	movw	r24, r30
    35f8:	08 95       	ret

000035fa <_exit>:
    35fa:	f8 94       	cli

000035fc <__stop_program>:
    35fc:	ff cf       	rjmp	.-2      	; 0x35fc <__stop_program>
