
speedOfLight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800100  00000c6c  00000d00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000035  00800160  00800160  00000d60  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d60  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000dbc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001cdc  00000000  00000000  00000eec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cff  00000000  00000000  00002bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d44  00000000  00000000  000038c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000384  00000000  00000000  0000460c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007dd  00000000  00000000  00004990  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f14  00000000  00000000  0000516d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  00006081  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 46 02 	jmp	0x48c	; 0x48c <__vector_14>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__vector_17>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 bb 00 	jmp	0x176	; 0x176 <__vector_33>
  88:	0c 94 a4 01 	jmp	0x348	; 0x348 <__vector_34>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__vector_42>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ec e6       	ldi	r30, 0x6C	; 108
  c8:	fc e0       	ldi	r31, 0x0C	; 12
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a0 36       	cpi	r26, 0x60	; 96
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a0 e6       	ldi	r26, 0x60	; 96
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a5 39       	cpi	r26, 0x95	; 149
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 0e 02 	call	0x41c	; 0x41c <main>
  ea:	0c 94 34 06 	jmp	0xc68	; 0xc68 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <spiSetup>:
	}
	ledMemory[9 + y] &= ~(1 << x);
	
}

void setScore(uint8_t display, uint16_t value){
  f2:	84 b1       	in	r24, 0x04	; 4
  f4:	88 62       	ori	r24, 0x28	; 40
  f6:	84 b9       	out	0x04, r24	; 4
  f8:	81 ed       	ldi	r24, 0xD1	; 209
  fa:	8c bd       	out	0x2c, r24	; 44
  fc:	08 95       	ret

000000fe <tmrSetup>:
  fe:	8a e0       	ldi	r24, 0x0A	; 10
 100:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
 104:	84 e7       	ldi	r24, 0x74	; 116
 106:	9e e0       	ldi	r25, 0x0E	; 14
 108:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 10c:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 110:	8a e3       	ldi	r24, 0x3A	; 58
 112:	97 e0       	ldi	r25, 0x07	; 7
 114:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 118:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
 11c:	e1 e7       	ldi	r30, 0x71	; 113
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	86 60       	ori	r24, 0x06	; 6
 124:	80 83       	st	Z, r24
 126:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 12a:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
 12e:	08 95       	ret

00000130 <buttonsInit>:
 130:	8f e3       	ldi	r24, 0x3F	; 63
 132:	87 b9       	out	0x07, r24	; 7
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	8b b9       	out	0x0b, r24	; 11
 138:	20 9a       	sbi	0x04, 0	; 4
 13a:	6b 9a       	sbi	0x0d, 3	; 13
 13c:	6a 9a       	sbi	0x0d, 2	; 13
 13e:	73 9a       	sbi	0x0e, 3	; 14
 140:	8a b1       	in	r24, 0x0a	; 10
 142:	83 70       	andi	r24, 0x03	; 3
 144:	8a b9       	out	0x0a, r24	; 10
 146:	8b b1       	in	r24, 0x0b	; 11
 148:	8c 6f       	ori	r24, 0xFC	; 252
 14a:	8b b9       	out	0x0b, r24	; 11
 14c:	0e 94 79 00 	call	0xf2	; 0xf2 <spiSetup>
 150:	0e 94 7f 00 	call	0xfe	; 0xfe <tmrSetup>
 154:	08 95       	ret

00000156 <isButtonDown>:
 156:	e6 2f       	mov	r30, r22
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	e9 59       	subi	r30, 0x99	; 153
 15c:	fe 4f       	sbci	r31, 0xFE	; 254
 15e:	40 81       	ld	r20, Z
 160:	21 e0       	ldi	r18, 0x01	; 1
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	b9 01       	movw	r22, r18
 166:	02 c0       	rjmp	.+4      	; 0x16c <isButtonDown+0x16>
 168:	66 0f       	add	r22, r22
 16a:	77 1f       	adc	r23, r23
 16c:	8a 95       	dec	r24
 16e:	e2 f7       	brpl	.-8      	; 0x168 <isButtonDown+0x12>
 170:	cb 01       	movw	r24, r22
 172:	84 23       	and	r24, r20
 174:	08 95       	ret

00000176 <__vector_33>:
	
}


ISR(TIMER3_COMPA_vect){
 176:	1f 92       	push	r1
 178:	0f 92       	push	r0
 17a:	0f b6       	in	r0, 0x3f	; 63
 17c:	0f 92       	push	r0
 17e:	11 24       	eor	r1, r1
 180:	2f 93       	push	r18
 182:	3f 93       	push	r19
 184:	4f 93       	push	r20
 186:	5f 93       	push	r21
 188:	6f 93       	push	r22
 18a:	7f 93       	push	r23
 18c:	8f 93       	push	r24
 18e:	9f 93       	push	r25
 190:	af 93       	push	r26
 192:	bf 93       	push	r27
 194:	ef 93       	push	r30
 196:	ff 93       	push	r31
	// row 3, 4, 5 are on LED 4 and 5
	// the row is in the lower nibble and column data is in the upper nibble
	// for each row the two registers need to be set and the other two need to be cleared
	
	
	if(muxCounter < 3){
 198:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <muxCounter>
 19c:	83 30       	cpi	r24, 0x03	; 3
 19e:	08 f0       	brcs	.+2      	; 0x1a2 <__vector_33+0x2c>
 1a0:	59 c0       	rjmp	.+178    	; 0x254 <__vector_33+0xde>
		ledData[0] = (1 << muxCounter) | ((ledMemory[9 + muxCounter] & 0x0F) << 4);
 1a2:	20 91 61 01 	lds	r18, 0x0161	; 0x800161 <muxCounter>
 1a6:	e0 91 61 01 	lds	r30, 0x0161	; 0x800161 <muxCounter>
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	e1 5f       	subi	r30, 0xF1	; 241
 1ae:	fe 4f       	sbci	r31, 0xFE	; 254
 1b0:	30 81       	ld	r19, Z
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	ac 01       	movw	r20, r24
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <__vector_33+0x48>
 1ba:	44 0f       	add	r20, r20
 1bc:	55 1f       	adc	r21, r21
 1be:	2a 95       	dec	r18
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <__vector_33+0x44>
 1c2:	60 e1       	ldi	r22, 0x10	; 16
 1c4:	36 9f       	mul	r19, r22
 1c6:	90 01       	movw	r18, r0
 1c8:	11 24       	eor	r1, r1
 1ca:	24 2b       	or	r18, r20
 1cc:	a0 e0       	ldi	r26, 0x00	; 0
 1ce:	b1 e0       	ldi	r27, 0x01	; 1
 1d0:	2c 93       	st	X, r18
		ledData[1] = (1 << muxCounter) | ((ledMemory[9 + muxCounter] & 0x0F) << 4);
 1d2:	20 91 61 01 	lds	r18, 0x0161	; 0x800161 <muxCounter>
 1d6:	e0 91 61 01 	lds	r30, 0x0161	; 0x800161 <muxCounter>
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	e1 5f       	subi	r30, 0xF1	; 241
 1de:	fe 4f       	sbci	r31, 0xFE	; 254
 1e0:	30 81       	ld	r19, Z
 1e2:	ac 01       	movw	r20, r24
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <__vector_33+0x74>
 1e6:	44 0f       	add	r20, r20
 1e8:	55 1f       	adc	r21, r21
 1ea:	2a 95       	dec	r18
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <__vector_33+0x70>
 1ee:	60 e1       	ldi	r22, 0x10	; 16
 1f0:	36 9f       	mul	r19, r22
 1f2:	90 01       	movw	r18, r0
 1f4:	11 24       	eor	r1, r1
 1f6:	24 2b       	or	r18, r20
 1f8:	11 96       	adiw	r26, 0x01	; 1
 1fa:	2c 93       	st	X, r18
 1fc:	11 97       	sbiw	r26, 0x01	; 1
		ledData[2] = (1 << muxCounter) | ((ledMemory[9 + muxCounter] & 0x0F) << 4);
 1fe:	20 91 61 01 	lds	r18, 0x0161	; 0x800161 <muxCounter>
 202:	e0 91 61 01 	lds	r30, 0x0161	; 0x800161 <muxCounter>
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	e1 5f       	subi	r30, 0xF1	; 241
 20a:	fe 4f       	sbci	r31, 0xFE	; 254
 20c:	30 81       	ld	r19, Z
 20e:	ac 01       	movw	r20, r24
 210:	02 c0       	rjmp	.+4      	; 0x216 <__vector_33+0xa0>
 212:	44 0f       	add	r20, r20
 214:	55 1f       	adc	r21, r21
 216:	2a 95       	dec	r18
 218:	e2 f7       	brpl	.-8      	; 0x212 <__vector_33+0x9c>
 21a:	60 e1       	ldi	r22, 0x10	; 16
 21c:	36 9f       	mul	r19, r22
 21e:	90 01       	movw	r18, r0
 220:	11 24       	eor	r1, r1
 222:	24 2b       	or	r18, r20
 224:	12 96       	adiw	r26, 0x02	; 2
 226:	2c 93       	st	X, r18
 228:	12 97       	sbiw	r26, 0x02	; 2
		ledData[3] = (1 << muxCounter) | ((ledMemory[9 + muxCounter] & 0x0F) << 4);
 22a:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <muxCounter>
 22e:	e0 91 61 01 	lds	r30, 0x0161	; 0x800161 <muxCounter>
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	e1 5f       	subi	r30, 0xF1	; 241
 236:	fe 4f       	sbci	r31, 0xFE	; 254
 238:	20 81       	ld	r18, Z
 23a:	02 c0       	rjmp	.+4      	; 0x240 <__vector_33+0xca>
 23c:	88 0f       	add	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	3a 95       	dec	r19
 242:	e2 f7       	brpl	.-8      	; 0x23c <__vector_33+0xc6>
 244:	40 e1       	ldi	r20, 0x10	; 16
 246:	24 9f       	mul	r18, r20
 248:	90 01       	movw	r18, r0
 24a:	11 24       	eor	r1, r1
 24c:	82 2b       	or	r24, r18
 24e:	13 96       	adiw	r26, 0x03	; 3
 250:	8c 93       	st	X, r24
 252:	20 c0       	rjmp	.+64     	; 0x294 <__vector_33+0x11e>
	}
	else{
		ledData[0] = 0;
 254:	a0 e0       	ldi	r26, 0x00	; 0
 256:	b1 e0       	ldi	r27, 0x01	; 1
 258:	1c 92       	st	X, r1
		ledData[1] = 0;//(1 << (muxCounter-3)) | ((ledMemory[9 + muxCounter] & 0x0F) << 4);
 25a:	11 96       	adiw	r26, 0x01	; 1
 25c:	1c 92       	st	X, r1
 25e:	11 97       	sbiw	r26, 0x01	; 1
		ledData[2] = (1 << (muxCounter-3)) | ((ledMemory[9 + muxCounter] & 0x0F) << 4);
 260:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <muxCounter>
 264:	e0 91 61 01 	lds	r30, 0x0161	; 0x800161 <muxCounter>
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	e1 5f       	subi	r30, 0xF1	; 241
 26c:	fe 4f       	sbci	r31, 0xFE	; 254
 26e:	90 81       	ld	r25, Z
 270:	83 50       	subi	r24, 0x03	; 3
 272:	21 e0       	ldi	r18, 0x01	; 1
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	02 c0       	rjmp	.+4      	; 0x27c <__vector_33+0x106>
 278:	22 0f       	add	r18, r18
 27a:	33 1f       	adc	r19, r19
 27c:	8a 95       	dec	r24
 27e:	e2 f7       	brpl	.-8      	; 0x278 <__vector_33+0x102>
 280:	60 e1       	ldi	r22, 0x10	; 16
 282:	96 9f       	mul	r25, r22
 284:	c0 01       	movw	r24, r0
 286:	11 24       	eor	r1, r1
 288:	82 2b       	or	r24, r18
 28a:	12 96       	adiw	r26, 0x02	; 2
 28c:	8c 93       	st	X, r24
 28e:	12 97       	sbiw	r26, 0x02	; 2
		ledData[3] = 0;
 290:	13 96       	adiw	r26, 0x03	; 3
 292:	1c 92       	st	X, r1
	}
	
	muxCounter = (muxCounter + 1) % 6;
 294:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <muxCounter>
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	01 96       	adiw	r24, 0x01	; 1
 29c:	66 e0       	ldi	r22, 0x06	; 6
 29e:	70 e0       	ldi	r23, 0x00	; 0
 2a0:	0e 94 fe 02 	call	0x5fc	; 0x5fc <__divmodhi4>
 2a4:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <muxCounter>
	
	// calculate data for score display
	
	ledData[5] = sevenSegmentDecode[ledMemory[scoreDigitCounter]];
 2a8:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <scoreDigitCounter>
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	ea 5f       	subi	r30, 0xFA	; 250
 2b0:	fe 4f       	sbci	r31, 0xFE	; 254
 2b2:	e0 81       	ld	r30, Z
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	ed 5d       	subi	r30, 0xDD	; 221
 2b8:	fe 4f       	sbci	r31, 0xFE	; 254
 2ba:	80 81       	ld	r24, Z
 2bc:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__data_start+0x5>
	if (scoreDigitCounter == 0){
 2c0:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <scoreDigitCounter>
 2c4:	81 11       	cpse	r24, r1
 2c6:	07 c0       	rjmp	.+14     	; 0x2d6 <__vector_33+0x160>
		ledData[5] |= 1 << 7; // set MSB for D0
 2c8:	e0 e0       	ldi	r30, 0x00	; 0
 2ca:	f1 e0       	ldi	r31, 0x01	; 1
 2cc:	85 81       	ldd	r24, Z+5	; 0x05
 2ce:	80 68       	ori	r24, 0x80	; 128
 2d0:	85 83       	std	Z+5, r24	; 0x05
		ledData[4] = 0;
 2d2:	14 82       	std	Z+4, r1	; 0x04
 2d4:	0c c0       	rjmp	.+24     	; 0x2ee <__vector_33+0x178>
	}
	else{
		ledData[4] = 1 << (scoreDigitCounter - 1);
 2d6:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <scoreDigitCounter>
 2da:	21 50       	subi	r18, 0x01	; 1
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <__vector_33+0x170>
 2e2:	88 0f       	add	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	2a 95       	dec	r18
 2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <__vector_33+0x16c>
 2ea:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_start+0x4>
	}

	scoreDigitCounter = (scoreDigitCounter + 1) % 9;
 2ee:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <scoreDigitCounter>
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	01 96       	adiw	r24, 0x01	; 1
 2f6:	69 e0       	ldi	r22, 0x09	; 9
 2f8:	70 e0       	ldi	r23, 0x00	; 0
 2fa:	0e 94 fe 02 	call	0x5fc	; 0x5fc <__divmodhi4>
 2fe:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <scoreDigitCounter>
	

	// clear contents of shift register and latch
	PORTB &= ~(1 << LED_L); // set led latch low
 302:	28 98       	cbi	0x05, 0	; 5
	PORTE &= ~(1 << LED_B); // blank leds
 304:	73 98       	cbi	0x0e, 3	; 14
	PORTB |= (1 << LED_L); // set led latch high
 306:	28 9a       	sbi	0x05, 0	; 5
	PORTE |= (1 << LED_B); // unblank leds
 308:	73 9a       	sbi	0x0e, 3	; 14
	PORTB &= ~(1 << LED_L); // set led latch low
 30a:	28 98       	cbi	0x05, 0	; 5
	spiByteCounter = 0;
 30c:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <__data_end>
	SPDR0 = ledData[spiByteCounter++];
 310:	e0 91 60 01 	lds	r30, 0x0160	; 0x800160 <__data_end>
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	8e 0f       	add	r24, r30
 318:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__data_end>
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	e0 50       	subi	r30, 0x00	; 0
 320:	ff 4f       	sbci	r31, 0xFF	; 255
 322:	80 81       	ld	r24, Z
 324:	8e bd       	out	0x2e, r24	; 46
}
 326:	ff 91       	pop	r31
 328:	ef 91       	pop	r30
 32a:	bf 91       	pop	r27
 32c:	af 91       	pop	r26
 32e:	9f 91       	pop	r25
 330:	8f 91       	pop	r24
 332:	7f 91       	pop	r23
 334:	6f 91       	pop	r22
 336:	5f 91       	pop	r21
 338:	4f 91       	pop	r20
 33a:	3f 91       	pop	r19
 33c:	2f 91       	pop	r18
 33e:	0f 90       	pop	r0
 340:	0f be       	out	0x3f, r0	; 63
 342:	0f 90       	pop	r0
 344:	1f 90       	pop	r1
 346:	18 95       	reti

00000348 <__vector_34>:

ISR(TIMER3_COMPB_vect){
 348:	1f 92       	push	r1
 34a:	0f 92       	push	r0
 34c:	0f b6       	in	r0, 0x3f	; 63
 34e:	0f 92       	push	r0
 350:	11 24       	eor	r1, r1
 352:	2f 93       	push	r18
 354:	8f 93       	push	r24
 356:	9f 93       	push	r25
 358:	ef 93       	push	r30
 35a:	ff 93       	push	r31
	// Read in Buttons
	PORTC = ~(1 << muxCounter);// set 1 bit to a 0
 35c:	20 91 61 01 	lds	r18, 0x0161	; 0x800161 <muxCounter>
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	02 c0       	rjmp	.+4      	; 0x36a <__vector_34+0x22>
 366:	88 0f       	add	r24, r24
 368:	99 1f       	adc	r25, r25
 36a:	2a 95       	dec	r18
 36c:	e2 f7       	brpl	.-8      	; 0x366 <__vector_34+0x1e>
 36e:	80 95       	com	r24
 370:	88 b9       	out	0x08, r24	; 8
	buttonMemory[muxCounter] = ~PIND >> 2;
 372:	e0 91 61 01 	lds	r30, 0x0161	; 0x800161 <muxCounter>
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	89 b1       	in	r24, 0x09	; 9
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	80 95       	com	r24
 37e:	90 95       	com	r25
 380:	95 95       	asr	r25
 382:	87 95       	ror	r24
 384:	95 95       	asr	r25
 386:	87 95       	ror	r24
 388:	e9 59       	subi	r30, 0x99	; 153
 38a:	fe 4f       	sbci	r31, 0xFE	; 254
 38c:	80 83       	st	Z, r24
	
}
 38e:	ff 91       	pop	r31
 390:	ef 91       	pop	r30
 392:	9f 91       	pop	r25
 394:	8f 91       	pop	r24
 396:	2f 91       	pop	r18
 398:	0f 90       	pop	r0
 39a:	0f be       	out	0x3f, r0	; 63
 39c:	0f 90       	pop	r0
 39e:	1f 90       	pop	r1
 3a0:	18 95       	reti

000003a2 <__vector_17>:

ISR(SPI0_STC_vect){
 3a2:	1f 92       	push	r1
 3a4:	0f 92       	push	r0
 3a6:	0f b6       	in	r0, 0x3f	; 63
 3a8:	0f 92       	push	r0
 3aa:	11 24       	eor	r1, r1
 3ac:	8f 93       	push	r24
 3ae:	ef 93       	push	r30
 3b0:	ff 93       	push	r31
	if (spiByteCounter >= 6){
 3b2:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <__data_end>
 3b6:	86 30       	cpi	r24, 0x06	; 6
 3b8:	10 f0       	brcs	.+4      	; 0x3be <__vector_17+0x1c>
		PORTB |= 1 << LED_L; // set led latch high
 3ba:	28 9a       	sbi	0x05, 0	; 5
		return;
 3bc:	0b c0       	rjmp	.+22     	; 0x3d4 <__vector_17+0x32>
	}
	SPDR0 = ledData[spiByteCounter++];
 3be:	e0 91 60 01 	lds	r30, 0x0160	; 0x800160 <__data_end>
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	8e 0f       	add	r24, r30
 3c6:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__data_end>
 3ca:	f0 e0       	ldi	r31, 0x00	; 0
 3cc:	e0 50       	subi	r30, 0x00	; 0
 3ce:	ff 4f       	sbci	r31, 0xFF	; 255
 3d0:	80 81       	ld	r24, Z
 3d2:	8e bd       	out	0x2e, r24	; 46
}
 3d4:	ff 91       	pop	r31
 3d6:	ef 91       	pop	r30
 3d8:	8f 91       	pop	r24
 3da:	0f 90       	pop	r0
 3dc:	0f be       	out	0x3f, r0	; 63
 3de:	0f 90       	pop	r0
 3e0:	1f 90       	pop	r1
 3e2:	18 95       	reti

000003e4 <uart_putchar>:

static int uart_putchar(char c, FILE *stream);
static FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL,
_FDEV_SETUP_WRITE);
static int uart_putchar(char c, FILE *stream)
{
 3e4:	cf 93       	push	r28
 3e6:	c8 2f       	mov	r28, r24
	if (c == '\n')
 3e8:	8a 30       	cpi	r24, 0x0A	; 10
 3ea:	19 f4       	brne	.+6      	; 0x3f2 <uart_putchar+0xe>
	uart_putchar('\r', stream);
 3ec:	8d e0       	ldi	r24, 0x0D	; 13
 3ee:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <uart_putchar>
	while(!(UCSR0A &( 1 << UDRE0)));
 3f2:	e0 ec       	ldi	r30, 0xC0	; 192
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	80 81       	ld	r24, Z
 3f8:	85 ff       	sbrs	r24, 5
 3fa:	fd cf       	rjmp	.-6      	; 0x3f6 <uart_putchar+0x12>
	UDR0 = c;
 3fc:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	return 0;
}
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	cf 91       	pop	r28
 406:	08 95       	ret

00000408 <init_uart>:

void init_uart(){
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 408:	88 e1       	ldi	r24, 0x18	; 24
 40a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (3<<UCSZ00);
 40e:	86 e0       	ldi	r24, 0x06	; 6
 410:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0L = 51;
 414:	83 e3       	ldi	r24, 0x33	; 51
 416:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 41a:	08 95       	ret

0000041c <main>:
{

	//usbQcInit();
	//QCset12V();
	
	buttonsInit();
 41c:	0e 94 98 00 	call	0x130	; 0x130 <buttonsInit>
	init_uart();
 420:	0e 94 04 02 	call	0x408	; 0x408 <init_uart>
	stdout = &mystdout;
 424:	85 e1       	ldi	r24, 0x15	; 21
 426:	91 e0       	ldi	r25, 0x01	; 1
 428:	90 93 92 01 	sts	0x0192, r25	; 0x800192 <__iob+0x3>
 42c:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <__iob+0x2>
	printf("Hello World\n");
 430:	84 e3       	ldi	r24, 0x34	; 52
 432:	91 e0       	ldi	r25, 0x01	; 1
 434:	0e 94 3c 03 	call	0x678	; 0x678 <puts>
	
	sei();
 438:	78 94       	sei
		for(int x = 0; x < 6; x++){
			for (int y = 0; y < 6; y++)
			{
				if (isButtonDown(x, y))
				{
					printf("%d, %d\n", x, y);
 43a:	0f 2e       	mov	r0, r31
 43c:	f0 e4       	ldi	r31, 0x40	; 64
 43e:	ef 2e       	mov	r14, r31
 440:	f1 e0       	ldi	r31, 0x01	; 1
 442:	ff 2e       	mov	r15, r31
 444:	f0 2d       	mov	r31, r0
	printf("Hello World\n");
	
	sei();
	
	while(1){
		for(int x = 0; x < 6; x++){
 446:	00 e0       	ldi	r16, 0x00	; 0
 448:	10 e0       	ldi	r17, 0x00	; 0
 44a:	1d c0       	rjmp	.+58     	; 0x486 <main+0x6a>
			for (int y = 0; y < 6; y++)
			{
				if (isButtonDown(x, y))
 44c:	6c 2f       	mov	r22, r28
 44e:	80 2f       	mov	r24, r16
 450:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
 454:	88 23       	and	r24, r24
 456:	71 f0       	breq	.+28     	; 0x474 <main+0x58>
				{
					printf("%d, %d\n", x, y);
 458:	df 93       	push	r29
 45a:	cf 93       	push	r28
 45c:	1f 93       	push	r17
 45e:	0f 93       	push	r16
 460:	ff 92       	push	r15
 462:	ef 92       	push	r14
 464:	0e 94 26 03 	call	0x64c	; 0x64c <printf>
 468:	0f 90       	pop	r0
 46a:	0f 90       	pop	r0
 46c:	0f 90       	pop	r0
 46e:	0f 90       	pop	r0
 470:	0f 90       	pop	r0
 472:	0f 90       	pop	r0
	
	sei();
	
	while(1){
		for(int x = 0; x < 6; x++){
			for (int y = 0; y < 6; y++)
 474:	21 96       	adiw	r28, 0x01	; 1
 476:	c6 30       	cpi	r28, 0x06	; 6
 478:	d1 05       	cpc	r29, r1
 47a:	41 f7       	brne	.-48     	; 0x44c <main+0x30>
	printf("Hello World\n");
	
	sei();
	
	while(1){
		for(int x = 0; x < 6; x++){
 47c:	0f 5f       	subi	r16, 0xFF	; 255
 47e:	1f 4f       	sbci	r17, 0xFF	; 255
 480:	06 30       	cpi	r16, 0x06	; 6
 482:	11 05       	cpc	r17, r1
 484:	01 f3       	breq	.-64     	; 0x446 <main+0x2a>
	UCSR0C = (3<<UCSZ00);
	UBRR0L = 51;
}

int main(void)
{
 486:	c0 e0       	ldi	r28, 0x00	; 0
 488:	d0 e0       	ldi	r29, 0x00	; 0
 48a:	e0 cf       	rjmp	.-64     	; 0x44c <main+0x30>

0000048c <__vector_14>:

	}
}

ISR(TIMER0_COMPA_vect)		// audio interrupt
{
 48c:	1f 92       	push	r1
 48e:	0f 92       	push	r0
 490:	0f b6       	in	r0, 0x3f	; 63
 492:	0f 92       	push	r0
 494:	11 24       	eor	r1, r1
 496:	8f 93       	push	r24
 498:	9f 93       	push	r25
 49a:	ef 93       	push	r30
 49c:	ff 93       	push	r31
	switch(note_index)
 49e:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <note_index>
 4a2:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <note_index+0x1>
 4a6:	86 30       	cpi	r24, 0x06	; 6
 4a8:	91 05       	cpc	r25, r1
 4aa:	09 f4       	brne	.+2      	; 0x4ae <__vector_14+0x22>
 4ac:	4e c0       	rjmp	.+156    	; 0x54a <__vector_14+0xbe>
 4ae:	30 f4       	brcc	.+12     	; 0x4bc <__vector_14+0x30>
 4b0:	81 30       	cpi	r24, 0x01	; 1
 4b2:	91 05       	cpc	r25, r1
 4b4:	61 f0       	breq	.+24     	; 0x4ce <__vector_14+0x42>
 4b6:	03 97       	sbiw	r24, 0x03	; 3
 4b8:	49 f1       	breq	.+82     	; 0x50c <__vector_14+0x80>
 4ba:	79 c0       	rjmp	.+242    	; 0x5ae <__vector_14+0x122>
 4bc:	8e 30       	cpi	r24, 0x0E	; 14
 4be:	91 05       	cpc	r25, r1
 4c0:	09 f4       	brne	.+2      	; 0x4c4 <__vector_14+0x38>
 4c2:	62 c0       	rjmp	.+196    	; 0x588 <__vector_14+0xfc>
 4c4:	80 34       	cpi	r24, 0x40	; 64
 4c6:	91 05       	cpc	r25, r1
 4c8:	09 f4       	brne	.+2      	; 0x4cc <__vector_14+0x40>
 4ca:	63 c0       	rjmp	.+198    	; 0x592 <__vector_14+0x106>
 4cc:	70 c0       	rjmp	.+224    	; 0x5ae <__vector_14+0x122>
	{	//every 8ms
		case 0+1:	//0ms, 8ms on
		ICR1 = notes[beep_index];	//1st note
 4ce:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <beep_index>
 4d2:	f0 91 66 01 	lds	r31, 0x0166	; 0x800166 <beep_index+0x1>
 4d6:	ee 0f       	add	r30, r30
 4d8:	ff 1f       	adc	r31, r31
 4da:	e8 5b       	subi	r30, 0xB8	; 184
 4dc:	fe 4f       	sbci	r31, 0xFE	; 254
 4de:	80 81       	ld	r24, Z
 4e0:	91 81       	ldd	r25, Z+1	; 0x01
 4e2:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 4e6:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		OCR1A = notes[beep_index]/2;
 4ea:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <beep_index>
 4ee:	f0 91 66 01 	lds	r31, 0x0166	; 0x800166 <beep_index+0x1>
 4f2:	ee 0f       	add	r30, r30
 4f4:	ff 1f       	adc	r31, r31
 4f6:	e8 5b       	subi	r30, 0xB8	; 184
 4f8:	fe 4f       	sbci	r31, 0xFE	; 254
 4fa:	80 81       	ld	r24, Z
 4fc:	91 81       	ldd	r25, Z+1	; 0x01
 4fe:	96 95       	lsr	r25
 500:	87 95       	ror	r24
 502:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 506:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		break;
 50a:	51 c0       	rjmp	.+162    	; 0x5ae <__vector_14+0x122>
		case 2+1:	// 16ms, 24, 32 on
		ICR1 = notes[beep_index+1];	//2nd note
 50c:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <beep_index>
 510:	f0 91 66 01 	lds	r31, 0x0166	; 0x800166 <beep_index+0x1>
 514:	ee 0f       	add	r30, r30
 516:	ff 1f       	adc	r31, r31
 518:	e6 5b       	subi	r30, 0xB6	; 182
 51a:	fe 4f       	sbci	r31, 0xFE	; 254
 51c:	80 81       	ld	r24, Z
 51e:	91 81       	ldd	r25, Z+1	; 0x01
 520:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 524:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		OCR1A = notes[beep_index]/2;
 528:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <beep_index>
 52c:	f0 91 66 01 	lds	r31, 0x0166	; 0x800166 <beep_index+0x1>
 530:	ee 0f       	add	r30, r30
 532:	ff 1f       	adc	r31, r31
 534:	e8 5b       	subi	r30, 0xB8	; 184
 536:	fe 4f       	sbci	r31, 0xFE	; 254
 538:	80 81       	ld	r24, Z
 53a:	91 81       	ldd	r25, Z+1	; 0x01
 53c:	96 95       	lsr	r25
 53e:	87 95       	ror	r24
 540:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 544:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		break;
 548:	32 c0       	rjmp	.+100    	; 0x5ae <__vector_14+0x122>
		case 5+1:	// 40ms, 48, 56, 64, 72, 80, 88, 96, on
		ICR1 = notes[beep_index+2];	// 3rd note
 54a:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <beep_index>
 54e:	f0 91 66 01 	lds	r31, 0x0166	; 0x800166 <beep_index+0x1>
 552:	ee 0f       	add	r30, r30
 554:	ff 1f       	adc	r31, r31
 556:	e4 5b       	subi	r30, 0xB4	; 180
 558:	fe 4f       	sbci	r31, 0xFE	; 254
 55a:	80 81       	ld	r24, Z
 55c:	91 81       	ldd	r25, Z+1	; 0x01
 55e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 562:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		OCR1A = notes[beep_index]/2;
 566:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <beep_index>
 56a:	f0 91 66 01 	lds	r31, 0x0166	; 0x800166 <beep_index+0x1>
 56e:	ee 0f       	add	r30, r30
 570:	ff 1f       	adc	r31, r31
 572:	e8 5b       	subi	r30, 0xB8	; 184
 574:	fe 4f       	sbci	r31, 0xFE	; 254
 576:	80 81       	ld	r24, Z
 578:	91 81       	ldd	r25, Z+1	; 0x01
 57a:	96 95       	lsr	r25
 57c:	87 95       	ror	r24
 57e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 582:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		break;
 586:	13 c0       	rjmp	.+38     	; 0x5ae <__vector_14+0x122>
		case 13+1:
		//ICR1 = 0;					//off
		OCR1A = 0;
 588:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 58c:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		break;
 590:	0e c0       	rjmp	.+28     	; 0x5ae <__vector_14+0x122>
		
		case 63+1:
		beep_index = 0;
 592:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <beep_index+0x1>
 596:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <beep_index>
		note_index = -1;
 59a:	8f ef       	ldi	r24, 0xFF	; 255
 59c:	9f ef       	ldi	r25, 0xFF	; 255
 59e:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <note_index+0x1>
 5a2:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <note_index>
		TCCR0B &= ~(0b101 << CS00);
 5a6:	85 b5       	in	r24, 0x25	; 37
 5a8:	8a 7f       	andi	r24, 0xFA	; 250
 5aa:	85 bd       	out	0x25, r24	; 37
		TCNT0 = 0;
 5ac:	16 bc       	out	0x26, r1	; 38
		break;
	}
	note_index += 1;
 5ae:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <note_index>
 5b2:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <note_index+0x1>
 5b6:	01 96       	adiw	r24, 0x01	; 1
 5b8:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <note_index+0x1>
 5bc:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <note_index>
}
 5c0:	ff 91       	pop	r31
 5c2:	ef 91       	pop	r30
 5c4:	9f 91       	pop	r25
 5c6:	8f 91       	pop	r24
 5c8:	0f 90       	pop	r0
 5ca:	0f be       	out	0x3f, r0	; 63
 5cc:	0f 90       	pop	r0
 5ce:	1f 90       	pop	r1
 5d0:	18 95       	reti

000005d2 <__vector_42>:

ISR(TIMER4_COMPA_vect){		// use timer 4 for decreasing game time every 1s
 5d2:	1f 92       	push	r1
 5d4:	0f 92       	push	r0
 5d6:	0f b6       	in	r0, 0x3f	; 63
 5d8:	0f 92       	push	r0
 5da:	11 24       	eor	r1, r1
 5dc:	8f 93       	push	r24
	if(TimeRemaining > 0){
 5de:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <TimeRemaining>
 5e2:	88 23       	and	r24, r24
 5e4:	29 f0       	breq	.+10     	; 0x5f0 <__vector_42+0x1e>
		TimeRemaining--;
 5e6:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <TimeRemaining>
 5ea:	81 50       	subi	r24, 0x01	; 1
 5ec:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <TimeRemaining>
	}
}
 5f0:	8f 91       	pop	r24
 5f2:	0f 90       	pop	r0
 5f4:	0f be       	out	0x3f, r0	; 63
 5f6:	0f 90       	pop	r0
 5f8:	1f 90       	pop	r1
 5fa:	18 95       	reti

000005fc <__divmodhi4>:
 5fc:	97 fb       	bst	r25, 7
 5fe:	07 2e       	mov	r0, r23
 600:	16 f4       	brtc	.+4      	; 0x606 <__divmodhi4+0xa>
 602:	00 94       	com	r0
 604:	07 d0       	rcall	.+14     	; 0x614 <__divmodhi4_neg1>
 606:	77 fd       	sbrc	r23, 7
 608:	09 d0       	rcall	.+18     	; 0x61c <__divmodhi4_neg2>
 60a:	0e 94 12 03 	call	0x624	; 0x624 <__udivmodhi4>
 60e:	07 fc       	sbrc	r0, 7
 610:	05 d0       	rcall	.+10     	; 0x61c <__divmodhi4_neg2>
 612:	3e f4       	brtc	.+14     	; 0x622 <__divmodhi4_exit>

00000614 <__divmodhi4_neg1>:
 614:	90 95       	com	r25
 616:	81 95       	neg	r24
 618:	9f 4f       	sbci	r25, 0xFF	; 255
 61a:	08 95       	ret

0000061c <__divmodhi4_neg2>:
 61c:	70 95       	com	r23
 61e:	61 95       	neg	r22
 620:	7f 4f       	sbci	r23, 0xFF	; 255

00000622 <__divmodhi4_exit>:
 622:	08 95       	ret

00000624 <__udivmodhi4>:
 624:	aa 1b       	sub	r26, r26
 626:	bb 1b       	sub	r27, r27
 628:	51 e1       	ldi	r21, 0x11	; 17
 62a:	07 c0       	rjmp	.+14     	; 0x63a <__udivmodhi4_ep>

0000062c <__udivmodhi4_loop>:
 62c:	aa 1f       	adc	r26, r26
 62e:	bb 1f       	adc	r27, r27
 630:	a6 17       	cp	r26, r22
 632:	b7 07       	cpc	r27, r23
 634:	10 f0       	brcs	.+4      	; 0x63a <__udivmodhi4_ep>
 636:	a6 1b       	sub	r26, r22
 638:	b7 0b       	sbc	r27, r23

0000063a <__udivmodhi4_ep>:
 63a:	88 1f       	adc	r24, r24
 63c:	99 1f       	adc	r25, r25
 63e:	5a 95       	dec	r21
 640:	a9 f7       	brne	.-22     	; 0x62c <__udivmodhi4_loop>
 642:	80 95       	com	r24
 644:	90 95       	com	r25
 646:	bc 01       	movw	r22, r24
 648:	cd 01       	movw	r24, r26
 64a:	08 95       	ret

0000064c <printf>:
 64c:	a0 e0       	ldi	r26, 0x00	; 0
 64e:	b0 e0       	ldi	r27, 0x00	; 0
 650:	ec e2       	ldi	r30, 0x2C	; 44
 652:	f3 e0       	ldi	r31, 0x03	; 3
 654:	0c 94 0d 06 	jmp	0xc1a	; 0xc1a <__prologue_saves__+0x20>
 658:	ae 01       	movw	r20, r28
 65a:	4b 5f       	subi	r20, 0xFB	; 251
 65c:	5f 4f       	sbci	r21, 0xFF	; 255
 65e:	fa 01       	movw	r30, r20
 660:	61 91       	ld	r22, Z+
 662:	71 91       	ld	r23, Z+
 664:	af 01       	movw	r20, r30
 666:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <__iob+0x2>
 66a:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <__iob+0x3>
 66e:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <vfprintf>
 672:	e2 e0       	ldi	r30, 0x02	; 2
 674:	0c 94 29 06 	jmp	0xc52	; 0xc52 <__epilogue_restores__+0x20>

00000678 <puts>:
 678:	0f 93       	push	r16
 67a:	1f 93       	push	r17
 67c:	cf 93       	push	r28
 67e:	df 93       	push	r29
 680:	e0 91 91 01 	lds	r30, 0x0191	; 0x800191 <__iob+0x2>
 684:	f0 91 92 01 	lds	r31, 0x0192	; 0x800192 <__iob+0x3>
 688:	23 81       	ldd	r18, Z+3	; 0x03
 68a:	21 ff       	sbrs	r18, 1
 68c:	1b c0       	rjmp	.+54     	; 0x6c4 <puts+0x4c>
 68e:	8c 01       	movw	r16, r24
 690:	d0 e0       	ldi	r29, 0x00	; 0
 692:	c0 e0       	ldi	r28, 0x00	; 0
 694:	f8 01       	movw	r30, r16
 696:	81 91       	ld	r24, Z+
 698:	8f 01       	movw	r16, r30
 69a:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <__iob+0x2>
 69e:	70 91 92 01 	lds	r23, 0x0192	; 0x800192 <__iob+0x3>
 6a2:	db 01       	movw	r26, r22
 6a4:	18 96       	adiw	r26, 0x08	; 8
 6a6:	ed 91       	ld	r30, X+
 6a8:	fc 91       	ld	r31, X
 6aa:	19 97       	sbiw	r26, 0x09	; 9
 6ac:	88 23       	and	r24, r24
 6ae:	31 f0       	breq	.+12     	; 0x6bc <puts+0x44>
 6b0:	09 95       	icall
 6b2:	89 2b       	or	r24, r25
 6b4:	79 f3       	breq	.-34     	; 0x694 <puts+0x1c>
 6b6:	df ef       	ldi	r29, 0xFF	; 255
 6b8:	cf ef       	ldi	r28, 0xFF	; 255
 6ba:	ec cf       	rjmp	.-40     	; 0x694 <puts+0x1c>
 6bc:	8a e0       	ldi	r24, 0x0A	; 10
 6be:	09 95       	icall
 6c0:	89 2b       	or	r24, r25
 6c2:	19 f0       	breq	.+6      	; 0x6ca <puts+0x52>
 6c4:	8f ef       	ldi	r24, 0xFF	; 255
 6c6:	9f ef       	ldi	r25, 0xFF	; 255
 6c8:	02 c0       	rjmp	.+4      	; 0x6ce <puts+0x56>
 6ca:	8d 2f       	mov	r24, r29
 6cc:	9c 2f       	mov	r25, r28
 6ce:	df 91       	pop	r29
 6d0:	cf 91       	pop	r28
 6d2:	1f 91       	pop	r17
 6d4:	0f 91       	pop	r16
 6d6:	08 95       	ret

000006d8 <vfprintf>:
 6d8:	ab e0       	ldi	r26, 0x0B	; 11
 6da:	b0 e0       	ldi	r27, 0x00	; 0
 6dc:	e2 e7       	ldi	r30, 0x72	; 114
 6de:	f3 e0       	ldi	r31, 0x03	; 3
 6e0:	0c 94 fd 05 	jmp	0xbfa	; 0xbfa <__prologue_saves__>
 6e4:	6c 01       	movw	r12, r24
 6e6:	7b 01       	movw	r14, r22
 6e8:	8a 01       	movw	r16, r20
 6ea:	fc 01       	movw	r30, r24
 6ec:	17 82       	std	Z+7, r1	; 0x07
 6ee:	16 82       	std	Z+6, r1	; 0x06
 6f0:	83 81       	ldd	r24, Z+3	; 0x03
 6f2:	81 ff       	sbrs	r24, 1
 6f4:	cc c1       	rjmp	.+920    	; 0xa8e <__stack+0x18f>
 6f6:	ce 01       	movw	r24, r28
 6f8:	01 96       	adiw	r24, 0x01	; 1
 6fa:	3c 01       	movw	r6, r24
 6fc:	f6 01       	movw	r30, r12
 6fe:	93 81       	ldd	r25, Z+3	; 0x03
 700:	f7 01       	movw	r30, r14
 702:	93 fd       	sbrc	r25, 3
 704:	85 91       	lpm	r24, Z+
 706:	93 ff       	sbrs	r25, 3
 708:	81 91       	ld	r24, Z+
 70a:	7f 01       	movw	r14, r30
 70c:	88 23       	and	r24, r24
 70e:	09 f4       	brne	.+2      	; 0x712 <vfprintf+0x3a>
 710:	ba c1       	rjmp	.+884    	; 0xa86 <__stack+0x187>
 712:	85 32       	cpi	r24, 0x25	; 37
 714:	39 f4       	brne	.+14     	; 0x724 <vfprintf+0x4c>
 716:	93 fd       	sbrc	r25, 3
 718:	85 91       	lpm	r24, Z+
 71a:	93 ff       	sbrs	r25, 3
 71c:	81 91       	ld	r24, Z+
 71e:	7f 01       	movw	r14, r30
 720:	85 32       	cpi	r24, 0x25	; 37
 722:	29 f4       	brne	.+10     	; 0x72e <vfprintf+0x56>
 724:	b6 01       	movw	r22, r12
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	0e 94 63 05 	call	0xac6	; 0xac6 <fputc>
 72c:	e7 cf       	rjmp	.-50     	; 0x6fc <vfprintf+0x24>
 72e:	91 2c       	mov	r9, r1
 730:	21 2c       	mov	r2, r1
 732:	31 2c       	mov	r3, r1
 734:	ff e1       	ldi	r31, 0x1F	; 31
 736:	f3 15       	cp	r31, r3
 738:	d8 f0       	brcs	.+54     	; 0x770 <vfprintf+0x98>
 73a:	8b 32       	cpi	r24, 0x2B	; 43
 73c:	79 f0       	breq	.+30     	; 0x75c <vfprintf+0x84>
 73e:	38 f4       	brcc	.+14     	; 0x74e <vfprintf+0x76>
 740:	80 32       	cpi	r24, 0x20	; 32
 742:	79 f0       	breq	.+30     	; 0x762 <vfprintf+0x8a>
 744:	83 32       	cpi	r24, 0x23	; 35
 746:	a1 f4       	brne	.+40     	; 0x770 <vfprintf+0x98>
 748:	23 2d       	mov	r18, r3
 74a:	20 61       	ori	r18, 0x10	; 16
 74c:	1d c0       	rjmp	.+58     	; 0x788 <vfprintf+0xb0>
 74e:	8d 32       	cpi	r24, 0x2D	; 45
 750:	61 f0       	breq	.+24     	; 0x76a <vfprintf+0x92>
 752:	80 33       	cpi	r24, 0x30	; 48
 754:	69 f4       	brne	.+26     	; 0x770 <vfprintf+0x98>
 756:	23 2d       	mov	r18, r3
 758:	21 60       	ori	r18, 0x01	; 1
 75a:	16 c0       	rjmp	.+44     	; 0x788 <vfprintf+0xb0>
 75c:	83 2d       	mov	r24, r3
 75e:	82 60       	ori	r24, 0x02	; 2
 760:	38 2e       	mov	r3, r24
 762:	e3 2d       	mov	r30, r3
 764:	e4 60       	ori	r30, 0x04	; 4
 766:	3e 2e       	mov	r3, r30
 768:	2a c0       	rjmp	.+84     	; 0x7be <vfprintf+0xe6>
 76a:	f3 2d       	mov	r31, r3
 76c:	f8 60       	ori	r31, 0x08	; 8
 76e:	1d c0       	rjmp	.+58     	; 0x7aa <vfprintf+0xd2>
 770:	37 fc       	sbrc	r3, 7
 772:	2d c0       	rjmp	.+90     	; 0x7ce <vfprintf+0xf6>
 774:	20 ed       	ldi	r18, 0xD0	; 208
 776:	28 0f       	add	r18, r24
 778:	2a 30       	cpi	r18, 0x0A	; 10
 77a:	40 f0       	brcs	.+16     	; 0x78c <vfprintf+0xb4>
 77c:	8e 32       	cpi	r24, 0x2E	; 46
 77e:	b9 f4       	brne	.+46     	; 0x7ae <vfprintf+0xd6>
 780:	36 fc       	sbrc	r3, 6
 782:	81 c1       	rjmp	.+770    	; 0xa86 <__stack+0x187>
 784:	23 2d       	mov	r18, r3
 786:	20 64       	ori	r18, 0x40	; 64
 788:	32 2e       	mov	r3, r18
 78a:	19 c0       	rjmp	.+50     	; 0x7be <vfprintf+0xe6>
 78c:	36 fe       	sbrs	r3, 6
 78e:	06 c0       	rjmp	.+12     	; 0x79c <vfprintf+0xc4>
 790:	8a e0       	ldi	r24, 0x0A	; 10
 792:	98 9e       	mul	r9, r24
 794:	20 0d       	add	r18, r0
 796:	11 24       	eor	r1, r1
 798:	92 2e       	mov	r9, r18
 79a:	11 c0       	rjmp	.+34     	; 0x7be <vfprintf+0xe6>
 79c:	ea e0       	ldi	r30, 0x0A	; 10
 79e:	2e 9e       	mul	r2, r30
 7a0:	20 0d       	add	r18, r0
 7a2:	11 24       	eor	r1, r1
 7a4:	22 2e       	mov	r2, r18
 7a6:	f3 2d       	mov	r31, r3
 7a8:	f0 62       	ori	r31, 0x20	; 32
 7aa:	3f 2e       	mov	r3, r31
 7ac:	08 c0       	rjmp	.+16     	; 0x7be <vfprintf+0xe6>
 7ae:	8c 36       	cpi	r24, 0x6C	; 108
 7b0:	21 f4       	brne	.+8      	; 0x7ba <vfprintf+0xe2>
 7b2:	83 2d       	mov	r24, r3
 7b4:	80 68       	ori	r24, 0x80	; 128
 7b6:	38 2e       	mov	r3, r24
 7b8:	02 c0       	rjmp	.+4      	; 0x7be <vfprintf+0xe6>
 7ba:	88 36       	cpi	r24, 0x68	; 104
 7bc:	41 f4       	brne	.+16     	; 0x7ce <vfprintf+0xf6>
 7be:	f7 01       	movw	r30, r14
 7c0:	93 fd       	sbrc	r25, 3
 7c2:	85 91       	lpm	r24, Z+
 7c4:	93 ff       	sbrs	r25, 3
 7c6:	81 91       	ld	r24, Z+
 7c8:	7f 01       	movw	r14, r30
 7ca:	81 11       	cpse	r24, r1
 7cc:	b3 cf       	rjmp	.-154    	; 0x734 <vfprintf+0x5c>
 7ce:	98 2f       	mov	r25, r24
 7d0:	9f 7d       	andi	r25, 0xDF	; 223
 7d2:	95 54       	subi	r25, 0x45	; 69
 7d4:	93 30       	cpi	r25, 0x03	; 3
 7d6:	28 f4       	brcc	.+10     	; 0x7e2 <vfprintf+0x10a>
 7d8:	0c 5f       	subi	r16, 0xFC	; 252
 7da:	1f 4f       	sbci	r17, 0xFF	; 255
 7dc:	9f e3       	ldi	r25, 0x3F	; 63
 7de:	99 83       	std	Y+1, r25	; 0x01
 7e0:	0d c0       	rjmp	.+26     	; 0x7fc <vfprintf+0x124>
 7e2:	83 36       	cpi	r24, 0x63	; 99
 7e4:	31 f0       	breq	.+12     	; 0x7f2 <vfprintf+0x11a>
 7e6:	83 37       	cpi	r24, 0x73	; 115
 7e8:	71 f0       	breq	.+28     	; 0x806 <vfprintf+0x12e>
 7ea:	83 35       	cpi	r24, 0x53	; 83
 7ec:	09 f0       	breq	.+2      	; 0x7f0 <vfprintf+0x118>
 7ee:	59 c0       	rjmp	.+178    	; 0x8a2 <vfprintf+0x1ca>
 7f0:	21 c0       	rjmp	.+66     	; 0x834 <vfprintf+0x15c>
 7f2:	f8 01       	movw	r30, r16
 7f4:	80 81       	ld	r24, Z
 7f6:	89 83       	std	Y+1, r24	; 0x01
 7f8:	0e 5f       	subi	r16, 0xFE	; 254
 7fa:	1f 4f       	sbci	r17, 0xFF	; 255
 7fc:	88 24       	eor	r8, r8
 7fe:	83 94       	inc	r8
 800:	91 2c       	mov	r9, r1
 802:	53 01       	movw	r10, r6
 804:	13 c0       	rjmp	.+38     	; 0x82c <vfprintf+0x154>
 806:	28 01       	movw	r4, r16
 808:	f2 e0       	ldi	r31, 0x02	; 2
 80a:	4f 0e       	add	r4, r31
 80c:	51 1c       	adc	r5, r1
 80e:	f8 01       	movw	r30, r16
 810:	a0 80       	ld	r10, Z
 812:	b1 80       	ldd	r11, Z+1	; 0x01
 814:	36 fe       	sbrs	r3, 6
 816:	03 c0       	rjmp	.+6      	; 0x81e <vfprintf+0x146>
 818:	69 2d       	mov	r22, r9
 81a:	70 e0       	ldi	r23, 0x00	; 0
 81c:	02 c0       	rjmp	.+4      	; 0x822 <vfprintf+0x14a>
 81e:	6f ef       	ldi	r22, 0xFF	; 255
 820:	7f ef       	ldi	r23, 0xFF	; 255
 822:	c5 01       	movw	r24, r10
 824:	0e 94 58 05 	call	0xab0	; 0xab0 <strnlen>
 828:	4c 01       	movw	r8, r24
 82a:	82 01       	movw	r16, r4
 82c:	f3 2d       	mov	r31, r3
 82e:	ff 77       	andi	r31, 0x7F	; 127
 830:	3f 2e       	mov	r3, r31
 832:	16 c0       	rjmp	.+44     	; 0x860 <vfprintf+0x188>
 834:	28 01       	movw	r4, r16
 836:	22 e0       	ldi	r18, 0x02	; 2
 838:	42 0e       	add	r4, r18
 83a:	51 1c       	adc	r5, r1
 83c:	f8 01       	movw	r30, r16
 83e:	a0 80       	ld	r10, Z
 840:	b1 80       	ldd	r11, Z+1	; 0x01
 842:	36 fe       	sbrs	r3, 6
 844:	03 c0       	rjmp	.+6      	; 0x84c <vfprintf+0x174>
 846:	69 2d       	mov	r22, r9
 848:	70 e0       	ldi	r23, 0x00	; 0
 84a:	02 c0       	rjmp	.+4      	; 0x850 <vfprintf+0x178>
 84c:	6f ef       	ldi	r22, 0xFF	; 255
 84e:	7f ef       	ldi	r23, 0xFF	; 255
 850:	c5 01       	movw	r24, r10
 852:	0e 94 4d 05 	call	0xa9a	; 0xa9a <strnlen_P>
 856:	4c 01       	movw	r8, r24
 858:	f3 2d       	mov	r31, r3
 85a:	f0 68       	ori	r31, 0x80	; 128
 85c:	3f 2e       	mov	r3, r31
 85e:	82 01       	movw	r16, r4
 860:	33 fc       	sbrc	r3, 3
 862:	1b c0       	rjmp	.+54     	; 0x89a <vfprintf+0x1c2>
 864:	82 2d       	mov	r24, r2
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	88 16       	cp	r8, r24
 86a:	99 06       	cpc	r9, r25
 86c:	b0 f4       	brcc	.+44     	; 0x89a <vfprintf+0x1c2>
 86e:	b6 01       	movw	r22, r12
 870:	80 e2       	ldi	r24, 0x20	; 32
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	0e 94 63 05 	call	0xac6	; 0xac6 <fputc>
 878:	2a 94       	dec	r2
 87a:	f4 cf       	rjmp	.-24     	; 0x864 <vfprintf+0x18c>
 87c:	f5 01       	movw	r30, r10
 87e:	37 fc       	sbrc	r3, 7
 880:	85 91       	lpm	r24, Z+
 882:	37 fe       	sbrs	r3, 7
 884:	81 91       	ld	r24, Z+
 886:	5f 01       	movw	r10, r30
 888:	b6 01       	movw	r22, r12
 88a:	90 e0       	ldi	r25, 0x00	; 0
 88c:	0e 94 63 05 	call	0xac6	; 0xac6 <fputc>
 890:	21 10       	cpse	r2, r1
 892:	2a 94       	dec	r2
 894:	21 e0       	ldi	r18, 0x01	; 1
 896:	82 1a       	sub	r8, r18
 898:	91 08       	sbc	r9, r1
 89a:	81 14       	cp	r8, r1
 89c:	91 04       	cpc	r9, r1
 89e:	71 f7       	brne	.-36     	; 0x87c <vfprintf+0x1a4>
 8a0:	e8 c0       	rjmp	.+464    	; 0xa72 <__stack+0x173>
 8a2:	84 36       	cpi	r24, 0x64	; 100
 8a4:	11 f0       	breq	.+4      	; 0x8aa <vfprintf+0x1d2>
 8a6:	89 36       	cpi	r24, 0x69	; 105
 8a8:	41 f5       	brne	.+80     	; 0x8fa <vfprintf+0x222>
 8aa:	f8 01       	movw	r30, r16
 8ac:	37 fe       	sbrs	r3, 7
 8ae:	07 c0       	rjmp	.+14     	; 0x8be <vfprintf+0x1e6>
 8b0:	60 81       	ld	r22, Z
 8b2:	71 81       	ldd	r23, Z+1	; 0x01
 8b4:	82 81       	ldd	r24, Z+2	; 0x02
 8b6:	93 81       	ldd	r25, Z+3	; 0x03
 8b8:	0c 5f       	subi	r16, 0xFC	; 252
 8ba:	1f 4f       	sbci	r17, 0xFF	; 255
 8bc:	08 c0       	rjmp	.+16     	; 0x8ce <vfprintf+0x1f6>
 8be:	60 81       	ld	r22, Z
 8c0:	71 81       	ldd	r23, Z+1	; 0x01
 8c2:	07 2e       	mov	r0, r23
 8c4:	00 0c       	add	r0, r0
 8c6:	88 0b       	sbc	r24, r24
 8c8:	99 0b       	sbc	r25, r25
 8ca:	0e 5f       	subi	r16, 0xFE	; 254
 8cc:	1f 4f       	sbci	r17, 0xFF	; 255
 8ce:	f3 2d       	mov	r31, r3
 8d0:	ff 76       	andi	r31, 0x6F	; 111
 8d2:	3f 2e       	mov	r3, r31
 8d4:	97 ff       	sbrs	r25, 7
 8d6:	09 c0       	rjmp	.+18     	; 0x8ea <vfprintf+0x212>
 8d8:	90 95       	com	r25
 8da:	80 95       	com	r24
 8dc:	70 95       	com	r23
 8de:	61 95       	neg	r22
 8e0:	7f 4f       	sbci	r23, 0xFF	; 255
 8e2:	8f 4f       	sbci	r24, 0xFF	; 255
 8e4:	9f 4f       	sbci	r25, 0xFF	; 255
 8e6:	f0 68       	ori	r31, 0x80	; 128
 8e8:	3f 2e       	mov	r3, r31
 8ea:	2a e0       	ldi	r18, 0x0A	; 10
 8ec:	30 e0       	ldi	r19, 0x00	; 0
 8ee:	a3 01       	movw	r20, r6
 8f0:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__ultoa_invert>
 8f4:	88 2e       	mov	r8, r24
 8f6:	86 18       	sub	r8, r6
 8f8:	45 c0       	rjmp	.+138    	; 0x984 <__stack+0x85>
 8fa:	85 37       	cpi	r24, 0x75	; 117
 8fc:	31 f4       	brne	.+12     	; 0x90a <__stack+0xb>
 8fe:	23 2d       	mov	r18, r3
 900:	2f 7e       	andi	r18, 0xEF	; 239
 902:	b2 2e       	mov	r11, r18
 904:	2a e0       	ldi	r18, 0x0A	; 10
 906:	30 e0       	ldi	r19, 0x00	; 0
 908:	25 c0       	rjmp	.+74     	; 0x954 <__stack+0x55>
 90a:	93 2d       	mov	r25, r3
 90c:	99 7f       	andi	r25, 0xF9	; 249
 90e:	b9 2e       	mov	r11, r25
 910:	8f 36       	cpi	r24, 0x6F	; 111
 912:	c1 f0       	breq	.+48     	; 0x944 <__stack+0x45>
 914:	18 f4       	brcc	.+6      	; 0x91c <__stack+0x1d>
 916:	88 35       	cpi	r24, 0x58	; 88
 918:	79 f0       	breq	.+30     	; 0x938 <__stack+0x39>
 91a:	b5 c0       	rjmp	.+362    	; 0xa86 <__stack+0x187>
 91c:	80 37       	cpi	r24, 0x70	; 112
 91e:	19 f0       	breq	.+6      	; 0x926 <__stack+0x27>
 920:	88 37       	cpi	r24, 0x78	; 120
 922:	21 f0       	breq	.+8      	; 0x92c <__stack+0x2d>
 924:	b0 c0       	rjmp	.+352    	; 0xa86 <__stack+0x187>
 926:	e9 2f       	mov	r30, r25
 928:	e0 61       	ori	r30, 0x10	; 16
 92a:	be 2e       	mov	r11, r30
 92c:	b4 fe       	sbrs	r11, 4
 92e:	0d c0       	rjmp	.+26     	; 0x94a <__stack+0x4b>
 930:	fb 2d       	mov	r31, r11
 932:	f4 60       	ori	r31, 0x04	; 4
 934:	bf 2e       	mov	r11, r31
 936:	09 c0       	rjmp	.+18     	; 0x94a <__stack+0x4b>
 938:	34 fe       	sbrs	r3, 4
 93a:	0a c0       	rjmp	.+20     	; 0x950 <__stack+0x51>
 93c:	29 2f       	mov	r18, r25
 93e:	26 60       	ori	r18, 0x06	; 6
 940:	b2 2e       	mov	r11, r18
 942:	06 c0       	rjmp	.+12     	; 0x950 <__stack+0x51>
 944:	28 e0       	ldi	r18, 0x08	; 8
 946:	30 e0       	ldi	r19, 0x00	; 0
 948:	05 c0       	rjmp	.+10     	; 0x954 <__stack+0x55>
 94a:	20 e1       	ldi	r18, 0x10	; 16
 94c:	30 e0       	ldi	r19, 0x00	; 0
 94e:	02 c0       	rjmp	.+4      	; 0x954 <__stack+0x55>
 950:	20 e1       	ldi	r18, 0x10	; 16
 952:	32 e0       	ldi	r19, 0x02	; 2
 954:	f8 01       	movw	r30, r16
 956:	b7 fe       	sbrs	r11, 7
 958:	07 c0       	rjmp	.+14     	; 0x968 <__stack+0x69>
 95a:	60 81       	ld	r22, Z
 95c:	71 81       	ldd	r23, Z+1	; 0x01
 95e:	82 81       	ldd	r24, Z+2	; 0x02
 960:	93 81       	ldd	r25, Z+3	; 0x03
 962:	0c 5f       	subi	r16, 0xFC	; 252
 964:	1f 4f       	sbci	r17, 0xFF	; 255
 966:	06 c0       	rjmp	.+12     	; 0x974 <__stack+0x75>
 968:	60 81       	ld	r22, Z
 96a:	71 81       	ldd	r23, Z+1	; 0x01
 96c:	80 e0       	ldi	r24, 0x00	; 0
 96e:	90 e0       	ldi	r25, 0x00	; 0
 970:	0e 5f       	subi	r16, 0xFE	; 254
 972:	1f 4f       	sbci	r17, 0xFF	; 255
 974:	a3 01       	movw	r20, r6
 976:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__ultoa_invert>
 97a:	88 2e       	mov	r8, r24
 97c:	86 18       	sub	r8, r6
 97e:	fb 2d       	mov	r31, r11
 980:	ff 77       	andi	r31, 0x7F	; 127
 982:	3f 2e       	mov	r3, r31
 984:	36 fe       	sbrs	r3, 6
 986:	0d c0       	rjmp	.+26     	; 0x9a2 <__stack+0xa3>
 988:	23 2d       	mov	r18, r3
 98a:	2e 7f       	andi	r18, 0xFE	; 254
 98c:	a2 2e       	mov	r10, r18
 98e:	89 14       	cp	r8, r9
 990:	58 f4       	brcc	.+22     	; 0x9a8 <__stack+0xa9>
 992:	34 fe       	sbrs	r3, 4
 994:	0b c0       	rjmp	.+22     	; 0x9ac <__stack+0xad>
 996:	32 fc       	sbrc	r3, 2
 998:	09 c0       	rjmp	.+18     	; 0x9ac <__stack+0xad>
 99a:	83 2d       	mov	r24, r3
 99c:	8e 7e       	andi	r24, 0xEE	; 238
 99e:	a8 2e       	mov	r10, r24
 9a0:	05 c0       	rjmp	.+10     	; 0x9ac <__stack+0xad>
 9a2:	b8 2c       	mov	r11, r8
 9a4:	a3 2c       	mov	r10, r3
 9a6:	03 c0       	rjmp	.+6      	; 0x9ae <__stack+0xaf>
 9a8:	b8 2c       	mov	r11, r8
 9aa:	01 c0       	rjmp	.+2      	; 0x9ae <__stack+0xaf>
 9ac:	b9 2c       	mov	r11, r9
 9ae:	a4 fe       	sbrs	r10, 4
 9b0:	0f c0       	rjmp	.+30     	; 0x9d0 <__stack+0xd1>
 9b2:	fe 01       	movw	r30, r28
 9b4:	e8 0d       	add	r30, r8
 9b6:	f1 1d       	adc	r31, r1
 9b8:	80 81       	ld	r24, Z
 9ba:	80 33       	cpi	r24, 0x30	; 48
 9bc:	21 f4       	brne	.+8      	; 0x9c6 <__stack+0xc7>
 9be:	9a 2d       	mov	r25, r10
 9c0:	99 7e       	andi	r25, 0xE9	; 233
 9c2:	a9 2e       	mov	r10, r25
 9c4:	09 c0       	rjmp	.+18     	; 0x9d8 <__stack+0xd9>
 9c6:	a2 fe       	sbrs	r10, 2
 9c8:	06 c0       	rjmp	.+12     	; 0x9d6 <__stack+0xd7>
 9ca:	b3 94       	inc	r11
 9cc:	b3 94       	inc	r11
 9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__stack+0xd9>
 9d0:	8a 2d       	mov	r24, r10
 9d2:	86 78       	andi	r24, 0x86	; 134
 9d4:	09 f0       	breq	.+2      	; 0x9d8 <__stack+0xd9>
 9d6:	b3 94       	inc	r11
 9d8:	a3 fc       	sbrc	r10, 3
 9da:	11 c0       	rjmp	.+34     	; 0x9fe <__stack+0xff>
 9dc:	a0 fe       	sbrs	r10, 0
 9de:	06 c0       	rjmp	.+12     	; 0x9ec <__stack+0xed>
 9e0:	b2 14       	cp	r11, r2
 9e2:	88 f4       	brcc	.+34     	; 0xa06 <__stack+0x107>
 9e4:	28 0c       	add	r2, r8
 9e6:	92 2c       	mov	r9, r2
 9e8:	9b 18       	sub	r9, r11
 9ea:	0e c0       	rjmp	.+28     	; 0xa08 <__stack+0x109>
 9ec:	b2 14       	cp	r11, r2
 9ee:	60 f4       	brcc	.+24     	; 0xa08 <__stack+0x109>
 9f0:	b6 01       	movw	r22, r12
 9f2:	80 e2       	ldi	r24, 0x20	; 32
 9f4:	90 e0       	ldi	r25, 0x00	; 0
 9f6:	0e 94 63 05 	call	0xac6	; 0xac6 <fputc>
 9fa:	b3 94       	inc	r11
 9fc:	f7 cf       	rjmp	.-18     	; 0x9ec <__stack+0xed>
 9fe:	b2 14       	cp	r11, r2
 a00:	18 f4       	brcc	.+6      	; 0xa08 <__stack+0x109>
 a02:	2b 18       	sub	r2, r11
 a04:	02 c0       	rjmp	.+4      	; 0xa0a <__stack+0x10b>
 a06:	98 2c       	mov	r9, r8
 a08:	21 2c       	mov	r2, r1
 a0a:	a4 fe       	sbrs	r10, 4
 a0c:	10 c0       	rjmp	.+32     	; 0xa2e <__stack+0x12f>
 a0e:	b6 01       	movw	r22, r12
 a10:	80 e3       	ldi	r24, 0x30	; 48
 a12:	90 e0       	ldi	r25, 0x00	; 0
 a14:	0e 94 63 05 	call	0xac6	; 0xac6 <fputc>
 a18:	a2 fe       	sbrs	r10, 2
 a1a:	17 c0       	rjmp	.+46     	; 0xa4a <__stack+0x14b>
 a1c:	a1 fc       	sbrc	r10, 1
 a1e:	03 c0       	rjmp	.+6      	; 0xa26 <__stack+0x127>
 a20:	88 e7       	ldi	r24, 0x78	; 120
 a22:	90 e0       	ldi	r25, 0x00	; 0
 a24:	02 c0       	rjmp	.+4      	; 0xa2a <__stack+0x12b>
 a26:	88 e5       	ldi	r24, 0x58	; 88
 a28:	90 e0       	ldi	r25, 0x00	; 0
 a2a:	b6 01       	movw	r22, r12
 a2c:	0c c0       	rjmp	.+24     	; 0xa46 <__stack+0x147>
 a2e:	8a 2d       	mov	r24, r10
 a30:	86 78       	andi	r24, 0x86	; 134
 a32:	59 f0       	breq	.+22     	; 0xa4a <__stack+0x14b>
 a34:	a1 fe       	sbrs	r10, 1
 a36:	02 c0       	rjmp	.+4      	; 0xa3c <__stack+0x13d>
 a38:	8b e2       	ldi	r24, 0x2B	; 43
 a3a:	01 c0       	rjmp	.+2      	; 0xa3e <__stack+0x13f>
 a3c:	80 e2       	ldi	r24, 0x20	; 32
 a3e:	a7 fc       	sbrc	r10, 7
 a40:	8d e2       	ldi	r24, 0x2D	; 45
 a42:	b6 01       	movw	r22, r12
 a44:	90 e0       	ldi	r25, 0x00	; 0
 a46:	0e 94 63 05 	call	0xac6	; 0xac6 <fputc>
 a4a:	89 14       	cp	r8, r9
 a4c:	38 f4       	brcc	.+14     	; 0xa5c <__stack+0x15d>
 a4e:	b6 01       	movw	r22, r12
 a50:	80 e3       	ldi	r24, 0x30	; 48
 a52:	90 e0       	ldi	r25, 0x00	; 0
 a54:	0e 94 63 05 	call	0xac6	; 0xac6 <fputc>
 a58:	9a 94       	dec	r9
 a5a:	f7 cf       	rjmp	.-18     	; 0xa4a <__stack+0x14b>
 a5c:	8a 94       	dec	r8
 a5e:	f3 01       	movw	r30, r6
 a60:	e8 0d       	add	r30, r8
 a62:	f1 1d       	adc	r31, r1
 a64:	80 81       	ld	r24, Z
 a66:	b6 01       	movw	r22, r12
 a68:	90 e0       	ldi	r25, 0x00	; 0
 a6a:	0e 94 63 05 	call	0xac6	; 0xac6 <fputc>
 a6e:	81 10       	cpse	r8, r1
 a70:	f5 cf       	rjmp	.-22     	; 0xa5c <__stack+0x15d>
 a72:	22 20       	and	r2, r2
 a74:	09 f4       	brne	.+2      	; 0xa78 <__stack+0x179>
 a76:	42 ce       	rjmp	.-892    	; 0x6fc <vfprintf+0x24>
 a78:	b6 01       	movw	r22, r12
 a7a:	80 e2       	ldi	r24, 0x20	; 32
 a7c:	90 e0       	ldi	r25, 0x00	; 0
 a7e:	0e 94 63 05 	call	0xac6	; 0xac6 <fputc>
 a82:	2a 94       	dec	r2
 a84:	f6 cf       	rjmp	.-20     	; 0xa72 <__stack+0x173>
 a86:	f6 01       	movw	r30, r12
 a88:	86 81       	ldd	r24, Z+6	; 0x06
 a8a:	97 81       	ldd	r25, Z+7	; 0x07
 a8c:	02 c0       	rjmp	.+4      	; 0xa92 <__stack+0x193>
 a8e:	8f ef       	ldi	r24, 0xFF	; 255
 a90:	9f ef       	ldi	r25, 0xFF	; 255
 a92:	2b 96       	adiw	r28, 0x0b	; 11
 a94:	e2 e1       	ldi	r30, 0x12	; 18
 a96:	0c 94 19 06 	jmp	0xc32	; 0xc32 <__epilogue_restores__>

00000a9a <strnlen_P>:
 a9a:	fc 01       	movw	r30, r24
 a9c:	05 90       	lpm	r0, Z+
 a9e:	61 50       	subi	r22, 0x01	; 1
 aa0:	70 40       	sbci	r23, 0x00	; 0
 aa2:	01 10       	cpse	r0, r1
 aa4:	d8 f7       	brcc	.-10     	; 0xa9c <strnlen_P+0x2>
 aa6:	80 95       	com	r24
 aa8:	90 95       	com	r25
 aaa:	8e 0f       	add	r24, r30
 aac:	9f 1f       	adc	r25, r31
 aae:	08 95       	ret

00000ab0 <strnlen>:
 ab0:	fc 01       	movw	r30, r24
 ab2:	61 50       	subi	r22, 0x01	; 1
 ab4:	70 40       	sbci	r23, 0x00	; 0
 ab6:	01 90       	ld	r0, Z+
 ab8:	01 10       	cpse	r0, r1
 aba:	d8 f7       	brcc	.-10     	; 0xab2 <strnlen+0x2>
 abc:	80 95       	com	r24
 abe:	90 95       	com	r25
 ac0:	8e 0f       	add	r24, r30
 ac2:	9f 1f       	adc	r25, r31
 ac4:	08 95       	ret

00000ac6 <fputc>:
 ac6:	0f 93       	push	r16
 ac8:	1f 93       	push	r17
 aca:	cf 93       	push	r28
 acc:	df 93       	push	r29
 ace:	fb 01       	movw	r30, r22
 ad0:	23 81       	ldd	r18, Z+3	; 0x03
 ad2:	21 fd       	sbrc	r18, 1
 ad4:	03 c0       	rjmp	.+6      	; 0xadc <fputc+0x16>
 ad6:	8f ef       	ldi	r24, 0xFF	; 255
 ad8:	9f ef       	ldi	r25, 0xFF	; 255
 ada:	2c c0       	rjmp	.+88     	; 0xb34 <fputc+0x6e>
 adc:	22 ff       	sbrs	r18, 2
 ade:	16 c0       	rjmp	.+44     	; 0xb0c <fputc+0x46>
 ae0:	46 81       	ldd	r20, Z+6	; 0x06
 ae2:	57 81       	ldd	r21, Z+7	; 0x07
 ae4:	24 81       	ldd	r18, Z+4	; 0x04
 ae6:	35 81       	ldd	r19, Z+5	; 0x05
 ae8:	42 17       	cp	r20, r18
 aea:	53 07       	cpc	r21, r19
 aec:	44 f4       	brge	.+16     	; 0xafe <fputc+0x38>
 aee:	a0 81       	ld	r26, Z
 af0:	b1 81       	ldd	r27, Z+1	; 0x01
 af2:	9d 01       	movw	r18, r26
 af4:	2f 5f       	subi	r18, 0xFF	; 255
 af6:	3f 4f       	sbci	r19, 0xFF	; 255
 af8:	31 83       	std	Z+1, r19	; 0x01
 afa:	20 83       	st	Z, r18
 afc:	8c 93       	st	X, r24
 afe:	26 81       	ldd	r18, Z+6	; 0x06
 b00:	37 81       	ldd	r19, Z+7	; 0x07
 b02:	2f 5f       	subi	r18, 0xFF	; 255
 b04:	3f 4f       	sbci	r19, 0xFF	; 255
 b06:	37 83       	std	Z+7, r19	; 0x07
 b08:	26 83       	std	Z+6, r18	; 0x06
 b0a:	14 c0       	rjmp	.+40     	; 0xb34 <fputc+0x6e>
 b0c:	8b 01       	movw	r16, r22
 b0e:	ec 01       	movw	r28, r24
 b10:	fb 01       	movw	r30, r22
 b12:	00 84       	ldd	r0, Z+8	; 0x08
 b14:	f1 85       	ldd	r31, Z+9	; 0x09
 b16:	e0 2d       	mov	r30, r0
 b18:	09 95       	icall
 b1a:	89 2b       	or	r24, r25
 b1c:	e1 f6       	brne	.-72     	; 0xad6 <fputc+0x10>
 b1e:	d8 01       	movw	r26, r16
 b20:	16 96       	adiw	r26, 0x06	; 6
 b22:	8d 91       	ld	r24, X+
 b24:	9c 91       	ld	r25, X
 b26:	17 97       	sbiw	r26, 0x07	; 7
 b28:	01 96       	adiw	r24, 0x01	; 1
 b2a:	17 96       	adiw	r26, 0x07	; 7
 b2c:	9c 93       	st	X, r25
 b2e:	8e 93       	st	-X, r24
 b30:	16 97       	sbiw	r26, 0x06	; 6
 b32:	ce 01       	movw	r24, r28
 b34:	df 91       	pop	r29
 b36:	cf 91       	pop	r28
 b38:	1f 91       	pop	r17
 b3a:	0f 91       	pop	r16
 b3c:	08 95       	ret

00000b3e <__ultoa_invert>:
 b3e:	fa 01       	movw	r30, r20
 b40:	aa 27       	eor	r26, r26
 b42:	28 30       	cpi	r18, 0x08	; 8
 b44:	51 f1       	breq	.+84     	; 0xb9a <__ultoa_invert+0x5c>
 b46:	20 31       	cpi	r18, 0x10	; 16
 b48:	81 f1       	breq	.+96     	; 0xbaa <__ultoa_invert+0x6c>
 b4a:	e8 94       	clt
 b4c:	6f 93       	push	r22
 b4e:	6e 7f       	andi	r22, 0xFE	; 254
 b50:	6e 5f       	subi	r22, 0xFE	; 254
 b52:	7f 4f       	sbci	r23, 0xFF	; 255
 b54:	8f 4f       	sbci	r24, 0xFF	; 255
 b56:	9f 4f       	sbci	r25, 0xFF	; 255
 b58:	af 4f       	sbci	r26, 0xFF	; 255
 b5a:	b1 e0       	ldi	r27, 0x01	; 1
 b5c:	3e d0       	rcall	.+124    	; 0xbda <__ultoa_invert+0x9c>
 b5e:	b4 e0       	ldi	r27, 0x04	; 4
 b60:	3c d0       	rcall	.+120    	; 0xbda <__ultoa_invert+0x9c>
 b62:	67 0f       	add	r22, r23
 b64:	78 1f       	adc	r23, r24
 b66:	89 1f       	adc	r24, r25
 b68:	9a 1f       	adc	r25, r26
 b6a:	a1 1d       	adc	r26, r1
 b6c:	68 0f       	add	r22, r24
 b6e:	79 1f       	adc	r23, r25
 b70:	8a 1f       	adc	r24, r26
 b72:	91 1d       	adc	r25, r1
 b74:	a1 1d       	adc	r26, r1
 b76:	6a 0f       	add	r22, r26
 b78:	71 1d       	adc	r23, r1
 b7a:	81 1d       	adc	r24, r1
 b7c:	91 1d       	adc	r25, r1
 b7e:	a1 1d       	adc	r26, r1
 b80:	20 d0       	rcall	.+64     	; 0xbc2 <__ultoa_invert+0x84>
 b82:	09 f4       	brne	.+2      	; 0xb86 <__ultoa_invert+0x48>
 b84:	68 94       	set
 b86:	3f 91       	pop	r19
 b88:	2a e0       	ldi	r18, 0x0A	; 10
 b8a:	26 9f       	mul	r18, r22
 b8c:	11 24       	eor	r1, r1
 b8e:	30 19       	sub	r19, r0
 b90:	30 5d       	subi	r19, 0xD0	; 208
 b92:	31 93       	st	Z+, r19
 b94:	de f6       	brtc	.-74     	; 0xb4c <__ultoa_invert+0xe>
 b96:	cf 01       	movw	r24, r30
 b98:	08 95       	ret
 b9a:	46 2f       	mov	r20, r22
 b9c:	47 70       	andi	r20, 0x07	; 7
 b9e:	40 5d       	subi	r20, 0xD0	; 208
 ba0:	41 93       	st	Z+, r20
 ba2:	b3 e0       	ldi	r27, 0x03	; 3
 ba4:	0f d0       	rcall	.+30     	; 0xbc4 <__ultoa_invert+0x86>
 ba6:	c9 f7       	brne	.-14     	; 0xb9a <__ultoa_invert+0x5c>
 ba8:	f6 cf       	rjmp	.-20     	; 0xb96 <__ultoa_invert+0x58>
 baa:	46 2f       	mov	r20, r22
 bac:	4f 70       	andi	r20, 0x0F	; 15
 bae:	40 5d       	subi	r20, 0xD0	; 208
 bb0:	4a 33       	cpi	r20, 0x3A	; 58
 bb2:	18 f0       	brcs	.+6      	; 0xbba <__ultoa_invert+0x7c>
 bb4:	49 5d       	subi	r20, 0xD9	; 217
 bb6:	31 fd       	sbrc	r19, 1
 bb8:	40 52       	subi	r20, 0x20	; 32
 bba:	41 93       	st	Z+, r20
 bbc:	02 d0       	rcall	.+4      	; 0xbc2 <__ultoa_invert+0x84>
 bbe:	a9 f7       	brne	.-22     	; 0xbaa <__ultoa_invert+0x6c>
 bc0:	ea cf       	rjmp	.-44     	; 0xb96 <__ultoa_invert+0x58>
 bc2:	b4 e0       	ldi	r27, 0x04	; 4
 bc4:	a6 95       	lsr	r26
 bc6:	97 95       	ror	r25
 bc8:	87 95       	ror	r24
 bca:	77 95       	ror	r23
 bcc:	67 95       	ror	r22
 bce:	ba 95       	dec	r27
 bd0:	c9 f7       	brne	.-14     	; 0xbc4 <__ultoa_invert+0x86>
 bd2:	00 97       	sbiw	r24, 0x00	; 0
 bd4:	61 05       	cpc	r22, r1
 bd6:	71 05       	cpc	r23, r1
 bd8:	08 95       	ret
 bda:	9b 01       	movw	r18, r22
 bdc:	ac 01       	movw	r20, r24
 bde:	0a 2e       	mov	r0, r26
 be0:	06 94       	lsr	r0
 be2:	57 95       	ror	r21
 be4:	47 95       	ror	r20
 be6:	37 95       	ror	r19
 be8:	27 95       	ror	r18
 bea:	ba 95       	dec	r27
 bec:	c9 f7       	brne	.-14     	; 0xbe0 <__ultoa_invert+0xa2>
 bee:	62 0f       	add	r22, r18
 bf0:	73 1f       	adc	r23, r19
 bf2:	84 1f       	adc	r24, r20
 bf4:	95 1f       	adc	r25, r21
 bf6:	a0 1d       	adc	r26, r0
 bf8:	08 95       	ret

00000bfa <__prologue_saves__>:
 bfa:	2f 92       	push	r2
 bfc:	3f 92       	push	r3
 bfe:	4f 92       	push	r4
 c00:	5f 92       	push	r5
 c02:	6f 92       	push	r6
 c04:	7f 92       	push	r7
 c06:	8f 92       	push	r8
 c08:	9f 92       	push	r9
 c0a:	af 92       	push	r10
 c0c:	bf 92       	push	r11
 c0e:	cf 92       	push	r12
 c10:	df 92       	push	r13
 c12:	ef 92       	push	r14
 c14:	ff 92       	push	r15
 c16:	0f 93       	push	r16
 c18:	1f 93       	push	r17
 c1a:	cf 93       	push	r28
 c1c:	df 93       	push	r29
 c1e:	cd b7       	in	r28, 0x3d	; 61
 c20:	de b7       	in	r29, 0x3e	; 62
 c22:	ca 1b       	sub	r28, r26
 c24:	db 0b       	sbc	r29, r27
 c26:	0f b6       	in	r0, 0x3f	; 63
 c28:	f8 94       	cli
 c2a:	de bf       	out	0x3e, r29	; 62
 c2c:	0f be       	out	0x3f, r0	; 63
 c2e:	cd bf       	out	0x3d, r28	; 61
 c30:	09 94       	ijmp

00000c32 <__epilogue_restores__>:
 c32:	2a 88       	ldd	r2, Y+18	; 0x12
 c34:	39 88       	ldd	r3, Y+17	; 0x11
 c36:	48 88       	ldd	r4, Y+16	; 0x10
 c38:	5f 84       	ldd	r5, Y+15	; 0x0f
 c3a:	6e 84       	ldd	r6, Y+14	; 0x0e
 c3c:	7d 84       	ldd	r7, Y+13	; 0x0d
 c3e:	8c 84       	ldd	r8, Y+12	; 0x0c
 c40:	9b 84       	ldd	r9, Y+11	; 0x0b
 c42:	aa 84       	ldd	r10, Y+10	; 0x0a
 c44:	b9 84       	ldd	r11, Y+9	; 0x09
 c46:	c8 84       	ldd	r12, Y+8	; 0x08
 c48:	df 80       	ldd	r13, Y+7	; 0x07
 c4a:	ee 80       	ldd	r14, Y+6	; 0x06
 c4c:	fd 80       	ldd	r15, Y+5	; 0x05
 c4e:	0c 81       	ldd	r16, Y+4	; 0x04
 c50:	1b 81       	ldd	r17, Y+3	; 0x03
 c52:	aa 81       	ldd	r26, Y+2	; 0x02
 c54:	b9 81       	ldd	r27, Y+1	; 0x01
 c56:	ce 0f       	add	r28, r30
 c58:	d1 1d       	adc	r29, r1
 c5a:	0f b6       	in	r0, 0x3f	; 63
 c5c:	f8 94       	cli
 c5e:	de bf       	out	0x3e, r29	; 62
 c60:	0f be       	out	0x3f, r0	; 63
 c62:	cd bf       	out	0x3d, r28	; 61
 c64:	ed 01       	movw	r28, r26
 c66:	08 95       	ret

00000c68 <_exit>:
 c68:	f8 94       	cli

00000c6a <__stop_program>:
 c6a:	ff cf       	rjmp	.-2      	; 0xc6a <__stop_program>
