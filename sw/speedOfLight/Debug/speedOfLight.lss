
speedOfLight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000096  00800100  00001240  000012d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001240  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002f  00800196  00800196  0000136a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000136a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000139c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  000013dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ea2  00000000  00000000  000014fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d21  00000000  00000000  0000339e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000efc  00000000  00000000  000040bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a8  00000000  00000000  00004fbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007f5  00000000  00000000  00005364  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ec0  00000000  00000000  00005b59  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  00006a19  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
       4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      38:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__vector_14>
      3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      44:	0c 94 d5 01 	jmp	0x3aa	; 0x3aa <__vector_17>
      48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      84:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__vector_33>
      88:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__vector_34>
      8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a8:	0c 94 99 02 	jmp	0x532	; 0x532 <__vector_42>
      ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	d8 e0       	ldi	r29, 0x08	; 8
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
      c0:	11 e0       	ldi	r17, 0x01	; 1
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	e0 e4       	ldi	r30, 0x40	; 64
      c8:	f2 e1       	ldi	r31, 0x12	; 18
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0
      d0:	a6 39       	cpi	r26, 0x96	; 150
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
      d6:	21 e0       	ldi	r18, 0x01	; 1
      d8:	a6 e9       	ldi	r26, 0x96	; 150
      da:	b1 e0       	ldi	r27, 0x01	; 1
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	a5 3c       	cpi	r26, 0xC5	; 197
      e2:	b2 07       	cpc	r27, r18
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
      e6:	0e 94 30 07 	call	0xe60	; 0xe60 <main>
      ea:	0c 94 1e 09 	jmp	0x123c	; 0x123c <_exit>

000000ee <__bad_interrupt>:
      ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <spiSetup>:
	
}

void spiSetup(){
	// MOSI and SCK to outputs
	DDRB |= (1<<3)|(1<<5);
      f2:	84 b1       	in	r24, 0x04	; 4
      f4:	88 62       	ori	r24, 0x28	; 40
      f6:	84 b9       	out	0x04, r24	; 4
	// STC int enabled master mode, clk/16
	SPCR0 = (1 << SPIE) | (1 << SPE) | (1 << MSTR) | (1 << SPR0);
      f8:	81 ed       	ldi	r24, 0xD1	; 209
      fa:	8c bd       	out	0x2c, r24	; 44
      fc:	08 95       	ret

000000fe <tmrSetup>:
	// timer 3 is used to update the LED display as well as read the button matrix.
	// COMPA will trigger the next multiplexing cycle of the led matrices
	// COMPB will read the next line of buttons
	
	// CTC mode clk/1
	TCCR3B = (1 << WGM12) | (1 << CS11);
      fe:	8a e0       	ldi	r24, 0x0A	; 10
     100:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
	OCR3A = 3700;
     104:	84 e7       	ldi	r24, 0x74	; 116
     106:	9e e0       	ldi	r25, 0x0E	; 14
     108:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     10c:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	OCR3B = 1850;
     110:	8a e3       	ldi	r24, 0x3A	; 58
     112:	97 e0       	ldi	r25, 0x07	; 7
     114:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     118:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	TIMSK3 |= (1 << OCIE3B) | 1 << (OCIE3A);
     11c:	e1 e7       	ldi	r30, 0x71	; 113
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	80 81       	ld	r24, Z
     122:	86 60       	ori	r24, 0x06	; 6
     124:	80 83       	st	Z, r24
	TCNT3 = 0;
     126:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     12a:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
     12e:	08 95       	ret

00000130 <buttonsInit>:
0x7F, 0x67, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71, 0x00};


void buttonsInit(){
	// set DDR for button matrix
	DDRC = 0x3F; // set to outputs
     130:	8f e3       	ldi	r24, 0x3F	; 63
     132:	87 b9       	out	0x07, r24	; 7
	PORTD = 0xFF; // set pullup resistors
     134:	8f ef       	ldi	r24, 0xFF	; 255
     136:	8b b9       	out	0x0b, r24	; 11
	
	// set DDR for latch and blank pins
	DDRB |= 1 << LED_L | 1 << LED_B;
     138:	84 b1       	in	r24, 0x04	; 4
     13a:	83 60       	ori	r24, 0x03	; 3
     13c:	84 b9       	out	0x04, r24	; 4
	
	spiSetup();
     13e:	0e 94 79 00 	call	0xf2	; 0xf2 <spiSetup>
	tmrSetup();
     142:	0e 94 7f 00 	call	0xfe	; 0xfe <tmrSetup>
     146:	08 95       	ret

00000148 <isButtonDown>:
	TIMSK3 |= (1 << OCIE3B) | 1 << (OCIE3A);
	TCNT3 = 0;
}

uint8_t isButtonDown(uint8_t x, uint8_t y){
	return buttonMemory[y] & (1 << x); // may need to change to 1 << (5 - x) test this later
     148:	e6 2f       	mov	r30, r22
     14a:	f0 e0       	ldi	r31, 0x00	; 0
     14c:	e3 56       	subi	r30, 0x63	; 99
     14e:	fe 4f       	sbci	r31, 0xFE	; 254
     150:	40 81       	ld	r20, Z
     152:	21 e0       	ldi	r18, 0x01	; 1
     154:	30 e0       	ldi	r19, 0x00	; 0
     156:	b9 01       	movw	r22, r18
     158:	02 c0       	rjmp	.+4      	; 0x15e <isButtonDown+0x16>
     15a:	66 0f       	add	r22, r22
     15c:	77 1f       	adc	r23, r23
     15e:	8a 95       	dec	r24
     160:	e2 f7       	brpl	.-8      	; 0x15a <isButtonDown+0x12>
     162:	cb 01       	movw	r24, r22
}
     164:	84 23       	and	r24, r20
     166:	08 95       	ret

00000168 <setButtonLed>:

void setButtonLed(uint8_t x, uint8_t y, uint8_t value){
	if(value){
     168:	44 23       	and	r20, r20
     16a:	89 f0       	breq	.+34     	; 0x18e <setButtonLed+0x26>
		ledMemory[9 + y] |= 1 << x;
     16c:	e6 2f       	mov	r30, r22
     16e:	f0 e0       	ldi	r31, 0x00	; 0
     170:	ed 5e       	subi	r30, 0xED	; 237
     172:	fe 4f       	sbci	r31, 0xFE	; 254
     174:	40 81       	ld	r20, Z
     176:	21 e0       	ldi	r18, 0x01	; 1
     178:	30 e0       	ldi	r19, 0x00	; 0
     17a:	b9 01       	movw	r22, r18
     17c:	02 c0       	rjmp	.+4      	; 0x182 <setButtonLed+0x1a>
     17e:	66 0f       	add	r22, r22
     180:	77 1f       	adc	r23, r23
     182:	8a 95       	dec	r24
     184:	e2 f7       	brpl	.-8      	; 0x17e <setButtonLed+0x16>
     186:	cb 01       	movw	r24, r22
     188:	84 2b       	or	r24, r20
     18a:	80 83       	st	Z, r24
		return;
     18c:	08 95       	ret
	}
	ledMemory[9 + y] &= ~(1 << x);
     18e:	e6 2f       	mov	r30, r22
     190:	f0 e0       	ldi	r31, 0x00	; 0
     192:	ed 5e       	subi	r30, 0xED	; 237
     194:	fe 4f       	sbci	r31, 0xFE	; 254
     196:	40 81       	ld	r20, Z
     198:	21 e0       	ldi	r18, 0x01	; 1
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	b9 01       	movw	r22, r18
     19e:	02 c0       	rjmp	.+4      	; 0x1a4 <setButtonLed+0x3c>
     1a0:	66 0f       	add	r22, r22
     1a2:	77 1f       	adc	r23, r23
     1a4:	8a 95       	dec	r24
     1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <setButtonLed+0x38>
     1a8:	cb 01       	movw	r24, r22
     1aa:	80 95       	com	r24
     1ac:	84 23       	and	r24, r20
     1ae:	80 83       	st	Z, r24
     1b0:	08 95       	ret

000001b2 <setScore>:
	
}

void setScore(uint8_t display, uint16_t value){
     1b2:	08 95       	ret

000001b4 <__vector_33>:
	
}


ISR(TIMER3_COMPA_vect){
     1b4:	1f 92       	push	r1
     1b6:	0f 92       	push	r0
     1b8:	0f b6       	in	r0, 0x3f	; 63
     1ba:	0f 92       	push	r0
     1bc:	11 24       	eor	r1, r1
     1be:	2f 93       	push	r18
     1c0:	3f 93       	push	r19
     1c2:	4f 93       	push	r20
     1c4:	5f 93       	push	r21
     1c6:	6f 93       	push	r22
     1c8:	7f 93       	push	r23
     1ca:	8f 93       	push	r24
     1cc:	9f 93       	push	r25
     1ce:	af 93       	push	r26
     1d0:	bf 93       	push	r27
     1d2:	ef 93       	push	r30
     1d4:	ff 93       	push	r31
	// row 0, 1, 2 are on LED 2 and 3
	// row 3, 4, 5 are on LED 4 and 5
	// the row is in the lower nibble and column data is in the upper nibble
	// for each row the two registers need to be set and the other two need to be cleared
	
	if(muxCounter < 3){
     1d6:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <muxCounter>
     1da:	83 30       	cpi	r24, 0x03	; 3
     1dc:	90 f5       	brcc	.+100    	; 0x242 <__vector_33+0x8e>
		ledData[0] = (1 << muxCounter) | ((ledMemory[9 + muxCounter] >> 4) << 4);
     1de:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <muxCounter>
     1e2:	e0 91 97 01 	lds	r30, 0x0197	; 0x800197 <muxCounter>
     1e6:	f0 e0       	ldi	r31, 0x00	; 0
     1e8:	ed 5e       	subi	r30, 0xED	; 237
     1ea:	fe 4f       	sbci	r31, 0xFE	; 254
     1ec:	80 81       	ld	r24, Z
     1ee:	48 2f       	mov	r20, r24
     1f0:	40 7f       	andi	r20, 0xF0	; 240
     1f2:	21 e0       	ldi	r18, 0x01	; 1
     1f4:	30 e0       	ldi	r19, 0x00	; 0
     1f6:	b9 01       	movw	r22, r18
     1f8:	02 c0       	rjmp	.+4      	; 0x1fe <__vector_33+0x4a>
     1fa:	66 0f       	add	r22, r22
     1fc:	77 1f       	adc	r23, r23
     1fe:	9a 95       	dec	r25
     200:	e2 f7       	brpl	.-8      	; 0x1fa <__vector_33+0x46>
     202:	cb 01       	movw	r24, r22
     204:	84 2b       	or	r24, r20
     206:	a4 e0       	ldi	r26, 0x04	; 4
     208:	b1 e0       	ldi	r27, 0x01	; 1
     20a:	8c 93       	st	X, r24
		ledData[1] = (1 << muxCounter) | ((ledMemory[9 + muxCounter] & 0x0F) << 4);
     20c:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <muxCounter>
     210:	e0 91 97 01 	lds	r30, 0x0197	; 0x800197 <muxCounter>
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	ed 5e       	subi	r30, 0xED	; 237
     218:	fe 4f       	sbci	r31, 0xFE	; 254
     21a:	90 81       	ld	r25, Z
     21c:	02 c0       	rjmp	.+4      	; 0x222 <__vector_33+0x6e>
     21e:	22 0f       	add	r18, r18
     220:	33 1f       	adc	r19, r19
     222:	8a 95       	dec	r24
     224:	e2 f7       	brpl	.-8      	; 0x21e <__vector_33+0x6a>
     226:	70 e1       	ldi	r23, 0x10	; 16
     228:	97 9f       	mul	r25, r23
     22a:	c0 01       	movw	r24, r0
     22c:	11 24       	eor	r1, r1
     22e:	82 2b       	or	r24, r18
     230:	11 96       	adiw	r26, 0x01	; 1
     232:	8c 93       	st	X, r24
     234:	11 97       	sbiw	r26, 0x01	; 1
		ledData[2] = 0;
     236:	12 96       	adiw	r26, 0x02	; 2
     238:	1c 92       	st	X, r1
     23a:	12 97       	sbiw	r26, 0x02	; 2
		ledData[3] = 0;
     23c:	13 96       	adiw	r26, 0x03	; 3
     23e:	1c 92       	st	X, r1
     240:	33 c0       	rjmp	.+102    	; 0x2a8 <__vector_33+0xf4>
	}
	else{
		ledData[2] = (1 << (muxCounter - 3)) | ((ledMemory[9 + muxCounter] >> 4) << 4);
     242:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <muxCounter>
     246:	e0 91 97 01 	lds	r30, 0x0197	; 0x800197 <muxCounter>
     24a:	f0 e0       	ldi	r31, 0x00	; 0
     24c:	ed 5e       	subi	r30, 0xED	; 237
     24e:	fe 4f       	sbci	r31, 0xFE	; 254
     250:	40 81       	ld	r20, Z
     252:	83 50       	subi	r24, 0x03	; 3
     254:	21 e0       	ldi	r18, 0x01	; 1
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	b9 01       	movw	r22, r18
     25a:	02 c0       	rjmp	.+4      	; 0x260 <__vector_33+0xac>
     25c:	66 0f       	add	r22, r22
     25e:	77 1f       	adc	r23, r23
     260:	8a 95       	dec	r24
     262:	e2 f7       	brpl	.-8      	; 0x25c <__vector_33+0xa8>
     264:	cb 01       	movw	r24, r22
     266:	94 2f       	mov	r25, r20
     268:	90 7f       	andi	r25, 0xF0	; 240
     26a:	89 2b       	or	r24, r25
     26c:	a4 e0       	ldi	r26, 0x04	; 4
     26e:	b1 e0       	ldi	r27, 0x01	; 1
     270:	12 96       	adiw	r26, 0x02	; 2
     272:	8c 93       	st	X, r24
     274:	12 97       	sbiw	r26, 0x02	; 2
		ledData[3] = (1 << (muxCounter - 3)) | ((ledMemory[9 + muxCounter] & 0x0F) << 4);
     276:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <muxCounter>
     27a:	e0 91 97 01 	lds	r30, 0x0197	; 0x800197 <muxCounter>
     27e:	f0 e0       	ldi	r31, 0x00	; 0
     280:	ed 5e       	subi	r30, 0xED	; 237
     282:	fe 4f       	sbci	r31, 0xFE	; 254
     284:	90 81       	ld	r25, Z
     286:	83 50       	subi	r24, 0x03	; 3
     288:	02 c0       	rjmp	.+4      	; 0x28e <__vector_33+0xda>
     28a:	22 0f       	add	r18, r18
     28c:	33 1f       	adc	r19, r19
     28e:	8a 95       	dec	r24
     290:	e2 f7       	brpl	.-8      	; 0x28a <__vector_33+0xd6>
     292:	70 e1       	ldi	r23, 0x10	; 16
     294:	97 9f       	mul	r25, r23
     296:	c0 01       	movw	r24, r0
     298:	11 24       	eor	r1, r1
     29a:	82 2b       	or	r24, r18
     29c:	13 96       	adiw	r26, 0x03	; 3
     29e:	8c 93       	st	X, r24
     2a0:	13 97       	sbiw	r26, 0x03	; 3
		ledData[0] = 0;
     2a2:	1c 92       	st	X, r1
		ledData[1] = 0;
     2a4:	11 96       	adiw	r26, 0x01	; 1
     2a6:	1c 92       	st	X, r1
	}
	
	muxCounter = (muxCounter + 1) % 6;
     2a8:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <muxCounter>
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	01 96       	adiw	r24, 0x01	; 1
     2b0:	66 e0       	ldi	r22, 0x06	; 6
     2b2:	70 e0       	ldi	r23, 0x00	; 0
     2b4:	0e 94 37 08 	call	0x106e	; 0x106e <__divmodhi4>
     2b8:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <muxCounter>
	
	// calculate data for score display
	
	ledData[5] = sevenSegmentDecode[ledMemory[scoreDigitCounter]];
     2bc:	e0 91 98 01 	lds	r30, 0x0198	; 0x800198 <scoreDigitCounter>
     2c0:	f0 e0       	ldi	r31, 0x00	; 0
     2c2:	e6 5f       	subi	r30, 0xF6	; 246
     2c4:	fe 4f       	sbci	r31, 0xFE	; 254
     2c6:	e0 81       	ld	r30, Z
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	e7 5e       	subi	r30, 0xE7	; 231
     2cc:	fe 4f       	sbci	r31, 0xFE	; 254
     2ce:	80 81       	ld	r24, Z
     2d0:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <ledData+0x5>
	if (scoreDigitCounter == 0){
     2d4:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <scoreDigitCounter>
     2d8:	81 11       	cpse	r24, r1
     2da:	07 c0       	rjmp	.+14     	; 0x2ea <__vector_33+0x136>
		ledData[5] |= 1 << 7; // set MSB for D0
     2dc:	e4 e0       	ldi	r30, 0x04	; 4
     2de:	f1 e0       	ldi	r31, 0x01	; 1
     2e0:	85 81       	ldd	r24, Z+5	; 0x05
     2e2:	80 68       	ori	r24, 0x80	; 128
     2e4:	85 83       	std	Z+5, r24	; 0x05
		ledData[4] = 0;
     2e6:	14 82       	std	Z+4, r1	; 0x04
     2e8:	0c c0       	rjmp	.+24     	; 0x302 <__vector_33+0x14e>
	}
	else{
		ledData[4] = 1 << (scoreDigitCounter - 1);
     2ea:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <scoreDigitCounter>
     2ee:	21 50       	subi	r18, 0x01	; 1
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	02 c0       	rjmp	.+4      	; 0x2fa <__vector_33+0x146>
     2f6:	88 0f       	add	r24, r24
     2f8:	99 1f       	adc	r25, r25
     2fa:	2a 95       	dec	r18
     2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <__vector_33+0x142>
     2fe:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <ledData+0x4>
	}

	scoreDigitCounter = (scoreDigitCounter + 1) % 9;
     302:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <scoreDigitCounter>
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	01 96       	adiw	r24, 0x01	; 1
     30a:	69 e0       	ldi	r22, 0x09	; 9
     30c:	70 e0       	ldi	r23, 0x00	; 0
     30e:	0e 94 37 08 	call	0x106e	; 0x106e <__divmodhi4>
     312:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <scoreDigitCounter>
	

	// clear contents of shift register and latch
	PORTB &= ~(1 << LED_L); // set led latch low
     316:	28 98       	cbi	0x05, 0	; 5
	PORTB &= ~(1 << LED_B); // blank leds
     318:	29 98       	cbi	0x05, 1	; 5
	PORTB |= (1 << LED_L); // set led latch high
     31a:	28 9a       	sbi	0x05, 0	; 5
	PORTB |= (1 << LED_B); // unblank leds
     31c:	29 9a       	sbi	0x05, 1	; 5
	PORTB &= ~(1 << LED_L); // set led latch low
     31e:	28 98       	cbi	0x05, 0	; 5
	spiByteCounter = 0;
     320:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <__data_end>
	SPDR0 = ledData[spiByteCounter++];
     324:	e0 91 96 01 	lds	r30, 0x0196	; 0x800196 <__data_end>
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	8e 0f       	add	r24, r30
     32c:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <__data_end>
     330:	f0 e0       	ldi	r31, 0x00	; 0
     332:	ec 5f       	subi	r30, 0xFC	; 252
     334:	fe 4f       	sbci	r31, 0xFE	; 254
     336:	80 81       	ld	r24, Z
     338:	8e bd       	out	0x2e, r24	; 46
}
     33a:	ff 91       	pop	r31
     33c:	ef 91       	pop	r30
     33e:	bf 91       	pop	r27
     340:	af 91       	pop	r26
     342:	9f 91       	pop	r25
     344:	8f 91       	pop	r24
     346:	7f 91       	pop	r23
     348:	6f 91       	pop	r22
     34a:	5f 91       	pop	r21
     34c:	4f 91       	pop	r20
     34e:	3f 91       	pop	r19
     350:	2f 91       	pop	r18
     352:	0f 90       	pop	r0
     354:	0f be       	out	0x3f, r0	; 63
     356:	0f 90       	pop	r0
     358:	1f 90       	pop	r1
     35a:	18 95       	reti

0000035c <__vector_34>:

ISR(TIMER3_COMPB_vect){
     35c:	1f 92       	push	r1
     35e:	0f 92       	push	r0
     360:	0f b6       	in	r0, 0x3f	; 63
     362:	0f 92       	push	r0
     364:	11 24       	eor	r1, r1
     366:	2f 93       	push	r18
     368:	8f 93       	push	r24
     36a:	9f 93       	push	r25
     36c:	ef 93       	push	r30
     36e:	ff 93       	push	r31
	// Read in Buttons
	PORTC = ~(1 << muxCounter);// set 1 bit to a 0
     370:	20 91 97 01 	lds	r18, 0x0197	; 0x800197 <muxCounter>
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	02 c0       	rjmp	.+4      	; 0x37e <__vector_34+0x22>
     37a:	88 0f       	add	r24, r24
     37c:	99 1f       	adc	r25, r25
     37e:	2a 95       	dec	r18
     380:	e2 f7       	brpl	.-8      	; 0x37a <__vector_34+0x1e>
     382:	80 95       	com	r24
     384:	88 b9       	out	0x08, r24	; 8
	buttonMemory[muxCounter] = ~PIND;
     386:	e0 91 97 01 	lds	r30, 0x0197	; 0x800197 <muxCounter>
     38a:	f0 e0       	ldi	r31, 0x00	; 0
     38c:	89 b1       	in	r24, 0x09	; 9
     38e:	80 95       	com	r24
     390:	e3 56       	subi	r30, 0x63	; 99
     392:	fe 4f       	sbci	r31, 0xFE	; 254
     394:	80 83       	st	Z, r24
	
}
     396:	ff 91       	pop	r31
     398:	ef 91       	pop	r30
     39a:	9f 91       	pop	r25
     39c:	8f 91       	pop	r24
     39e:	2f 91       	pop	r18
     3a0:	0f 90       	pop	r0
     3a2:	0f be       	out	0x3f, r0	; 63
     3a4:	0f 90       	pop	r0
     3a6:	1f 90       	pop	r1
     3a8:	18 95       	reti

000003aa <__vector_17>:

ISR(SPI0_STC_vect){
     3aa:	1f 92       	push	r1
     3ac:	0f 92       	push	r0
     3ae:	0f b6       	in	r0, 0x3f	; 63
     3b0:	0f 92       	push	r0
     3b2:	11 24       	eor	r1, r1
     3b4:	8f 93       	push	r24
     3b6:	ef 93       	push	r30
     3b8:	ff 93       	push	r31
	if (spiByteCounter >= 6){
     3ba:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <__data_end>
     3be:	86 30       	cpi	r24, 0x06	; 6
     3c0:	10 f0       	brcs	.+4      	; 0x3c6 <__vector_17+0x1c>
		PORTB |= 1 << LED_L; // set led latch high
     3c2:	28 9a       	sbi	0x05, 0	; 5
		return;
     3c4:	0b c0       	rjmp	.+22     	; 0x3dc <__vector_17+0x32>
	}
	SPDR0 = ledData[spiByteCounter++];
     3c6:	e0 91 96 01 	lds	r30, 0x0196	; 0x800196 <__data_end>
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	8e 0f       	add	r24, r30
     3ce:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <__data_end>
     3d2:	f0 e0       	ldi	r31, 0x00	; 0
     3d4:	ec 5f       	subi	r30, 0xFC	; 252
     3d6:	fe 4f       	sbci	r31, 0xFE	; 254
     3d8:	80 81       	ld	r24, Z
     3da:	8e bd       	out	0x2e, r24	; 46
}
     3dc:	ff 91       	pop	r31
     3de:	ef 91       	pop	r30
     3e0:	8f 91       	pop	r24
     3e2:	0f 90       	pop	r0
     3e4:	0f be       	out	0x3f, r0	; 63
     3e6:	0f 90       	pop	r0
     3e8:	1f 90       	pop	r1
     3ea:	18 95       	reti

000003ec <__vector_14>:

	}
}

ISR(TIMER0_COMPA_vect)		// audio interrupt
{
     3ec:	1f 92       	push	r1
     3ee:	0f 92       	push	r0
     3f0:	0f b6       	in	r0, 0x3f	; 63
     3f2:	0f 92       	push	r0
     3f4:	11 24       	eor	r1, r1
     3f6:	8f 93       	push	r24
     3f8:	9f 93       	push	r25
     3fa:	ef 93       	push	r30
     3fc:	ff 93       	push	r31
	switch(note_index)
     3fe:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <note_index>
     402:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <note_index+0x1>
     406:	86 30       	cpi	r24, 0x06	; 6
     408:	91 05       	cpc	r25, r1
     40a:	09 f4       	brne	.+2      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     40c:	4e c0       	rjmp	.+156    	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
     40e:	30 f4       	brcc	.+12     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     410:	81 30       	cpi	r24, 0x01	; 1
     412:	91 05       	cpc	r25, r1
     414:	61 f0       	breq	.+24     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     416:	03 97       	sbiw	r24, 0x03	; 3
     418:	49 f1       	breq	.+82     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     41a:	79 c0       	rjmp	.+242    	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
     41c:	8e 30       	cpi	r24, 0x0E	; 14
     41e:	91 05       	cpc	r25, r1
     420:	09 f4       	brne	.+2      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     422:	62 c0       	rjmp	.+196    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
     424:	80 34       	cpi	r24, 0x40	; 64
     426:	91 05       	cpc	r25, r1
     428:	09 f4       	brne	.+2      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     42a:	63 c0       	rjmp	.+198    	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
     42c:	70 c0       	rjmp	.+224    	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
	{	//every 8ms
		case 0+1:	//0ms, 8ms on
		ICR1 = notes[beep_index];	//1st note
     42e:	e0 91 9b 01 	lds	r30, 0x019B	; 0x80019b <beep_index>
     432:	f0 91 9c 01 	lds	r31, 0x019C	; 0x80019c <beep_index+0x1>
     436:	ee 0f       	add	r30, r30
     438:	ff 1f       	adc	r31, r31
     43a:	e2 58       	subi	r30, 0x82	; 130
     43c:	fe 4f       	sbci	r31, 0xFE	; 254
     43e:	80 81       	ld	r24, Z
     440:	91 81       	ldd	r25, Z+1	; 0x01
     442:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     446:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		OCR1A = notes[beep_index]/2;
     44a:	e0 91 9b 01 	lds	r30, 0x019B	; 0x80019b <beep_index>
     44e:	f0 91 9c 01 	lds	r31, 0x019C	; 0x80019c <beep_index+0x1>
     452:	ee 0f       	add	r30, r30
     454:	ff 1f       	adc	r31, r31
     456:	e2 58       	subi	r30, 0x82	; 130
     458:	fe 4f       	sbci	r31, 0xFE	; 254
     45a:	80 81       	ld	r24, Z
     45c:	91 81       	ldd	r25, Z+1	; 0x01
     45e:	96 95       	lsr	r25
     460:	87 95       	ror	r24
     462:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     466:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		break;
     46a:	51 c0       	rjmp	.+162    	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
		case 2+1:	// 16ms, 24, 32 on
		ICR1 = notes[beep_index+1];	//2nd note
     46c:	e0 91 9b 01 	lds	r30, 0x019B	; 0x80019b <beep_index>
     470:	f0 91 9c 01 	lds	r31, 0x019C	; 0x80019c <beep_index+0x1>
     474:	ee 0f       	add	r30, r30
     476:	ff 1f       	adc	r31, r31
     478:	e0 58       	subi	r30, 0x80	; 128
     47a:	fe 4f       	sbci	r31, 0xFE	; 254
     47c:	80 81       	ld	r24, Z
     47e:	91 81       	ldd	r25, Z+1	; 0x01
     480:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     484:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		OCR1A = notes[beep_index]/2;
     488:	e0 91 9b 01 	lds	r30, 0x019B	; 0x80019b <beep_index>
     48c:	f0 91 9c 01 	lds	r31, 0x019C	; 0x80019c <beep_index+0x1>
     490:	ee 0f       	add	r30, r30
     492:	ff 1f       	adc	r31, r31
     494:	e2 58       	subi	r30, 0x82	; 130
     496:	fe 4f       	sbci	r31, 0xFE	; 254
     498:	80 81       	ld	r24, Z
     49a:	91 81       	ldd	r25, Z+1	; 0x01
     49c:	96 95       	lsr	r25
     49e:	87 95       	ror	r24
     4a0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     4a4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		break;
     4a8:	32 c0       	rjmp	.+100    	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
		case 5+1:	// 40ms, 48, 56, 64, 72, 80, 88, 96, on
		ICR1 = notes[beep_index+2];	// 3rd note
     4aa:	e0 91 9b 01 	lds	r30, 0x019B	; 0x80019b <beep_index>
     4ae:	f0 91 9c 01 	lds	r31, 0x019C	; 0x80019c <beep_index+0x1>
     4b2:	ee 0f       	add	r30, r30
     4b4:	ff 1f       	adc	r31, r31
     4b6:	ee 57       	subi	r30, 0x7E	; 126
     4b8:	fe 4f       	sbci	r31, 0xFE	; 254
     4ba:	80 81       	ld	r24, Z
     4bc:	91 81       	ldd	r25, Z+1	; 0x01
     4be:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     4c2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		OCR1A = notes[beep_index]/2;
     4c6:	e0 91 9b 01 	lds	r30, 0x019B	; 0x80019b <beep_index>
     4ca:	f0 91 9c 01 	lds	r31, 0x019C	; 0x80019c <beep_index+0x1>
     4ce:	ee 0f       	add	r30, r30
     4d0:	ff 1f       	adc	r31, r31
     4d2:	e2 58       	subi	r30, 0x82	; 130
     4d4:	fe 4f       	sbci	r31, 0xFE	; 254
     4d6:	80 81       	ld	r24, Z
     4d8:	91 81       	ldd	r25, Z+1	; 0x01
     4da:	96 95       	lsr	r25
     4dc:	87 95       	ror	r24
     4de:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     4e2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		break;
     4e6:	13 c0       	rjmp	.+38     	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
		case 13+1:
		//ICR1 = 0;					//off
		OCR1A = 0;
     4e8:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     4ec:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		break;
     4f0:	0e c0       	rjmp	.+28     	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
		
		case 63+1:
		beep_index = 0;
     4f2:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <beep_index+0x1>
     4f6:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <beep_index>
		note_index = -1;
     4fa:	8f ef       	ldi	r24, 0xFF	; 255
     4fc:	9f ef       	ldi	r25, 0xFF	; 255
     4fe:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <note_index+0x1>
     502:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <note_index>
		TCCR0B &= ~(0b101 << CS00);
     506:	85 b5       	in	r24, 0x25	; 37
     508:	8a 7f       	andi	r24, 0xFA	; 250
     50a:	85 bd       	out	0x25, r24	; 37
		TCNT0 = 0;
     50c:	16 bc       	out	0x26, r1	; 38
		break;
	}
	note_index += 1;
     50e:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <note_index>
     512:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <note_index+0x1>
     516:	01 96       	adiw	r24, 0x01	; 1
     518:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <note_index+0x1>
     51c:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <note_index>
}
     520:	ff 91       	pop	r31
     522:	ef 91       	pop	r30
     524:	9f 91       	pop	r25
     526:	8f 91       	pop	r24
     528:	0f 90       	pop	r0
     52a:	0f be       	out	0x3f, r0	; 63
     52c:	0f 90       	pop	r0
     52e:	1f 90       	pop	r1
     530:	18 95       	reti

00000532 <__vector_42>:

ISR(TIMER4_COMPA_vect){		// use timer 4 for decreasing game time every 1s
     532:	1f 92       	push	r1
     534:	0f 92       	push	r0
     536:	0f b6       	in	r0, 0x3f	; 63
     538:	0f 92       	push	r0
     53a:	11 24       	eor	r1, r1
     53c:	8f 93       	push	r24
	if(TimeRemaining > 0){
     53e:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <TimeRemaining>
     542:	88 23       	and	r24, r24
     544:	29 f0       	breq	.+10     	; 0x550 <__vector_42+0x1e>
		TimeRemaining--;
     546:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <TimeRemaining>
     54a:	81 50       	subi	r24, 0x01	; 1
     54c:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <TimeRemaining>
	}
}
     550:	8f 91       	pop	r24
     552:	0f 90       	pop	r0
     554:	0f be       	out	0x3f, r0	; 63
     556:	0f 90       	pop	r0
     558:	1f 90       	pop	r1
     55a:	18 95       	reti

0000055c <ShowWinner>:
		return;		// start the game
	}

}

void ShowWinner(){
     55c:	cf 92       	push	r12
     55e:	df 92       	push	r13
     560:	ef 92       	push	r14
     562:	ff 92       	push	r15
     564:	0f 93       	push	r16
     566:	1f 93       	push	r17
     568:	cf 93       	push	r28
     56a:	df 93       	push	r29
	
	for(uint8_t i = 0; i < 30; i++){
     56c:	c0 e0       	ldi	r28, 0x00	; 0
		setButtonLed(i % 6, i / 5, 0); // TODO VERIFY THIS WORKS, turn all leds on
     56e:	1d ec       	ldi	r17, 0xCD	; 205
     570:	db ea       	ldi	r29, 0xAB	; 171
     572:	c1 9f       	mul	r28, r17
     574:	61 2d       	mov	r22, r1
     576:	11 24       	eor	r1, r1
     578:	66 95       	lsr	r22
     57a:	66 95       	lsr	r22
     57c:	cd 9f       	mul	r28, r29
     57e:	81 2d       	mov	r24, r1
     580:	11 24       	eor	r1, r1
     582:	86 95       	lsr	r24
     584:	86 95       	lsr	r24
     586:	98 2f       	mov	r25, r24
     588:	99 0f       	add	r25, r25
     58a:	89 0f       	add	r24, r25
     58c:	88 0f       	add	r24, r24
     58e:	40 e0       	ldi	r20, 0x00	; 0
     590:	2c 2f       	mov	r18, r28
     592:	28 1b       	sub	r18, r24
     594:	82 2f       	mov	r24, r18
     596:	0e 94 b4 00 	call	0x168	; 0x168 <setButtonLed>

}

void ShowWinner(){
	
	for(uint8_t i = 0; i < 30; i++){
     59a:	cf 5f       	subi	r28, 0xFF	; 255
     59c:	ce 31       	cpi	r28, 0x1E	; 30
     59e:	49 f7       	brne	.-46     	; 0x572 <ShowWinner+0x16>
		setButtonLed(i % 6, i / 5, 0); // TODO VERIFY THIS WORKS, turn all leds on
	}								 //blank screen
	
	if(GameMode == 0){
     5a0:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <GameMode>
     5a4:	81 11       	cpse	r24, r1
     5a6:	67 c0       	rjmp	.+206    	; 0x676 <ShowWinner+0x11a>
     5a8:	68 94       	set
     5aa:	ff 24       	eor	r15, r15
     5ac:	f3 f8       	bld	r15, 3
		for(uint8_t count = 0; count < 8; count++){			// flash whole screen 
			setScore(0, HighScore1P);
			setScore(2, HighScore1P);
			
			for(uint8_t i = 0; i < 30; i++){
				setButtonLed(i % 6, i / 5, i%2); // TODO VERIFY THIS WORKS, turn all leds on
     5ae:	1d ec       	ldi	r17, 0xCD	; 205
     5b0:	db ea       	ldi	r29, 0xAB	; 171
			_delay_ms(250);
			setScore(0, 0);	// TODO TURN SEGMENTS OFF
			setScore(2, 0);
			
			for(uint8_t i = 0; i < 30; i++){
				setButtonLed(i % 6, i / 5, 1 - (i%2)); // TODO VERIFY THIS WORKS, turn all leds on
     5b2:	01 e0       	ldi	r16, 0x01	; 1
		setButtonLed(i % 6, i / 5, 0); // TODO VERIFY THIS WORKS, turn all leds on
	}								 //blank screen
	
	if(GameMode == 0){
		for(uint8_t count = 0; count < 8; count++){			// flash whole screen 
			setScore(0, HighScore1P);
     5b4:	60 91 b2 01 	lds	r22, 0x01B2	; 0x8001b2 <HighScore1P>
     5b8:	70 91 b3 01 	lds	r23, 0x01B3	; 0x8001b3 <HighScore1P+0x1>
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <setScore>
			setScore(2, HighScore1P);
     5c2:	60 91 b2 01 	lds	r22, 0x01B2	; 0x8001b2 <HighScore1P>
     5c6:	70 91 b3 01 	lds	r23, 0x01B3	; 0x8001b3 <HighScore1P+0x1>
     5ca:	82 e0       	ldi	r24, 0x02	; 2
     5cc:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <setScore>
			
			for(uint8_t i = 0; i < 30; i++){
     5d0:	c0 e0       	ldi	r28, 0x00	; 0
				setButtonLed(i % 6, i / 5, i%2); // TODO VERIFY THIS WORKS, turn all leds on
     5d2:	4c 2f       	mov	r20, r28
     5d4:	41 70       	andi	r20, 0x01	; 1
     5d6:	c1 9f       	mul	r28, r17
     5d8:	61 2d       	mov	r22, r1
     5da:	11 24       	eor	r1, r1
     5dc:	66 95       	lsr	r22
     5de:	66 95       	lsr	r22
     5e0:	cd 9f       	mul	r28, r29
     5e2:	81 2d       	mov	r24, r1
     5e4:	11 24       	eor	r1, r1
     5e6:	86 95       	lsr	r24
     5e8:	86 95       	lsr	r24
     5ea:	98 2f       	mov	r25, r24
     5ec:	99 0f       	add	r25, r25
     5ee:	89 0f       	add	r24, r25
     5f0:	88 0f       	add	r24, r24
     5f2:	9c 2f       	mov	r25, r28
     5f4:	98 1b       	sub	r25, r24
     5f6:	89 2f       	mov	r24, r25
     5f8:	0e 94 b4 00 	call	0x168	; 0x168 <setButtonLed>
	if(GameMode == 0){
		for(uint8_t count = 0; count < 8; count++){			// flash whole screen 
			setScore(0, HighScore1P);
			setScore(2, HighScore1P);
			
			for(uint8_t i = 0; i < 30; i++){
     5fc:	cf 5f       	subi	r28, 0xFF	; 255
     5fe:	ce 31       	cpi	r28, 0x1E	; 30
     600:	41 f7       	brne	.-48     	; 0x5d2 <ShowWinner+0x76>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     602:	2f ef       	ldi	r18, 0xFF	; 255
     604:	84 e3       	ldi	r24, 0x34	; 52
     606:	9c e0       	ldi	r25, 0x0C	; 12
     608:	21 50       	subi	r18, 0x01	; 1
     60a:	80 40       	sbci	r24, 0x00	; 0
     60c:	90 40       	sbci	r25, 0x00	; 0
     60e:	e1 f7       	brne	.-8      	; 0x608 <ShowWinner+0xac>
     610:	00 c0       	rjmp	.+0      	; 0x612 <ShowWinner+0xb6>
     612:	00 00       	nop
				setButtonLed(i % 6, i / 5, i%2); // TODO VERIFY THIS WORKS, turn all leds on
			}									// TODO make checkerboard
			
			_delay_ms(250);
			setScore(0, 0);	// TODO TURN SEGMENTS OFF
     614:	60 e0       	ldi	r22, 0x00	; 0
     616:	70 e0       	ldi	r23, 0x00	; 0
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <setScore>
			setScore(2, 0);
     61e:	60 e0       	ldi	r22, 0x00	; 0
     620:	70 e0       	ldi	r23, 0x00	; 0
     622:	82 e0       	ldi	r24, 0x02	; 2
     624:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <setScore>
			
			for(uint8_t i = 0; i < 30; i++){
     628:	c0 e0       	ldi	r28, 0x00	; 0
				setButtonLed(i % 6, i / 5, 1 - (i%2)); // TODO VERIFY THIS WORKS, turn all leds on
     62a:	4c 2f       	mov	r20, r28
     62c:	40 27       	eor	r20, r16
     62e:	41 70       	andi	r20, 0x01	; 1
     630:	c1 9f       	mul	r28, r17
     632:	61 2d       	mov	r22, r1
     634:	11 24       	eor	r1, r1
     636:	66 95       	lsr	r22
     638:	66 95       	lsr	r22
     63a:	cd 9f       	mul	r28, r29
     63c:	81 2d       	mov	r24, r1
     63e:	11 24       	eor	r1, r1
     640:	86 95       	lsr	r24
     642:	86 95       	lsr	r24
     644:	98 2f       	mov	r25, r24
     646:	99 0f       	add	r25, r25
     648:	89 0f       	add	r24, r25
     64a:	88 0f       	add	r24, r24
     64c:	2c 2f       	mov	r18, r28
     64e:	28 1b       	sub	r18, r24
     650:	82 2f       	mov	r24, r18
     652:	0e 94 b4 00 	call	0x168	; 0x168 <setButtonLed>
			
			_delay_ms(250);
			setScore(0, 0);	// TODO TURN SEGMENTS OFF
			setScore(2, 0);
			
			for(uint8_t i = 0; i < 30; i++){
     656:	cf 5f       	subi	r28, 0xFF	; 255
     658:	ce 31       	cpi	r28, 0x1E	; 30
     65a:	39 f7       	brne	.-50     	; 0x62a <ShowWinner+0xce>
     65c:	8f ef       	ldi	r24, 0xFF	; 255
     65e:	94 e3       	ldi	r25, 0x34	; 52
     660:	2c e0       	ldi	r18, 0x0C	; 12
     662:	81 50       	subi	r24, 0x01	; 1
     664:	90 40       	sbci	r25, 0x00	; 0
     666:	20 40       	sbci	r18, 0x00	; 0
     668:	e1 f7       	brne	.-8      	; 0x662 <ShowWinner+0x106>
     66a:	00 c0       	rjmp	.+0      	; 0x66c <ShowWinner+0x110>
     66c:	00 00       	nop
     66e:	fa 94       	dec	r15
	for(uint8_t i = 0; i < 30; i++){
		setButtonLed(i % 6, i / 5, 0); // TODO VERIFY THIS WORKS, turn all leds on
	}								 //blank screen
	
	if(GameMode == 0){
		for(uint8_t count = 0; count < 8; count++){			// flash whole screen 
     670:	f1 10       	cpse	r15, r1
     672:	a0 cf       	rjmp	.-192    	; 0x5b4 <ShowWinner+0x58>
     674:	9c c0       	rjmp	.+312    	; 0x7ae <ShowWinner+0x252>
			}
			
			_delay_ms(250);
		}
	}else{										//2p mode, show winner every time
		uint8_t winnerhalf = P1Score > P2Score ? 0 : 3; //index half based on winner
     676:	20 91 b4 01 	lds	r18, 0x01B4	; 0x8001b4 <P1Score>
     67a:	30 91 b5 01 	lds	r19, 0x01B5	; 0x8001b5 <P1Score+0x1>
     67e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <P2Score>
     682:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <P2Score+0x1>
     686:	82 17       	cp	r24, r18
     688:	93 07       	cpc	r25, r19
     68a:	28 f0       	brcs	.+10     	; 0x696 <ShowWinner+0x13a>
     68c:	0f 2e       	mov	r0, r31
     68e:	f3 e0       	ldi	r31, 0x03	; 3
     690:	cf 2e       	mov	r12, r31
     692:	f0 2d       	mov	r31, r0
     694:	01 c0       	rjmp	.+2      	; 0x698 <ShowWinner+0x13c>
     696:	c1 2c       	mov	r12, r1
     698:	68 94       	set
     69a:	dd 24       	eor	r13, r13
     69c:	d2 f8       	bld	r13, 2
				setScore(0, HighScore2P);
				setScore(1, 0);	//TODO EMPTY? show 2P flashing opposite 
				setScore(2, HighScore2P);
			}
			
			for(uint8_t x = winnerhalf; x < (winnerhalf+3); x++){
     69e:	ec 2c       	mov	r14, r12
     6a0:	f1 2c       	mov	r15, r1
     6a2:	87 01       	movw	r16, r14
     6a4:	0d 5f       	subi	r16, 0xFD	; 253
     6a6:	1f 4f       	sbci	r17, 0xFF	; 255
		}
	}else{										//2p mode, show winner every time
		uint8_t winnerhalf = P1Score > P2Score ? 0 : 3; //index half based on winner
		for(uint8_t i = 0; i < 4; i++){
			
			if((P1Score == HighScore2P) || (P2Score == HighScore2P)){
     6a8:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <HighScore2P>
     6ac:	70 91 c3 01 	lds	r23, 0x01C3	; 0x8001c3 <HighScore2P+0x1>
     6b0:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <P1Score>
     6b4:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <P1Score+0x1>
     6b8:	86 17       	cp	r24, r22
     6ba:	97 07       	cpc	r25, r23
     6bc:	39 f0       	breq	.+14     	; 0x6cc <ShowWinner+0x170>
     6be:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <P2Score>
     6c2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <P2Score+0x1>
     6c6:	68 17       	cp	r22, r24
     6c8:	79 07       	cpc	r23, r25
     6ca:	79 f4       	brne	.+30     	; 0x6ea <ShowWinner+0x18e>
				setScore(0, HighScore2P);
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <setScore>
				setScore(1, 0);	//TODO EMPTY? show 2P flashing opposite 
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	70 e0       	ldi	r23, 0x00	; 0
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <setScore>
				setScore(2, HighScore2P);
     6dc:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <HighScore2P>
     6e0:	70 91 c3 01 	lds	r23, 0x01C3	; 0x8001c3 <HighScore2P+0x1>
     6e4:	82 e0       	ldi	r24, 0x02	; 2
     6e6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <setScore>
			}
			
			for(uint8_t x = winnerhalf; x < (winnerhalf+3); x++){
     6ea:	e0 16       	cp	r14, r16
     6ec:	f1 06       	cpc	r15, r17
     6ee:	84 f0       	brlt	.+32     	; 0x710 <ShowWinner+0x1b4>
     6f0:	12 c0       	rjmp	.+36     	; 0x716 <ShowWinner+0x1ba>
				for(uint8_t y = 0; y < 5; y++){
					setButtonLed(x,y,1);
     6f2:	41 e0       	ldi	r20, 0x01	; 1
     6f4:	6c 2f       	mov	r22, r28
     6f6:	8d 2f       	mov	r24, r29
     6f8:	0e 94 b4 00 	call	0x168	; 0x168 <setButtonLed>
				setScore(1, 0);	//TODO EMPTY? show 2P flashing opposite 
				setScore(2, HighScore2P);
			}
			
			for(uint8_t x = winnerhalf; x < (winnerhalf+3); x++){
				for(uint8_t y = 0; y < 5; y++){
     6fc:	cf 5f       	subi	r28, 0xFF	; 255
     6fe:	c5 30       	cpi	r28, 0x05	; 5
     700:	c1 f7       	brne	.-16     	; 0x6f2 <ShowWinner+0x196>
				setScore(0, HighScore2P);
				setScore(1, 0);	//TODO EMPTY? show 2P flashing opposite 
				setScore(2, HighScore2P);
			}
			
			for(uint8_t x = winnerhalf; x < (winnerhalf+3); x++){
     702:	df 5f       	subi	r29, 0xFF	; 255
     704:	8d 2f       	mov	r24, r29
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	80 17       	cp	r24, r16
     70a:	91 07       	cpc	r25, r17
     70c:	14 f0       	brlt	.+4      	; 0x712 <ShowWinner+0x1b6>
     70e:	03 c0       	rjmp	.+6      	; 0x716 <ShowWinner+0x1ba>
     710:	dc 2d       	mov	r29, r12
			}
			
			_delay_ms(250);
		}
	}else{										//2p mode, show winner every time
		uint8_t winnerhalf = P1Score > P2Score ? 0 : 3; //index half based on winner
     712:	c0 e0       	ldi	r28, 0x00	; 0
     714:	ee cf       	rjmp	.-36     	; 0x6f2 <ShowWinner+0x196>
     716:	8f ef       	ldi	r24, 0xFF	; 255
     718:	94 e3       	ldi	r25, 0x34	; 52
     71a:	2c e0       	ldi	r18, 0x0C	; 12
     71c:	81 50       	subi	r24, 0x01	; 1
     71e:	90 40       	sbci	r25, 0x00	; 0
     720:	20 40       	sbci	r18, 0x00	; 0
     722:	e1 f7       	brne	.-8      	; 0x71c <ShowWinner+0x1c0>
     724:	00 c0       	rjmp	.+0      	; 0x726 <ShowWinner+0x1ca>
     726:	00 00       	nop
					setButtonLed(x,y,1);
				}
			}
			_delay_ms(250);
			
			if((P1Score == HighScore2P) || (P2Score == HighScore2P)){
     728:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <HighScore2P>
     72c:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <HighScore2P+0x1>
     730:	20 91 b4 01 	lds	r18, 0x01B4	; 0x8001b4 <P1Score>
     734:	30 91 b5 01 	lds	r19, 0x01B5	; 0x8001b5 <P1Score+0x1>
     738:	28 17       	cp	r18, r24
     73a:	39 07       	cpc	r19, r25
     73c:	39 f0       	breq	.+14     	; 0x74c <ShowWinner+0x1f0>
     73e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <P2Score>
     742:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <P2Score+0x1>
     746:	82 17       	cp	r24, r18
     748:	93 07       	cpc	r25, r19
     74a:	79 f4       	brne	.+30     	; 0x76a <ShowWinner+0x20e>
				setScore(0, 0); // TODO EMPTY
     74c:	60 e0       	ldi	r22, 0x00	; 0
     74e:	70 e0       	ldi	r23, 0x00	; 0
     750:	80 e0       	ldi	r24, 0x00	; 0
     752:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <setScore>
				setScore(1, 0);	//TODO SHOW 1P if 1p has hs else 2p
     756:	60 e0       	ldi	r22, 0x00	; 0
     758:	70 e0       	ldi	r23, 0x00	; 0
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <setScore>
				setScore(2, 0); // todo empty
     760:	60 e0       	ldi	r22, 0x00	; 0
     762:	70 e0       	ldi	r23, 0x00	; 0
     764:	82 e0       	ldi	r24, 0x02	; 2
     766:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <setScore>
			}
			
			for(uint8_t x = winnerhalf; x < (winnerhalf+3); x++){
     76a:	e0 16       	cp	r14, r16
     76c:	f1 06       	cpc	r15, r17
     76e:	84 f0       	brlt	.+32     	; 0x790 <ShowWinner+0x234>
     770:	12 c0       	rjmp	.+36     	; 0x796 <ShowWinner+0x23a>
				for(uint8_t y = 0; y < 5; y++){
					setButtonLed(x,y,0);
     772:	40 e0       	ldi	r20, 0x00	; 0
     774:	6c 2f       	mov	r22, r28
     776:	8d 2f       	mov	r24, r29
     778:	0e 94 b4 00 	call	0x168	; 0x168 <setButtonLed>
				setScore(1, 0);	//TODO SHOW 1P if 1p has hs else 2p
				setScore(2, 0); // todo empty
			}
			
			for(uint8_t x = winnerhalf; x < (winnerhalf+3); x++){
				for(uint8_t y = 0; y < 5; y++){
     77c:	cf 5f       	subi	r28, 0xFF	; 255
     77e:	c5 30       	cpi	r28, 0x05	; 5
     780:	c1 f7       	brne	.-16     	; 0x772 <ShowWinner+0x216>
				setScore(0, 0); // TODO EMPTY
				setScore(1, 0);	//TODO SHOW 1P if 1p has hs else 2p
				setScore(2, 0); // todo empty
			}
			
			for(uint8_t x = winnerhalf; x < (winnerhalf+3); x++){
     782:	df 5f       	subi	r29, 0xFF	; 255
     784:	8d 2f       	mov	r24, r29
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	80 17       	cp	r24, r16
     78a:	91 07       	cpc	r25, r17
     78c:	14 f0       	brlt	.+4      	; 0x792 <ShowWinner+0x236>
     78e:	03 c0       	rjmp	.+6      	; 0x796 <ShowWinner+0x23a>
     790:	dc 2d       	mov	r29, r12
				setScore(0, HighScore2P);
				setScore(1, 0);	//TODO EMPTY? show 2P flashing opposite 
				setScore(2, HighScore2P);
			}
			
			for(uint8_t x = winnerhalf; x < (winnerhalf+3); x++){
     792:	c0 e0       	ldi	r28, 0x00	; 0
     794:	ee cf       	rjmp	.-36     	; 0x772 <ShowWinner+0x216>
     796:	8f ef       	ldi	r24, 0xFF	; 255
     798:	94 e3       	ldi	r25, 0x34	; 52
     79a:	2c e0       	ldi	r18, 0x0C	; 12
     79c:	81 50       	subi	r24, 0x01	; 1
     79e:	90 40       	sbci	r25, 0x00	; 0
     7a0:	20 40       	sbci	r18, 0x00	; 0
     7a2:	e1 f7       	brne	.-8      	; 0x79c <ShowWinner+0x240>
     7a4:	00 c0       	rjmp	.+0      	; 0x7a6 <ShowWinner+0x24a>
     7a6:	00 00       	nop
     7a8:	da 94       	dec	r13
			
			_delay_ms(250);
		}
	}else{										//2p mode, show winner every time
		uint8_t winnerhalf = P1Score > P2Score ? 0 : 3; //index half based on winner
		for(uint8_t i = 0; i < 4; i++){
     7aa:	d1 10       	cpse	r13, r1
     7ac:	7d cf       	rjmp	.-262    	; 0x6a8 <ShowWinner+0x14c>
				}
			}
			_delay_ms(250);
		}
	}	
}
     7ae:	df 91       	pop	r29
     7b0:	cf 91       	pop	r28
     7b2:	1f 91       	pop	r17
     7b4:	0f 91       	pop	r16
     7b6:	ff 90       	pop	r15
     7b8:	ef 90       	pop	r14
     7ba:	df 90       	pop	r13
     7bc:	cf 90       	pop	r12
     7be:	08 95       	ret

000007c0 <IncrementScore>:

void IncrementScore(uint8_t Player, uint16_t value){
	if(Player == 0){
     7c0:	81 11       	cpse	r24, r1
     7c2:	11 c0       	rjmp	.+34     	; 0x7e6 <IncrementScore+0x26>
		P1Score += value;
		P1Score = P1Score > 999 ? 999 : P1Score;
     7c4:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <P1Score>
     7c8:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <P1Score+0x1>
     7cc:	68 0f       	add	r22, r24
     7ce:	79 1f       	adc	r23, r25
     7d0:	68 3e       	cpi	r22, 0xE8	; 232
     7d2:	83 e0       	ldi	r24, 0x03	; 3
     7d4:	78 07       	cpc	r23, r24
     7d6:	10 f0       	brcs	.+4      	; 0x7dc <IncrementScore+0x1c>
     7d8:	67 ee       	ldi	r22, 0xE7	; 231
     7da:	73 e0       	ldi	r23, 0x03	; 3
     7dc:	70 93 b5 01 	sts	0x01B5, r23	; 0x8001b5 <P1Score+0x1>
     7e0:	60 93 b4 01 	sts	0x01B4, r22	; 0x8001b4 <P1Score>
     7e4:	08 95       	ret
		}else if(Player == 1){
     7e6:	81 30       	cpi	r24, 0x01	; 1
     7e8:	81 f4       	brne	.+32     	; 0x80a <IncrementScore+0x4a>
		P2Score += value;
		P2Score = P2Score > 999 ? 999 : P2Score;
     7ea:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <P2Score>
     7ee:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <P2Score+0x1>
     7f2:	68 0f       	add	r22, r24
     7f4:	79 1f       	adc	r23, r25
     7f6:	68 3e       	cpi	r22, 0xE8	; 232
     7f8:	83 e0       	ldi	r24, 0x03	; 3
     7fa:	78 07       	cpc	r23, r24
     7fc:	10 f0       	brcs	.+4      	; 0x802 <IncrementScore+0x42>
     7fe:	67 ee       	ldi	r22, 0xE7	; 231
     800:	73 e0       	ldi	r23, 0x03	; 3
     802:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <P2Score+0x1>
     806:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <P2Score>
     80a:	08 95       	ret

0000080c <Bonus>:
	// game is over, stop timer
	TCCR4B = (0b000 << CS40);
	
}

void Bonus(){
     80c:	cf 92       	push	r12
     80e:	df 92       	push	r13
     810:	ef 92       	push	r14
     812:	ff 92       	push	r15
     814:	0f 93       	push	r16
     816:	1f 93       	push	r17
     818:	cf 93       	push	r28
     81a:	df 93       	push	r29

	// blink leds to indicate bonus round start

	for(uint8_t i = 0; i < 30; i++){
     81c:	c0 e0       	ldi	r28, 0x00	; 0
		setButtonLed(i % 6, i / 5, 1); // TODO VERIFY THIS WORKS, turn all leds on
     81e:	1d ec       	ldi	r17, 0xCD	; 205
     820:	db ea       	ldi	r29, 0xAB	; 171
     822:	c1 9f       	mul	r28, r17
     824:	61 2d       	mov	r22, r1
     826:	11 24       	eor	r1, r1
     828:	66 95       	lsr	r22
     82a:	66 95       	lsr	r22
     82c:	cd 9f       	mul	r28, r29
     82e:	81 2d       	mov	r24, r1
     830:	11 24       	eor	r1, r1
     832:	86 95       	lsr	r24
     834:	86 95       	lsr	r24
     836:	98 2f       	mov	r25, r24
     838:	99 0f       	add	r25, r25
     83a:	89 0f       	add	r24, r25
     83c:	88 0f       	add	r24, r24
     83e:	41 e0       	ldi	r20, 0x01	; 1
     840:	2c 2f       	mov	r18, r28
     842:	28 1b       	sub	r18, r24
     844:	82 2f       	mov	r24, r18
     846:	0e 94 b4 00 	call	0x168	; 0x168 <setButtonLed>

void Bonus(){

	// blink leds to indicate bonus round start

	for(uint8_t i = 0; i < 30; i++){
     84a:	cf 5f       	subi	r28, 0xFF	; 255
     84c:	ce 31       	cpi	r28, 0x1E	; 30
     84e:	49 f7       	brne	.-46     	; 0x822 <Bonus+0x16>
     850:	8f ef       	ldi	r24, 0xFF	; 255
     852:	99 e6       	ldi	r25, 0x69	; 105
     854:	28 e1       	ldi	r18, 0x18	; 24
     856:	81 50       	subi	r24, 0x01	; 1
     858:	90 40       	sbci	r25, 0x00	; 0
     85a:	20 40       	sbci	r18, 0x00	; 0
     85c:	e1 f7       	brne	.-8      	; 0x856 <Bonus+0x4a>
     85e:	00 c0       	rjmp	.+0      	; 0x860 <Bonus+0x54>
     860:	00 00       	nop
		setButtonLed(i % 6, i / 5, 1); // TODO VERIFY THIS WORKS, turn all leds on
	}
	_delay_ms(500);

	for(uint8_t i = 0; i < 30; i++){
     862:	c0 e0       	ldi	r28, 0x00	; 0
		setButtonLed(i % 6, i / 5, 0); // TODO VERIFY THIS WORKS, turn all leds on
     864:	1d ec       	ldi	r17, 0xCD	; 205
     866:	db ea       	ldi	r29, 0xAB	; 171
     868:	c1 9f       	mul	r28, r17
     86a:	61 2d       	mov	r22, r1
     86c:	11 24       	eor	r1, r1
     86e:	66 95       	lsr	r22
     870:	66 95       	lsr	r22
     872:	cd 9f       	mul	r28, r29
     874:	81 2d       	mov	r24, r1
     876:	11 24       	eor	r1, r1
     878:	86 95       	lsr	r24
     87a:	86 95       	lsr	r24
     87c:	98 2f       	mov	r25, r24
     87e:	99 0f       	add	r25, r25
     880:	89 0f       	add	r24, r25
     882:	88 0f       	add	r24, r24
     884:	40 e0       	ldi	r20, 0x00	; 0
     886:	9c 2f       	mov	r25, r28
     888:	98 1b       	sub	r25, r24
     88a:	89 2f       	mov	r24, r25
     88c:	0e 94 b4 00 	call	0x168	; 0x168 <setButtonLed>
	for(uint8_t i = 0; i < 30; i++){
		setButtonLed(i % 6, i / 5, 1); // TODO VERIFY THIS WORKS, turn all leds on
	}
	_delay_ms(500);

	for(uint8_t i = 0; i < 30; i++){
     890:	cf 5f       	subi	r28, 0xFF	; 255
     892:	ce 31       	cpi	r28, 0x1E	; 30
     894:	49 f7       	brne	.-46     	; 0x868 <Bonus+0x5c>
     896:	2f ef       	ldi	r18, 0xFF	; 255
     898:	89 e6       	ldi	r24, 0x69	; 105
     89a:	98 e1       	ldi	r25, 0x18	; 24
     89c:	21 50       	subi	r18, 0x01	; 1
     89e:	80 40       	sbci	r24, 0x00	; 0
     8a0:	90 40       	sbci	r25, 0x00	; 0
     8a2:	e1 f7       	brne	.-8      	; 0x89c <Bonus+0x90>
     8a4:	00 c0       	rjmp	.+0      	; 0x8a6 <Bonus+0x9a>
     8a6:	00 00       	nop
		setButtonLed(i % 6, i / 5, 0); // TODO VERIFY THIS WORKS, turn all leds on
	}
	_delay_ms(500);

	for(uint8_t i = 0; i < 30; i++){
     8a8:	c0 e0       	ldi	r28, 0x00	; 0
		setButtonLed(i % 6, i / 5, 1); // TODO VERIFY THIS WORKS, turn all leds on
     8aa:	1d ec       	ldi	r17, 0xCD	; 205
     8ac:	db ea       	ldi	r29, 0xAB	; 171
     8ae:	c1 9f       	mul	r28, r17
     8b0:	61 2d       	mov	r22, r1
     8b2:	11 24       	eor	r1, r1
     8b4:	66 95       	lsr	r22
     8b6:	66 95       	lsr	r22
     8b8:	cd 9f       	mul	r28, r29
     8ba:	81 2d       	mov	r24, r1
     8bc:	11 24       	eor	r1, r1
     8be:	86 95       	lsr	r24
     8c0:	86 95       	lsr	r24
     8c2:	98 2f       	mov	r25, r24
     8c4:	99 0f       	add	r25, r25
     8c6:	89 0f       	add	r24, r25
     8c8:	88 0f       	add	r24, r24
     8ca:	41 e0       	ldi	r20, 0x01	; 1
     8cc:	2c 2f       	mov	r18, r28
     8ce:	28 1b       	sub	r18, r24
     8d0:	82 2f       	mov	r24, r18
     8d2:	0e 94 b4 00 	call	0x168	; 0x168 <setButtonLed>
	for(uint8_t i = 0; i < 30; i++){
		setButtonLed(i % 6, i / 5, 0); // TODO VERIFY THIS WORKS, turn all leds on
	}
	_delay_ms(500);

	for(uint8_t i = 0; i < 30; i++){
     8d6:	cf 5f       	subi	r28, 0xFF	; 255
     8d8:	ce 31       	cpi	r28, 0x1E	; 30
     8da:	49 f7       	brne	.-46     	; 0x8ae <Bonus+0xa2>
     8dc:	8f ef       	ldi	r24, 0xFF	; 255
     8de:	94 e3       	ldi	r25, 0x34	; 52
     8e0:	2c e0       	ldi	r18, 0x0C	; 12
     8e2:	81 50       	subi	r24, 0x01	; 1
     8e4:	90 40       	sbci	r25, 0x00	; 0
     8e6:	20 40       	sbci	r18, 0x00	; 0
     8e8:	e1 f7       	brne	.-8      	; 0x8e2 <Bonus+0xd6>
     8ea:	00 c0       	rjmp	.+0      	; 0x8ec <Bonus+0xe0>
     8ec:	00 00       	nop
	}
	_delay_ms(250);

	uint32_t HasPressed = 0;	// store 30 stored buttons
	
	TimeRemaining = BonusTime;
     8ee:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <BonusTime>
     8f2:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <TimeRemaining>
	TCNT4 = 0;
     8f6:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7e00a5>
     8fa:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7e00a4>
	TCCR4B = (0b101 << CS40);	// enable timer 0 (game timer)
     8fe:	85 e0       	ldi	r24, 0x05	; 5
     900:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
	
	setScore(0, GameMode == 0 ? HighScore1P : HighScore2P);
     904:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <GameMode>
     908:	81 11       	cpse	r24, r1
     90a:	05 c0       	rjmp	.+10     	; 0x916 <__stack+0x17>
     90c:	60 91 b2 01 	lds	r22, 0x01B2	; 0x8001b2 <HighScore1P>
     910:	70 91 b3 01 	lds	r23, 0x01B3	; 0x8001b3 <HighScore1P+0x1>
     914:	04 c0       	rjmp	.+8      	; 0x91e <__stack+0x1f>
     916:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <HighScore2P>
     91a:	70 91 c3 01 	lds	r23, 0x01C3	; 0x8001c3 <HighScore2P+0x1>
     91e:	80 e0       	ldi	r24, 0x00	; 0
     920:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <setScore>
			setScore(2, P1Score);	// otherwise show p1 score and high score
		}
		
		for(uint8_t x = 0; x < 6; x++){
			for(uint8_t y = 0; y < 5; y++){
				if( isButtonDown(x, y) && (( 1 << (x*5 + y) ) == 0)){		// check later
     924:	cc 24       	eor	r12, r12
     926:	c3 94       	inc	r12
     928:	d1 2c       	mov	r13, r1
	TCNT4 = 0;
	TCCR4B = (0b101 << CS40);	// enable timer 0 (game timer)
	
	setScore(0, GameMode == 0 ? HighScore1P : HighScore2P);
	
	while(TimeRemaining > 0){
     92a:	5c c0       	rjmp	.+184    	; 0x9e4 <__stack+0xe5>
		
		setScore(1, TimeRemaining);
     92c:	60 91 b1 01 	lds	r22, 0x01B1	; 0x8001b1 <TimeRemaining>
     930:	70 e0       	ldi	r23, 0x00	; 0
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <setScore>
		if(GameMode == 1){
     938:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <GameMode>
     93c:	81 30       	cpi	r24, 0x01	; 1
     93e:	79 f4       	brne	.+30     	; 0x95e <__stack+0x5f>
			setScore(0, P1Score);	// if 2p mode, show left p1 and right p2 scores
     940:	60 91 b4 01 	lds	r22, 0x01B4	; 0x8001b4 <P1Score>
     944:	70 91 b5 01 	lds	r23, 0x01B5	; 0x8001b5 <P1Score+0x1>
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <setScore>
			setScore(2, P2Score);
     94e:	60 91 b6 01 	lds	r22, 0x01B6	; 0x8001b6 <P2Score>
     952:	70 91 b7 01 	lds	r23, 0x01B7	; 0x8001b7 <P2Score+0x1>
     956:	82 e0       	ldi	r24, 0x02	; 2
     958:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <setScore>
     95c:	4f c0       	rjmp	.+158    	; 0x9fc <__stack+0xfd>
			}else{
			setScore(2, P1Score);	// otherwise show p1 score and high score
     95e:	60 91 b4 01 	lds	r22, 0x01B4	; 0x8001b4 <P1Score>
     962:	70 91 b5 01 	lds	r23, 0x01B5	; 0x8001b5 <P1Score+0x1>
     966:	82 e0       	ldi	r24, 0x02	; 2
     968:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <setScore>
     96c:	47 c0       	rjmp	.+142    	; 0x9fc <__stack+0xfd>
		}
		
		for(uint8_t x = 0; x < 6; x++){
			for(uint8_t y = 0; y < 5; y++){
				if( isButtonDown(x, y) && (( 1 << (x*5 + y) ) == 0)){		// check later
     96e:	6c 2f       	mov	r22, r28
     970:	8d 2f       	mov	r24, r29
     972:	0e 94 a4 00 	call	0x148	; 0x148 <isButtonDown>
     976:	88 23       	and	r24, r24
     978:	39 f1       	breq	.+78     	; 0x9c8 <__stack+0xc9>
     97a:	c6 01       	movw	r24, r12
     97c:	00 2e       	mov	r0, r16
     97e:	02 c0       	rjmp	.+4      	; 0x984 <__stack+0x85>
     980:	88 0f       	add	r24, r24
     982:	99 1f       	adc	r25, r25
     984:	0a 94       	dec	r0
     986:	e2 f7       	brpl	.-8      	; 0x980 <__stack+0x81>
     988:	89 2b       	or	r24, r25
     98a:	f1 f4       	brne	.+60     	; 0x9c8 <__stack+0xc9>

					HasPressed |= (1 << (x*5 + y) );
					setButtonLed(x,y,0);
     98c:	40 e0       	ldi	r20, 0x00	; 0
     98e:	6c 2f       	mov	r22, r28
     990:	8d 2f       	mov	r24, r29
     992:	0e 94 b4 00 	call	0x168	; 0x168 <setButtonLed>

					if(GameMode == 0){
     996:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <GameMode>
     99a:	81 11       	cpse	r24, r1
     99c:	06 c0       	rjmp	.+12     	; 0x9aa <__stack+0xab>
						IncrementScore(0,BonusPointCount);		// TODO later include mil
     99e:	60 91 c4 01 	lds	r22, 0x01C4	; 0x8001c4 <BonusPointCount>
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <IncrementScore>
     9a8:	0f c0       	rjmp	.+30     	; 0x9c8 <__stack+0xc9>
						}else{
						if(x >= 3){
     9aa:	d3 30       	cpi	r29, 0x03	; 3
     9ac:	38 f0       	brcs	.+14     	; 0x9bc <__stack+0xbd>
							IncrementScore(1,BonusPointCount);
     9ae:	60 91 c4 01 	lds	r22, 0x01C4	; 0x8001c4 <BonusPointCount>
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <IncrementScore>
     9ba:	06 c0       	rjmp	.+12     	; 0x9c8 <__stack+0xc9>
							}else{
							IncrementScore(0,BonusPointCount);
     9bc:	60 91 c4 01 	lds	r22, 0x01C4	; 0x8001c4 <BonusPointCount>
     9c0:	70 e0       	ldi	r23, 0x00	; 0
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <IncrementScore>
			}else{
			setScore(2, P1Score);	// otherwise show p1 score and high score
		}
		
		for(uint8_t x = 0; x < 6; x++){
			for(uint8_t y = 0; y < 5; y++){
     9c8:	cf 5f       	subi	r28, 0xFF	; 255
     9ca:	0f 5f       	subi	r16, 0xFF	; 255
     9cc:	1f 4f       	sbci	r17, 0xFF	; 255
     9ce:	c5 30       	cpi	r28, 0x05	; 5
     9d0:	71 f6       	brne	.-100    	; 0x96e <__stack+0x6f>
			setScore(2, P2Score);
			}else{
			setScore(2, P1Score);	// otherwise show p1 score and high score
		}
		
		for(uint8_t x = 0; x < 6; x++){
     9d2:	df 5f       	subi	r29, 0xFF	; 255
     9d4:	85 e0       	ldi	r24, 0x05	; 5
     9d6:	e8 0e       	add	r14, r24
     9d8:	f1 1c       	adc	r15, r1
     9da:	d6 30       	cpi	r29, 0x06	; 6
     9dc:	19 f0       	breq	.+6      	; 0x9e4 <__stack+0xe5>
	for(uint8_t i = 0; i < 30; i++){
		setButtonLed(i % 6, i / 5, 0); // TODO VERIFY THIS WORKS, turn all leds on
	}
	_delay_ms(500);

	for(uint8_t i = 0; i < 30; i++){
     9de:	87 01       	movw	r16, r14
     9e0:	c0 e0       	ldi	r28, 0x00	; 0
     9e2:	c5 cf       	rjmp	.-118    	; 0x96e <__stack+0x6f>
	TCNT4 = 0;
	TCCR4B = (0b101 << CS40);	// enable timer 0 (game timer)
	
	setScore(0, GameMode == 0 ? HighScore1P : HighScore2P);
	
	while(TimeRemaining > 0){
     9e4:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <TimeRemaining>
     9e8:	81 11       	cpse	r24, r1
     9ea:	a0 cf       	rjmp	.-192    	; 0x92c <__stack+0x2d>

				}
			}
		}
	}
	TCCR4B = (0b000 << CS40);
     9ec:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
	
	setScore(1, 0); // TODO MAKE DASHES
     9f0:	60 e0       	ldi	r22, 0x00	; 0
     9f2:	70 e0       	ldi	r23, 0x00	; 0
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <setScore>

}
     9fa:	04 c0       	rjmp	.+8      	; 0xa04 <__stack+0x105>
	for(uint8_t i = 0; i < 30; i++){
		setButtonLed(i % 6, i / 5, 0); // TODO VERIFY THIS WORKS, turn all leds on
	}
	_delay_ms(500);

	for(uint8_t i = 0; i < 30; i++){
     9fc:	e1 2c       	mov	r14, r1
     9fe:	f1 2c       	mov	r15, r1
     a00:	d0 e0       	ldi	r29, 0x00	; 0
     a02:	ed cf       	rjmp	.-38     	; 0x9de <__stack+0xdf>
	}
	TCCR4B = (0b000 << CS40);
	
	setScore(1, 0); // TODO MAKE DASHES

}
     a04:	df 91       	pop	r29
     a06:	cf 91       	pop	r28
     a08:	1f 91       	pop	r17
     a0a:	0f 91       	pop	r16
     a0c:	ff 90       	pop	r15
     a0e:	ef 90       	pop	r14
     a10:	df 90       	pop	r13
     a12:	cf 90       	pop	r12
     a14:	08 95       	ret

00000a16 <Display321>:
4,3,4,4,4,3,4,5,5,5,5,5,5,5};
const uint8_t onledsY[42] = { 0,0,0,0,1,2,2,2,2,3,4,4,4,4,
	0,0,0,0,1,2,2,2,2,3,4,4,4,4,
0,1,1,2,3,4,4,4,4,4,4,4,4,4};

void Display321(){	//TODO ADD TONES FOR EACH DIGIT
     a16:	6f 92       	push	r6
     a18:	7f 92       	push	r7
     a1a:	8f 92       	push	r8
     a1c:	9f 92       	push	r9
     a1e:	af 92       	push	r10
     a20:	bf 92       	push	r11
     a22:	cf 92       	push	r12
     a24:	df 92       	push	r13
     a26:	ef 92       	push	r14
     a28:	ff 92       	push	r15
     a2a:	1f 93       	push	r17
     a2c:	cf 93       	push	r28
     a2e:	df 93       	push	r29
     a30:	0f 2e       	mov	r0, r31
     a32:	fe e7       	ldi	r31, 0x7E	; 126
     a34:	ef 2e       	mov	r14, r31
     a36:	f1 e0       	ldi	r31, 0x01	; 1
     a38:	ff 2e       	mov	r15, r31
     a3a:	f0 2d       	mov	r31, r0
     a3c:	c2 e6       	ldi	r28, 0x62	; 98
     a3e:	d1 e0       	ldi	r29, 0x01	; 1
	for(uint8_t number = 3; number >= 1; number--){
		// turn off all leds
		for(uint8_t i = 0; i < 3; i++){
			setScore(i, number);
		}
		for(uint8_t i = 0; i < 30; i++){
     a40:	0f 2e       	mov	r0, r31
     a42:	f3 e0       	ldi	r31, 0x03	; 3
     a44:	6f 2e       	mov	r6, r31
     a46:	71 2c       	mov	r7, r1
     a48:	f0 2d       	mov	r31, r0
			setButtonLed(i % 6, i / 5, 0); // TODO VERIFY THIS WORKS
     a4a:	0f 2e       	mov	r0, r31
     a4c:	fd ec       	ldi	r31, 0xCD	; 205
     a4e:	af 2e       	mov	r10, r31
     a50:	f0 2d       	mov	r31, r0
     a52:	0f 2e       	mov	r0, r31
     a54:	fb ea       	ldi	r31, 0xAB	; 171
     a56:	bf 2e       	mov	r11, r31
     a58:	f0 2d       	mov	r31, r0
     a5a:	3b c0       	rjmp	.+118    	; 0xad2 <Display321+0xbc>
     a5c:	1a 9d       	mul	r17, r10
     a5e:	61 2d       	mov	r22, r1
     a60:	11 24       	eor	r1, r1
     a62:	66 95       	lsr	r22
     a64:	66 95       	lsr	r22
     a66:	1b 9d       	mul	r17, r11
     a68:	81 2d       	mov	r24, r1
     a6a:	11 24       	eor	r1, r1
     a6c:	86 95       	lsr	r24
     a6e:	86 95       	lsr	r24
     a70:	98 2f       	mov	r25, r24
     a72:	99 0f       	add	r25, r25
     a74:	89 0f       	add	r24, r25
     a76:	88 0f       	add	r24, r24
     a78:	40 e0       	ldi	r20, 0x00	; 0
     a7a:	21 2f       	mov	r18, r17
     a7c:	28 1b       	sub	r18, r24
     a7e:	82 2f       	mov	r24, r18
     a80:	0e 94 b4 00 	call	0x168	; 0x168 <setButtonLed>
	for(uint8_t number = 3; number >= 1; number--){
		// turn off all leds
		for(uint8_t i = 0; i < 3; i++){
			setScore(i, number);
		}
		for(uint8_t i = 0; i < 30; i++){
     a84:	1f 5f       	subi	r17, 0xFF	; 255
     a86:	1e 31       	cpi	r17, 0x1E	; 30
     a88:	49 f7       	brne	.-46     	; 0xa5c <Display321+0x46>
     a8a:	6e 01       	movw	r12, r28
     a8c:	8e e0       	ldi	r24, 0x0E	; 14
     a8e:	c8 1a       	sub	r12, r24
     a90:	d1 08       	sbc	r13, r1
     a92:	47 01       	movw	r8, r14
			setButtonLed(i % 6, i / 5, 0); // TODO VERIFY THIS WORKS
		}
		for(uint8_t i = 0; i < 14; i++){	//
			setButtonLed(onledsX[i + (14*number)], onledsY[i + (14*number)], 1);
     a94:	f6 01       	movw	r30, r12
     a96:	61 91       	ld	r22, Z+
     a98:	6f 01       	movw	r12, r30
     a9a:	41 e0       	ldi	r20, 0x01	; 1
     a9c:	f4 01       	movw	r30, r8
     a9e:	81 91       	ld	r24, Z+
     aa0:	4f 01       	movw	r8, r30
     aa2:	0e 94 b4 00 	call	0x168	; 0x168 <setButtonLed>
			setScore(i, number);
		}
		for(uint8_t i = 0; i < 30; i++){
			setButtonLed(i % 6, i / 5, 0); // TODO VERIFY THIS WORKS
		}
		for(uint8_t i = 0; i < 14; i++){	//
     aa6:	cc 16       	cp	r12, r28
     aa8:	dd 06       	cpc	r13, r29
     aaa:	a1 f7       	brne	.-24     	; 0xa94 <Display321+0x7e>
     aac:	ff ef       	ldi	r31, 0xFF	; 255
     aae:	23 ed       	ldi	r18, 0xD3	; 211
     ab0:	80 e3       	ldi	r24, 0x30	; 48
     ab2:	f1 50       	subi	r31, 0x01	; 1
     ab4:	20 40       	sbci	r18, 0x00	; 0
     ab6:	80 40       	sbci	r24, 0x00	; 0
     ab8:	e1 f7       	brne	.-8      	; 0xab2 <Display321+0x9c>
     aba:	00 c0       	rjmp	.+0      	; 0xabc <Display321+0xa6>
     abc:	00 00       	nop
     abe:	91 e0       	ldi	r25, 0x01	; 1
     ac0:	69 1a       	sub	r6, r25
     ac2:	71 08       	sbc	r7, r1
     ac4:	ee e0       	ldi	r30, 0x0E	; 14
     ac6:	ee 1a       	sub	r14, r30
     ac8:	f1 08       	sbc	r15, r1
     aca:	2e 97       	sbiw	r28, 0x0e	; 14
	0,0,0,0,1,2,2,2,2,3,4,4,4,4,
0,1,1,2,3,4,4,4,4,4,4,4,4,4};

void Display321(){	//TODO ADD TONES FOR EACH DIGIT
	
	for(uint8_t number = 3; number >= 1; number--){
     acc:	61 14       	cp	r6, r1
     ace:	71 04       	cpc	r7, r1
     ad0:	71 f0       	breq	.+28     	; 0xaee <Display321+0xd8>
		// turn off all leds
		for(uint8_t i = 0; i < 3; i++){
			setScore(i, number);
     ad2:	b3 01       	movw	r22, r6
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <setScore>
     ada:	b3 01       	movw	r22, r6
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <setScore>
     ae2:	b3 01       	movw	r22, r6
     ae4:	82 e0       	ldi	r24, 0x02	; 2
     ae6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <setScore>
     aea:	10 e0       	ldi	r17, 0x00	; 0
     aec:	b7 cf       	rjmp	.-146    	; 0xa5c <Display321+0x46>
		for(uint8_t i = 0; i < 14; i++){	//
			setButtonLed(onledsX[i + (14*number)], onledsY[i + (14*number)], 1);
		}
		_delay_ms(1000);
	}
}
     aee:	df 91       	pop	r29
     af0:	cf 91       	pop	r28
     af2:	1f 91       	pop	r17
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	cf 90       	pop	r12
     afc:	bf 90       	pop	r11
     afe:	af 90       	pop	r10
     b00:	9f 90       	pop	r9
     b02:	8f 90       	pop	r8
     b04:	7f 90       	pop	r7
     b06:	6f 90       	pop	r6
     b08:	08 95       	ret

00000b0a <playChirp>:

void playChirp(uint8_t tone){
	beep_index = tone;
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <beep_index+0x1>
     b10:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <beep_index>
	note_index = 0;
     b14:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <note_index+0x1>
     b18:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <note_index>
	TCCR0B = (0b101 << CS00);	//turn on clock for
     b1c:	85 e0       	ldi	r24, 0x05	; 5
     b1e:	85 bd       	out	0x25, r24	; 37
     b20:	08 95       	ret

00000b22 <Game>:
	if(TimeRemaining > 0){
		TimeRemaining--;
	}
}

void Game(){
     b22:	3f 92       	push	r3
     b24:	4f 92       	push	r4
     b26:	6f 92       	push	r6
     b28:	7f 92       	push	r7
     b2a:	8f 92       	push	r8
     b2c:	9f 92       	push	r9
     b2e:	af 92       	push	r10
     b30:	bf 92       	push	r11
     b32:	cf 92       	push	r12
     b34:	df 92       	push	r13
     b36:	ef 92       	push	r14
     b38:	ff 92       	push	r15
     b3a:	0f 93       	push	r16
     b3c:	1f 93       	push	r17
     b3e:	cf 93       	push	r28
     b40:	df 93       	push	r29

	// game mode is set when leaving attract mode
	Display321();
     b42:	0e 94 0b 05 	call	0xa16	; 0xa16 <Display321>
	
	P1Score = 0;			// reset scores and multipliers
     b46:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <P1Score+0x1>
     b4a:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <P1Score>
	P2Score = 0;
     b4e:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <P2Score+0x1>
     b52:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <P2Score>
	P1Multiplier = 1;
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <P1Multiplier>
	P2Multiplier = 1;
     b5c:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <P2Multiplier>
     b60:	0f 2e       	mov	r0, r31
     b62:	fc eb       	ldi	r31, 0xBC	; 188
     b64:	ef 2e       	mov	r14, r31
     b66:	f1 e0       	ldi	r31, 0x01	; 1
     b68:	ff 2e       	mov	r15, r31
     b6a:	f0 2d       	mov	r31, r0
     b6c:	08 ea       	ldi	r16, 0xA8	; 168
     b6e:	11 e0       	ldi	r17, 0x01	; 1
     b70:	c9 eb       	ldi	r28, 0xB9	; 185
     b72:	d1 e0       	ldi	r29, 0x01	; 1

	// pick 6 random leds to enable regardless of mode
	// (3 left side 3 right side)
	for(int i = 0; i < (MaxLedsOn / 2); i++){
		gameledsX[i] = rand() % (LedsXMax / 2);			// turn 3 on left side
     b74:	0f 2e       	mov	r0, r31
     b76:	f3 e0       	ldi	r31, 0x03	; 3
     b78:	cf 2e       	mov	r12, r31
     b7a:	d1 2c       	mov	r13, r1
     b7c:	f0 2d       	mov	r31, r0
		gameledsY[i] = rand() % 5;
     b7e:	0f 2e       	mov	r0, r31
     b80:	f5 e0       	ldi	r31, 0x05	; 5
     b82:	af 2e       	mov	r10, r31
     b84:	b1 2c       	mov	r11, r1
     b86:	f0 2d       	mov	r31, r0
	P2Multiplier = 1;

	// pick 6 random leds to enable regardless of mode
	// (3 left side 3 right side)
	for(int i = 0; i < (MaxLedsOn / 2); i++){
		gameledsX[i] = rand() % (LedsXMax / 2);			// turn 3 on left side
     b88:	0e 94 ab 08 	call	0x1156	; 0x1156 <rand>
     b8c:	b6 01       	movw	r22, r12
     b8e:	0e 94 37 08 	call	0x106e	; 0x106e <__divmodhi4>
     b92:	89 93       	st	Y+, r24
		gameledsY[i] = rand() % 5;
     b94:	0e 94 ab 08 	call	0x1156	; 0x1156 <rand>
     b98:	b5 01       	movw	r22, r10
     b9a:	0e 94 37 08 	call	0x106e	; 0x106e <__divmodhi4>
     b9e:	f8 01       	movw	r30, r16
     ba0:	81 93       	st	Z+, r24
     ba2:	8f 01       	movw	r16, r30
		
		gameledsX[i+3] = 3 + rand() % (LedsXMax / 2);	// turn 3 on right side
     ba4:	0e 94 ab 08 	call	0x1156	; 0x1156 <rand>
     ba8:	b6 01       	movw	r22, r12
     baa:	0e 94 37 08 	call	0x106e	; 0x106e <__divmodhi4>
     bae:	8d 5f       	subi	r24, 0xFD	; 253
     bb0:	8a 83       	std	Y+2, r24	; 0x02
		gameledsY[i+3] = rand() % 5;
     bb2:	0e 94 ab 08 	call	0x1156	; 0x1156 <rand>
     bb6:	b5 01       	movw	r22, r10
     bb8:	0e 94 37 08 	call	0x106e	; 0x106e <__divmodhi4>
     bbc:	f8 01       	movw	r30, r16
     bbe:	82 83       	std	Z+2, r24	; 0x02
	P1Multiplier = 1;
	P2Multiplier = 1;

	// pick 6 random leds to enable regardless of mode
	// (3 left side 3 right side)
	for(int i = 0; i < (MaxLedsOn / 2); i++){
     bc0:	ce 15       	cp	r28, r14
     bc2:	df 05       	cpc	r29, r15
     bc4:	09 f7       	brne	.-62     	; 0xb88 <Game+0x66>
		gameledsX[i+3] = 3 + rand() % (LedsXMax / 2);	// turn 3 on right side
		gameledsY[i+3] = rand() % 5;
	}


	TimeRemaining = RoundTime;
     bc6:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <RoundTime>
     bca:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <TimeRemaining>
	TCNT4 = 0;					// reset timer
     bce:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7e00a5>
     bd2:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7e00a4>
	TCCR4B = (0b101 << CS40);	// enable timer 0 (game timer)
     bd6:	85 e0       	ldi	r24, 0x05	; 5
     bd8:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
	
	setScore(0, HighScore1P);	// will be replaced if 2p mode
     bdc:	60 91 b2 01 	lds	r22, 0x01B2	; 0x8001b2 <HighScore1P>
     be0:	70 91 b3 01 	lds	r23, 0x01B3	; 0x8001b3 <HighScore1P+0x1>
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <setScore>

				do{		// move led to random DIFFERENT spot
					if(i >= 3){
						gameledsX[i+3] = 3 + rand() % (LedsXMax / 2);
						}else{
						gameledsX[i] = rand() % (LedsXMax / 2);
     bea:	0f 2e       	mov	r0, r31
     bec:	f3 e0       	ldi	r31, 0x03	; 3
     bee:	ef 2e       	mov	r14, r31
     bf0:	f1 2c       	mov	r15, r1
     bf2:	f0 2d       	mov	r31, r0
					}
					gameledsY[i] = rand() % LedsYMax;
     bf4:	0f 2e       	mov	r0, r31
     bf6:	f5 e0       	ldi	r31, 0x05	; 5
     bf8:	8f 2e       	mov	r8, r31
     bfa:	91 2c       	mov	r9, r1
     bfc:	f0 2d       	mov	r31, r0
	TCNT4 = 0;					// reset timer
	TCCR4B = (0b101 << CS40);	// enable timer 0 (game timer)
	
	setScore(0, HighScore1P);	// will be replaced if 2p mode
	
	while(TimeRemaining > 0){
     bfe:	a4 c0       	rjmp	.+328    	; 0xd48 <Game+0x226>

		
		setScore(1, TimeRemaining);
     c00:	60 91 b1 01 	lds	r22, 0x01B1	; 0x8001b1 <TimeRemaining>
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <setScore>
		if(GameMode == 1){
     c0c:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <GameMode>
     c10:	81 30       	cpi	r24, 0x01	; 1
     c12:	79 f4       	brne	.+30     	; 0xc32 <Game+0x110>
			setScore(0, P1Score);	// if 2p mode, show left p1 and right p2 scores
     c14:	60 91 b4 01 	lds	r22, 0x01B4	; 0x8001b4 <P1Score>
     c18:	70 91 b5 01 	lds	r23, 0x01B5	; 0x8001b5 <P1Score+0x1>
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <setScore>
			setScore(2, P2Score);
     c22:	60 91 b6 01 	lds	r22, 0x01B6	; 0x8001b6 <P2Score>
     c26:	70 91 b7 01 	lds	r23, 0x01B7	; 0x8001b7 <P2Score+0x1>
     c2a:	82 e0       	ldi	r24, 0x02	; 2
     c2c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <setScore>
     c30:	92 c0       	rjmp	.+292    	; 0xd56 <Game+0x234>
			}else{
			setScore(2, P1Score);	// otherwise show p1 score and high score
     c32:	60 91 b4 01 	lds	r22, 0x01B4	; 0x8001b4 <P1Score>
     c36:	70 91 b5 01 	lds	r23, 0x01B5	; 0x8001b5 <P1Score+0x1>
     c3a:	82 e0       	ldi	r24, 0x02	; 2
     c3c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <setScore>
     c40:	8a c0       	rjmp	.+276    	; 0xd56 <Game+0x234>
     c42:	36 01       	movw	r6, r12
     c44:	e5 01       	movw	r28, r10
		}

		for(uint8_t i = 0; i < 6; i++){
			if (isButtonDown(gameledsX[i], gameledsY[i]) ){
     c46:	f6 01       	movw	r30, r12
     c48:	60 81       	ld	r22, Z
     c4a:	88 81       	ld	r24, Y
     c4c:	0e 94 a4 00 	call	0x148	; 0x148 <isButtonDown>
     c50:	88 23       	and	r24, r24
     c52:	09 f4       	brne	.+2      	; 0xc56 <Game+0x134>
     c54:	63 c0       	rjmp	.+198    	; 0xd1c <Game+0x1fa>

				uint8_t oldX = gameledsX[i];
     c56:	48 80       	ld	r4, Y
				uint8_t oldY = gameledsY[i];
     c58:	f6 01       	movw	r30, r12
     c5a:	30 80       	ld	r3, Z

				do{		// move led to random DIFFERENT spot
					if(i >= 3){
     c5c:	13 30       	cpi	r17, 0x03	; 3
     c5e:	40 f0       	brcs	.+16     	; 0xc70 <Game+0x14e>
						gameledsX[i+3] = 3 + rand() % (LedsXMax / 2);
     c60:	0e 94 ab 08 	call	0x1156	; 0x1156 <rand>
     c64:	b7 01       	movw	r22, r14
     c66:	0e 94 37 08 	call	0x106e	; 0x106e <__divmodhi4>
     c6a:	8d 5f       	subi	r24, 0xFD	; 253
     c6c:	8b 83       	std	Y+3, r24	; 0x03
     c6e:	06 c0       	rjmp	.+12     	; 0xc7c <Game+0x15a>
						}else{
						gameledsX[i] = rand() % (LedsXMax / 2);
     c70:	0e 94 ab 08 	call	0x1156	; 0x1156 <rand>
     c74:	b7 01       	movw	r22, r14
     c76:	0e 94 37 08 	call	0x106e	; 0x106e <__divmodhi4>
     c7a:	88 83       	st	Y, r24
					}
					gameledsY[i] = rand() % LedsYMax;
     c7c:	0e 94 ab 08 	call	0x1156	; 0x1156 <rand>
     c80:	b4 01       	movw	r22, r8
     c82:	0e 94 37 08 	call	0x106e	; 0x106e <__divmodhi4>
     c86:	98 2f       	mov	r25, r24
     c88:	f3 01       	movw	r30, r6
     c8a:	80 83       	st	Z, r24

				}while((gameledsX[i] == oldX) && (gameledsY[i] == oldY));
     c8c:	88 81       	ld	r24, Y
     c8e:	48 12       	cpse	r4, r24
     c90:	02 c0       	rjmp	.+4      	; 0xc96 <Game+0x174>
     c92:	39 16       	cp	r3, r25
     c94:	19 f3       	breq	.-58     	; 0xc5c <Game+0x13a>


				if(GameMode == 0){
     c96:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <GameMode>
     c9a:	81 11       	cpse	r24, r1
     c9c:	14 c0       	rjmp	.+40     	; 0xcc6 <Game+0x1a4>
					IncrementScore(0, P1Multiplier);	// add score and inc multiplier (singleplayer)
     c9e:	60 91 a4 01 	lds	r22, 0x01A4	; 0x8001a4 <P1Multiplier>
     ca2:	70 e0       	ldi	r23, 0x00	; 0
     ca4:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <IncrementScore>
					playChirp(P1Multiplier);
     ca8:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <P1Multiplier>
     cac:	0e 94 85 05 	call	0xb0a	; 0xb0a <playChirp>
					P1Multiplier = (P1Multiplier == MultiplierMax) ? MultiplierMax : (P1Multiplier + 1);
     cb0:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <P1Multiplier>
     cb4:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <MultiplierMax>
     cb8:	98 17       	cp	r25, r24
     cba:	11 f0       	breq	.+4      	; 0xcc0 <Game+0x19e>
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	89 0f       	add	r24, r25
     cc0:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <P1Multiplier>
     cc4:	2b c0       	rjmp	.+86     	; 0xd1c <Game+0x1fa>
					}else{
					if(i >= 3){
     cc6:	13 30       	cpi	r17, 0x03	; 3
     cc8:	a8 f0       	brcs	.+42     	; 0xcf4 <Game+0x1d2>
						IncrementScore(1, P2Multiplier);	// add depending on side of button pressed
     cca:	60 91 a3 01 	lds	r22, 0x01A3	; 0x8001a3 <P2Multiplier>
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <IncrementScore>
						playChirp(P2Multiplier);
     cd6:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <P2Multiplier>
     cda:	0e 94 85 05 	call	0xb0a	; 0xb0a <playChirp>
						P2Multiplier = (P2Multiplier == MultiplierMax) ? MultiplierMax : (P2Multiplier + 1);
     cde:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <P2Multiplier>
     ce2:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <MultiplierMax>
     ce6:	98 17       	cp	r25, r24
     ce8:	11 f0       	breq	.+4      	; 0xcee <Game+0x1cc>
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	89 0f       	add	r24, r25
     cee:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <P2Multiplier>
     cf2:	14 c0       	rjmp	.+40     	; 0xd1c <Game+0x1fa>
						}else{
						IncrementScore(0, P1Multiplier);
     cf4:	60 91 a4 01 	lds	r22, 0x01A4	; 0x8001a4 <P1Multiplier>
     cf8:	70 e0       	ldi	r23, 0x00	; 0
     cfa:	80 e0       	ldi	r24, 0x00	; 0
     cfc:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <IncrementScore>
						playChirp(P1Multiplier);
     d00:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <P1Multiplier>
     d04:	0e 94 85 05 	call	0xb0a	; 0xb0a <playChirp>
						P1Multiplier = (P1Multiplier == MultiplierMax) ? MultiplierMax : (P1Multiplier + 1);
     d08:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <P1Multiplier>
     d0c:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <MultiplierMax>
     d10:	98 17       	cp	r25, r24
     d12:	11 f0       	breq	.+4      	; 0xd18 <Game+0x1f6>
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	89 0f       	add	r24, r25
     d18:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <P1Multiplier>
			setScore(2, P2Score);
			}else{
			setScore(2, P1Score);	// otherwise show p1 score and high score
		}

		for(uint8_t i = 0; i < 6; i++){
     d1c:	1f 5f       	subi	r17, 0xFF	; 255
     d1e:	ff ef       	ldi	r31, 0xFF	; 255
     d20:	cf 1a       	sub	r12, r31
     d22:	df 0a       	sbc	r13, r31
     d24:	8f ef       	ldi	r24, 0xFF	; 255
     d26:	a8 1a       	sub	r10, r24
     d28:	b8 0a       	sbc	r11, r24
     d2a:	16 30       	cpi	r17, 0x06	; 6
     d2c:	09 f0       	breq	.+2      	; 0xd30 <Game+0x20e>
     d2e:	89 cf       	rjmp	.-238    	; 0xc42 <Game+0x120>

			}
		}
		
		
		if (P1Multiplier > 1){
     d30:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <P1Multiplier>
     d34:	82 30       	cpi	r24, 0x02	; 2
     d36:	10 f0       	brcs	.+4      	; 0xd3c <Game+0x21a>
			if ( (P1MultTimeS + MultiplierDecaySeconds) <= TimeRemaining){
     d38:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <TimeRemaining>
				if(P1MultTimeT < MultiplierDecayTicks){	// TODO INCORPORATE TICK OFFSET
					P1Multiplier--;
				}
			}
		}
		if (P2Multiplier > 1){
     d3c:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <P2Multiplier>
     d40:	82 30       	cpi	r24, 0x02	; 2
     d42:	10 f0       	brcs	.+4      	; 0xd48 <Game+0x226>
			if ( (P2MultTimeS + MultiplierDecaySeconds) <= TimeRemaining){
     d44:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <TimeRemaining>
	TCNT4 = 0;					// reset timer
	TCCR4B = (0b101 << CS40);	// enable timer 0 (game timer)
	
	setScore(0, HighScore1P);	// will be replaced if 2p mode
	
	while(TimeRemaining > 0){
     d48:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <TimeRemaining>
     d4c:	81 11       	cpse	r24, r1
     d4e:	58 cf       	rjmp	.-336    	; 0xc00 <Game+0xde>
		//_delay_ms(50);	// TODO maybe change this later

	}
	
	// game is over, stop timer
	TCCR4B = (0b000 << CS40);
     d50:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
	
}
     d54:	0e c0       	rjmp	.+28     	; 0xd72 <Game+0x250>
	Display321();
	
	P1Score = 0;			// reset scores and multipliers
	P2Score = 0;
	P1Multiplier = 1;
	P2Multiplier = 1;
     d56:	0f 2e       	mov	r0, r31
     d58:	f9 eb       	ldi	r31, 0xB9	; 185
     d5a:	af 2e       	mov	r10, r31
     d5c:	f1 e0       	ldi	r31, 0x01	; 1
     d5e:	bf 2e       	mov	r11, r31
     d60:	f0 2d       	mov	r31, r0
     d62:	0f 2e       	mov	r0, r31
     d64:	f8 ea       	ldi	r31, 0xA8	; 168
     d66:	cf 2e       	mov	r12, r31
     d68:	f1 e0       	ldi	r31, 0x01	; 1
     d6a:	df 2e       	mov	r13, r31
     d6c:	f0 2d       	mov	r31, r0
     d6e:	10 e0       	ldi	r17, 0x00	; 0
     d70:	68 cf       	rjmp	.-304    	; 0xc42 <Game+0x120>
	}
	
	// game is over, stop timer
	TCCR4B = (0b000 << CS40);
	
}
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	1f 91       	pop	r17
     d78:	0f 91       	pop	r16
     d7a:	ff 90       	pop	r15
     d7c:	ef 90       	pop	r14
     d7e:	df 90       	pop	r13
     d80:	cf 90       	pop	r12
     d82:	bf 90       	pop	r11
     d84:	af 90       	pop	r10
     d86:	9f 90       	pop	r9
     d88:	8f 90       	pop	r8
     d8a:	7f 90       	pop	r7
     d8c:	6f 90       	pop	r6
     d8e:	4f 90       	pop	r4
     d90:	3f 90       	pop	r3
     d92:	08 95       	ret

00000d94 <AttractCheckGameStart>:
	beep_index = tone;
	note_index = 0;
	TCCR0B = (0b101 << CS00);	//turn on clock for
}

uint8_t AttractCheckGameStart(uint16_t count){
     d94:	0f 93       	push	r16
     d96:	1f 93       	push	r17
     d98:	cf 93       	push	r28
     d9a:	df 93       	push	r29
	// pauses some time while checking player button inputs, skip and start game if pressed
	for(uint16_t delayCount = 0; delayCount < count; delayCount++){
     d9c:	00 97       	sbiw	r24, 0x00	; 0
     d9e:	e1 f0       	breq	.+56     	; 0xdd8 <AttractCheckGameStart+0x44>
     da0:	8c 01       	movw	r16, r24
     da2:	c0 e0       	ldi	r28, 0x00	; 0
     da4:	d0 e0       	ldi	r29, 0x00	; 0
		//delay some ms between each button light and check for game start
		if(isButtonDown(Player1ButtonX, Player1ButtonY) || isButtonDown(Player2ButtonX, Player2ButtonY)){
     da6:	62 e0       	ldi	r22, 0x02	; 2
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	0e 94 a4 00 	call	0x148	; 0x148 <isButtonDown>
     dae:	81 11       	cpse	r24, r1
     db0:	06 c0       	rjmp	.+12     	; 0xdbe <AttractCheckGameStart+0x2a>
     db2:	62 e0       	ldi	r22, 0x02	; 2
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	0e 94 a4 00 	call	0x148	; 0x148 <isButtonDown>
     dba:	88 23       	and	r24, r24
     dbc:	41 f0       	breq	.+16     	; 0xdce <AttractCheckGameStart+0x3a>
			GameMode = isButtonDown(Player2ButtonX, Player2ButtonY);
     dbe:	62 e0       	ldi	r22, 0x02	; 2
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	0e 94 a4 00 	call	0x148	; 0x148 <isButtonDown>
     dc6:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <GameMode>
			return 1;	// instantly return and quit waiting
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	06 c0       	rjmp	.+12     	; 0xdda <AttractCheckGameStart+0x46>
	TCCR0B = (0b101 << CS00);	//turn on clock for
}

uint8_t AttractCheckGameStart(uint16_t count){
	// pauses some time while checking player button inputs, skip and start game if pressed
	for(uint16_t delayCount = 0; delayCount < count; delayCount++){
     dce:	21 96       	adiw	r28, 0x01	; 1
     dd0:	0c 17       	cp	r16, r28
     dd2:	1d 07       	cpc	r17, r29
     dd4:	41 f7       	brne	.-48     	; 0xda6 <AttractCheckGameStart+0x12>
     dd6:	01 c0       	rjmp	.+2      	; 0xdda <AttractCheckGameStart+0x46>
		if(isButtonDown(Player1ButtonX, Player1ButtonY) || isButtonDown(Player2ButtonX, Player2ButtonY)){
			GameMode = isButtonDown(Player2ButtonX, Player2ButtonY);
			return 1;	// instantly return and quit waiting
		}
	}
	return 0;	// return that it finished without button presses
     dd8:	80 e0       	ldi	r24, 0x00	; 0
}
     dda:	df 91       	pop	r29
     ddc:	cf 91       	pop	r28
     dde:	1f 91       	pop	r17
     de0:	0f 91       	pop	r16
     de2:	08 95       	ret

00000de4 <Attractive>:
	
	setScore(1, 0); // TODO MAKE DASHES

}

void Attractive(){
     de4:	cf 93       	push	r28
     de6:	df 93       	push	r29
	setScore(0, HighScore1P);
     de8:	60 91 b2 01 	lds	r22, 0x01B2	; 0x8001b2 <HighScore1P>
     dec:	70 91 b3 01 	lds	r23, 0x01B3	; 0x8001b3 <HighScore1P+0x1>
     df0:	80 e0       	ldi	r24, 0x00	; 0
     df2:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <setScore>
	setScore(1, 0);			// TODO MAKE DASHES AND FLASH "1P" on left and "2P" on right
     df6:	60 e0       	ldi	r22, 0x00	; 0
     df8:	70 e0       	ldi	r23, 0x00	; 0
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <setScore>
	setScore(0, HighScore2P);
     e00:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <HighScore2P>
     e04:	70 91 c3 01 	lds	r23, 0x01C3	; 0x8001c3 <HighScore2P+0x1>
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <setScore>
	while(1){
		uint8_t blinkyMode = rand() % AttractPatternCount;	// todo make random, ADD DISPLAY BLANKING
     e0e:	0e 94 ab 08 	call	0x1156	; 0x1156 <rand>
		switch(blinkyMode){	// multiple blinky modes (todo randomly pick one)
			case 0:
			for(uint8_t mode = 1; mode > 0; mode--){	// turn on then turn	off (add more mod 2 to repeat muliple times)
				for(uint8_t x = 0; x < 6; x++){			// iterate each LED
     e12:	d0 e0       	ldi	r29, 0x00	; 0
     e14:	11 c0       	rjmp	.+34     	; 0xe38 <Attractive+0x54>
					for (uint8_t y = 0; y < 5; y++){
						setButtonLed(x, y, mode);	//setbuttonled from buttons.h
     e16:	41 e0       	ldi	r20, 0x01	; 1
     e18:	6c 2f       	mov	r22, r28
     e1a:	8d 2f       	mov	r24, r29
     e1c:	0e 94 b4 00 	call	0x168	; 0x168 <setButtonLed>
						if( AttractCheckGameStart(100) ){
     e20:	84 e6       	ldi	r24, 0x64	; 100
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	0e 94 ca 06 	call	0xd94	; 0xd94 <AttractCheckGameStart>
     e28:	81 11       	cpse	r24, r1
     e2a:	08 c0       	rjmp	.+16     	; 0xe3c <Attractive+0x58>
		uint8_t blinkyMode = rand() % AttractPatternCount;	// todo make random, ADD DISPLAY BLANKING
		switch(blinkyMode){	// multiple blinky modes (todo randomly pick one)
			case 0:
			for(uint8_t mode = 1; mode > 0; mode--){	// turn on then turn	off (add more mod 2 to repeat muliple times)
				for(uint8_t x = 0; x < 6; x++){			// iterate each LED
					for (uint8_t y = 0; y < 5; y++){
     e2c:	cf 5f       	subi	r28, 0xFF	; 255
     e2e:	c5 30       	cpi	r28, 0x05	; 5
     e30:	91 f7       	brne	.-28     	; 0xe16 <Attractive+0x32>
	while(1){
		uint8_t blinkyMode = rand() % AttractPatternCount;	// todo make random, ADD DISPLAY BLANKING
		switch(blinkyMode){	// multiple blinky modes (todo randomly pick one)
			case 0:
			for(uint8_t mode = 1; mode > 0; mode--){	// turn on then turn	off (add more mod 2 to repeat muliple times)
				for(uint8_t x = 0; x < 6; x++){			// iterate each LED
     e32:	df 5f       	subi	r29, 0xFF	; 255
     e34:	d6 30       	cpi	r29, 0x06	; 6
     e36:	11 f0       	breq	.+4      	; 0xe3c <Attractive+0x58>
	
	setScore(1, 0); // TODO MAKE DASHES

}

void Attractive(){
     e38:	c0 e0       	ldi	r28, 0x00	; 0
     e3a:	ed cf       	rjmp	.-38     	; 0xe16 <Attractive+0x32>
		}
		EndAttract:
		return;		// start the game
	}

}
     e3c:	df 91       	pop	r29
     e3e:	cf 91       	pop	r28
     e40:	08 95       	ret

00000e42 <EEPROM_write>:


void EEPROM_write(uint16_t uiAddress, uint8_t ucData)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
     e42:	f9 99       	sbic	0x1f, 1	; 31
     e44:	fe cf       	rjmp	.-4      	; 0xe42 <EEPROM_write>
	;
	/* Set up address and Data Registers */
	EEAR = uiAddress;
     e46:	92 bd       	out	0x22, r25	; 34
     e48:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
     e4a:	60 bd       	out	0x20, r22	; 32
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMPE);
     e4c:	fa 9a       	sbi	0x1f, 2	; 31
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEPE);
     e4e:	f9 9a       	sbi	0x1f, 1	; 31
     e50:	08 95       	ret

00000e52 <EEPROM_read>:
}

uint8_t EEPROM_read(uint16_t uiAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
     e52:	f9 99       	sbic	0x1f, 1	; 31
     e54:	fe cf       	rjmp	.-4      	; 0xe52 <EEPROM_read>
	;
	/* Set up address register */
	EEAR = uiAddress;
     e56:	92 bd       	out	0x22, r25	; 34
     e58:	81 bd       	out	0x21, r24	; 33
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
     e5a:	f8 9a       	sbi	0x1f, 0	; 31
	/* Return data from Data Register */
	return EEDR;
     e5c:	80 b5       	in	r24, 0x20	; 32
}
     e5e:	08 95       	ret

00000e60 <main>:


int main(void)
{

	usbQcInit();
     e60:	0e 94 2f 08 	call	0x105e	; 0x105e <usbQcInit>
	QCset12V();
     e64:	0e 94 34 08 	call	0x1068	; 0x1068 <QCset12V>
	
	buttonsInit();
     e68:	0e 94 98 00 	call	0x130	; 0x130 <buttonsInit>
	
	
	// initialize timer0 for audio circuit
	DDRB |= (1 << DDB1) | (1 << DDB5); // output speaker pin B1
     e6c:	84 b1       	in	r24, 0x04	; 4
     e6e:	82 62       	ori	r24, 0x22	; 34
     e70:	84 b9       	out	0x04, r24	; 4
	ICR1 = 0;	// TOP of counter, start OFF
     e72:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     e76:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	OCR1A = 0; //0x1FFF;	// OFF at
     e7a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     e7e:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TCCR1A |= (1 << COM1A1) | (1 << WGM11); //|(0 << COM1B1);
     e82:	e0 e8       	ldi	r30, 0x80	; 128
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	82 68       	ori	r24, 0x82	; 130
     e8a:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12 ) | (1 << WGM13) | (1 << CS41);
     e8c:	e1 e8       	ldi	r30, 0x81	; 129
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	8a 61       	ori	r24, 0x1A	; 26
     e94:	80 83       	st	Z, r24
	PORTB &= ~(1 << 1);
     e96:	29 98       	cbi	0x05, 1	; 5
	
	TCCR0A = (1 << WGM01);	// enable CTC mode timer 0
     e98:	82 e0       	ldi	r24, 0x02	; 2
     e9a:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0;		//disable clock for timer0, as it will be enabled when "beeped"
     e9c:	15 bc       	out	0x25, r1	; 37
	OCR0A = 125;
     e9e:	9d e7       	ldi	r25, 0x7D	; 125
     ea0:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = ( 1 << OCIE0A );
     ea2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>



	//load values from eeprom
	HighScore1P = (EEPROM_read(EEP_ADDR_HighScore1P_H) << 8) | (EEPROM_read(EEP_ADDR_HighScore1P_L));
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	0e 94 29 07 	call	0xe52	; 0xe52 <EEPROM_read>
     eae:	c8 2f       	mov	r28, r24
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	0e 94 29 07 	call	0xe52	; 0xe52 <EEPROM_read>
     eb8:	2c 2f       	mov	r18, r28
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	32 2f       	mov	r19, r18
     ebe:	22 27       	eor	r18, r18
     ec0:	28 2b       	or	r18, r24
     ec2:	30 93 b3 01 	sts	0x01B3, r19	; 0x8001b3 <HighScore1P+0x1>
     ec6:	20 93 b2 01 	sts	0x01B2, r18	; 0x8001b2 <HighScore1P>
	HighScore2P = (EEPROM_read(EEP_ADDR_HighScore2P_H) << 8) | (EEPROM_read(EEP_ADDR_HighScore2P_L));
     eca:	82 e0       	ldi	r24, 0x02	; 2
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	0e 94 29 07 	call	0xe52	; 0xe52 <EEPROM_read>
     ed2:	c8 2f       	mov	r28, r24
     ed4:	83 e0       	ldi	r24, 0x03	; 3
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	0e 94 29 07 	call	0xe52	; 0xe52 <EEPROM_read>
     edc:	2c 2f       	mov	r18, r28
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	32 2f       	mov	r19, r18
     ee2:	22 27       	eor	r18, r18
     ee4:	28 2b       	or	r18, r24
     ee6:	30 93 c3 01 	sts	0x01C3, r19	; 0x8001c3 <HighScore2P+0x1>
     eea:	20 93 c2 01 	sts	0x01C2, r18	; 0x8001c2 <HighScore2P>
	RoundTime = EEPROM_read(EEP_ADDR_RoundTime);
     eee:	80 e1       	ldi	r24, 0x10	; 16
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	0e 94 29 07 	call	0xe52	; 0xe52 <EEPROM_read>
     ef6:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <RoundTime>
	BonusTime = EEPROM_read(EEP_ADDR_BonusTime);
     efa:	80 e2       	ldi	r24, 0x20	; 32
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	0e 94 29 07 	call	0xe52	; 0xe52 <EEPROM_read>
     f02:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <BonusTime>
	MultiplierMax = EEPROM_read(EEP_ADDR_MultMax);
     f06:	80 e5       	ldi	r24, 0x50	; 80
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	0e 94 29 07 	call	0xe52	; 0xe52 <EEPROM_read>
     f0e:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <MultiplierMax>
	BonusPointCount = EEPROM_read(EEP_ADDR_BonusPtCount);
     f12:	8c e3       	ldi	r24, 0x3C	; 60
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	0e 94 29 07 	call	0xe52	; 0xe52 <EEPROM_read>
     f1a:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <BonusPointCount>
	
	// load random value from eeprom as seed and write new random value
	srand((EEPROM_read(EEP_ADDR_RandomSeed_H) << 8) | EEPROM_read(EEP_ADDR_RandomSeed_L));
     f1e:	80 e4       	ldi	r24, 0x40	; 64
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	0e 94 29 07 	call	0xe52	; 0xe52 <EEPROM_read>
     f26:	c8 2f       	mov	r28, r24
     f28:	81 e4       	ldi	r24, 0x41	; 65
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	0e 94 29 07 	call	0xe52	; 0xe52 <EEPROM_read>
     f30:	2c 2f       	mov	r18, r28
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	32 2f       	mov	r19, r18
     f36:	22 27       	eor	r18, r18
     f38:	a9 01       	movw	r20, r18
     f3a:	48 2b       	or	r20, r24
     f3c:	ca 01       	movw	r24, r20
     f3e:	0e 94 b0 08 	call	0x1160	; 0x1160 <srand>
	EEPROM_write(EEP_ADDR_RandomSeed_H, rand()%256 );
     f42:	0e 94 ab 08 	call	0x1156	; 0x1156 <rand>
     f46:	90 78       	andi	r25, 0x80	; 128
     f48:	99 23       	and	r25, r25
     f4a:	1c f4       	brge	.+6      	; 0xf52 <main+0xf2>
     f4c:	01 97       	sbiw	r24, 0x01	; 1
     f4e:	9f 6f       	ori	r25, 0xFF	; 255
     f50:	01 96       	adiw	r24, 0x01	; 1
     f52:	68 2f       	mov	r22, r24
     f54:	80 e4       	ldi	r24, 0x40	; 64
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	0e 94 21 07 	call	0xe42	; 0xe42 <EEPROM_write>
	EEPROM_write(EEP_ADDR_RandomSeed_L, rand()%256 );
     f5c:	0e 94 ab 08 	call	0x1156	; 0x1156 <rand>
     f60:	90 78       	andi	r25, 0x80	; 128
     f62:	99 23       	and	r25, r25
     f64:	1c f4       	brge	.+6      	; 0xf6c <main+0x10c>
     f66:	01 97       	sbiw	r24, 0x01	; 1
     f68:	9f 6f       	ori	r25, 0xFF	; 255
     f6a:	01 96       	adiw	r24, 0x01	; 1
     f6c:	68 2f       	mov	r22, r24
     f6e:	81 e4       	ldi	r24, 0x41	; 65
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	0e 94 21 07 	call	0xe42	; 0xe42 <EEPROM_write>
	
	
	// set up timer4 for game timer
	TCCR4A = (1 << WGM41);	// CTC mode
     f76:	82 e0       	ldi	r24, 0x02	; 2
     f78:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	TCCR4B = 0;				// disable timer until game start (set to 64 prescale later in code)
     f7c:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
	TIMSK4 = (1 << OCIE4A);
     f80:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7e0072>
	OCR4A = 15625;			// set up for 1s
     f84:	89 e0       	ldi	r24, 0x09	; 9
     f86:	9d e3       	ldi	r25, 0x3D	; 61
     f88:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     f8c:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>

	sei();
     f90:	78 94       	sei

	while (1)
	{
		Attractive();		// loop thru patterns until game start is pressed (TODO IMPLEMENT DEBUG PATTERN)
     f92:	0e 94 f2 06 	call	0xde4	; 0xde4 <Attractive>
		Game();
     f96:	0e 94 91 05 	call	0xb22	; 0xb22 <Game>
     f9a:	5f ef       	ldi	r21, 0xFF	; 255
     f9c:	8e e9       	ldi	r24, 0x9E	; 158
     f9e:	94 e2       	ldi	r25, 0x24	; 36
     fa0:	51 50       	subi	r21, 0x01	; 1
     fa2:	80 40       	sbci	r24, 0x00	; 0
     fa4:	90 40       	sbci	r25, 0x00	; 0
     fa6:	e1 f7       	brne	.-8      	; 0xfa0 <main+0x140>
     fa8:	00 c0       	rjmp	.+0      	; 0xfaa <main+0x14a>
     faa:	00 00       	nop
		_delay_ms(750);
		Bonus();
     fac:	0e 94 06 04 	call	0x80c	; 0x80c <Bonus>
		
		if(GameMode == 0){
     fb0:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <GameMode>
     fb4:	81 11       	cpse	r24, r1
     fb6:	12 c0       	rjmp	.+36     	; 0xfdc <main+0x17c>
			if(P1Score > HighScore1P){
     fb8:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <P1Score>
     fbc:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <P1Score+0x1>
     fc0:	20 91 b2 01 	lds	r18, 0x01B2	; 0x8001b2 <HighScore1P>
     fc4:	30 91 b3 01 	lds	r19, 0x01B3	; 0x8001b3 <HighScore1P+0x1>
     fc8:	28 17       	cp	r18, r24
     fca:	39 07       	cpc	r19, r25
     fcc:	38 f5       	brcc	.+78     	; 0x101c <main+0x1bc>
				HighScore1P = P1Score;
     fce:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <HighScore1P+0x1>
     fd2:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <HighScore1P>
				ShowWinner();			//if new high score, flash screen
     fd6:	0e 94 ae 02 	call	0x55c	; 0x55c <ShowWinner>
     fda:	20 c0       	rjmp	.+64     	; 0x101c <main+0x1bc>
			}
		}else{
			if((P1Score > HighScore2P) || (P2Score > HighScore2P)){
     fdc:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <P1Score>
     fe0:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <P1Score+0x1>
     fe4:	20 91 c2 01 	lds	r18, 0x01C2	; 0x8001c2 <HighScore2P>
     fe8:	30 91 c3 01 	lds	r19, 0x01C3	; 0x8001c3 <HighScore2P+0x1>
     fec:	28 17       	cp	r18, r24
     fee:	39 07       	cpc	r19, r25
     ff0:	38 f0       	brcs	.+14     	; 0x1000 <main+0x1a0>
     ff2:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <P2Score>
     ff6:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <P2Score+0x1>
     ffa:	24 17       	cp	r18, r20
     ffc:	35 07       	cpc	r19, r21
     ffe:	60 f4       	brcc	.+24     	; 0x1018 <main+0x1b8>
				HighScore2P = (P1Score > P2Score ? P1Score : P2Score);
    1000:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <P2Score>
    1004:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <P2Score+0x1>
    1008:	28 17       	cp	r18, r24
    100a:	39 07       	cpc	r19, r25
    100c:	08 f4       	brcc	.+2      	; 0x1010 <main+0x1b0>
    100e:	9c 01       	movw	r18, r24
    1010:	30 93 c3 01 	sts	0x01C3, r19	; 0x8001c3 <HighScore2P+0x1>
    1014:	20 93 c2 01 	sts	0x01C2, r18	; 0x8001c2 <HighScore2P>
			}
			ShowWinner();				//if 2 player mode show winner anyway
    1018:	0e 94 ae 02 	call	0x55c	; 0x55c <ShowWinner>
    101c:	2f ef       	ldi	r18, 0xFF	; 255
    101e:	4e e9       	ldi	r20, 0x9E	; 158
    1020:	54 e2       	ldi	r21, 0x24	; 36
    1022:	21 50       	subi	r18, 0x01	; 1
    1024:	40 40       	sbci	r20, 0x00	; 0
    1026:	50 40       	sbci	r21, 0x00	; 0
    1028:	e1 f7       	brne	.-8      	; 0x1022 <main+0x1c2>
    102a:	00 c0       	rjmp	.+0      	; 0x102c <main+0x1cc>
    102c:	00 00       	nop
    102e:	b1 cf       	rjmp	.-158    	; 0xf92 <main+0x132>

00001030 <_handshake>:
    1030:	21 98       	cbi	0x04, 1	; 4
    1032:	2f ef       	ldi	r18, 0xFF	; 255
    1034:	8d e3       	ldi	r24, 0x3D	; 61
    1036:	99 e4       	ldi	r25, 0x49	; 73
    1038:	21 50       	subi	r18, 0x01	; 1
    103a:	80 40       	sbci	r24, 0x00	; 0
    103c:	90 40       	sbci	r25, 0x00	; 0
    103e:	e1 f7       	brne	.-8      	; 0x1038 <_handshake+0x8>
    1040:	00 c0       	rjmp	.+0      	; 0x1042 <_handshake+0x12>
    1042:	00 00       	nop
    1044:	29 98       	cbi	0x05, 1	; 5
    1046:	21 9a       	sbi	0x04, 1	; 4
    1048:	8f e3       	ldi	r24, 0x3F	; 63
    104a:	9f e1       	ldi	r25, 0x1F	; 31
    104c:	01 97       	sbiw	r24, 0x01	; 1
    104e:	f1 f7       	brne	.-4      	; 0x104c <_handshake+0x1c>
    1050:	00 c0       	rjmp	.+0      	; 0x1052 <_handshake+0x22>
    1052:	00 00       	nop
    1054:	08 95       	ret

00001056 <QCset5V>:
    1056:	20 98       	cbi	0x04, 0	; 4
    1058:	29 98       	cbi	0x05, 1	; 5
    105a:	21 9a       	sbi	0x04, 1	; 4
    105c:	08 95       	ret

0000105e <usbQcInit>:
    105e:	0e 94 18 08 	call	0x1030	; 0x1030 <_handshake>
    1062:	0e 94 2b 08 	call	0x1056	; 0x1056 <QCset5V>
    1066:	08 95       	ret

00001068 <QCset12V>:
    1068:	20 98       	cbi	0x04, 0	; 4
    106a:	21 98       	cbi	0x04, 1	; 4
    106c:	08 95       	ret

0000106e <__divmodhi4>:
    106e:	97 fb       	bst	r25, 7
    1070:	07 2e       	mov	r0, r23
    1072:	16 f4       	brtc	.+4      	; 0x1078 <__divmodhi4+0xa>
    1074:	00 94       	com	r0
    1076:	07 d0       	rcall	.+14     	; 0x1086 <__divmodhi4_neg1>
    1078:	77 fd       	sbrc	r23, 7
    107a:	09 d0       	rcall	.+18     	; 0x108e <__divmodhi4_neg2>
    107c:	0e 94 4b 08 	call	0x1096	; 0x1096 <__udivmodhi4>
    1080:	07 fc       	sbrc	r0, 7
    1082:	05 d0       	rcall	.+10     	; 0x108e <__divmodhi4_neg2>
    1084:	3e f4       	brtc	.+14     	; 0x1094 <__divmodhi4_exit>

00001086 <__divmodhi4_neg1>:
    1086:	90 95       	com	r25
    1088:	81 95       	neg	r24
    108a:	9f 4f       	sbci	r25, 0xFF	; 255
    108c:	08 95       	ret

0000108e <__divmodhi4_neg2>:
    108e:	70 95       	com	r23
    1090:	61 95       	neg	r22
    1092:	7f 4f       	sbci	r23, 0xFF	; 255

00001094 <__divmodhi4_exit>:
    1094:	08 95       	ret

00001096 <__udivmodhi4>:
    1096:	aa 1b       	sub	r26, r26
    1098:	bb 1b       	sub	r27, r27
    109a:	51 e1       	ldi	r21, 0x11	; 17
    109c:	07 c0       	rjmp	.+14     	; 0x10ac <__udivmodhi4_ep>

0000109e <__udivmodhi4_loop>:
    109e:	aa 1f       	adc	r26, r26
    10a0:	bb 1f       	adc	r27, r27
    10a2:	a6 17       	cp	r26, r22
    10a4:	b7 07       	cpc	r27, r23
    10a6:	10 f0       	brcs	.+4      	; 0x10ac <__udivmodhi4_ep>
    10a8:	a6 1b       	sub	r26, r22
    10aa:	b7 0b       	sbc	r27, r23

000010ac <__udivmodhi4_ep>:
    10ac:	88 1f       	adc	r24, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	5a 95       	dec	r21
    10b2:	a9 f7       	brne	.-22     	; 0x109e <__udivmodhi4_loop>
    10b4:	80 95       	com	r24
    10b6:	90 95       	com	r25
    10b8:	bc 01       	movw	r22, r24
    10ba:	cd 01       	movw	r24, r26
    10bc:	08 95       	ret

000010be <do_rand>:
    10be:	8f 92       	push	r8
    10c0:	9f 92       	push	r9
    10c2:	af 92       	push	r10
    10c4:	bf 92       	push	r11
    10c6:	cf 92       	push	r12
    10c8:	df 92       	push	r13
    10ca:	ef 92       	push	r14
    10cc:	ff 92       	push	r15
    10ce:	cf 93       	push	r28
    10d0:	df 93       	push	r29
    10d2:	ec 01       	movw	r28, r24
    10d4:	68 81       	ld	r22, Y
    10d6:	79 81       	ldd	r23, Y+1	; 0x01
    10d8:	8a 81       	ldd	r24, Y+2	; 0x02
    10da:	9b 81       	ldd	r25, Y+3	; 0x03
    10dc:	61 15       	cp	r22, r1
    10de:	71 05       	cpc	r23, r1
    10e0:	81 05       	cpc	r24, r1
    10e2:	91 05       	cpc	r25, r1
    10e4:	21 f4       	brne	.+8      	; 0x10ee <do_rand+0x30>
    10e6:	64 e2       	ldi	r22, 0x24	; 36
    10e8:	79 ed       	ldi	r23, 0xD9	; 217
    10ea:	8b e5       	ldi	r24, 0x5B	; 91
    10ec:	97 e0       	ldi	r25, 0x07	; 7
    10ee:	2d e1       	ldi	r18, 0x1D	; 29
    10f0:	33 ef       	ldi	r19, 0xF3	; 243
    10f2:	41 e0       	ldi	r20, 0x01	; 1
    10f4:	50 e0       	ldi	r21, 0x00	; 0
    10f6:	0e 94 bb 08 	call	0x1176	; 0x1176 <__divmodsi4>
    10fa:	49 01       	movw	r8, r18
    10fc:	5a 01       	movw	r10, r20
    10fe:	9b 01       	movw	r18, r22
    1100:	ac 01       	movw	r20, r24
    1102:	a7 ea       	ldi	r26, 0xA7	; 167
    1104:	b1 e4       	ldi	r27, 0x41	; 65
    1106:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__muluhisi3>
    110a:	6b 01       	movw	r12, r22
    110c:	7c 01       	movw	r14, r24
    110e:	ac ee       	ldi	r26, 0xEC	; 236
    1110:	b4 ef       	ldi	r27, 0xF4	; 244
    1112:	a5 01       	movw	r20, r10
    1114:	94 01       	movw	r18, r8
    1116:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <__mulohisi3>
    111a:	dc 01       	movw	r26, r24
    111c:	cb 01       	movw	r24, r22
    111e:	8c 0d       	add	r24, r12
    1120:	9d 1d       	adc	r25, r13
    1122:	ae 1d       	adc	r26, r14
    1124:	bf 1d       	adc	r27, r15
    1126:	b7 ff       	sbrs	r27, 7
    1128:	03 c0       	rjmp	.+6      	; 0x1130 <do_rand+0x72>
    112a:	01 97       	sbiw	r24, 0x01	; 1
    112c:	a1 09       	sbc	r26, r1
    112e:	b0 48       	sbci	r27, 0x80	; 128
    1130:	88 83       	st	Y, r24
    1132:	99 83       	std	Y+1, r25	; 0x01
    1134:	aa 83       	std	Y+2, r26	; 0x02
    1136:	bb 83       	std	Y+3, r27	; 0x03
    1138:	9f 77       	andi	r25, 0x7F	; 127
    113a:	df 91       	pop	r29
    113c:	cf 91       	pop	r28
    113e:	ff 90       	pop	r15
    1140:	ef 90       	pop	r14
    1142:	df 90       	pop	r13
    1144:	cf 90       	pop	r12
    1146:	bf 90       	pop	r11
    1148:	af 90       	pop	r10
    114a:	9f 90       	pop	r9
    114c:	8f 90       	pop	r8
    114e:	08 95       	ret

00001150 <rand_r>:
    1150:	0e 94 5f 08 	call	0x10be	; 0x10be <do_rand>
    1154:	08 95       	ret

00001156 <rand>:
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	91 e0       	ldi	r25, 0x01	; 1
    115a:	0e 94 5f 08 	call	0x10be	; 0x10be <do_rand>
    115e:	08 95       	ret

00001160 <srand>:
    1160:	a0 e0       	ldi	r26, 0x00	; 0
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    1168:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    116c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    1170:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    1174:	08 95       	ret

00001176 <__divmodsi4>:
    1176:	05 2e       	mov	r0, r21
    1178:	97 fb       	bst	r25, 7
    117a:	1e f4       	brtc	.+6      	; 0x1182 <__divmodsi4+0xc>
    117c:	00 94       	com	r0
    117e:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <__negsi2>
    1182:	57 fd       	sbrc	r21, 7
    1184:	07 d0       	rcall	.+14     	; 0x1194 <__divmodsi4_neg2>
    1186:	0e 94 ed 08 	call	0x11da	; 0x11da <__udivmodsi4>
    118a:	07 fc       	sbrc	r0, 7
    118c:	03 d0       	rcall	.+6      	; 0x1194 <__divmodsi4_neg2>
    118e:	4e f4       	brtc	.+18     	; 0x11a2 <__divmodsi4_exit>
    1190:	0c 94 d2 08 	jmp	0x11a4	; 0x11a4 <__negsi2>

00001194 <__divmodsi4_neg2>:
    1194:	50 95       	com	r21
    1196:	40 95       	com	r20
    1198:	30 95       	com	r19
    119a:	21 95       	neg	r18
    119c:	3f 4f       	sbci	r19, 0xFF	; 255
    119e:	4f 4f       	sbci	r20, 0xFF	; 255
    11a0:	5f 4f       	sbci	r21, 0xFF	; 255

000011a2 <__divmodsi4_exit>:
    11a2:	08 95       	ret

000011a4 <__negsi2>:
    11a4:	90 95       	com	r25
    11a6:	80 95       	com	r24
    11a8:	70 95       	com	r23
    11aa:	61 95       	neg	r22
    11ac:	7f 4f       	sbci	r23, 0xFF	; 255
    11ae:	8f 4f       	sbci	r24, 0xFF	; 255
    11b0:	9f 4f       	sbci	r25, 0xFF	; 255
    11b2:	08 95       	ret

000011b4 <__muluhisi3>:
    11b4:	0e 94 0f 09 	call	0x121e	; 0x121e <__umulhisi3>
    11b8:	a5 9f       	mul	r26, r21
    11ba:	90 0d       	add	r25, r0
    11bc:	b4 9f       	mul	r27, r20
    11be:	90 0d       	add	r25, r0
    11c0:	a4 9f       	mul	r26, r20
    11c2:	80 0d       	add	r24, r0
    11c4:	91 1d       	adc	r25, r1
    11c6:	11 24       	eor	r1, r1
    11c8:	08 95       	ret

000011ca <__mulshisi3>:
    11ca:	b7 ff       	sbrs	r27, 7
    11cc:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__muluhisi3>

000011d0 <__mulohisi3>:
    11d0:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__muluhisi3>
    11d4:	82 1b       	sub	r24, r18
    11d6:	93 0b       	sbc	r25, r19
    11d8:	08 95       	ret

000011da <__udivmodsi4>:
    11da:	a1 e2       	ldi	r26, 0x21	; 33
    11dc:	1a 2e       	mov	r1, r26
    11de:	aa 1b       	sub	r26, r26
    11e0:	bb 1b       	sub	r27, r27
    11e2:	fd 01       	movw	r30, r26
    11e4:	0d c0       	rjmp	.+26     	; 0x1200 <__udivmodsi4_ep>

000011e6 <__udivmodsi4_loop>:
    11e6:	aa 1f       	adc	r26, r26
    11e8:	bb 1f       	adc	r27, r27
    11ea:	ee 1f       	adc	r30, r30
    11ec:	ff 1f       	adc	r31, r31
    11ee:	a2 17       	cp	r26, r18
    11f0:	b3 07       	cpc	r27, r19
    11f2:	e4 07       	cpc	r30, r20
    11f4:	f5 07       	cpc	r31, r21
    11f6:	20 f0       	brcs	.+8      	; 0x1200 <__udivmodsi4_ep>
    11f8:	a2 1b       	sub	r26, r18
    11fa:	b3 0b       	sbc	r27, r19
    11fc:	e4 0b       	sbc	r30, r20
    11fe:	f5 0b       	sbc	r31, r21

00001200 <__udivmodsi4_ep>:
    1200:	66 1f       	adc	r22, r22
    1202:	77 1f       	adc	r23, r23
    1204:	88 1f       	adc	r24, r24
    1206:	99 1f       	adc	r25, r25
    1208:	1a 94       	dec	r1
    120a:	69 f7       	brne	.-38     	; 0x11e6 <__udivmodsi4_loop>
    120c:	60 95       	com	r22
    120e:	70 95       	com	r23
    1210:	80 95       	com	r24
    1212:	90 95       	com	r25
    1214:	9b 01       	movw	r18, r22
    1216:	ac 01       	movw	r20, r24
    1218:	bd 01       	movw	r22, r26
    121a:	cf 01       	movw	r24, r30
    121c:	08 95       	ret

0000121e <__umulhisi3>:
    121e:	a2 9f       	mul	r26, r18
    1220:	b0 01       	movw	r22, r0
    1222:	b3 9f       	mul	r27, r19
    1224:	c0 01       	movw	r24, r0
    1226:	a3 9f       	mul	r26, r19
    1228:	70 0d       	add	r23, r0
    122a:	81 1d       	adc	r24, r1
    122c:	11 24       	eor	r1, r1
    122e:	91 1d       	adc	r25, r1
    1230:	b2 9f       	mul	r27, r18
    1232:	70 0d       	add	r23, r0
    1234:	81 1d       	adc	r24, r1
    1236:	11 24       	eor	r1, r1
    1238:	91 1d       	adc	r25, r1
    123a:	08 95       	ret

0000123c <_exit>:
    123c:	f8 94       	cli

0000123e <__stop_program>:
    123e:	ff cf       	rjmp	.-2      	; 0x123e <__stop_program>
