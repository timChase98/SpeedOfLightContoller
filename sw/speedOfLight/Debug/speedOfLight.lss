
speedOfLight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000170  00800100  0000192a  000019be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000192a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000035  00800270  00800270  00001b2e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001b2e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00001bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002166  00000000  00000000  00001d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e05  00000000  00000000  00003e8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001048  00000000  00000000  00004c8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000450  00000000  00000000  00005cd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000087a  00000000  00000000  00006128  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f29  00000000  00000000  000069a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000210  00000000  00000000  000078cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
       4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      38:	0c 94 17 02 	jmp	0x42e	; 0x42e <__vector_14>
      3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      44:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__vector_17>
      48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      84:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__vector_33>
      88:	0c 94 ac 01 	jmp	0x358	; 0x358 <__vector_34>
      8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a8:	0c 94 ba 02 	jmp	0x574	; 0x574 <__vector_42>
      ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	d8 e0       	ldi	r29, 0x08	; 8
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
      c0:	12 e0       	ldi	r17, 0x02	; 2
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	ea e2       	ldi	r30, 0x2A	; 42
      c8:	f9 e1       	ldi	r31, 0x19	; 25
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0
      d0:	a0 37       	cpi	r26, 0x70	; 112
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
      d6:	22 e0       	ldi	r18, 0x02	; 2
      d8:	a0 e7       	ldi	r26, 0x70	; 112
      da:	b2 e0       	ldi	r27, 0x02	; 2
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	a5 3a       	cpi	r26, 0xA5	; 165
      e2:	b2 07       	cpc	r27, r18
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
      e6:	0e 94 32 07 	call	0xe64	; 0xe64 <main>
      ea:	0c 94 93 0c 	jmp	0x1926	; 0x1926 <_exit>

000000ee <__bad_interrupt>:
      ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <spiSetup>:
	
}

void spiSetup(){
	// MOSI and SCK to outputs
	DDRB |= (1<<3)|(1<<5);
      f2:	84 b1       	in	r24, 0x04	; 4
      f4:	88 62       	ori	r24, 0x28	; 40
      f6:	84 b9       	out	0x04, r24	; 4
	// STC int enabled master mode, clk/16
	SPCR0 = (1 << SPIE) | (1 << SPE) | (1 << MSTR) | (1 << SPR0);
      f8:	81 ed       	ldi	r24, 0xD1	; 209
      fa:	8c bd       	out	0x2c, r24	; 44
      fc:	08 95       	ret

000000fe <tmrSetup>:
	// timer 3 is used to update the LED display as well as read the button matrix.
	// COMPA will trigger the next multiplexing cycle of the led matrices
	// COMPB will read the next line of buttons
	
	// CTC mode clk/1
	TCCR3B = (1 << WGM12) | (1 << CS11);
      fe:	8a e0       	ldi	r24, 0x0A	; 10
     100:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
	//OCR3A = 3700;
	OCR3A = 3000;
     104:	88 eb       	ldi	r24, 0xB8	; 184
     106:	9b e0       	ldi	r25, 0x0B	; 11
     108:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     10c:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	OCR3B = 1850;
     110:	8a e3       	ldi	r24, 0x3A	; 58
     112:	97 e0       	ldi	r25, 0x07	; 7
     114:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     118:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	TIMSK3 |= (1 << OCIE3B) | 1 << (OCIE3A);
     11c:	e1 e7       	ldi	r30, 0x71	; 113
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	80 81       	ld	r24, Z
     122:	86 60       	ori	r24, 0x06	; 6
     124:	80 83       	st	Z, r24
	TCNT3 = 0;
     126:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     12a:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
     12e:	08 95       	ret

00000130 <buttonsInit>:
0x7F, 0x67, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71, 0x00};


void buttonsInit(){
	// set DDR for button matrix
	DDRD = 0xFF;
     130:	8f ef       	ldi	r24, 0xFF	; 255
     132:	8a b9       	out	0x0a, r24	; 10
	PORTC = 0xFF;
     134:	88 b9       	out	0x08, r24	; 8
	
	// set DDR for latch and blank pins
	DDRB |= 1 << LED_L;
     136:	20 9a       	sbi	0x04, 0	; 4
	DDRE|= 1 << LED_B;
     138:	6b 9a       	sbi	0x0d, 3	; 13
	DDRE |= 1 << 2; // enable LEDs
     13a:	6a 9a       	sbi	0x0d, 2	; 13
	PORTE |= 1 << LED_B;
     13c:	73 9a       	sbi	0x0e, 3	; 14
	
	spiSetup();
     13e:	0e 94 79 00 	call	0xf2	; 0xf2 <spiSetup>
	tmrSetup();
     142:	0e 94 7f 00 	call	0xfe	; 0xfe <tmrSetup>
     146:	08 95       	ret

00000148 <isButtonDown>:
	TIMSK3 |= (1 << OCIE3B) | 1 << (OCIE3A);
	TCNT3 = 0;
}

uint8_t isButtonDown(uint8_t x, uint8_t y){
	return buttonMemory[x] & (1 << y); // may need to change to 1 << (5 - x) test this later
     148:	e8 2f       	mov	r30, r24
     14a:	f0 e0       	ldi	r31, 0x00	; 0
     14c:	e9 58       	subi	r30, 0x89	; 137
     14e:	fd 4f       	sbci	r31, 0xFD	; 253
     150:	20 81       	ld	r18, Z
     152:	81 e0       	ldi	r24, 0x01	; 1
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	02 c0       	rjmp	.+4      	; 0x15c <isButtonDown+0x14>
     158:	88 0f       	add	r24, r24
     15a:	99 1f       	adc	r25, r25
     15c:	6a 95       	dec	r22
     15e:	e2 f7       	brpl	.-8      	; 0x158 <isButtonDown+0x10>
}
     160:	82 23       	and	r24, r18
     162:	08 95       	ret

00000164 <setButtonLed>:

void setButtonLed(uint8_t x, uint8_t y, uint8_t value){
	if(value){
     164:	44 23       	and	r20, r20
     166:	89 f0       	breq	.+34     	; 0x18a <setButtonLed+0x26>
		ledMemory[9 + y] |= 1 << x;
     168:	e6 2f       	mov	r30, r22
     16a:	f0 e0       	ldi	r31, 0x00	; 0
     16c:	ed 5e       	subi	r30, 0xED	; 237
     16e:	fe 4f       	sbci	r31, 0xFE	; 254
     170:	40 81       	ld	r20, Z
     172:	21 e0       	ldi	r18, 0x01	; 1
     174:	30 e0       	ldi	r19, 0x00	; 0
     176:	b9 01       	movw	r22, r18
     178:	02 c0       	rjmp	.+4      	; 0x17e <setButtonLed+0x1a>
     17a:	66 0f       	add	r22, r22
     17c:	77 1f       	adc	r23, r23
     17e:	8a 95       	dec	r24
     180:	e2 f7       	brpl	.-8      	; 0x17a <setButtonLed+0x16>
     182:	cb 01       	movw	r24, r22
     184:	84 2b       	or	r24, r20
     186:	80 83       	st	Z, r24
		return;
     188:	08 95       	ret
	}
	ledMemory[9 + y] &= ~(1 << x);
     18a:	e6 2f       	mov	r30, r22
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	ed 5e       	subi	r30, 0xED	; 237
     190:	fe 4f       	sbci	r31, 0xFE	; 254
     192:	40 81       	ld	r20, Z
     194:	21 e0       	ldi	r18, 0x01	; 1
     196:	30 e0       	ldi	r19, 0x00	; 0
     198:	b9 01       	movw	r22, r18
     19a:	02 c0       	rjmp	.+4      	; 0x1a0 <setButtonLed+0x3c>
     19c:	66 0f       	add	r22, r22
     19e:	77 1f       	adc	r23, r23
     1a0:	8a 95       	dec	r24
     1a2:	e2 f7       	brpl	.-8      	; 0x19c <setButtonLed+0x38>
     1a4:	cb 01       	movw	r24, r22
     1a6:	80 95       	com	r24
     1a8:	84 23       	and	r24, r20
     1aa:	80 83       	st	Z, r24
     1ac:	08 95       	ret

000001ae <setScore>:
	
}

void setScore(uint8_t display, uint16_t value){
     1ae:	08 95       	ret

000001b0 <__vector_33>:
	
}


ISR(TIMER3_COMPA_vect){
     1b0:	1f 92       	push	r1
     1b2:	0f 92       	push	r0
     1b4:	0f b6       	in	r0, 0x3f	; 63
     1b6:	0f 92       	push	r0
     1b8:	11 24       	eor	r1, r1
     1ba:	2f 93       	push	r18
     1bc:	3f 93       	push	r19
     1be:	4f 93       	push	r20
     1c0:	5f 93       	push	r21
     1c2:	6f 93       	push	r22
     1c4:	7f 93       	push	r23
     1c6:	8f 93       	push	r24
     1c8:	9f 93       	push	r25
     1ca:	af 93       	push	r26
     1cc:	bf 93       	push	r27
     1ce:	ef 93       	push	r30
     1d0:	ff 93       	push	r31
	// the row is in the lower nibble and column data is in the upper nibble
	// for each row the two registers need to be set and the other two need to be cleared
	
	// ledData for the matrices are stored as a byte array of the column data
	
	if (muxCounter < 3)
     1d2:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <muxCounter>
     1d6:	83 30       	cpi	r24, 0x03	; 3
     1d8:	90 f5       	brcc	.+100    	; 0x23e <__vector_33+0x8e>
	{
		ledData[3] = ((1 << muxCounter)) | ((ledMemory[9 + muxCounter] & 0b00000111)<<4);
     1da:	40 91 71 02 	lds	r20, 0x0271	; 0x800271 <muxCounter>
     1de:	e0 91 71 02 	lds	r30, 0x0271	; 0x800271 <muxCounter>
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	ed 5e       	subi	r30, 0xED	; 237
     1e6:	fe 4f       	sbci	r31, 0xFE	; 254
     1e8:	20 81       	ld	r18, Z
     1ea:	27 70       	andi	r18, 0x07	; 7
     1ec:	60 e1       	ldi	r22, 0x10	; 16
     1ee:	26 9f       	mul	r18, r22
     1f0:	90 01       	movw	r18, r0
     1f2:	11 24       	eor	r1, r1
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	bc 01       	movw	r22, r24
     1fa:	02 c0       	rjmp	.+4      	; 0x200 <__vector_33+0x50>
     1fc:	66 0f       	add	r22, r22
     1fe:	77 1f       	adc	r23, r23
     200:	4a 95       	dec	r20
     202:	e2 f7       	brpl	.-8      	; 0x1fc <__vector_33+0x4c>
     204:	26 2b       	or	r18, r22
     206:	a4 e0       	ldi	r26, 0x04	; 4
     208:	b1 e0       	ldi	r27, 0x01	; 1
     20a:	13 96       	adiw	r26, 0x03	; 3
     20c:	2c 93       	st	X, r18
     20e:	13 97       	sbiw	r26, 0x03	; 3
		ledData[0] = 0;
     210:	1c 92       	st	X, r1
		ledData[1] = 0;
     212:	11 96       	adiw	r26, 0x01	; 1
     214:	1c 92       	st	X, r1
     216:	11 97       	sbiw	r26, 0x01	; 1
		ledData[2] = ((1 << muxCounter)) | ((ledMemory[9 + muxCounter] & 0b00111000)<<1);
     218:	30 91 71 02 	lds	r19, 0x0271	; 0x800271 <muxCounter>
     21c:	e0 91 71 02 	lds	r30, 0x0271	; 0x800271 <muxCounter>
     220:	f0 e0       	ldi	r31, 0x00	; 0
     222:	ed 5e       	subi	r30, 0xED	; 237
     224:	fe 4f       	sbci	r31, 0xFE	; 254
     226:	20 81       	ld	r18, Z
     228:	28 73       	andi	r18, 0x38	; 56
     22a:	22 0f       	add	r18, r18
     22c:	02 c0       	rjmp	.+4      	; 0x232 <__vector_33+0x82>
     22e:	88 0f       	add	r24, r24
     230:	99 1f       	adc	r25, r25
     232:	3a 95       	dec	r19
     234:	e2 f7       	brpl	.-8      	; 0x22e <__vector_33+0x7e>
     236:	82 2b       	or	r24, r18
     238:	12 96       	adiw	r26, 0x02	; 2
     23a:	8c 93       	st	X, r24
     23c:	33 c0       	rjmp	.+102    	; 0x2a4 <__vector_33+0xf4>
	}
	else{
		ledData[3] = 0;
     23e:	a4 e0       	ldi	r26, 0x04	; 4
     240:	b1 e0       	ldi	r27, 0x01	; 1
     242:	13 96       	adiw	r26, 0x03	; 3
     244:	1c 92       	st	X, r1
     246:	13 97       	sbiw	r26, 0x03	; 3
		ledData[0] = ((1 << (muxCounter-3))) | ((ledMemory[9 + muxCounter] & 0b00000111)<<4);
     248:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <muxCounter>
     24c:	e0 91 71 02 	lds	r30, 0x0271	; 0x800271 <muxCounter>
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	ed 5e       	subi	r30, 0xED	; 237
     254:	fe 4f       	sbci	r31, 0xFE	; 254
     256:	90 81       	ld	r25, Z
     258:	83 50       	subi	r24, 0x03	; 3
     25a:	21 e0       	ldi	r18, 0x01	; 1
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	a9 01       	movw	r20, r18
     260:	02 c0       	rjmp	.+4      	; 0x266 <__vector_33+0xb6>
     262:	44 0f       	add	r20, r20
     264:	55 1f       	adc	r21, r21
     266:	8a 95       	dec	r24
     268:	e2 f7       	brpl	.-8      	; 0x262 <__vector_33+0xb2>
     26a:	97 70       	andi	r25, 0x07	; 7
     26c:	70 e1       	ldi	r23, 0x10	; 16
     26e:	97 9f       	mul	r25, r23
     270:	c0 01       	movw	r24, r0
     272:	11 24       	eor	r1, r1
     274:	84 2b       	or	r24, r20
     276:	8c 93       	st	X, r24
		ledData[1] = ((1 << (muxCounter-3))) | ((ledMemory[9 + muxCounter] & 0b00111000)<<1);
     278:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <muxCounter>
     27c:	e0 91 71 02 	lds	r30, 0x0271	; 0x800271 <muxCounter>
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	ed 5e       	subi	r30, 0xED	; 237
     284:	fe 4f       	sbci	r31, 0xFE	; 254
     286:	80 81       	ld	r24, Z
     288:	93 50       	subi	r25, 0x03	; 3
     28a:	02 c0       	rjmp	.+4      	; 0x290 <__vector_33+0xe0>
     28c:	22 0f       	add	r18, r18
     28e:	33 1f       	adc	r19, r19
     290:	9a 95       	dec	r25
     292:	e2 f7       	brpl	.-8      	; 0x28c <__vector_33+0xdc>
     294:	88 73       	andi	r24, 0x38	; 56
     296:	88 0f       	add	r24, r24
     298:	28 2b       	or	r18, r24
     29a:	11 96       	adiw	r26, 0x01	; 1
     29c:	2c 93       	st	X, r18
     29e:	11 97       	sbiw	r26, 0x01	; 1
		ledData[2] = 0;
     2a0:	12 96       	adiw	r26, 0x02	; 2
     2a2:	1c 92       	st	X, r1
	}
	
	muxCounter = (muxCounter + 1) % 6;
     2a4:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <muxCounter>
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	01 96       	adiw	r24, 0x01	; 1
     2ac:	66 e0       	ldi	r22, 0x06	; 6
     2ae:	70 e0       	ldi	r23, 0x00	; 0
     2b0:	0e 94 9e 08 	call	0x113c	; 0x113c <__divmodhi4>
     2b4:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <muxCounter>
	
	// calculate data for score display
	
	ledData[5] = sevenSegmentDecode[ledMemory[scoreDigitCounter]];
     2b8:	e0 91 72 02 	lds	r30, 0x0272	; 0x800272 <scoreDigitCounter>
     2bc:	f0 e0       	ldi	r31, 0x00	; 0
     2be:	e6 5f       	subi	r30, 0xF6	; 246
     2c0:	fe 4f       	sbci	r31, 0xFE	; 254
     2c2:	e0 81       	ld	r30, Z
     2c4:	f0 e0       	ldi	r31, 0x00	; 0
     2c6:	e9 5d       	subi	r30, 0xD9	; 217
     2c8:	fe 4f       	sbci	r31, 0xFE	; 254
     2ca:	80 81       	ld	r24, Z
     2cc:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <ledData+0x5>
	if (scoreDigitCounter == 0){
     2d0:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <scoreDigitCounter>
     2d4:	81 11       	cpse	r24, r1
     2d6:	07 c0       	rjmp	.+14     	; 0x2e6 <__vector_33+0x136>
		ledData[5] |= 1 << 7; // set MSB for D0
     2d8:	e4 e0       	ldi	r30, 0x04	; 4
     2da:	f1 e0       	ldi	r31, 0x01	; 1
     2dc:	85 81       	ldd	r24, Z+5	; 0x05
     2de:	80 68       	ori	r24, 0x80	; 128
     2e0:	85 83       	std	Z+5, r24	; 0x05
		ledData[4] = 0;
     2e2:	14 82       	std	Z+4, r1	; 0x04
     2e4:	0c c0       	rjmp	.+24     	; 0x2fe <__vector_33+0x14e>
	}
	else{
		ledData[4] = 1 << (scoreDigitCounter - 1);
     2e6:	20 91 72 02 	lds	r18, 0x0272	; 0x800272 <scoreDigitCounter>
     2ea:	21 50       	subi	r18, 0x01	; 1
     2ec:	81 e0       	ldi	r24, 0x01	; 1
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <__vector_33+0x146>
     2f2:	88 0f       	add	r24, r24
     2f4:	99 1f       	adc	r25, r25
     2f6:	2a 95       	dec	r18
     2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <__vector_33+0x142>
     2fa:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <ledData+0x4>
	}

	scoreDigitCounter = (scoreDigitCounter + 1) % 9;
     2fe:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <scoreDigitCounter>
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	01 96       	adiw	r24, 0x01	; 1
     306:	69 e0       	ldi	r22, 0x09	; 9
     308:	70 e0       	ldi	r23, 0x00	; 0
     30a:	0e 94 9e 08 	call	0x113c	; 0x113c <__divmodhi4>
     30e:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <scoreDigitCounter>
	

	// clear contents of shift register and latch
	PORTB &= ~(1 << LED_L); // set led latch low
     312:	28 98       	cbi	0x05, 0	; 5
	PORTE &= ~(1 << LED_B); // blank leds
     314:	73 98       	cbi	0x0e, 3	; 14
	PORTB |= (1 << LED_L); // set led latch high
     316:	28 9a       	sbi	0x05, 0	; 5
	PORTE |= (1 << LED_B); // unblank leds
     318:	73 9a       	sbi	0x0e, 3	; 14
	PORTB &= ~(1 << LED_L); // set led latch low
     31a:	28 98       	cbi	0x05, 0	; 5
	spiByteCounter = 0;
     31c:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <__data_end>
	SPDR0 = ledData[spiByteCounter++];
     320:	e0 91 70 02 	lds	r30, 0x0270	; 0x800270 <__data_end>
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	8e 0f       	add	r24, r30
     328:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <__data_end>
     32c:	f0 e0       	ldi	r31, 0x00	; 0
     32e:	ec 5f       	subi	r30, 0xFC	; 252
     330:	fe 4f       	sbci	r31, 0xFE	; 254
     332:	80 81       	ld	r24, Z
     334:	8e bd       	out	0x2e, r24	; 46
}
     336:	ff 91       	pop	r31
     338:	ef 91       	pop	r30
     33a:	bf 91       	pop	r27
     33c:	af 91       	pop	r26
     33e:	9f 91       	pop	r25
     340:	8f 91       	pop	r24
     342:	7f 91       	pop	r23
     344:	6f 91       	pop	r22
     346:	5f 91       	pop	r21
     348:	4f 91       	pop	r20
     34a:	3f 91       	pop	r19
     34c:	2f 91       	pop	r18
     34e:	0f 90       	pop	r0
     350:	0f be       	out	0x3f, r0	; 63
     352:	0f 90       	pop	r0
     354:	1f 90       	pop	r1
     356:	18 95       	reti

00000358 <__vector_34>:
	PORTD = 0xFF; 
	buttonMemory[muxCounter] = ~PINC;
	
}*/

ISR(TIMER3_COMPB_vect){
     358:	1f 92       	push	r1
     35a:	0f 92       	push	r0
     35c:	0f b6       	in	r0, 0x3f	; 63
     35e:	0f 92       	push	r0
     360:	11 24       	eor	r1, r1
     362:	2f 93       	push	r18
     364:	3f 93       	push	r19
     366:	8f 93       	push	r24
     368:	9f 93       	push	r25
     36a:	ef 93       	push	r30
     36c:	ff 93       	push	r31
	DDRD &= ~(1<<(muxCounter+2));
	buttonMemory[muxCounter] = ~PINC; 
	DDRD = 0xFF; 
	*/
	
	DDRD = 0xFF;
     36e:	3f ef       	ldi	r19, 0xFF	; 255
     370:	3a b9       	out	0x0a, r19	; 10
	DDRC = 0x00;
     372:	17 b8       	out	0x07, r1	; 7
	
	PORTD = ~(1<<(muxCounter+2));
     374:	20 91 71 02 	lds	r18, 0x0271	; 0x800271 <muxCounter>
     378:	2e 5f       	subi	r18, 0xFE	; 254
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__vector_34+0x2c>
     380:	88 0f       	add	r24, r24
     382:	99 1f       	adc	r25, r25
     384:	2a 95       	dec	r18
     386:	e2 f7       	brpl	.-8      	; 0x380 <__vector_34+0x28>
     388:	80 95       	com	r24
     38a:	8b b9       	out	0x0b, r24	; 11
	buttonMemory[muxCounter] = ~PINC;
     38c:	e0 91 71 02 	lds	r30, 0x0271	; 0x800271 <muxCounter>
     390:	f0 e0       	ldi	r31, 0x00	; 0
     392:	86 b1       	in	r24, 0x06	; 6
     394:	80 95       	com	r24
     396:	e9 58       	subi	r30, 0x89	; 137
     398:	fd 4f       	sbci	r31, 0xFD	; 253
     39a:	80 83       	st	Z, r24
	PORTD = 0xFF;
     39c:	3b b9       	out	0x0b, r19	; 11
}
     39e:	ff 91       	pop	r31
     3a0:	ef 91       	pop	r30
     3a2:	9f 91       	pop	r25
     3a4:	8f 91       	pop	r24
     3a6:	3f 91       	pop	r19
     3a8:	2f 91       	pop	r18
     3aa:	0f 90       	pop	r0
     3ac:	0f be       	out	0x3f, r0	; 63
     3ae:	0f 90       	pop	r0
     3b0:	1f 90       	pop	r1
     3b2:	18 95       	reti

000003b4 <__vector_17>:

ISR(SPI0_STC_vect){
     3b4:	1f 92       	push	r1
     3b6:	0f 92       	push	r0
     3b8:	0f b6       	in	r0, 0x3f	; 63
     3ba:	0f 92       	push	r0
     3bc:	11 24       	eor	r1, r1
     3be:	8f 93       	push	r24
     3c0:	ef 93       	push	r30
     3c2:	ff 93       	push	r31
	if (spiByteCounter >= 6){
     3c4:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <__data_end>
     3c8:	86 30       	cpi	r24, 0x06	; 6
     3ca:	10 f0       	brcs	.+4      	; 0x3d0 <__vector_17+0x1c>
		PORTB |= 1 << LED_L; // set led latch high
     3cc:	28 9a       	sbi	0x05, 0	; 5
		return;
     3ce:	0b c0       	rjmp	.+22     	; 0x3e6 <__vector_17+0x32>
	}
	SPDR0 = ledData[spiByteCounter++];
     3d0:	e0 91 70 02 	lds	r30, 0x0270	; 0x800270 <__data_end>
     3d4:	81 e0       	ldi	r24, 0x01	; 1
     3d6:	8e 0f       	add	r24, r30
     3d8:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <__data_end>
     3dc:	f0 e0       	ldi	r31, 0x00	; 0
     3de:	ec 5f       	subi	r30, 0xFC	; 252
     3e0:	fe 4f       	sbci	r31, 0xFE	; 254
     3e2:	80 81       	ld	r24, Z
     3e4:	8e bd       	out	0x2e, r24	; 46
}
     3e6:	ff 91       	pop	r31
     3e8:	ef 91       	pop	r30
     3ea:	8f 91       	pop	r24
     3ec:	0f 90       	pop	r0
     3ee:	0f be       	out	0x3f, r0	; 63
     3f0:	0f 90       	pop	r0
     3f2:	1f 90       	pop	r1
     3f4:	18 95       	reti

000003f6 <uart_putchar>:

static int uart_putchar(char c, FILE *stream);
static FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);

static int uart_putchar(char c, FILE *stream)
{
     3f6:	cf 93       	push	r28
     3f8:	c8 2f       	mov	r28, r24
	if (c == '\n')
     3fa:	8a 30       	cpi	r24, 0x0A	; 10
     3fc:	19 f4       	brne	.+6      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	uart_putchar('\r', stream);
     3fe:	8d e0       	ldi	r24, 0x0D	; 13
     400:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <uart_putchar>
	while(!(UCSR0A &( 1 << UDRE0)));
     404:	e0 ec       	ldi	r30, 0xC0	; 192
     406:	f0 e0       	ldi	r31, 0x00	; 0
     408:	80 81       	ld	r24, Z
     40a:	85 ff       	sbrs	r24, 5
     40c:	fd cf       	rjmp	.-6      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
	UDR0 = c;
     40e:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	return 0;
}
     412:	80 e0       	ldi	r24, 0x00	; 0
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	cf 91       	pop	r28
     418:	08 95       	ret

0000041a <init_uart>:

void init_uart(){
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     41a:	88 e1       	ldi	r24, 0x18	; 24
     41c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (3<<UCSZ00);
     420:	86 e0       	ldi	r24, 0x06	; 6
     422:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0L = 51;
     426:	83 e3       	ldi	r24, 0x33	; 51
     428:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     42c:	08 95       	ret

0000042e <__vector_14>:

	}
}

ISR(TIMER0_COMPA_vect)		// audio interrupt
{
     42e:	1f 92       	push	r1
     430:	0f 92       	push	r0
     432:	0f b6       	in	r0, 0x3f	; 63
     434:	0f 92       	push	r0
     436:	11 24       	eor	r1, r1
     438:	8f 93       	push	r24
     43a:	9f 93       	push	r25
     43c:	ef 93       	push	r30
     43e:	ff 93       	push	r31
	switch(note_index)
     440:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <note_index>
     444:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <note_index+0x1>
     448:	86 30       	cpi	r24, 0x06	; 6
     44a:	91 05       	cpc	r25, r1
     44c:	09 f4       	brne	.+2      	; 0x450 <__vector_14+0x22>
     44e:	4e c0       	rjmp	.+156    	; 0x4ec <__vector_14+0xbe>
     450:	30 f4       	brcc	.+12     	; 0x45e <__vector_14+0x30>
     452:	81 30       	cpi	r24, 0x01	; 1
     454:	91 05       	cpc	r25, r1
     456:	61 f0       	breq	.+24     	; 0x470 <__vector_14+0x42>
     458:	03 97       	sbiw	r24, 0x03	; 3
     45a:	49 f1       	breq	.+82     	; 0x4ae <__vector_14+0x80>
     45c:	79 c0       	rjmp	.+242    	; 0x550 <__vector_14+0x122>
     45e:	8e 30       	cpi	r24, 0x0E	; 14
     460:	91 05       	cpc	r25, r1
     462:	09 f4       	brne	.+2      	; 0x466 <__vector_14+0x38>
     464:	62 c0       	rjmp	.+196    	; 0x52a <__vector_14+0xfc>
     466:	80 34       	cpi	r24, 0x40	; 64
     468:	91 05       	cpc	r25, r1
     46a:	09 f4       	brne	.+2      	; 0x46e <__vector_14+0x40>
     46c:	63 c0       	rjmp	.+198    	; 0x534 <__vector_14+0x106>
     46e:	70 c0       	rjmp	.+224    	; 0x550 <__vector_14+0x122>
	{	//every 8ms
		case 0+1:	//0ms, 8ms on
		ICR1 = notes[beep_index];	//1st note
     470:	e0 91 75 02 	lds	r30, 0x0275	; 0x800275 <beep_index>
     474:	f0 91 76 02 	lds	r31, 0x0276	; 0x800276 <beep_index+0x1>
     478:	ee 0f       	add	r30, r30
     47a:	ff 1f       	adc	r31, r31
     47c:	e8 5a       	subi	r30, 0xA8	; 168
     47e:	fd 4f       	sbci	r31, 0xFD	; 253
     480:	80 81       	ld	r24, Z
     482:	91 81       	ldd	r25, Z+1	; 0x01
     484:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     488:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		OCR1A = notes[beep_index]/2;
     48c:	e0 91 75 02 	lds	r30, 0x0275	; 0x800275 <beep_index>
     490:	f0 91 76 02 	lds	r31, 0x0276	; 0x800276 <beep_index+0x1>
     494:	ee 0f       	add	r30, r30
     496:	ff 1f       	adc	r31, r31
     498:	e8 5a       	subi	r30, 0xA8	; 168
     49a:	fd 4f       	sbci	r31, 0xFD	; 253
     49c:	80 81       	ld	r24, Z
     49e:	91 81       	ldd	r25, Z+1	; 0x01
     4a0:	96 95       	lsr	r25
     4a2:	87 95       	ror	r24
     4a4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     4a8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		break;
     4ac:	51 c0       	rjmp	.+162    	; 0x550 <__vector_14+0x122>
		case 2+1:	// 16ms, 24, 32 on
		ICR1 = notes[beep_index+1];	//2nd note
     4ae:	e0 91 75 02 	lds	r30, 0x0275	; 0x800275 <beep_index>
     4b2:	f0 91 76 02 	lds	r31, 0x0276	; 0x800276 <beep_index+0x1>
     4b6:	ee 0f       	add	r30, r30
     4b8:	ff 1f       	adc	r31, r31
     4ba:	e6 5a       	subi	r30, 0xA6	; 166
     4bc:	fd 4f       	sbci	r31, 0xFD	; 253
     4be:	80 81       	ld	r24, Z
     4c0:	91 81       	ldd	r25, Z+1	; 0x01
     4c2:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     4c6:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		OCR1A = notes[beep_index]/2;
     4ca:	e0 91 75 02 	lds	r30, 0x0275	; 0x800275 <beep_index>
     4ce:	f0 91 76 02 	lds	r31, 0x0276	; 0x800276 <beep_index+0x1>
     4d2:	ee 0f       	add	r30, r30
     4d4:	ff 1f       	adc	r31, r31
     4d6:	e8 5a       	subi	r30, 0xA8	; 168
     4d8:	fd 4f       	sbci	r31, 0xFD	; 253
     4da:	80 81       	ld	r24, Z
     4dc:	91 81       	ldd	r25, Z+1	; 0x01
     4de:	96 95       	lsr	r25
     4e0:	87 95       	ror	r24
     4e2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     4e6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		break;
     4ea:	32 c0       	rjmp	.+100    	; 0x550 <__vector_14+0x122>
		case 5+1:	// 40ms, 48, 56, 64, 72, 80, 88, 96, on
		ICR1 = notes[beep_index+2];	// 3rd note
     4ec:	e0 91 75 02 	lds	r30, 0x0275	; 0x800275 <beep_index>
     4f0:	f0 91 76 02 	lds	r31, 0x0276	; 0x800276 <beep_index+0x1>
     4f4:	ee 0f       	add	r30, r30
     4f6:	ff 1f       	adc	r31, r31
     4f8:	e4 5a       	subi	r30, 0xA4	; 164
     4fa:	fd 4f       	sbci	r31, 0xFD	; 253
     4fc:	80 81       	ld	r24, Z
     4fe:	91 81       	ldd	r25, Z+1	; 0x01
     500:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     504:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		OCR1A = notes[beep_index]/2;
     508:	e0 91 75 02 	lds	r30, 0x0275	; 0x800275 <beep_index>
     50c:	f0 91 76 02 	lds	r31, 0x0276	; 0x800276 <beep_index+0x1>
     510:	ee 0f       	add	r30, r30
     512:	ff 1f       	adc	r31, r31
     514:	e8 5a       	subi	r30, 0xA8	; 168
     516:	fd 4f       	sbci	r31, 0xFD	; 253
     518:	80 81       	ld	r24, Z
     51a:	91 81       	ldd	r25, Z+1	; 0x01
     51c:	96 95       	lsr	r25
     51e:	87 95       	ror	r24
     520:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     524:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		break;
     528:	13 c0       	rjmp	.+38     	; 0x550 <__vector_14+0x122>
		case 13+1:
		//ICR1 = 0;					//off
		OCR1A = 0;
     52a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     52e:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		break;
     532:	0e c0       	rjmp	.+28     	; 0x550 <__vector_14+0x122>
		
		case 63+1:
		beep_index = 0;
     534:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <beep_index+0x1>
     538:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <beep_index>
		note_index = -1;
     53c:	8f ef       	ldi	r24, 0xFF	; 255
     53e:	9f ef       	ldi	r25, 0xFF	; 255
     540:	90 93 74 02 	sts	0x0274, r25	; 0x800274 <note_index+0x1>
     544:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <note_index>
		TCCR0B &= ~(0b101 << CS00);
     548:	85 b5       	in	r24, 0x25	; 37
     54a:	8a 7f       	andi	r24, 0xFA	; 250
     54c:	85 bd       	out	0x25, r24	; 37
		TCNT0 = 0;
     54e:	16 bc       	out	0x26, r1	; 38
		break;
	}
	note_index += 1;
     550:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <note_index>
     554:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <note_index+0x1>
     558:	01 96       	adiw	r24, 0x01	; 1
     55a:	90 93 74 02 	sts	0x0274, r25	; 0x800274 <note_index+0x1>
     55e:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <note_index>
}
     562:	ff 91       	pop	r31
     564:	ef 91       	pop	r30
     566:	9f 91       	pop	r25
     568:	8f 91       	pop	r24
     56a:	0f 90       	pop	r0
     56c:	0f be       	out	0x3f, r0	; 63
     56e:	0f 90       	pop	r0
     570:	1f 90       	pop	r1
     572:	18 95       	reti

00000574 <__vector_42>:

ISR(TIMER4_COMPA_vect){		// use timer 4 for decreasing game time every 1s
     574:	1f 92       	push	r1
     576:	0f 92       	push	r0
     578:	0f b6       	in	r0, 0x3f	; 63
     57a:	0f 92       	push	r0
     57c:	11 24       	eor	r1, r1
     57e:	8f 93       	push	r24
	if(TimeRemaining > 0){
     580:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <TimeRemaining>
     584:	88 23       	and	r24, r24
     586:	29 f0       	breq	.+10     	; 0x592 <__vector_42+0x1e>
		TimeRemaining--;
     588:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <TimeRemaining>
     58c:	81 50       	subi	r24, 0x01	; 1
     58e:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <TimeRemaining>
	}
}
     592:	8f 91       	pop	r24
     594:	0f 90       	pop	r0
     596:	0f be       	out	0x3f, r0	; 63
     598:	0f 90       	pop	r0
     59a:	1f 90       	pop	r1
     59c:	18 95       	reti

0000059e <ShowWinner>:
	EndAttract:
	return;		// start the game

}

void ShowWinner(){
     59e:	cf 92       	push	r12
     5a0:	df 92       	push	r13
     5a2:	ef 92       	push	r14
     5a4:	ff 92       	push	r15
     5a6:	0f 93       	push	r16
     5a8:	1f 93       	push	r17
     5aa:	cf 93       	push	r28
     5ac:	df 93       	push	r29
	
	for(uint8_t i = 0; i < 30; i++){
     5ae:	c0 e0       	ldi	r28, 0x00	; 0
		setButtonLed(i % 6, i / 5, 0); // TODO VERIFY THIS WORKS, turn all leds on
     5b0:	1d ec       	ldi	r17, 0xCD	; 205
     5b2:	db ea       	ldi	r29, 0xAB	; 171
     5b4:	c1 9f       	mul	r28, r17
     5b6:	61 2d       	mov	r22, r1
     5b8:	11 24       	eor	r1, r1
     5ba:	66 95       	lsr	r22
     5bc:	66 95       	lsr	r22
     5be:	cd 9f       	mul	r28, r29
     5c0:	81 2d       	mov	r24, r1
     5c2:	11 24       	eor	r1, r1
     5c4:	86 95       	lsr	r24
     5c6:	86 95       	lsr	r24
     5c8:	98 2f       	mov	r25, r24
     5ca:	99 0f       	add	r25, r25
     5cc:	89 0f       	add	r24, r25
     5ce:	88 0f       	add	r24, r24
     5d0:	40 e0       	ldi	r20, 0x00	; 0
     5d2:	2c 2f       	mov	r18, r28
     5d4:	28 1b       	sub	r18, r24
     5d6:	82 2f       	mov	r24, r18
     5d8:	0e 94 b2 00 	call	0x164	; 0x164 <setButtonLed>

}

void ShowWinner(){
	
	for(uint8_t i = 0; i < 30; i++){
     5dc:	cf 5f       	subi	r28, 0xFF	; 255
     5de:	ce 31       	cpi	r28, 0x1E	; 30
     5e0:	49 f7       	brne	.-46     	; 0x5b4 <ShowWinner+0x16>
		setButtonLed(i % 6, i / 5, 0); // TODO VERIFY THIS WORKS, turn all leds on
	}								 //blank screen
	
	if(GameMode == 0){
     5e2:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <GameMode>
     5e6:	81 11       	cpse	r24, r1
     5e8:	67 c0       	rjmp	.+206    	; 0x6b8 <ShowWinner+0x11a>
     5ea:	68 94       	set
     5ec:	ff 24       	eor	r15, r15
     5ee:	f3 f8       	bld	r15, 3
		for(uint8_t count = 0; count < 8; count++){			// flash whole screen
			setScore(0, HighScore1P);
			setScore(2, HighScore1P);
			
			for(uint8_t i = 0; i < 30; i++){
				setButtonLed(i % 6, i / 5, i%2); // TODO VERIFY THIS WORKS, turn all leds on
     5f0:	1d ec       	ldi	r17, 0xCD	; 205
     5f2:	db ea       	ldi	r29, 0xAB	; 171
			_delay_ms(250);
			setScore(0, 0);	// TODO TURN SEGMENTS OFF
			setScore(2, 0);
			
			for(uint8_t i = 0; i < 30; i++){
				setButtonLed(i % 6, i / 5, 1 - (i%2)); // TODO VERIFY THIS WORKS, turn all leds on
     5f4:	01 e0       	ldi	r16, 0x01	; 1
		setButtonLed(i % 6, i / 5, 0); // TODO VERIFY THIS WORKS, turn all leds on
	}								 //blank screen
	
	if(GameMode == 0){
		for(uint8_t count = 0; count < 8; count++){			// flash whole screen
			setScore(0, HighScore1P);
     5f6:	60 91 8c 02 	lds	r22, 0x028C	; 0x80028c <HighScore1P>
     5fa:	70 91 8d 02 	lds	r23, 0x028D	; 0x80028d <HighScore1P+0x1>
     5fe:	80 e0       	ldi	r24, 0x00	; 0
     600:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
			setScore(2, HighScore1P);
     604:	60 91 8c 02 	lds	r22, 0x028C	; 0x80028c <HighScore1P>
     608:	70 91 8d 02 	lds	r23, 0x028D	; 0x80028d <HighScore1P+0x1>
     60c:	82 e0       	ldi	r24, 0x02	; 2
     60e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
			
			for(uint8_t i = 0; i < 30; i++){
     612:	c0 e0       	ldi	r28, 0x00	; 0
				setButtonLed(i % 6, i / 5, i%2); // TODO VERIFY THIS WORKS, turn all leds on
     614:	4c 2f       	mov	r20, r28
     616:	41 70       	andi	r20, 0x01	; 1
     618:	c1 9f       	mul	r28, r17
     61a:	61 2d       	mov	r22, r1
     61c:	11 24       	eor	r1, r1
     61e:	66 95       	lsr	r22
     620:	66 95       	lsr	r22
     622:	cd 9f       	mul	r28, r29
     624:	81 2d       	mov	r24, r1
     626:	11 24       	eor	r1, r1
     628:	86 95       	lsr	r24
     62a:	86 95       	lsr	r24
     62c:	98 2f       	mov	r25, r24
     62e:	99 0f       	add	r25, r25
     630:	89 0f       	add	r24, r25
     632:	88 0f       	add	r24, r24
     634:	9c 2f       	mov	r25, r28
     636:	98 1b       	sub	r25, r24
     638:	89 2f       	mov	r24, r25
     63a:	0e 94 b2 00 	call	0x164	; 0x164 <setButtonLed>
	if(GameMode == 0){
		for(uint8_t count = 0; count < 8; count++){			// flash whole screen
			setScore(0, HighScore1P);
			setScore(2, HighScore1P);
			
			for(uint8_t i = 0; i < 30; i++){
     63e:	cf 5f       	subi	r28, 0xFF	; 255
     640:	ce 31       	cpi	r28, 0x1E	; 30
     642:	41 f7       	brne	.-48     	; 0x614 <ShowWinner+0x76>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     644:	2f ef       	ldi	r18, 0xFF	; 255
     646:	84 e3       	ldi	r24, 0x34	; 52
     648:	9c e0       	ldi	r25, 0x0C	; 12
     64a:	21 50       	subi	r18, 0x01	; 1
     64c:	80 40       	sbci	r24, 0x00	; 0
     64e:	90 40       	sbci	r25, 0x00	; 0
     650:	e1 f7       	brne	.-8      	; 0x64a <ShowWinner+0xac>
     652:	00 c0       	rjmp	.+0      	; 0x654 <ShowWinner+0xb6>
     654:	00 00       	nop
				setButtonLed(i % 6, i / 5, i%2); // TODO VERIFY THIS WORKS, turn all leds on
			}									// TODO make checkerboard
			
			_delay_ms(250);
			setScore(0, 0);	// TODO TURN SEGMENTS OFF
     656:	60 e0       	ldi	r22, 0x00	; 0
     658:	70 e0       	ldi	r23, 0x00	; 0
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
			setScore(2, 0);
     660:	60 e0       	ldi	r22, 0x00	; 0
     662:	70 e0       	ldi	r23, 0x00	; 0
     664:	82 e0       	ldi	r24, 0x02	; 2
     666:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
			
			for(uint8_t i = 0; i < 30; i++){
     66a:	c0 e0       	ldi	r28, 0x00	; 0
				setButtonLed(i % 6, i / 5, 1 - (i%2)); // TODO VERIFY THIS WORKS, turn all leds on
     66c:	4c 2f       	mov	r20, r28
     66e:	40 27       	eor	r20, r16
     670:	41 70       	andi	r20, 0x01	; 1
     672:	c1 9f       	mul	r28, r17
     674:	61 2d       	mov	r22, r1
     676:	11 24       	eor	r1, r1
     678:	66 95       	lsr	r22
     67a:	66 95       	lsr	r22
     67c:	cd 9f       	mul	r28, r29
     67e:	81 2d       	mov	r24, r1
     680:	11 24       	eor	r1, r1
     682:	86 95       	lsr	r24
     684:	86 95       	lsr	r24
     686:	98 2f       	mov	r25, r24
     688:	99 0f       	add	r25, r25
     68a:	89 0f       	add	r24, r25
     68c:	88 0f       	add	r24, r24
     68e:	2c 2f       	mov	r18, r28
     690:	28 1b       	sub	r18, r24
     692:	82 2f       	mov	r24, r18
     694:	0e 94 b2 00 	call	0x164	; 0x164 <setButtonLed>
			
			_delay_ms(250);
			setScore(0, 0);	// TODO TURN SEGMENTS OFF
			setScore(2, 0);
			
			for(uint8_t i = 0; i < 30; i++){
     698:	cf 5f       	subi	r28, 0xFF	; 255
     69a:	ce 31       	cpi	r28, 0x1E	; 30
     69c:	39 f7       	brne	.-50     	; 0x66c <ShowWinner+0xce>
     69e:	8f ef       	ldi	r24, 0xFF	; 255
     6a0:	94 e3       	ldi	r25, 0x34	; 52
     6a2:	2c e0       	ldi	r18, 0x0C	; 12
     6a4:	81 50       	subi	r24, 0x01	; 1
     6a6:	90 40       	sbci	r25, 0x00	; 0
     6a8:	20 40       	sbci	r18, 0x00	; 0
     6aa:	e1 f7       	brne	.-8      	; 0x6a4 <ShowWinner+0x106>
     6ac:	00 c0       	rjmp	.+0      	; 0x6ae <ShowWinner+0x110>
     6ae:	00 00       	nop
     6b0:	fa 94       	dec	r15
	for(uint8_t i = 0; i < 30; i++){
		setButtonLed(i % 6, i / 5, 0); // TODO VERIFY THIS WORKS, turn all leds on
	}								 //blank screen
	
	if(GameMode == 0){
		for(uint8_t count = 0; count < 8; count++){			// flash whole screen
     6b2:	f1 10       	cpse	r15, r1
     6b4:	a0 cf       	rjmp	.-192    	; 0x5f6 <ShowWinner+0x58>
     6b6:	9c c0       	rjmp	.+312    	; 0x7f0 <ShowWinner+0x252>
			}
			
			_delay_ms(250);
		}
		}else{										//2p mode, show winner every time
		uint8_t winnerhalf = P1Score > P2Score ? 0 : 3; //index half based on winner
     6b8:	20 91 8e 02 	lds	r18, 0x028E	; 0x80028e <P1Score>
     6bc:	30 91 8f 02 	lds	r19, 0x028F	; 0x80028f <P1Score+0x1>
     6c0:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <P2Score>
     6c4:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <P2Score+0x1>
     6c8:	82 17       	cp	r24, r18
     6ca:	93 07       	cpc	r25, r19
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <ShowWinner+0x13a>
     6ce:	0f 2e       	mov	r0, r31
     6d0:	f3 e0       	ldi	r31, 0x03	; 3
     6d2:	cf 2e       	mov	r12, r31
     6d4:	f0 2d       	mov	r31, r0
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <ShowWinner+0x13c>
     6d8:	c1 2c       	mov	r12, r1
     6da:	68 94       	set
     6dc:	dd 24       	eor	r13, r13
     6de:	d2 f8       	bld	r13, 2
				setScore(0, HighScore2P);
				setScore(1, 0);	//TODO EMPTY? show 2P flashing opposite
				setScore(2, HighScore2P);
			}
			
			for(uint8_t x = winnerhalf; x < (winnerhalf+3); x++){
     6e0:	ec 2c       	mov	r14, r12
     6e2:	f1 2c       	mov	r15, r1
     6e4:	87 01       	movw	r16, r14
     6e6:	0d 5f       	subi	r16, 0xFD	; 253
     6e8:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		}else{										//2p mode, show winner every time
		uint8_t winnerhalf = P1Score > P2Score ? 0 : 3; //index half based on winner
		for(uint8_t i = 0; i < 4; i++){
			
			if((P1Score == HighScore2P) || (P2Score == HighScore2P)){
     6ea:	60 91 9c 02 	lds	r22, 0x029C	; 0x80029c <HighScore2P>
     6ee:	70 91 9d 02 	lds	r23, 0x029D	; 0x80029d <HighScore2P+0x1>
     6f2:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <P1Score>
     6f6:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <P1Score+0x1>
     6fa:	86 17       	cp	r24, r22
     6fc:	97 07       	cpc	r25, r23
     6fe:	39 f0       	breq	.+14     	; 0x70e <ShowWinner+0x170>
     700:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <P2Score>
     704:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <P2Score+0x1>
     708:	68 17       	cp	r22, r24
     70a:	79 07       	cpc	r23, r25
     70c:	79 f4       	brne	.+30     	; 0x72c <ShowWinner+0x18e>
				setScore(0, HighScore2P);
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
				setScore(1, 0);	//TODO EMPTY? show 2P flashing opposite
     714:	60 e0       	ldi	r22, 0x00	; 0
     716:	70 e0       	ldi	r23, 0x00	; 0
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
				setScore(2, HighScore2P);
     71e:	60 91 9c 02 	lds	r22, 0x029C	; 0x80029c <HighScore2P>
     722:	70 91 9d 02 	lds	r23, 0x029D	; 0x80029d <HighScore2P+0x1>
     726:	82 e0       	ldi	r24, 0x02	; 2
     728:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
			}
			
			for(uint8_t x = winnerhalf; x < (winnerhalf+3); x++){
     72c:	e0 16       	cp	r14, r16
     72e:	f1 06       	cpc	r15, r17
     730:	84 f0       	brlt	.+32     	; 0x752 <ShowWinner+0x1b4>
     732:	12 c0       	rjmp	.+36     	; 0x758 <ShowWinner+0x1ba>
				for(uint8_t y = 0; y < 5; y++){
					setButtonLed(x,y,1);
     734:	41 e0       	ldi	r20, 0x01	; 1
     736:	6c 2f       	mov	r22, r28
     738:	8d 2f       	mov	r24, r29
     73a:	0e 94 b2 00 	call	0x164	; 0x164 <setButtonLed>
				setScore(1, 0);	//TODO EMPTY? show 2P flashing opposite
				setScore(2, HighScore2P);
			}
			
			for(uint8_t x = winnerhalf; x < (winnerhalf+3); x++){
				for(uint8_t y = 0; y < 5; y++){
     73e:	cf 5f       	subi	r28, 0xFF	; 255
     740:	c5 30       	cpi	r28, 0x05	; 5
     742:	c1 f7       	brne	.-16     	; 0x734 <ShowWinner+0x196>
				setScore(0, HighScore2P);
				setScore(1, 0);	//TODO EMPTY? show 2P flashing opposite
				setScore(2, HighScore2P);
			}
			
			for(uint8_t x = winnerhalf; x < (winnerhalf+3); x++){
     744:	df 5f       	subi	r29, 0xFF	; 255
     746:	8d 2f       	mov	r24, r29
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	80 17       	cp	r24, r16
     74c:	91 07       	cpc	r25, r17
     74e:	14 f0       	brlt	.+4      	; 0x754 <ShowWinner+0x1b6>
     750:	03 c0       	rjmp	.+6      	; 0x758 <ShowWinner+0x1ba>
     752:	dc 2d       	mov	r29, r12
			}
			
			_delay_ms(250);
		}
		}else{										//2p mode, show winner every time
		uint8_t winnerhalf = P1Score > P2Score ? 0 : 3; //index half based on winner
     754:	c0 e0       	ldi	r28, 0x00	; 0
     756:	ee cf       	rjmp	.-36     	; 0x734 <ShowWinner+0x196>
     758:	8f ef       	ldi	r24, 0xFF	; 255
     75a:	94 e3       	ldi	r25, 0x34	; 52
     75c:	2c e0       	ldi	r18, 0x0C	; 12
     75e:	81 50       	subi	r24, 0x01	; 1
     760:	90 40       	sbci	r25, 0x00	; 0
     762:	20 40       	sbci	r18, 0x00	; 0
     764:	e1 f7       	brne	.-8      	; 0x75e <ShowWinner+0x1c0>
     766:	00 c0       	rjmp	.+0      	; 0x768 <ShowWinner+0x1ca>
     768:	00 00       	nop
					setButtonLed(x,y,1);
				}
			}
			_delay_ms(250);
			
			if((P1Score == HighScore2P) || (P2Score == HighScore2P)){
     76a:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <HighScore2P>
     76e:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <HighScore2P+0x1>
     772:	20 91 8e 02 	lds	r18, 0x028E	; 0x80028e <P1Score>
     776:	30 91 8f 02 	lds	r19, 0x028F	; 0x80028f <P1Score+0x1>
     77a:	28 17       	cp	r18, r24
     77c:	39 07       	cpc	r19, r25
     77e:	39 f0       	breq	.+14     	; 0x78e <ShowWinner+0x1f0>
     780:	20 91 90 02 	lds	r18, 0x0290	; 0x800290 <P2Score>
     784:	30 91 91 02 	lds	r19, 0x0291	; 0x800291 <P2Score+0x1>
     788:	82 17       	cp	r24, r18
     78a:	93 07       	cpc	r25, r19
     78c:	79 f4       	brne	.+30     	; 0x7ac <ShowWinner+0x20e>
				setScore(0, 0); // TODO EMPTY
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	70 e0       	ldi	r23, 0x00	; 0
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
				setScore(1, 0);	//TODO SHOW 1P if 1p has hs else 2p
     798:	60 e0       	ldi	r22, 0x00	; 0
     79a:	70 e0       	ldi	r23, 0x00	; 0
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
				setScore(2, 0); // todo empty
     7a2:	60 e0       	ldi	r22, 0x00	; 0
     7a4:	70 e0       	ldi	r23, 0x00	; 0
     7a6:	82 e0       	ldi	r24, 0x02	; 2
     7a8:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
			}
			
			for(uint8_t x = winnerhalf; x < (winnerhalf+3); x++){
     7ac:	e0 16       	cp	r14, r16
     7ae:	f1 06       	cpc	r15, r17
     7b0:	84 f0       	brlt	.+32     	; 0x7d2 <ShowWinner+0x234>
     7b2:	12 c0       	rjmp	.+36     	; 0x7d8 <ShowWinner+0x23a>
				for(uint8_t y = 0; y < 5; y++){
					setButtonLed(x,y,0);
     7b4:	40 e0       	ldi	r20, 0x00	; 0
     7b6:	6c 2f       	mov	r22, r28
     7b8:	8d 2f       	mov	r24, r29
     7ba:	0e 94 b2 00 	call	0x164	; 0x164 <setButtonLed>
				setScore(1, 0);	//TODO SHOW 1P if 1p has hs else 2p
				setScore(2, 0); // todo empty
			}
			
			for(uint8_t x = winnerhalf; x < (winnerhalf+3); x++){
				for(uint8_t y = 0; y < 5; y++){
     7be:	cf 5f       	subi	r28, 0xFF	; 255
     7c0:	c5 30       	cpi	r28, 0x05	; 5
     7c2:	c1 f7       	brne	.-16     	; 0x7b4 <ShowWinner+0x216>
				setScore(0, 0); // TODO EMPTY
				setScore(1, 0);	//TODO SHOW 1P if 1p has hs else 2p
				setScore(2, 0); // todo empty
			}
			
			for(uint8_t x = winnerhalf; x < (winnerhalf+3); x++){
     7c4:	df 5f       	subi	r29, 0xFF	; 255
     7c6:	8d 2f       	mov	r24, r29
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	80 17       	cp	r24, r16
     7cc:	91 07       	cpc	r25, r17
     7ce:	14 f0       	brlt	.+4      	; 0x7d4 <ShowWinner+0x236>
     7d0:	03 c0       	rjmp	.+6      	; 0x7d8 <ShowWinner+0x23a>
     7d2:	dc 2d       	mov	r29, r12
				setScore(0, HighScore2P);
				setScore(1, 0);	//TODO EMPTY? show 2P flashing opposite
				setScore(2, HighScore2P);
			}
			
			for(uint8_t x = winnerhalf; x < (winnerhalf+3); x++){
     7d4:	c0 e0       	ldi	r28, 0x00	; 0
     7d6:	ee cf       	rjmp	.-36     	; 0x7b4 <ShowWinner+0x216>
     7d8:	8f ef       	ldi	r24, 0xFF	; 255
     7da:	94 e3       	ldi	r25, 0x34	; 52
     7dc:	2c e0       	ldi	r18, 0x0C	; 12
     7de:	81 50       	subi	r24, 0x01	; 1
     7e0:	90 40       	sbci	r25, 0x00	; 0
     7e2:	20 40       	sbci	r18, 0x00	; 0
     7e4:	e1 f7       	brne	.-8      	; 0x7de <ShowWinner+0x240>
     7e6:	00 c0       	rjmp	.+0      	; 0x7e8 <ShowWinner+0x24a>
     7e8:	00 00       	nop
     7ea:	da 94       	dec	r13
			
			_delay_ms(250);
		}
		}else{										//2p mode, show winner every time
		uint8_t winnerhalf = P1Score > P2Score ? 0 : 3; //index half based on winner
		for(uint8_t i = 0; i < 4; i++){
     7ec:	d1 10       	cpse	r13, r1
     7ee:	7d cf       	rjmp	.-262    	; 0x6ea <ShowWinner+0x14c>
				}
			}
			_delay_ms(250);
		}
	}
}
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	1f 91       	pop	r17
     7f6:	0f 91       	pop	r16
     7f8:	ff 90       	pop	r15
     7fa:	ef 90       	pop	r14
     7fc:	df 90       	pop	r13
     7fe:	cf 90       	pop	r12
     800:	08 95       	ret

00000802 <IncrementScore>:

void IncrementScore(uint8_t Player, uint16_t value){
	if(Player == 0){
     802:	81 11       	cpse	r24, r1
     804:	11 c0       	rjmp	.+34     	; 0x828 <IncrementScore+0x26>
		P1Score += value;
		P1Score = P1Score > 999 ? 999 : P1Score;
     806:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <P1Score>
     80a:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <P1Score+0x1>
     80e:	68 0f       	add	r22, r24
     810:	79 1f       	adc	r23, r25
     812:	68 3e       	cpi	r22, 0xE8	; 232
     814:	83 e0       	ldi	r24, 0x03	; 3
     816:	78 07       	cpc	r23, r24
     818:	10 f0       	brcs	.+4      	; 0x81e <IncrementScore+0x1c>
     81a:	67 ee       	ldi	r22, 0xE7	; 231
     81c:	73 e0       	ldi	r23, 0x03	; 3
     81e:	70 93 8f 02 	sts	0x028F, r23	; 0x80028f <P1Score+0x1>
     822:	60 93 8e 02 	sts	0x028E, r22	; 0x80028e <P1Score>
     826:	08 95       	ret
		}else if(Player == 1){
     828:	81 30       	cpi	r24, 0x01	; 1
     82a:	81 f4       	brne	.+32     	; 0x84c <IncrementScore+0x4a>
		P2Score += value;
		P2Score = P2Score > 999 ? 999 : P2Score;
     82c:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <P2Score>
     830:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <P2Score+0x1>
     834:	68 0f       	add	r22, r24
     836:	79 1f       	adc	r23, r25
     838:	68 3e       	cpi	r22, 0xE8	; 232
     83a:	83 e0       	ldi	r24, 0x03	; 3
     83c:	78 07       	cpc	r23, r24
     83e:	10 f0       	brcs	.+4      	; 0x844 <IncrementScore+0x42>
     840:	67 ee       	ldi	r22, 0xE7	; 231
     842:	73 e0       	ldi	r23, 0x03	; 3
     844:	70 93 91 02 	sts	0x0291, r23	; 0x800291 <P2Score+0x1>
     848:	60 93 90 02 	sts	0x0290, r22	; 0x800290 <P2Score>
     84c:	08 95       	ret

0000084e <Bonus>:
	// game is over, stop timer
	TCCR4B = (0b000 << CS40);
	
}

void Bonus(){
     84e:	cf 92       	push	r12
     850:	df 92       	push	r13
     852:	ef 92       	push	r14
     854:	ff 92       	push	r15
     856:	0f 93       	push	r16
     858:	1f 93       	push	r17
     85a:	cf 93       	push	r28
     85c:	df 93       	push	r29

	// blink leds to indicate bonus round start

	for(uint8_t i = 0; i < 30; i++){
     85e:	c0 e0       	ldi	r28, 0x00	; 0
		setButtonLed(i % 6, i / 5, 1); // TODO VERIFY THIS WORKS, turn all leds on
     860:	1d ec       	ldi	r17, 0xCD	; 205
     862:	db ea       	ldi	r29, 0xAB	; 171
     864:	c1 9f       	mul	r28, r17
     866:	61 2d       	mov	r22, r1
     868:	11 24       	eor	r1, r1
     86a:	66 95       	lsr	r22
     86c:	66 95       	lsr	r22
     86e:	cd 9f       	mul	r28, r29
     870:	81 2d       	mov	r24, r1
     872:	11 24       	eor	r1, r1
     874:	86 95       	lsr	r24
     876:	86 95       	lsr	r24
     878:	98 2f       	mov	r25, r24
     87a:	99 0f       	add	r25, r25
     87c:	89 0f       	add	r24, r25
     87e:	88 0f       	add	r24, r24
     880:	41 e0       	ldi	r20, 0x01	; 1
     882:	2c 2f       	mov	r18, r28
     884:	28 1b       	sub	r18, r24
     886:	82 2f       	mov	r24, r18
     888:	0e 94 b2 00 	call	0x164	; 0x164 <setButtonLed>

void Bonus(){

	// blink leds to indicate bonus round start

	for(uint8_t i = 0; i < 30; i++){
     88c:	cf 5f       	subi	r28, 0xFF	; 255
     88e:	ce 31       	cpi	r28, 0x1E	; 30
     890:	49 f7       	brne	.-46     	; 0x864 <Bonus+0x16>
     892:	8f ef       	ldi	r24, 0xFF	; 255
     894:	99 e6       	ldi	r25, 0x69	; 105
     896:	28 e1       	ldi	r18, 0x18	; 24
     898:	81 50       	subi	r24, 0x01	; 1
     89a:	90 40       	sbci	r25, 0x00	; 0
     89c:	20 40       	sbci	r18, 0x00	; 0
     89e:	e1 f7       	brne	.-8      	; 0x898 <Bonus+0x4a>
     8a0:	00 c0       	rjmp	.+0      	; 0x8a2 <Bonus+0x54>
     8a2:	00 00       	nop
		setButtonLed(i % 6, i / 5, 1); // TODO VERIFY THIS WORKS, turn all leds on
	}
	_delay_ms(500);

	for(uint8_t i = 0; i < 30; i++){
     8a4:	c0 e0       	ldi	r28, 0x00	; 0
		setButtonLed(i % 6, i / 5, 0); // TODO VERIFY THIS WORKS, turn all leds on
     8a6:	1d ec       	ldi	r17, 0xCD	; 205
     8a8:	db ea       	ldi	r29, 0xAB	; 171
     8aa:	c1 9f       	mul	r28, r17
     8ac:	61 2d       	mov	r22, r1
     8ae:	11 24       	eor	r1, r1
     8b0:	66 95       	lsr	r22
     8b2:	66 95       	lsr	r22
     8b4:	cd 9f       	mul	r28, r29
     8b6:	81 2d       	mov	r24, r1
     8b8:	11 24       	eor	r1, r1
     8ba:	86 95       	lsr	r24
     8bc:	86 95       	lsr	r24
     8be:	98 2f       	mov	r25, r24
     8c0:	99 0f       	add	r25, r25
     8c2:	89 0f       	add	r24, r25
     8c4:	88 0f       	add	r24, r24
     8c6:	40 e0       	ldi	r20, 0x00	; 0
     8c8:	9c 2f       	mov	r25, r28
     8ca:	98 1b       	sub	r25, r24
     8cc:	89 2f       	mov	r24, r25
     8ce:	0e 94 b2 00 	call	0x164	; 0x164 <setButtonLed>
	for(uint8_t i = 0; i < 30; i++){
		setButtonLed(i % 6, i / 5, 1); // TODO VERIFY THIS WORKS, turn all leds on
	}
	_delay_ms(500);

	for(uint8_t i = 0; i < 30; i++){
     8d2:	cf 5f       	subi	r28, 0xFF	; 255
     8d4:	ce 31       	cpi	r28, 0x1E	; 30
     8d6:	49 f7       	brne	.-46     	; 0x8aa <Bonus+0x5c>
     8d8:	2f ef       	ldi	r18, 0xFF	; 255
     8da:	89 e6       	ldi	r24, 0x69	; 105
     8dc:	98 e1       	ldi	r25, 0x18	; 24
     8de:	21 50       	subi	r18, 0x01	; 1
     8e0:	80 40       	sbci	r24, 0x00	; 0
     8e2:	90 40       	sbci	r25, 0x00	; 0
     8e4:	e1 f7       	brne	.-8      	; 0x8de <Bonus+0x90>
     8e6:	00 c0       	rjmp	.+0      	; 0x8e8 <Bonus+0x9a>
     8e8:	00 00       	nop
		setButtonLed(i % 6, i / 5, 0); // TODO VERIFY THIS WORKS, turn all leds on
	}
	_delay_ms(500);

	for(uint8_t i = 0; i < 30; i++){
     8ea:	c0 e0       	ldi	r28, 0x00	; 0
		setButtonLed(i % 6, i / 5, 1); // TODO VERIFY THIS WORKS, turn all leds on
     8ec:	1d ec       	ldi	r17, 0xCD	; 205
     8ee:	db ea       	ldi	r29, 0xAB	; 171
     8f0:	c1 9f       	mul	r28, r17
     8f2:	61 2d       	mov	r22, r1
     8f4:	11 24       	eor	r1, r1
     8f6:	66 95       	lsr	r22
     8f8:	66 95       	lsr	r22
     8fa:	cd 9f       	mul	r28, r29
     8fc:	81 2d       	mov	r24, r1
     8fe:	11 24       	eor	r1, r1
     900:	86 95       	lsr	r24
     902:	86 95       	lsr	r24
     904:	98 2f       	mov	r25, r24
     906:	99 0f       	add	r25, r25
     908:	89 0f       	add	r24, r25
     90a:	88 0f       	add	r24, r24
     90c:	41 e0       	ldi	r20, 0x01	; 1
     90e:	2c 2f       	mov	r18, r28
     910:	28 1b       	sub	r18, r24
     912:	82 2f       	mov	r24, r18
     914:	0e 94 b2 00 	call	0x164	; 0x164 <setButtonLed>
	for(uint8_t i = 0; i < 30; i++){
		setButtonLed(i % 6, i / 5, 0); // TODO VERIFY THIS WORKS, turn all leds on
	}
	_delay_ms(500);

	for(uint8_t i = 0; i < 30; i++){
     918:	cf 5f       	subi	r28, 0xFF	; 255
     91a:	ce 31       	cpi	r28, 0x1E	; 30
     91c:	49 f7       	brne	.-46     	; 0x8f0 <Bonus+0xa2>
     91e:	8f ef       	ldi	r24, 0xFF	; 255
     920:	94 e3       	ldi	r25, 0x34	; 52
     922:	2c e0       	ldi	r18, 0x0C	; 12
     924:	81 50       	subi	r24, 0x01	; 1
     926:	90 40       	sbci	r25, 0x00	; 0
     928:	20 40       	sbci	r18, 0x00	; 0
     92a:	e1 f7       	brne	.-8      	; 0x924 <__stack+0x25>
     92c:	00 c0       	rjmp	.+0      	; 0x92e <__stack+0x2f>
     92e:	00 00       	nop
	}
	_delay_ms(250);

	uint32_t HasPressed = 0;	// store 30 stored buttons
	
	TimeRemaining = BonusTime;
     930:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <BonusTime>
     934:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <TimeRemaining>
	TCNT4 = 0;
     938:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7e00a5>
     93c:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7e00a4>
	TCCR4B = (0b101 << CS40);	// enable timer 0 (game timer)
     940:	85 e0       	ldi	r24, 0x05	; 5
     942:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
	
	setScore(0, GameMode == 0 ? HighScore1P : HighScore2P);
     946:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <GameMode>
     94a:	81 11       	cpse	r24, r1
     94c:	05 c0       	rjmp	.+10     	; 0x958 <__stack+0x59>
     94e:	60 91 8c 02 	lds	r22, 0x028C	; 0x80028c <HighScore1P>
     952:	70 91 8d 02 	lds	r23, 0x028D	; 0x80028d <HighScore1P+0x1>
     956:	04 c0       	rjmp	.+8      	; 0x960 <__stack+0x61>
     958:	60 91 9c 02 	lds	r22, 0x029C	; 0x80029c <HighScore2P>
     95c:	70 91 9d 02 	lds	r23, 0x029D	; 0x80029d <HighScore2P+0x1>
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
			setScore(2, P1Score);	// otherwise show p1 score and high score
		}
		
		for(uint8_t x = 0; x < 6; x++){
			for(uint8_t y = 0; y < 5; y++){
				if( isButtonDown(x, y) && (( 1 << (x*5 + y) ) == 0)){		// check later
     966:	cc 24       	eor	r12, r12
     968:	c3 94       	inc	r12
     96a:	d1 2c       	mov	r13, r1
	TCNT4 = 0;
	TCCR4B = (0b101 << CS40);	// enable timer 0 (game timer)
	
	setScore(0, GameMode == 0 ? HighScore1P : HighScore2P);
	
	while(TimeRemaining > 0){
     96c:	5c c0       	rjmp	.+184    	; 0xa26 <__stack+0x127>
		
		setScore(1, TimeRemaining);
     96e:	60 91 8b 02 	lds	r22, 0x028B	; 0x80028b <TimeRemaining>
     972:	70 e0       	ldi	r23, 0x00	; 0
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
		if(GameMode == 1){
     97a:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <GameMode>
     97e:	81 30       	cpi	r24, 0x01	; 1
     980:	79 f4       	brne	.+30     	; 0x9a0 <__stack+0xa1>
			setScore(0, P1Score);	// if 2p mode, show left p1 and right p2 scores
     982:	60 91 8e 02 	lds	r22, 0x028E	; 0x80028e <P1Score>
     986:	70 91 8f 02 	lds	r23, 0x028F	; 0x80028f <P1Score+0x1>
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
			setScore(2, P2Score);
     990:	60 91 90 02 	lds	r22, 0x0290	; 0x800290 <P2Score>
     994:	70 91 91 02 	lds	r23, 0x0291	; 0x800291 <P2Score+0x1>
     998:	82 e0       	ldi	r24, 0x02	; 2
     99a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
     99e:	4f c0       	rjmp	.+158    	; 0xa3e <__stack+0x13f>
			}else{
			setScore(2, P1Score);	// otherwise show p1 score and high score
     9a0:	60 91 8e 02 	lds	r22, 0x028E	; 0x80028e <P1Score>
     9a4:	70 91 8f 02 	lds	r23, 0x028F	; 0x80028f <P1Score+0x1>
     9a8:	82 e0       	ldi	r24, 0x02	; 2
     9aa:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
     9ae:	47 c0       	rjmp	.+142    	; 0xa3e <__stack+0x13f>
		}
		
		for(uint8_t x = 0; x < 6; x++){
			for(uint8_t y = 0; y < 5; y++){
				if( isButtonDown(x, y) && (( 1 << (x*5 + y) ) == 0)){		// check later
     9b0:	6c 2f       	mov	r22, r28
     9b2:	8d 2f       	mov	r24, r29
     9b4:	0e 94 a4 00 	call	0x148	; 0x148 <isButtonDown>
     9b8:	88 23       	and	r24, r24
     9ba:	39 f1       	breq	.+78     	; 0xa0a <__stack+0x10b>
     9bc:	c6 01       	movw	r24, r12
     9be:	00 2e       	mov	r0, r16
     9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <__stack+0xc7>
     9c2:	88 0f       	add	r24, r24
     9c4:	99 1f       	adc	r25, r25
     9c6:	0a 94       	dec	r0
     9c8:	e2 f7       	brpl	.-8      	; 0x9c2 <__stack+0xc3>
     9ca:	89 2b       	or	r24, r25
     9cc:	f1 f4       	brne	.+60     	; 0xa0a <__stack+0x10b>

					HasPressed |= (1 << (x*5 + y) );
					setButtonLed(x,y,0);
     9ce:	40 e0       	ldi	r20, 0x00	; 0
     9d0:	6c 2f       	mov	r22, r28
     9d2:	8d 2f       	mov	r24, r29
     9d4:	0e 94 b2 00 	call	0x164	; 0x164 <setButtonLed>

					if(GameMode == 0){
     9d8:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <GameMode>
     9dc:	81 11       	cpse	r24, r1
     9de:	06 c0       	rjmp	.+12     	; 0x9ec <__stack+0xed>
						IncrementScore(0,BonusPointCount);		// TODO later include mil
     9e0:	60 91 9e 02 	lds	r22, 0x029E	; 0x80029e <BonusPointCount>
     9e4:	70 e0       	ldi	r23, 0x00	; 0
     9e6:	0e 94 01 04 	call	0x802	; 0x802 <IncrementScore>
     9ea:	0f c0       	rjmp	.+30     	; 0xa0a <__stack+0x10b>
						}else{
						if(x >= 3){
     9ec:	d3 30       	cpi	r29, 0x03	; 3
     9ee:	38 f0       	brcs	.+14     	; 0x9fe <__stack+0xff>
							IncrementScore(1,BonusPointCount);
     9f0:	60 91 9e 02 	lds	r22, 0x029E	; 0x80029e <BonusPointCount>
     9f4:	70 e0       	ldi	r23, 0x00	; 0
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	0e 94 01 04 	call	0x802	; 0x802 <IncrementScore>
     9fc:	06 c0       	rjmp	.+12     	; 0xa0a <__stack+0x10b>
							}else{
							IncrementScore(0,BonusPointCount);
     9fe:	60 91 9e 02 	lds	r22, 0x029E	; 0x80029e <BonusPointCount>
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	0e 94 01 04 	call	0x802	; 0x802 <IncrementScore>
			}else{
			setScore(2, P1Score);	// otherwise show p1 score and high score
		}
		
		for(uint8_t x = 0; x < 6; x++){
			for(uint8_t y = 0; y < 5; y++){
     a0a:	cf 5f       	subi	r28, 0xFF	; 255
     a0c:	0f 5f       	subi	r16, 0xFF	; 255
     a0e:	1f 4f       	sbci	r17, 0xFF	; 255
     a10:	c5 30       	cpi	r28, 0x05	; 5
     a12:	71 f6       	brne	.-100    	; 0x9b0 <__stack+0xb1>
			setScore(2, P2Score);
			}else{
			setScore(2, P1Score);	// otherwise show p1 score and high score
		}
		
		for(uint8_t x = 0; x < 6; x++){
     a14:	df 5f       	subi	r29, 0xFF	; 255
     a16:	85 e0       	ldi	r24, 0x05	; 5
     a18:	e8 0e       	add	r14, r24
     a1a:	f1 1c       	adc	r15, r1
     a1c:	d6 30       	cpi	r29, 0x06	; 6
     a1e:	19 f0       	breq	.+6      	; 0xa26 <__stack+0x127>
	for(uint8_t i = 0; i < 30; i++){
		setButtonLed(i % 6, i / 5, 0); // TODO VERIFY THIS WORKS, turn all leds on
	}
	_delay_ms(500);

	for(uint8_t i = 0; i < 30; i++){
     a20:	87 01       	movw	r16, r14
     a22:	c0 e0       	ldi	r28, 0x00	; 0
     a24:	c5 cf       	rjmp	.-118    	; 0x9b0 <__stack+0xb1>
	TCNT4 = 0;
	TCCR4B = (0b101 << CS40);	// enable timer 0 (game timer)
	
	setScore(0, GameMode == 0 ? HighScore1P : HighScore2P);
	
	while(TimeRemaining > 0){
     a26:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <TimeRemaining>
     a2a:	81 11       	cpse	r24, r1
     a2c:	a0 cf       	rjmp	.-192    	; 0x96e <__stack+0x6f>

				}
			}
		}
	}
	TCCR4B = (0b000 << CS40);
     a2e:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
	
	setScore(1, 0); // TODO MAKE DASHES
     a32:	60 e0       	ldi	r22, 0x00	; 0
     a34:	70 e0       	ldi	r23, 0x00	; 0
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>

}
     a3c:	04 c0       	rjmp	.+8      	; 0xa46 <__stack+0x147>
	for(uint8_t i = 0; i < 30; i++){
		setButtonLed(i % 6, i / 5, 0); // TODO VERIFY THIS WORKS, turn all leds on
	}
	_delay_ms(500);

	for(uint8_t i = 0; i < 30; i++){
     a3e:	e1 2c       	mov	r14, r1
     a40:	f1 2c       	mov	r15, r1
     a42:	d0 e0       	ldi	r29, 0x00	; 0
     a44:	ed cf       	rjmp	.-38     	; 0xa20 <__stack+0x121>
	}
	TCCR4B = (0b000 << CS40);
	
	setScore(1, 0); // TODO MAKE DASHES

}
     a46:	df 91       	pop	r29
     a48:	cf 91       	pop	r28
     a4a:	1f 91       	pop	r17
     a4c:	0f 91       	pop	r16
     a4e:	ff 90       	pop	r15
     a50:	ef 90       	pop	r14
     a52:	df 90       	pop	r13
     a54:	cf 90       	pop	r12
     a56:	08 95       	ret

00000a58 <Display321>:
							 2, 3, 2, 2, 2, 3, 2, 1, 0, 0, 0};
const uint8_t onledsY[33] = {1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5,
							 1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5,
							 1, 2, 2, 3, 4, 5, 5, 5, 0, 0, 0};

void Display321(){	//TODO ADD TONES FOR EACH DIGIT
     a58:	ef 92       	push	r14
     a5a:	ff 92       	push	r15
     a5c:	0f 93       	push	r16
     a5e:	1f 93       	push	r17
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
	
	for(uint8_t i = 0; i < 30; i++){
     a64:	c0 e0       	ldi	r28, 0x00	; 0
		setButtonLed(i % 6, i / 5, 0); // TODO VERIFY THIS WORKS
     a66:	1d ec       	ldi	r17, 0xCD	; 205
     a68:	db ea       	ldi	r29, 0xAB	; 171
     a6a:	c1 9f       	mul	r28, r17
     a6c:	61 2d       	mov	r22, r1
     a6e:	11 24       	eor	r1, r1
     a70:	66 95       	lsr	r22
     a72:	66 95       	lsr	r22
     a74:	cd 9f       	mul	r28, r29
     a76:	81 2d       	mov	r24, r1
     a78:	11 24       	eor	r1, r1
     a7a:	86 95       	lsr	r24
     a7c:	86 95       	lsr	r24
     a7e:	98 2f       	mov	r25, r24
     a80:	99 0f       	add	r25, r25
     a82:	89 0f       	add	r24, r25
     a84:	88 0f       	add	r24, r24
     a86:	40 e0       	ldi	r20, 0x00	; 0
     a88:	9c 2f       	mov	r25, r28
     a8a:	98 1b       	sub	r25, r24
     a8c:	89 2f       	mov	r24, r25
     a8e:	0e 94 b2 00 	call	0x164	; 0x164 <setButtonLed>
							 1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5,
							 1, 2, 2, 3, 4, 5, 5, 5, 0, 0, 0};

void Display321(){	//TODO ADD TONES FOR EACH DIGIT
	
	for(uint8_t i = 0; i < 30; i++){
     a92:	cf 5f       	subi	r28, 0xFF	; 255
     a94:	ce 31       	cpi	r28, 0x1E	; 30
     a96:	49 f7       	brne	.-46     	; 0xa6a <Display321+0x12>
     a98:	c6 e1       	ldi	r28, 0x16	; 22
     a9a:	d2 e0       	ldi	r29, 0x02	; 2
     a9c:	07 e3       	ldi	r16, 0x37	; 55
     a9e:	12 e0       	ldi	r17, 0x02	; 2
     aa0:	0f 2e       	mov	r0, r31
     aa2:	f1 e2       	ldi	r31, 0x21	; 33
     aa4:	ef 2e       	mov	r14, r31
     aa6:	f2 e0       	ldi	r31, 0x02	; 2
     aa8:	ff 2e       	mov	r15, r31
     aaa:	f0 2d       	mov	r31, r0
		setButtonLed(i % 6, i / 5, 0); // TODO VERIFY THIS WORKS
	}
	
	for(uint8_t index = 0; index < 11; index++){
		setButtonLed(onledsX[index], onledsY[index], 1);
     aac:	69 91       	ld	r22, Y+
     aae:	41 e0       	ldi	r20, 0x01	; 1
     ab0:	f8 01       	movw	r30, r16
     ab2:	81 91       	ld	r24, Z+
     ab4:	8f 01       	movw	r16, r30
     ab6:	0e 94 b2 00 	call	0x164	; 0x164 <setButtonLed>
		while(!isButtonDown(Player1ButtonX,Player1ButtonY)){
     aba:	60 e0       	ldi	r22, 0x00	; 0
     abc:	83 e0       	ldi	r24, 0x03	; 3
     abe:	0e 94 a4 00 	call	0x148	; 0x148 <isButtonDown>
     ac2:	88 23       	and	r24, r24
     ac4:	d1 f3       	breq	.-12     	; 0xaba <Display321+0x62>
			;
		}
		while(isButtonDown(Player1ButtonX,Player1ButtonY)){
     ac6:	60 e0       	ldi	r22, 0x00	; 0
     ac8:	83 e0       	ldi	r24, 0x03	; 3
     aca:	0e 94 a4 00 	call	0x148	; 0x148 <isButtonDown>
     ace:	81 11       	cpse	r24, r1
     ad0:	fa cf       	rjmp	.-12     	; 0xac6 <Display321+0x6e>
	
	for(uint8_t i = 0; i < 30; i++){
		setButtonLed(i % 6, i / 5, 0); // TODO VERIFY THIS WORKS
	}
	
	for(uint8_t index = 0; index < 11; index++){
     ad2:	ce 15       	cp	r28, r14
     ad4:	df 05       	cpc	r29, r15
     ad6:	51 f7       	brne	.-44     	; 0xaac <Display321+0x54>
		while(isButtonDown(Player1ButtonX,Player1ButtonY)){
			;
		}
	}
	
	while(!isButtonDown(0,1)){
     ad8:	61 e0       	ldi	r22, 0x01	; 1
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	0e 94 a4 00 	call	0x148	; 0x148 <isButtonDown>
     ae0:	88 23       	and	r24, r24
     ae2:	d1 f3       	breq	.-12     	; 0xad8 <Display321+0x80>
		;
	}
}
     ae4:	df 91       	pop	r29
     ae6:	cf 91       	pop	r28
     ae8:	1f 91       	pop	r17
     aea:	0f 91       	pop	r16
     aec:	ff 90       	pop	r15
     aee:	ef 90       	pop	r14
     af0:	08 95       	ret

00000af2 <playChirp>:

void playChirp(uint8_t tone){
	beep_index = tone;
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	90 93 76 02 	sts	0x0276, r25	; 0x800276 <beep_index+0x1>
     af8:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <beep_index>
	note_index = 0;
     afc:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <note_index+0x1>
     b00:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <note_index>
	TCCR0B = (0b101 << CS00);	//turn on clock for speaker
     b04:	85 e0       	ldi	r24, 0x05	; 5
     b06:	85 bd       	out	0x25, r24	; 37
     b08:	08 95       	ret

00000b0a <Game>:
	if(TimeRemaining > 0){
		TimeRemaining--;
	}
}

void Game(){
     b0a:	3f 92       	push	r3
     b0c:	4f 92       	push	r4
     b0e:	6f 92       	push	r6
     b10:	7f 92       	push	r7
     b12:	8f 92       	push	r8
     b14:	9f 92       	push	r9
     b16:	af 92       	push	r10
     b18:	bf 92       	push	r11
     b1a:	cf 92       	push	r12
     b1c:	df 92       	push	r13
     b1e:	ef 92       	push	r14
     b20:	ff 92       	push	r15
     b22:	0f 93       	push	r16
     b24:	1f 93       	push	r17
     b26:	cf 93       	push	r28
     b28:	df 93       	push	r29

	// game mode is set when leaving attract mode
	Display321();
     b2a:	0e 94 2c 05 	call	0xa58	; 0xa58 <Display321>
	
	P1Score = 0;			// reset scores and multipliers
     b2e:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <P1Score+0x1>
     b32:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <P1Score>
	P2Score = 0;
     b36:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <P2Score+0x1>
     b3a:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <P2Score>
	P1Multiplier = 1;
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <P1Multiplier>
	P2Multiplier = 1;
     b44:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <P2Multiplier>
     b48:	0f 2e       	mov	r0, r31
     b4a:	f6 e9       	ldi	r31, 0x96	; 150
     b4c:	ef 2e       	mov	r14, r31
     b4e:	f2 e0       	ldi	r31, 0x02	; 2
     b50:	ff 2e       	mov	r15, r31
     b52:	f0 2d       	mov	r31, r0
     b54:	02 e8       	ldi	r16, 0x82	; 130
     b56:	12 e0       	ldi	r17, 0x02	; 2
     b58:	c3 e9       	ldi	r28, 0x93	; 147
     b5a:	d2 e0       	ldi	r29, 0x02	; 2

	// pick 6 random leds to enable regardless of mode
	// (3 left side 3 right side)
	for(int i = 0; i < 3; i++){
		gameledsX[i] = rand() % 3;			// turn 3 on right side
     b5c:	0f 2e       	mov	r0, r31
     b5e:	f3 e0       	ldi	r31, 0x03	; 3
     b60:	cf 2e       	mov	r12, r31
     b62:	d1 2c       	mov	r13, r1
     b64:	f0 2d       	mov	r31, r0
		gameledsY[i] = rand() % 5;
     b66:	0f 2e       	mov	r0, r31
     b68:	f5 e0       	ldi	r31, 0x05	; 5
     b6a:	af 2e       	mov	r10, r31
     b6c:	b1 2c       	mov	r11, r1
     b6e:	f0 2d       	mov	r31, r0
	P2Multiplier = 1;

	// pick 6 random leds to enable regardless of mode
	// (3 left side 3 right side)
	for(int i = 0; i < 3; i++){
		gameledsX[i] = rand() % 3;			// turn 3 on right side
     b70:	0e 94 12 09 	call	0x1224	; 0x1224 <rand>
     b74:	b6 01       	movw	r22, r12
     b76:	0e 94 9e 08 	call	0x113c	; 0x113c <__divmodhi4>
     b7a:	89 93       	st	Y+, r24
		gameledsY[i] = rand() % 5;
     b7c:	0e 94 12 09 	call	0x1224	; 0x1224 <rand>
     b80:	b5 01       	movw	r22, r10
     b82:	0e 94 9e 08 	call	0x113c	; 0x113c <__divmodhi4>
     b86:	f8 01       	movw	r30, r16
     b88:	81 93       	st	Z+, r24
     b8a:	8f 01       	movw	r16, r30
		
		gameledsX[i+3] = 3 + rand() % 3;	// turn 3 on left side
     b8c:	0e 94 12 09 	call	0x1224	; 0x1224 <rand>
     b90:	b6 01       	movw	r22, r12
     b92:	0e 94 9e 08 	call	0x113c	; 0x113c <__divmodhi4>
     b96:	8d 5f       	subi	r24, 0xFD	; 253
     b98:	8a 83       	std	Y+2, r24	; 0x02
		gameledsY[i+3] = rand() % 5;
     b9a:	0e 94 12 09 	call	0x1224	; 0x1224 <rand>
     b9e:	b5 01       	movw	r22, r10
     ba0:	0e 94 9e 08 	call	0x113c	; 0x113c <__divmodhi4>
     ba4:	f8 01       	movw	r30, r16
     ba6:	82 83       	std	Z+2, r24	; 0x02
	P1Multiplier = 1;
	P2Multiplier = 1;

	// pick 6 random leds to enable regardless of mode
	// (3 left side 3 right side)
	for(int i = 0; i < 3; i++){
     ba8:	ce 15       	cp	r28, r14
     baa:	df 05       	cpc	r29, r15
     bac:	09 f7       	brne	.-62     	; 0xb70 <Game+0x66>
		gameledsX[i+3] = 3 + rand() % 3;	// turn 3 on left side
		gameledsY[i+3] = rand() % 5;
	}


	TimeRemaining = RoundTime;
     bae:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <RoundTime>
     bb2:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <TimeRemaining>
	TCNT4 = 0;					// reset timer
     bb6:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7e00a5>
     bba:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7e00a4>
	TCCR4B = (0b101 << CS40);	// enable timer 0 (game timer)
     bbe:	85 e0       	ldi	r24, 0x05	; 5
     bc0:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
	
	setScore(0, HighScore1P);	// will be replaced if 2p mode
     bc4:	60 91 8c 02 	lds	r22, 0x028C	; 0x80028c <HighScore1P>
     bc8:	70 91 8d 02 	lds	r23, 0x028D	; 0x80028d <HighScore1P+0x1>
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>

				do{		// move led to random DIFFERENT spot
					if(i >= 3){
						gameledsX[i+3] = 3 + rand() % 3;
						}else{
						gameledsX[i] = rand() % 3;
     bd2:	0f 2e       	mov	r0, r31
     bd4:	f3 e0       	ldi	r31, 0x03	; 3
     bd6:	ef 2e       	mov	r14, r31
     bd8:	f1 2c       	mov	r15, r1
     bda:	f0 2d       	mov	r31, r0
					}
					gameledsY[i] = rand() % 5;
     bdc:	0f 2e       	mov	r0, r31
     bde:	f5 e0       	ldi	r31, 0x05	; 5
     be0:	8f 2e       	mov	r8, r31
     be2:	91 2c       	mov	r9, r1
     be4:	f0 2d       	mov	r31, r0
	TCNT4 = 0;					// reset timer
	TCCR4B = (0b101 << CS40);	// enable timer 0 (game timer)
	
	setScore(0, HighScore1P);	// will be replaced if 2p mode
	
	while(TimeRemaining > 0){
     be6:	a4 c0       	rjmp	.+328    	; 0xd30 <Game+0x226>

		
		setScore(1, TimeRemaining);
     be8:	60 91 8b 02 	lds	r22, 0x028B	; 0x80028b <TimeRemaining>
     bec:	70 e0       	ldi	r23, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
		if(GameMode == 1){
     bf4:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <GameMode>
     bf8:	81 30       	cpi	r24, 0x01	; 1
     bfa:	79 f4       	brne	.+30     	; 0xc1a <Game+0x110>
			setScore(0, P1Score);	// if 2p mode, show left p1 and right p2 scores
     bfc:	60 91 8e 02 	lds	r22, 0x028E	; 0x80028e <P1Score>
     c00:	70 91 8f 02 	lds	r23, 0x028F	; 0x80028f <P1Score+0x1>
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
			setScore(2, P2Score);
     c0a:	60 91 90 02 	lds	r22, 0x0290	; 0x800290 <P2Score>
     c0e:	70 91 91 02 	lds	r23, 0x0291	; 0x800291 <P2Score+0x1>
     c12:	82 e0       	ldi	r24, 0x02	; 2
     c14:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
     c18:	92 c0       	rjmp	.+292    	; 0xd3e <Game+0x234>
			}else{
			setScore(2, P1Score);	// otherwise show p1 score and high score
     c1a:	60 91 8e 02 	lds	r22, 0x028E	; 0x80028e <P1Score>
     c1e:	70 91 8f 02 	lds	r23, 0x028F	; 0x80028f <P1Score+0x1>
     c22:	82 e0       	ldi	r24, 0x02	; 2
     c24:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
     c28:	8a c0       	rjmp	.+276    	; 0xd3e <Game+0x234>
     c2a:	36 01       	movw	r6, r12
     c2c:	e5 01       	movw	r28, r10
		}

		for(uint8_t i = 0; i < 6; i++){
			if (isButtonDown(gameledsX[i], gameledsY[i]) ){
     c2e:	f6 01       	movw	r30, r12
     c30:	60 81       	ld	r22, Z
     c32:	88 81       	ld	r24, Y
     c34:	0e 94 a4 00 	call	0x148	; 0x148 <isButtonDown>
     c38:	88 23       	and	r24, r24
     c3a:	09 f4       	brne	.+2      	; 0xc3e <Game+0x134>
     c3c:	63 c0       	rjmp	.+198    	; 0xd04 <Game+0x1fa>

				uint8_t oldX = gameledsX[i];
     c3e:	48 80       	ld	r4, Y
				uint8_t oldY = gameledsY[i];
     c40:	f6 01       	movw	r30, r12
     c42:	30 80       	ld	r3, Z

				do{		// move led to random DIFFERENT spot
					if(i >= 3){
     c44:	13 30       	cpi	r17, 0x03	; 3
     c46:	40 f0       	brcs	.+16     	; 0xc58 <Game+0x14e>
						gameledsX[i+3] = 3 + rand() % 3;
     c48:	0e 94 12 09 	call	0x1224	; 0x1224 <rand>
     c4c:	b7 01       	movw	r22, r14
     c4e:	0e 94 9e 08 	call	0x113c	; 0x113c <__divmodhi4>
     c52:	8d 5f       	subi	r24, 0xFD	; 253
     c54:	8b 83       	std	Y+3, r24	; 0x03
     c56:	06 c0       	rjmp	.+12     	; 0xc64 <Game+0x15a>
						}else{
						gameledsX[i] = rand() % 3;
     c58:	0e 94 12 09 	call	0x1224	; 0x1224 <rand>
     c5c:	b7 01       	movw	r22, r14
     c5e:	0e 94 9e 08 	call	0x113c	; 0x113c <__divmodhi4>
     c62:	88 83       	st	Y, r24
					}
					gameledsY[i] = rand() % 5;
     c64:	0e 94 12 09 	call	0x1224	; 0x1224 <rand>
     c68:	b4 01       	movw	r22, r8
     c6a:	0e 94 9e 08 	call	0x113c	; 0x113c <__divmodhi4>
     c6e:	98 2f       	mov	r25, r24
     c70:	f3 01       	movw	r30, r6
     c72:	80 83       	st	Z, r24

				}while((gameledsX[i] == oldX) && (gameledsY[i] == oldY));
     c74:	88 81       	ld	r24, Y
     c76:	48 12       	cpse	r4, r24
     c78:	02 c0       	rjmp	.+4      	; 0xc7e <Game+0x174>
     c7a:	39 16       	cp	r3, r25
     c7c:	19 f3       	breq	.-58     	; 0xc44 <Game+0x13a>


				if(GameMode == 0){
     c7e:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <GameMode>
     c82:	81 11       	cpse	r24, r1
     c84:	14 c0       	rjmp	.+40     	; 0xcae <Game+0x1a4>
					IncrementScore(0, P1Multiplier);	// add score and inc multiplier (singleplayer)
     c86:	60 91 7e 02 	lds	r22, 0x027E	; 0x80027e <P1Multiplier>
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	0e 94 01 04 	call	0x802	; 0x802 <IncrementScore>
					playChirp(P1Multiplier);
     c90:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <P1Multiplier>
     c94:	0e 94 79 05 	call	0xaf2	; 0xaf2 <playChirp>
					P1Multiplier = (P1Multiplier == MultiplierMax) ? MultiplierMax : (P1Multiplier + 1);
     c98:	90 91 7e 02 	lds	r25, 0x027E	; 0x80027e <P1Multiplier>
     c9c:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <MultiplierMax>
     ca0:	98 17       	cp	r25, r24
     ca2:	11 f0       	breq	.+4      	; 0xca8 <Game+0x19e>
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	89 0f       	add	r24, r25
     ca8:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <P1Multiplier>
     cac:	2b c0       	rjmp	.+86     	; 0xd04 <Game+0x1fa>
					}else{
					if(i >= 3){
     cae:	13 30       	cpi	r17, 0x03	; 3
     cb0:	a8 f0       	brcs	.+42     	; 0xcdc <Game+0x1d2>
						IncrementScore(1, P2Multiplier);	// add depending on side of button pressed
     cb2:	60 91 7d 02 	lds	r22, 0x027D	; 0x80027d <P2Multiplier>
     cb6:	70 e0       	ldi	r23, 0x00	; 0
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	0e 94 01 04 	call	0x802	; 0x802 <IncrementScore>
						playChirp(P2Multiplier);
     cbe:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <P2Multiplier>
     cc2:	0e 94 79 05 	call	0xaf2	; 0xaf2 <playChirp>
						P2Multiplier = (P2Multiplier == MultiplierMax) ? MultiplierMax : (P2Multiplier + 1);
     cc6:	90 91 7d 02 	lds	r25, 0x027D	; 0x80027d <P2Multiplier>
     cca:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <MultiplierMax>
     cce:	98 17       	cp	r25, r24
     cd0:	11 f0       	breq	.+4      	; 0xcd6 <Game+0x1cc>
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	89 0f       	add	r24, r25
     cd6:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <P2Multiplier>
     cda:	14 c0       	rjmp	.+40     	; 0xd04 <Game+0x1fa>
						}else{
						IncrementScore(0, P1Multiplier);
     cdc:	60 91 7e 02 	lds	r22, 0x027E	; 0x80027e <P1Multiplier>
     ce0:	70 e0       	ldi	r23, 0x00	; 0
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	0e 94 01 04 	call	0x802	; 0x802 <IncrementScore>
						playChirp(P1Multiplier);
     ce8:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <P1Multiplier>
     cec:	0e 94 79 05 	call	0xaf2	; 0xaf2 <playChirp>
						P1Multiplier = (P1Multiplier == MultiplierMax) ? MultiplierMax : (P1Multiplier + 1);
     cf0:	90 91 7e 02 	lds	r25, 0x027E	; 0x80027e <P1Multiplier>
     cf4:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <MultiplierMax>
     cf8:	98 17       	cp	r25, r24
     cfa:	11 f0       	breq	.+4      	; 0xd00 <Game+0x1f6>
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	89 0f       	add	r24, r25
     d00:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <P1Multiplier>
			setScore(2, P2Score);
			}else{
			setScore(2, P1Score);	// otherwise show p1 score and high score
		}

		for(uint8_t i = 0; i < 6; i++){
     d04:	1f 5f       	subi	r17, 0xFF	; 255
     d06:	ff ef       	ldi	r31, 0xFF	; 255
     d08:	cf 1a       	sub	r12, r31
     d0a:	df 0a       	sbc	r13, r31
     d0c:	8f ef       	ldi	r24, 0xFF	; 255
     d0e:	a8 1a       	sub	r10, r24
     d10:	b8 0a       	sbc	r11, r24
     d12:	16 30       	cpi	r17, 0x06	; 6
     d14:	09 f0       	breq	.+2      	; 0xd18 <Game+0x20e>
     d16:	89 cf       	rjmp	.-238    	; 0xc2a <Game+0x120>

			}
		}
		
		
		if (P1Multiplier > 1){
     d18:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <P1Multiplier>
     d1c:	82 30       	cpi	r24, 0x02	; 2
     d1e:	10 f0       	brcs	.+4      	; 0xd24 <Game+0x21a>
			if ( (P1MultTimeS + MultiplierDecaySeconds) <= TimeRemaining){
     d20:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <TimeRemaining>
				if(P1MultTimeT < MultiplierDecayTicks){	// TODO INCORPORATE TICK OFFSET
					P1Multiplier--;
				}
			}
		}
		if (P2Multiplier > 1){
     d24:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <P2Multiplier>
     d28:	82 30       	cpi	r24, 0x02	; 2
     d2a:	10 f0       	brcs	.+4      	; 0xd30 <Game+0x226>
			if ( (P2MultTimeS + MultiplierDecaySeconds) <= TimeRemaining){
     d2c:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <TimeRemaining>
	TCNT4 = 0;					// reset timer
	TCCR4B = (0b101 << CS40);	// enable timer 0 (game timer)
	
	setScore(0, HighScore1P);	// will be replaced if 2p mode
	
	while(TimeRemaining > 0){
     d30:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <TimeRemaining>
     d34:	81 11       	cpse	r24, r1
     d36:	58 cf       	rjmp	.-336    	; 0xbe8 <Game+0xde>
		//_delay_ms(50);	// TODO maybe change this later

	}
	
	// game is over, stop timer
	TCCR4B = (0b000 << CS40);
     d38:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
	
}
     d3c:	0e c0       	rjmp	.+28     	; 0xd5a <Game+0x250>
	Display321();
	
	P1Score = 0;			// reset scores and multipliers
	P2Score = 0;
	P1Multiplier = 1;
	P2Multiplier = 1;
     d3e:	0f 2e       	mov	r0, r31
     d40:	f3 e9       	ldi	r31, 0x93	; 147
     d42:	af 2e       	mov	r10, r31
     d44:	f2 e0       	ldi	r31, 0x02	; 2
     d46:	bf 2e       	mov	r11, r31
     d48:	f0 2d       	mov	r31, r0
     d4a:	0f 2e       	mov	r0, r31
     d4c:	f2 e8       	ldi	r31, 0x82	; 130
     d4e:	cf 2e       	mov	r12, r31
     d50:	f2 e0       	ldi	r31, 0x02	; 2
     d52:	df 2e       	mov	r13, r31
     d54:	f0 2d       	mov	r31, r0
     d56:	10 e0       	ldi	r17, 0x00	; 0
     d58:	68 cf       	rjmp	.-304    	; 0xc2a <Game+0x120>
	}
	
	// game is over, stop timer
	TCCR4B = (0b000 << CS40);
	
}
     d5a:	df 91       	pop	r29
     d5c:	cf 91       	pop	r28
     d5e:	1f 91       	pop	r17
     d60:	0f 91       	pop	r16
     d62:	ff 90       	pop	r15
     d64:	ef 90       	pop	r14
     d66:	df 90       	pop	r13
     d68:	cf 90       	pop	r12
     d6a:	bf 90       	pop	r11
     d6c:	af 90       	pop	r10
     d6e:	9f 90       	pop	r9
     d70:	8f 90       	pop	r8
     d72:	7f 90       	pop	r7
     d74:	6f 90       	pop	r6
     d76:	4f 90       	pop	r4
     d78:	3f 90       	pop	r3
     d7a:	08 95       	ret

00000d7c <AttractCheckGameStart>:
	beep_index = tone;
	note_index = 0;
	TCCR0B = (0b101 << CS00);	//turn on clock for speaker
}

uint8_t AttractCheckGameStart(uint16_t count){
     d7c:	0f 93       	push	r16
     d7e:	1f 93       	push	r17
     d80:	cf 93       	push	r28
     d82:	df 93       	push	r29
	// pauses some time while checking player button inputs, skip and start game if pressed
	for(uint16_t delayCount = 0; delayCount < count; delayCount++){
     d84:	00 97       	sbiw	r24, 0x00	; 0
     d86:	51 f1       	breq	.+84     	; 0xddc <AttractCheckGameStart+0x60>
     d88:	8c 01       	movw	r16, r24
     d8a:	c0 e0       	ldi	r28, 0x00	; 0
     d8c:	d0 e0       	ldi	r29, 0x00	; 0
		//delay some ms between each button light and check for game start
		if(isButtonDown(Player1ButtonX, Player1ButtonY) || isButtonDown(Player2ButtonX, Player2ButtonY)){
     d8e:	60 e0       	ldi	r22, 0x00	; 0
     d90:	83 e0       	ldi	r24, 0x03	; 3
     d92:	0e 94 a4 00 	call	0x148	; 0x148 <isButtonDown>
     d96:	81 11       	cpse	r24, r1
     d98:	06 c0       	rjmp	.+12     	; 0xda6 <AttractCheckGameStart+0x2a>
     d9a:	60 e0       	ldi	r22, 0x00	; 0
     d9c:	82 e0       	ldi	r24, 0x02	; 2
     d9e:	0e 94 a4 00 	call	0x148	; 0x148 <isButtonDown>
     da2:	88 23       	and	r24, r24
     da4:	b1 f0       	breq	.+44     	; 0xdd2 <AttractCheckGameStart+0x56>
			GameMode = isButtonDown(Player2ButtonX, Player2ButtonY);
     da6:	60 e0       	ldi	r22, 0x00	; 0
     da8:	82 e0       	ldi	r24, 0x02	; 2
     daa:	0e 94 a4 00 	call	0x148	; 0x148 <isButtonDown>
     dae:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <GameMode>
			printf("STARTING %dP mode\n", GameMode+1);
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	01 96       	adiw	r24, 0x01	; 1
     db6:	9f 93       	push	r25
     db8:	8f 93       	push	r24
     dba:	88 e3       	ldi	r24, 0x38	; 56
     dbc:	91 e0       	ldi	r25, 0x01	; 1
     dbe:	9f 93       	push	r25
     dc0:	8f 93       	push	r24
     dc2:	0e 94 22 09 	call	0x1244	; 0x1244 <printf>
			return 1;	// instantly return and quit waiting
     dc6:	0f 90       	pop	r0
     dc8:	0f 90       	pop	r0
     dca:	0f 90       	pop	r0
     dcc:	0f 90       	pop	r0
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	06 c0       	rjmp	.+12     	; 0xdde <AttractCheckGameStart+0x62>
	TCCR0B = (0b101 << CS00);	//turn on clock for speaker
}

uint8_t AttractCheckGameStart(uint16_t count){
	// pauses some time while checking player button inputs, skip and start game if pressed
	for(uint16_t delayCount = 0; delayCount < count; delayCount++){
     dd2:	21 96       	adiw	r28, 0x01	; 1
     dd4:	0c 17       	cp	r16, r28
     dd6:	1d 07       	cpc	r17, r29
     dd8:	d1 f6       	brne	.-76     	; 0xd8e <AttractCheckGameStart+0x12>
     dda:	01 c0       	rjmp	.+2      	; 0xdde <AttractCheckGameStart+0x62>
			GameMode = isButtonDown(Player2ButtonX, Player2ButtonY);
			printf("STARTING %dP mode\n", GameMode+1);
			return 1;	// instantly return and quit waiting
		}
	}
	return 0;	// return that it finished without button presses
     ddc:	80 e0       	ldi	r24, 0x00	; 0
}
     dde:	df 91       	pop	r29
     de0:	cf 91       	pop	r28
     de2:	1f 91       	pop	r17
     de4:	0f 91       	pop	r16
     de6:	08 95       	ret

00000de8 <Attractive>:
	
	setScore(1, 0); // TODO MAKE DASHES

}

void Attractive(){
     de8:	cf 93       	push	r28
     dea:	df 93       	push	r29
	setScore(0, HighScore1P);
     dec:	60 91 8c 02 	lds	r22, 0x028C	; 0x80028c <HighScore1P>
     df0:	70 91 8d 02 	lds	r23, 0x028D	; 0x80028d <HighScore1P+0x1>
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
	setScore(1, 0);			// TODO MAKE DASHES AND FLASH "1P" on left and "2P" on right
     dfa:	60 e0       	ldi	r22, 0x00	; 0
     dfc:	70 e0       	ldi	r23, 0x00	; 0
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
	setScore(0, HighScore2P);
     e04:	60 91 9c 02 	lds	r22, 0x029C	; 0x80029c <HighScore2P>
     e08:	70 91 9d 02 	lds	r23, 0x029D	; 0x80029d <HighScore2P+0x1>
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
	while(1){
		uint8_t blinkyMode = rand() % AttractPatternCount;	// todo make random, ADD DISPLAY BLANKING
     e12:	0e 94 12 09 	call	0x1224	; 0x1224 <rand>
		switch(blinkyMode){	// multiple blinky modes (todo randomly pick one)
			case 0:
			for(uint8_t mode = 1; mode > 0; mode--){	// turn on then turn	off (add more mod 2 to repeat muliple times)
				for(uint8_t x = 0; x < 6; x++){			// iterate each LED
     e16:	d0 e0       	ldi	r29, 0x00	; 0
     e18:	11 c0       	rjmp	.+34     	; 0xe3c <Attractive+0x54>
					for (uint8_t y = 1; y < 6; y++){
						setButtonLed(x, y, mode);	//setbuttonled from buttons.h
     e1a:	41 e0       	ldi	r20, 0x01	; 1
     e1c:	6c 2f       	mov	r22, r28
     e1e:	8d 2f       	mov	r24, r29
     e20:	0e 94 b2 00 	call	0x164	; 0x164 <setButtonLed>
						if( AttractCheckGameStart(100) ){
     e24:	84 e6       	ldi	r24, 0x64	; 100
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	0e 94 be 06 	call	0xd7c	; 0xd7c <AttractCheckGameStart>
     e2c:	81 11       	cpse	r24, r1
     e2e:	08 c0       	rjmp	.+16     	; 0xe40 <Attractive+0x58>
		uint8_t blinkyMode = rand() % AttractPatternCount;	// todo make random, ADD DISPLAY BLANKING
		switch(blinkyMode){	// multiple blinky modes (todo randomly pick one)
			case 0:
			for(uint8_t mode = 1; mode > 0; mode--){	// turn on then turn	off (add more mod 2 to repeat muliple times)
				for(uint8_t x = 0; x < 6; x++){			// iterate each LED
					for (uint8_t y = 1; y < 6; y++){
     e30:	cf 5f       	subi	r28, 0xFF	; 255
     e32:	c6 30       	cpi	r28, 0x06	; 6
     e34:	91 f7       	brne	.-28     	; 0xe1a <Attractive+0x32>
	while(1){
		uint8_t blinkyMode = rand() % AttractPatternCount;	// todo make random, ADD DISPLAY BLANKING
		switch(blinkyMode){	// multiple blinky modes (todo randomly pick one)
			case 0:
			for(uint8_t mode = 1; mode > 0; mode--){	// turn on then turn	off (add more mod 2 to repeat muliple times)
				for(uint8_t x = 0; x < 6; x++){			// iterate each LED
     e36:	df 5f       	subi	r29, 0xFF	; 255
     e38:	d6 30       	cpi	r29, 0x06	; 6
     e3a:	59 f3       	breq	.-42     	; 0xe12 <Attractive+0x2a>
	
	setScore(1, 0); // TODO MAKE DASHES

}

void Attractive(){
     e3c:	c1 e0       	ldi	r28, 0x01	; 1
     e3e:	ed cf       	rjmp	.-38     	; 0xe1a <Attractive+0x32>
		}
	}
	EndAttract:
	return;		// start the game

}
     e40:	df 91       	pop	r29
     e42:	cf 91       	pop	r28
     e44:	08 95       	ret

00000e46 <EEPROM_write>:


void EEPROM_write(uint16_t uiAddress, uint8_t ucData)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
     e46:	f9 99       	sbic	0x1f, 1	; 31
     e48:	fe cf       	rjmp	.-4      	; 0xe46 <EEPROM_write>
	;
	/* Set up address and Data Registers */
	EEAR = uiAddress;
     e4a:	92 bd       	out	0x22, r25	; 34
     e4c:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
     e4e:	60 bd       	out	0x20, r22	; 32
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMPE);
     e50:	fa 9a       	sbi	0x1f, 2	; 31
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEPE);
     e52:	f9 9a       	sbi	0x1f, 1	; 31
     e54:	08 95       	ret

00000e56 <EEPROM_read>:
}

uint8_t EEPROM_read(uint16_t uiAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
     e56:	f9 99       	sbic	0x1f, 1	; 31
     e58:	fe cf       	rjmp	.-4      	; 0xe56 <EEPROM_read>
	;
	/* Set up address register */
	EEAR = uiAddress;
     e5a:	92 bd       	out	0x22, r25	; 34
     e5c:	81 bd       	out	0x21, r24	; 33
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
     e5e:	f8 9a       	sbi	0x1f, 0	; 31
	/* Return data from Data Register */
	return EEDR;
     e60:	80 b5       	in	r24, 0x20	; 32
}
     e62:	08 95       	ret

00000e64 <main>:
}

int main(void)
{

	usbQcInit();
     e64:	0e 94 94 08 	call	0x1128	; 0x1128 <usbQcInit>
	QCset12V();
     e68:	0e 94 99 08 	call	0x1132	; 0x1132 <QCset12V>
	
	buttonsInit();
     e6c:	0e 94 98 00 	call	0x130	; 0x130 <buttonsInit>
	init_uart();
     e70:	0e 94 0d 02 	call	0x41a	; 0x41a <init_uart>
	stdout = &mystdout;
     e74:	89 e1       	ldi	r24, 0x19	; 25
     e76:	91 e0       	ldi	r25, 0x01	; 1
     e78:	90 93 a2 02 	sts	0x02A2, r25	; 0x8002a2 <__iob+0x3>
     e7c:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <__iob+0x2>
	
	printf("\n\nWelcome to bartending robot OS ver 4.7B\n");
     e80:	8b e4       	ldi	r24, 0x4B	; 75
     e82:	91 e0       	ldi	r25, 0x01	; 1
     e84:	0e 94 38 09 	call	0x1270	; 0x1270 <puts>
	
	sei();
     e88:	78 94       	sei
		_delay_ms(100);
		
	}*/
	
	// initialize timer0 for audio circuit
	DDRB |= (1 << DDB1) | (1 << DDB5); // output speaker pin B1
     e8a:	84 b1       	in	r24, 0x04	; 4
     e8c:	82 62       	ori	r24, 0x22	; 34
     e8e:	84 b9       	out	0x04, r24	; 4
	ICR1 = 0;	// TOP of counter, start OFF
     e90:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     e94:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	OCR1A = 0; //0x1FFF;	// OFF at
     e98:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     e9c:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TCCR1A |= (1 << COM1A1) | (1 << WGM11); //|(0 << COM1B1);
     ea0:	e0 e8       	ldi	r30, 0x80	; 128
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	82 68       	ori	r24, 0x82	; 130
     ea8:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12 ) | (1 << WGM13) | (1 << CS41);
     eaa:	e1 e8       	ldi	r30, 0x81	; 129
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	8a 61       	ori	r24, 0x1A	; 26
     eb2:	80 83       	st	Z, r24
	PORTB &= ~(1 << 1);
     eb4:	29 98       	cbi	0x05, 1	; 5
	
	TCCR0A = (1 << WGM01);	// enable CTC mode timer 0
     eb6:	82 e0       	ldi	r24, 0x02	; 2
     eb8:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0;		//disable clock for timer0, as it will be enabled when "beeped"
     eba:	15 bc       	out	0x25, r1	; 37
	OCR0A = 125;
     ebc:	9d e7       	ldi	r25, 0x7D	; 125
     ebe:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = ( 1 << OCIE0A );
     ec0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	
	printf("AUDIO TIMERS & PORT SET\n");
     ec4:	85 e7       	ldi	r24, 0x75	; 117
     ec6:	91 e0       	ldi	r25, 0x01	; 1
     ec8:	0e 94 38 09 	call	0x1270	; 0x1270 <puts>

	//load values from eeprom
	
	

	HighScore1P = (EEPROM_read(EEP_ADDR_HighScore1P_H) << 8) | (EEPROM_read(EEP_ADDR_HighScore1P_L));
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	0e 94 2b 07 	call	0xe56	; 0xe56 <EEPROM_read>
     ed4:	c8 2f       	mov	r28, r24
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	0e 94 2b 07 	call	0xe56	; 0xe56 <EEPROM_read>
     ede:	2c 2f       	mov	r18, r28
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	32 2f       	mov	r19, r18
     ee4:	22 27       	eor	r18, r18
     ee6:	28 2b       	or	r18, r24
     ee8:	30 93 8d 02 	sts	0x028D, r19	; 0x80028d <HighScore1P+0x1>
     eec:	20 93 8c 02 	sts	0x028C, r18	; 0x80028c <HighScore1P>
	HighScore2P = (EEPROM_read(EEP_ADDR_HighScore2P_H) << 8) | (EEPROM_read(EEP_ADDR_HighScore2P_L));
     ef0:	82 e0       	ldi	r24, 0x02	; 2
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	0e 94 2b 07 	call	0xe56	; 0xe56 <EEPROM_read>
     ef8:	c8 2f       	mov	r28, r24
     efa:	83 e0       	ldi	r24, 0x03	; 3
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	0e 94 2b 07 	call	0xe56	; 0xe56 <EEPROM_read>
     f02:	2c 2f       	mov	r18, r28
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	32 2f       	mov	r19, r18
     f08:	22 27       	eor	r18, r18
     f0a:	28 2b       	or	r18, r24
     f0c:	30 93 9d 02 	sts	0x029D, r19	; 0x80029d <HighScore2P+0x1>
     f10:	20 93 9c 02 	sts	0x029C, r18	; 0x80029c <HighScore2P>
	RoundTime = EEPROM_read(EEP_ADDR_RoundTime);
     f14:	80 e1       	ldi	r24, 0x10	; 16
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	0e 94 2b 07 	call	0xe56	; 0xe56 <EEPROM_read>
     f1c:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <RoundTime>
	BonusTime = EEPROM_read(EEP_ADDR_BonusTime);
     f20:	80 e2       	ldi	r24, 0x20	; 32
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	0e 94 2b 07 	call	0xe56	; 0xe56 <EEPROM_read>
     f28:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <BonusTime>
	MultiplierMax = EEPROM_read(EEP_ADDR_MultMax);
     f2c:	80 e5       	ldi	r24, 0x50	; 80
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	0e 94 2b 07 	call	0xe56	; 0xe56 <EEPROM_read>
     f34:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <MultiplierMax>
	BonusPointCount = EEPROM_read(EEP_ADDR_BonusPtCount);
     f38:	80 e6       	ldi	r24, 0x60	; 96
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	0e 94 2b 07 	call	0xe56	; 0xe56 <EEPROM_read>
     f40:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <BonusPointCount>
	
	// load random value from eeprom as seed and write new random value
	srand((EEPROM_read(EEP_ADDR_RandomSeed_H) << 8) | EEPROM_read(EEP_ADDR_RandomSeed_L));
     f44:	80 e4       	ldi	r24, 0x40	; 64
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	0e 94 2b 07 	call	0xe56	; 0xe56 <EEPROM_read>
     f4c:	c8 2f       	mov	r28, r24
     f4e:	81 e4       	ldi	r24, 0x41	; 65
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	0e 94 2b 07 	call	0xe56	; 0xe56 <EEPROM_read>
     f56:	2c 2f       	mov	r18, r28
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	32 2f       	mov	r19, r18
     f5c:	22 27       	eor	r18, r18
     f5e:	a9 01       	movw	r20, r18
     f60:	48 2b       	or	r20, r24
     f62:	ca 01       	movw	r24, r20
     f64:	0e 94 17 09 	call	0x122e	; 0x122e <srand>
	EEPROM_write(EEP_ADDR_RandomSeed_H, rand()%256 );
     f68:	0e 94 12 09 	call	0x1224	; 0x1224 <rand>
     f6c:	90 78       	andi	r25, 0x80	; 128
     f6e:	99 23       	and	r25, r25
     f70:	1c f4       	brge	.+6      	; 0xf78 <main+0x114>
     f72:	01 97       	sbiw	r24, 0x01	; 1
     f74:	9f 6f       	ori	r25, 0xFF	; 255
     f76:	01 96       	adiw	r24, 0x01	; 1
     f78:	68 2f       	mov	r22, r24
     f7a:	80 e4       	ldi	r24, 0x40	; 64
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	0e 94 23 07 	call	0xe46	; 0xe46 <EEPROM_write>
	EEPROM_write(EEP_ADDR_RandomSeed_L, rand()%256 );
     f82:	0e 94 12 09 	call	0x1224	; 0x1224 <rand>
     f86:	90 78       	andi	r25, 0x80	; 128
     f88:	99 23       	and	r25, r25
     f8a:	1c f4       	brge	.+6      	; 0xf92 <main+0x12e>
     f8c:	01 97       	sbiw	r24, 0x01	; 1
     f8e:	9f 6f       	ori	r25, 0xFF	; 255
     f90:	01 96       	adiw	r24, 0x01	; 1
     f92:	68 2f       	mov	r22, r24
     f94:	81 e4       	ldi	r24, 0x41	; 65
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	0e 94 23 07 	call	0xe46	; 0xe46 <EEPROM_write>
	
	printf("EEPROM VALUES SET:\n");
     f9c:	8d e8       	ldi	r24, 0x8D	; 141
     f9e:	91 e0       	ldi	r25, 0x01	; 1
     fa0:	0e 94 38 09 	call	0x1270	; 0x1270 <puts>
	printf("HS1P: %d \t HS2P: %d \t RT: %d \t BT: %d \t MMAX: %d \t BPC: %d \n",HighScore1P, HighScore2P, RoundTime, BonusTime, MultiplierMax, BonusPointCount);
     fa4:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <BonusPointCount>
     fa8:	1f 92       	push	r1
     faa:	8f 93       	push	r24
     fac:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <MultiplierMax>
     fb0:	1f 92       	push	r1
     fb2:	8f 93       	push	r24
     fb4:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <BonusTime>
     fb8:	1f 92       	push	r1
     fba:	8f 93       	push	r24
     fbc:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <RoundTime>
     fc0:	1f 92       	push	r1
     fc2:	8f 93       	push	r24
     fc4:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <HighScore2P+0x1>
     fc8:	8f 93       	push	r24
     fca:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <HighScore2P>
     fce:	8f 93       	push	r24
     fd0:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <HighScore1P+0x1>
     fd4:	8f 93       	push	r24
     fd6:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <HighScore1P>
     fda:	8f 93       	push	r24
     fdc:	80 ea       	ldi	r24, 0xA0	; 160
     fde:	91 e0       	ldi	r25, 0x01	; 1
     fe0:	9f 93       	push	r25
     fe2:	8f 93       	push	r24
     fe4:	0e 94 22 09 	call	0x1244	; 0x1244 <printf>
	printf("RANDOMSEED: 0x%X%X\n\n", EEPROM_read(EEP_ADDR_RandomSeed_H), EEPROM_read(EEP_ADDR_RandomSeed_L));
     fe8:	81 e4       	ldi	r24, 0x41	; 65
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	0e 94 2b 07 	call	0xe56	; 0xe56 <EEPROM_read>
     ff0:	c8 2f       	mov	r28, r24
     ff2:	80 e4       	ldi	r24, 0x40	; 64
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	0e 94 2b 07 	call	0xe56	; 0xe56 <EEPROM_read>
     ffa:	1f 92       	push	r1
     ffc:	cf 93       	push	r28
     ffe:	1f 92       	push	r1
    1000:	8f 93       	push	r24
    1002:	8d ed       	ldi	r24, 0xDD	; 221
    1004:	91 e0       	ldi	r25, 0x01	; 1
    1006:	9f 93       	push	r25
    1008:	8f 93       	push	r24
    100a:	0e 94 22 09 	call	0x1244	; 0x1244 <printf>
	
	// set up timer4 for game timer
	TCCR4A = (1 << WGM41);	// CTC mode
    100e:	82 e0       	ldi	r24, 0x02	; 2
    1010:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	TCCR4B = 0;				// disable timer until game start (set to 64 prescale later in code)
    1014:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
	TIMSK4 = (1 << OCIE4A);
    1018:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7e0072>
	OCR4A = 15625;			// set up for 1s
    101c:	89 e0       	ldi	r24, 0x09	; 9
    101e:	9d e3       	ldi	r25, 0x3D	; 61
    1020:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1024:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>

	sei();
    1028:	78 94       	sei
    102a:	8d b7       	in	r24, 0x3d	; 61
    102c:	9e b7       	in	r25, 0x3e	; 62
    102e:	44 96       	adiw	r24, 0x14	; 20
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	f8 94       	cli
    1034:	9e bf       	out	0x3e, r25	; 62
    1036:	0f be       	out	0x3f, r0	; 63
    1038:	8d bf       	out	0x3d, r24	; 61

	while (1)
	{
		printf("STARTING ATTRACT MODE\n");
    103a:	82 ef       	ldi	r24, 0xF2	; 242
    103c:	91 e0       	ldi	r25, 0x01	; 1
    103e:	0e 94 38 09 	call	0x1270	; 0x1270 <puts>
		Attractive();		// loop thru patterns until game start is pressed (TODO IMPLEMENT DEBUG PATTERN)
    1042:	0e 94 f4 06 	call	0xde8	; 0xde8 <Attractive>
		printf("STARTING GAME\n");
    1046:	88 e0       	ldi	r24, 0x08	; 8
    1048:	92 e0       	ldi	r25, 0x02	; 2
    104a:	0e 94 38 09 	call	0x1270	; 0x1270 <puts>
		Game();
    104e:	0e 94 85 05 	call	0xb0a	; 0xb0a <Game>
    1052:	9f ef       	ldi	r25, 0xFF	; 255
    1054:	2e e9       	ldi	r18, 0x9E	; 158
    1056:	44 e2       	ldi	r20, 0x24	; 36
    1058:	91 50       	subi	r25, 0x01	; 1
    105a:	20 40       	sbci	r18, 0x00	; 0
    105c:	40 40       	sbci	r20, 0x00	; 0
    105e:	e1 f7       	brne	.-8      	; 0x1058 <main+0x1f4>
    1060:	00 c0       	rjmp	.+0      	; 0x1062 <main+0x1fe>
    1062:	00 00       	nop
		_delay_ms(750);
		Bonus();
    1064:	0e 94 27 04 	call	0x84e	; 0x84e <Bonus>
		
		if(GameMode == 0){
    1068:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <GameMode>
    106c:	81 11       	cpse	r24, r1
    106e:	12 c0       	rjmp	.+36     	; 0x1094 <main+0x230>
			if(P1Score > HighScore1P){
    1070:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <P1Score>
    1074:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <P1Score+0x1>
    1078:	20 91 8c 02 	lds	r18, 0x028C	; 0x80028c <HighScore1P>
    107c:	30 91 8d 02 	lds	r19, 0x028D	; 0x80028d <HighScore1P+0x1>
    1080:	28 17       	cp	r18, r24
    1082:	39 07       	cpc	r19, r25
    1084:	38 f5       	brcc	.+78     	; 0x10d4 <main+0x270>
				HighScore1P = P1Score;
    1086:	90 93 8d 02 	sts	0x028D, r25	; 0x80028d <HighScore1P+0x1>
    108a:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <HighScore1P>
				ShowWinner();			//if new high score, flash screen
    108e:	0e 94 cf 02 	call	0x59e	; 0x59e <ShowWinner>
    1092:	20 c0       	rjmp	.+64     	; 0x10d4 <main+0x270>
			}
			}else{
			if((P1Score > HighScore2P) || (P2Score > HighScore2P)){
    1094:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <P1Score>
    1098:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <P1Score+0x1>
    109c:	20 91 9c 02 	lds	r18, 0x029C	; 0x80029c <HighScore2P>
    10a0:	30 91 9d 02 	lds	r19, 0x029D	; 0x80029d <HighScore2P+0x1>
    10a4:	28 17       	cp	r18, r24
    10a6:	39 07       	cpc	r19, r25
    10a8:	38 f0       	brcs	.+14     	; 0x10b8 <main+0x254>
    10aa:	40 91 90 02 	lds	r20, 0x0290	; 0x800290 <P2Score>
    10ae:	50 91 91 02 	lds	r21, 0x0291	; 0x800291 <P2Score+0x1>
    10b2:	24 17       	cp	r18, r20
    10b4:	35 07       	cpc	r19, r21
    10b6:	60 f4       	brcc	.+24     	; 0x10d0 <main+0x26c>
				HighScore2P = (P1Score > P2Score ? P1Score : P2Score);
    10b8:	20 91 90 02 	lds	r18, 0x0290	; 0x800290 <P2Score>
    10bc:	30 91 91 02 	lds	r19, 0x0291	; 0x800291 <P2Score+0x1>
    10c0:	28 17       	cp	r18, r24
    10c2:	39 07       	cpc	r19, r25
    10c4:	08 f4       	brcc	.+2      	; 0x10c8 <main+0x264>
    10c6:	9c 01       	movw	r18, r24
    10c8:	30 93 9d 02 	sts	0x029D, r19	; 0x80029d <HighScore2P+0x1>
    10cc:	20 93 9c 02 	sts	0x029C, r18	; 0x80029c <HighScore2P>
			}
			ShowWinner();				//if 2 player mode show winner anyway
    10d0:	0e 94 cf 02 	call	0x59e	; 0x59e <ShowWinner>
    10d4:	5f ef       	ldi	r21, 0xFF	; 255
    10d6:	8e e9       	ldi	r24, 0x9E	; 158
    10d8:	94 e2       	ldi	r25, 0x24	; 36
    10da:	51 50       	subi	r21, 0x01	; 1
    10dc:	80 40       	sbci	r24, 0x00	; 0
    10de:	90 40       	sbci	r25, 0x00	; 0
    10e0:	e1 f7       	brne	.-8      	; 0x10da <main+0x276>
    10e2:	00 c0       	rjmp	.+0      	; 0x10e4 <main+0x280>
    10e4:	00 00       	nop
    10e6:	a9 cf       	rjmp	.-174    	; 0x103a <main+0x1d6>

000010e8 <_dm0V>:
    10e8:	70 98       	cbi	0x0e, 0	; 14
    10ea:	68 9a       	sbi	0x0d, 0	; 13
    10ec:	08 95       	ret

000010ee <_dp600mV>:
    10ee:	69 98       	cbi	0x0d, 1	; 13
    10f0:	08 95       	ret

000010f2 <QCset5V>:
    10f2:	0e 94 77 08 	call	0x10ee	; 0x10ee <_dp600mV>
    10f6:	0e 94 74 08 	call	0x10e8	; 0x10e8 <_dm0V>
    10fa:	08 95       	ret

000010fc <_dm600mV>:
    10fc:	68 98       	cbi	0x0d, 0	; 13
    10fe:	08 95       	ret

00001100 <_handshake>:
    1100:	0e 94 7e 08 	call	0x10fc	; 0x10fc <_dm600mV>
    1104:	2f ef       	ldi	r18, 0xFF	; 255
    1106:	8d e3       	ldi	r24, 0x3D	; 61
    1108:	99 e4       	ldi	r25, 0x49	; 73
    110a:	21 50       	subi	r18, 0x01	; 1
    110c:	80 40       	sbci	r24, 0x00	; 0
    110e:	90 40       	sbci	r25, 0x00	; 0
    1110:	e1 f7       	brne	.-8      	; 0x110a <_handshake+0xa>
    1112:	00 c0       	rjmp	.+0      	; 0x1114 <_handshake+0x14>
    1114:	00 00       	nop
    1116:	0e 94 74 08 	call	0x10e8	; 0x10e8 <_dm0V>
    111a:	8f e3       	ldi	r24, 0x3F	; 63
    111c:	9f e1       	ldi	r25, 0x1F	; 31
    111e:	01 97       	sbiw	r24, 0x01	; 1
    1120:	f1 f7       	brne	.-4      	; 0x111e <_handshake+0x1e>
    1122:	00 c0       	rjmp	.+0      	; 0x1124 <_handshake+0x24>
    1124:	00 00       	nop
    1126:	08 95       	ret

00001128 <usbQcInit>:
    1128:	0e 94 80 08 	call	0x1100	; 0x1100 <_handshake>
    112c:	0e 94 79 08 	call	0x10f2	; 0x10f2 <QCset5V>
    1130:	08 95       	ret

00001132 <QCset12V>:
    1132:	0e 94 77 08 	call	0x10ee	; 0x10ee <_dp600mV>
    1136:	0e 94 7e 08 	call	0x10fc	; 0x10fc <_dm600mV>
    113a:	08 95       	ret

0000113c <__divmodhi4>:
    113c:	97 fb       	bst	r25, 7
    113e:	07 2e       	mov	r0, r23
    1140:	16 f4       	brtc	.+4      	; 0x1146 <__divmodhi4+0xa>
    1142:	00 94       	com	r0
    1144:	07 d0       	rcall	.+14     	; 0x1154 <__divmodhi4_neg1>
    1146:	77 fd       	sbrc	r23, 7
    1148:	09 d0       	rcall	.+18     	; 0x115c <__divmodhi4_neg2>
    114a:	0e 94 b2 08 	call	0x1164	; 0x1164 <__udivmodhi4>
    114e:	07 fc       	sbrc	r0, 7
    1150:	05 d0       	rcall	.+10     	; 0x115c <__divmodhi4_neg2>
    1152:	3e f4       	brtc	.+14     	; 0x1162 <__divmodhi4_exit>

00001154 <__divmodhi4_neg1>:
    1154:	90 95       	com	r25
    1156:	81 95       	neg	r24
    1158:	9f 4f       	sbci	r25, 0xFF	; 255
    115a:	08 95       	ret

0000115c <__divmodhi4_neg2>:
    115c:	70 95       	com	r23
    115e:	61 95       	neg	r22
    1160:	7f 4f       	sbci	r23, 0xFF	; 255

00001162 <__divmodhi4_exit>:
    1162:	08 95       	ret

00001164 <__udivmodhi4>:
    1164:	aa 1b       	sub	r26, r26
    1166:	bb 1b       	sub	r27, r27
    1168:	51 e1       	ldi	r21, 0x11	; 17
    116a:	07 c0       	rjmp	.+14     	; 0x117a <__udivmodhi4_ep>

0000116c <__udivmodhi4_loop>:
    116c:	aa 1f       	adc	r26, r26
    116e:	bb 1f       	adc	r27, r27
    1170:	a6 17       	cp	r26, r22
    1172:	b7 07       	cpc	r27, r23
    1174:	10 f0       	brcs	.+4      	; 0x117a <__udivmodhi4_ep>
    1176:	a6 1b       	sub	r26, r22
    1178:	b7 0b       	sbc	r27, r23

0000117a <__udivmodhi4_ep>:
    117a:	88 1f       	adc	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	5a 95       	dec	r21
    1180:	a9 f7       	brne	.-22     	; 0x116c <__udivmodhi4_loop>
    1182:	80 95       	com	r24
    1184:	90 95       	com	r25
    1186:	bc 01       	movw	r22, r24
    1188:	cd 01       	movw	r24, r26
    118a:	08 95       	ret

0000118c <do_rand>:
    118c:	8f 92       	push	r8
    118e:	9f 92       	push	r9
    1190:	af 92       	push	r10
    1192:	bf 92       	push	r11
    1194:	cf 92       	push	r12
    1196:	df 92       	push	r13
    1198:	ef 92       	push	r14
    119a:	ff 92       	push	r15
    119c:	cf 93       	push	r28
    119e:	df 93       	push	r29
    11a0:	ec 01       	movw	r28, r24
    11a2:	68 81       	ld	r22, Y
    11a4:	79 81       	ldd	r23, Y+1	; 0x01
    11a6:	8a 81       	ldd	r24, Y+2	; 0x02
    11a8:	9b 81       	ldd	r25, Y+3	; 0x03
    11aa:	61 15       	cp	r22, r1
    11ac:	71 05       	cpc	r23, r1
    11ae:	81 05       	cpc	r24, r1
    11b0:	91 05       	cpc	r25, r1
    11b2:	21 f4       	brne	.+8      	; 0x11bc <do_rand+0x30>
    11b4:	64 e2       	ldi	r22, 0x24	; 36
    11b6:	79 ed       	ldi	r23, 0xD9	; 217
    11b8:	8b e5       	ldi	r24, 0x5B	; 91
    11ba:	97 e0       	ldi	r25, 0x07	; 7
    11bc:	2d e1       	ldi	r18, 0x1D	; 29
    11be:	33 ef       	ldi	r19, 0xF3	; 243
    11c0:	41 e0       	ldi	r20, 0x01	; 1
    11c2:	50 e0       	ldi	r21, 0x00	; 0
    11c4:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <__divmodsi4>
    11c8:	49 01       	movw	r8, r18
    11ca:	5a 01       	movw	r10, r20
    11cc:	9b 01       	movw	r18, r22
    11ce:	ac 01       	movw	r20, r24
    11d0:	a7 ea       	ldi	r26, 0xA7	; 167
    11d2:	b1 e4       	ldi	r27, 0x41	; 65
    11d4:	0e 94 18 0c 	call	0x1830	; 0x1830 <__muluhisi3>
    11d8:	6b 01       	movw	r12, r22
    11da:	7c 01       	movw	r14, r24
    11dc:	ac ee       	ldi	r26, 0xEC	; 236
    11de:	b4 ef       	ldi	r27, 0xF4	; 244
    11e0:	a5 01       	movw	r20, r10
    11e2:	94 01       	movw	r18, r8
    11e4:	0e 94 26 0c 	call	0x184c	; 0x184c <__mulohisi3>
    11e8:	dc 01       	movw	r26, r24
    11ea:	cb 01       	movw	r24, r22
    11ec:	8c 0d       	add	r24, r12
    11ee:	9d 1d       	adc	r25, r13
    11f0:	ae 1d       	adc	r26, r14
    11f2:	bf 1d       	adc	r27, r15
    11f4:	b7 ff       	sbrs	r27, 7
    11f6:	03 c0       	rjmp	.+6      	; 0x11fe <do_rand+0x72>
    11f8:	01 97       	sbiw	r24, 0x01	; 1
    11fa:	a1 09       	sbc	r26, r1
    11fc:	b0 48       	sbci	r27, 0x80	; 128
    11fe:	88 83       	st	Y, r24
    1200:	99 83       	std	Y+1, r25	; 0x01
    1202:	aa 83       	std	Y+2, r26	; 0x02
    1204:	bb 83       	std	Y+3, r27	; 0x03
    1206:	9f 77       	andi	r25, 0x7F	; 127
    1208:	df 91       	pop	r29
    120a:	cf 91       	pop	r28
    120c:	ff 90       	pop	r15
    120e:	ef 90       	pop	r14
    1210:	df 90       	pop	r13
    1212:	cf 90       	pop	r12
    1214:	bf 90       	pop	r11
    1216:	af 90       	pop	r10
    1218:	9f 90       	pop	r9
    121a:	8f 90       	pop	r8
    121c:	08 95       	ret

0000121e <rand_r>:
    121e:	0e 94 c6 08 	call	0x118c	; 0x118c <do_rand>
    1222:	08 95       	ret

00001224 <rand>:
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	91 e0       	ldi	r25, 0x01	; 1
    1228:	0e 94 c6 08 	call	0x118c	; 0x118c <do_rand>
    122c:	08 95       	ret

0000122e <srand>:
    122e:	a0 e0       	ldi	r26, 0x00	; 0
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    1236:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    123a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    123e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    1242:	08 95       	ret

00001244 <printf>:
    1244:	a0 e0       	ldi	r26, 0x00	; 0
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	e8 e2       	ldi	r30, 0x28	; 40
    124a:	f9 e0       	ldi	r31, 0x09	; 9
    124c:	0c 94 3b 0c 	jmp	0x1876	; 0x1876 <__prologue_saves__+0x20>
    1250:	ae 01       	movw	r20, r28
    1252:	4b 5f       	subi	r20, 0xFB	; 251
    1254:	5f 4f       	sbci	r21, 0xFF	; 255
    1256:	fa 01       	movw	r30, r20
    1258:	61 91       	ld	r22, Z+
    125a:	71 91       	ld	r23, Z+
    125c:	af 01       	movw	r20, r30
    125e:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <__iob+0x2>
    1262:	90 91 a2 02 	lds	r25, 0x02A2	; 0x8002a2 <__iob+0x3>
    1266:	0e 94 68 09 	call	0x12d0	; 0x12d0 <vfprintf>
    126a:	e2 e0       	ldi	r30, 0x02	; 2
    126c:	0c 94 57 0c 	jmp	0x18ae	; 0x18ae <__epilogue_restores__+0x20>

00001270 <puts>:
    1270:	0f 93       	push	r16
    1272:	1f 93       	push	r17
    1274:	cf 93       	push	r28
    1276:	df 93       	push	r29
    1278:	e0 91 a1 02 	lds	r30, 0x02A1	; 0x8002a1 <__iob+0x2>
    127c:	f0 91 a2 02 	lds	r31, 0x02A2	; 0x8002a2 <__iob+0x3>
    1280:	23 81       	ldd	r18, Z+3	; 0x03
    1282:	21 ff       	sbrs	r18, 1
    1284:	1b c0       	rjmp	.+54     	; 0x12bc <puts+0x4c>
    1286:	8c 01       	movw	r16, r24
    1288:	d0 e0       	ldi	r29, 0x00	; 0
    128a:	c0 e0       	ldi	r28, 0x00	; 0
    128c:	f8 01       	movw	r30, r16
    128e:	81 91       	ld	r24, Z+
    1290:	8f 01       	movw	r16, r30
    1292:	60 91 a1 02 	lds	r22, 0x02A1	; 0x8002a1 <__iob+0x2>
    1296:	70 91 a2 02 	lds	r23, 0x02A2	; 0x8002a2 <__iob+0x3>
    129a:	db 01       	movw	r26, r22
    129c:	18 96       	adiw	r26, 0x08	; 8
    129e:	ed 91       	ld	r30, X+
    12a0:	fc 91       	ld	r31, X
    12a2:	19 97       	sbiw	r26, 0x09	; 9
    12a4:	88 23       	and	r24, r24
    12a6:	31 f0       	breq	.+12     	; 0x12b4 <puts+0x44>
    12a8:	09 95       	icall
    12aa:	89 2b       	or	r24, r25
    12ac:	79 f3       	breq	.-34     	; 0x128c <puts+0x1c>
    12ae:	df ef       	ldi	r29, 0xFF	; 255
    12b0:	cf ef       	ldi	r28, 0xFF	; 255
    12b2:	ec cf       	rjmp	.-40     	; 0x128c <puts+0x1c>
    12b4:	8a e0       	ldi	r24, 0x0A	; 10
    12b6:	09 95       	icall
    12b8:	89 2b       	or	r24, r25
    12ba:	19 f0       	breq	.+6      	; 0x12c2 <puts+0x52>
    12bc:	8f ef       	ldi	r24, 0xFF	; 255
    12be:	9f ef       	ldi	r25, 0xFF	; 255
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <puts+0x56>
    12c2:	8d 2f       	mov	r24, r29
    12c4:	9c 2f       	mov	r25, r28
    12c6:	df 91       	pop	r29
    12c8:	cf 91       	pop	r28
    12ca:	1f 91       	pop	r17
    12cc:	0f 91       	pop	r16
    12ce:	08 95       	ret

000012d0 <vfprintf>:
    12d0:	ab e0       	ldi	r26, 0x0B	; 11
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	ee e6       	ldi	r30, 0x6E	; 110
    12d6:	f9 e0       	ldi	r31, 0x09	; 9
    12d8:	0c 94 2b 0c 	jmp	0x1856	; 0x1856 <__prologue_saves__>
    12dc:	6c 01       	movw	r12, r24
    12de:	7b 01       	movw	r14, r22
    12e0:	8a 01       	movw	r16, r20
    12e2:	fc 01       	movw	r30, r24
    12e4:	17 82       	std	Z+7, r1	; 0x07
    12e6:	16 82       	std	Z+6, r1	; 0x06
    12e8:	83 81       	ldd	r24, Z+3	; 0x03
    12ea:	81 ff       	sbrs	r24, 1
    12ec:	cc c1       	rjmp	.+920    	; 0x1686 <vfprintf+0x3b6>
    12ee:	ce 01       	movw	r24, r28
    12f0:	01 96       	adiw	r24, 0x01	; 1
    12f2:	3c 01       	movw	r6, r24
    12f4:	f6 01       	movw	r30, r12
    12f6:	93 81       	ldd	r25, Z+3	; 0x03
    12f8:	f7 01       	movw	r30, r14
    12fa:	93 fd       	sbrc	r25, 3
    12fc:	85 91       	lpm	r24, Z+
    12fe:	93 ff       	sbrs	r25, 3
    1300:	81 91       	ld	r24, Z+
    1302:	7f 01       	movw	r14, r30
    1304:	88 23       	and	r24, r24
    1306:	09 f4       	brne	.+2      	; 0x130a <vfprintf+0x3a>
    1308:	ba c1       	rjmp	.+884    	; 0x167e <vfprintf+0x3ae>
    130a:	85 32       	cpi	r24, 0x25	; 37
    130c:	39 f4       	brne	.+14     	; 0x131c <vfprintf+0x4c>
    130e:	93 fd       	sbrc	r25, 3
    1310:	85 91       	lpm	r24, Z+
    1312:	93 ff       	sbrs	r25, 3
    1314:	81 91       	ld	r24, Z+
    1316:	7f 01       	movw	r14, r30
    1318:	85 32       	cpi	r24, 0x25	; 37
    131a:	29 f4       	brne	.+10     	; 0x1326 <vfprintf+0x56>
    131c:	b6 01       	movw	r22, r12
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	0e 94 5f 0b 	call	0x16be	; 0x16be <fputc>
    1324:	e7 cf       	rjmp	.-50     	; 0x12f4 <vfprintf+0x24>
    1326:	91 2c       	mov	r9, r1
    1328:	21 2c       	mov	r2, r1
    132a:	31 2c       	mov	r3, r1
    132c:	ff e1       	ldi	r31, 0x1F	; 31
    132e:	f3 15       	cp	r31, r3
    1330:	d8 f0       	brcs	.+54     	; 0x1368 <vfprintf+0x98>
    1332:	8b 32       	cpi	r24, 0x2B	; 43
    1334:	79 f0       	breq	.+30     	; 0x1354 <vfprintf+0x84>
    1336:	38 f4       	brcc	.+14     	; 0x1346 <vfprintf+0x76>
    1338:	80 32       	cpi	r24, 0x20	; 32
    133a:	79 f0       	breq	.+30     	; 0x135a <vfprintf+0x8a>
    133c:	83 32       	cpi	r24, 0x23	; 35
    133e:	a1 f4       	brne	.+40     	; 0x1368 <vfprintf+0x98>
    1340:	23 2d       	mov	r18, r3
    1342:	20 61       	ori	r18, 0x10	; 16
    1344:	1d c0       	rjmp	.+58     	; 0x1380 <vfprintf+0xb0>
    1346:	8d 32       	cpi	r24, 0x2D	; 45
    1348:	61 f0       	breq	.+24     	; 0x1362 <vfprintf+0x92>
    134a:	80 33       	cpi	r24, 0x30	; 48
    134c:	69 f4       	brne	.+26     	; 0x1368 <vfprintf+0x98>
    134e:	23 2d       	mov	r18, r3
    1350:	21 60       	ori	r18, 0x01	; 1
    1352:	16 c0       	rjmp	.+44     	; 0x1380 <vfprintf+0xb0>
    1354:	83 2d       	mov	r24, r3
    1356:	82 60       	ori	r24, 0x02	; 2
    1358:	38 2e       	mov	r3, r24
    135a:	e3 2d       	mov	r30, r3
    135c:	e4 60       	ori	r30, 0x04	; 4
    135e:	3e 2e       	mov	r3, r30
    1360:	2a c0       	rjmp	.+84     	; 0x13b6 <vfprintf+0xe6>
    1362:	f3 2d       	mov	r31, r3
    1364:	f8 60       	ori	r31, 0x08	; 8
    1366:	1d c0       	rjmp	.+58     	; 0x13a2 <vfprintf+0xd2>
    1368:	37 fc       	sbrc	r3, 7
    136a:	2d c0       	rjmp	.+90     	; 0x13c6 <vfprintf+0xf6>
    136c:	20 ed       	ldi	r18, 0xD0	; 208
    136e:	28 0f       	add	r18, r24
    1370:	2a 30       	cpi	r18, 0x0A	; 10
    1372:	40 f0       	brcs	.+16     	; 0x1384 <vfprintf+0xb4>
    1374:	8e 32       	cpi	r24, 0x2E	; 46
    1376:	b9 f4       	brne	.+46     	; 0x13a6 <vfprintf+0xd6>
    1378:	36 fc       	sbrc	r3, 6
    137a:	81 c1       	rjmp	.+770    	; 0x167e <vfprintf+0x3ae>
    137c:	23 2d       	mov	r18, r3
    137e:	20 64       	ori	r18, 0x40	; 64
    1380:	32 2e       	mov	r3, r18
    1382:	19 c0       	rjmp	.+50     	; 0x13b6 <vfprintf+0xe6>
    1384:	36 fe       	sbrs	r3, 6
    1386:	06 c0       	rjmp	.+12     	; 0x1394 <vfprintf+0xc4>
    1388:	8a e0       	ldi	r24, 0x0A	; 10
    138a:	98 9e       	mul	r9, r24
    138c:	20 0d       	add	r18, r0
    138e:	11 24       	eor	r1, r1
    1390:	92 2e       	mov	r9, r18
    1392:	11 c0       	rjmp	.+34     	; 0x13b6 <vfprintf+0xe6>
    1394:	ea e0       	ldi	r30, 0x0A	; 10
    1396:	2e 9e       	mul	r2, r30
    1398:	20 0d       	add	r18, r0
    139a:	11 24       	eor	r1, r1
    139c:	22 2e       	mov	r2, r18
    139e:	f3 2d       	mov	r31, r3
    13a0:	f0 62       	ori	r31, 0x20	; 32
    13a2:	3f 2e       	mov	r3, r31
    13a4:	08 c0       	rjmp	.+16     	; 0x13b6 <vfprintf+0xe6>
    13a6:	8c 36       	cpi	r24, 0x6C	; 108
    13a8:	21 f4       	brne	.+8      	; 0x13b2 <vfprintf+0xe2>
    13aa:	83 2d       	mov	r24, r3
    13ac:	80 68       	ori	r24, 0x80	; 128
    13ae:	38 2e       	mov	r3, r24
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <vfprintf+0xe6>
    13b2:	88 36       	cpi	r24, 0x68	; 104
    13b4:	41 f4       	brne	.+16     	; 0x13c6 <vfprintf+0xf6>
    13b6:	f7 01       	movw	r30, r14
    13b8:	93 fd       	sbrc	r25, 3
    13ba:	85 91       	lpm	r24, Z+
    13bc:	93 ff       	sbrs	r25, 3
    13be:	81 91       	ld	r24, Z+
    13c0:	7f 01       	movw	r14, r30
    13c2:	81 11       	cpse	r24, r1
    13c4:	b3 cf       	rjmp	.-154    	; 0x132c <vfprintf+0x5c>
    13c6:	98 2f       	mov	r25, r24
    13c8:	9f 7d       	andi	r25, 0xDF	; 223
    13ca:	95 54       	subi	r25, 0x45	; 69
    13cc:	93 30       	cpi	r25, 0x03	; 3
    13ce:	28 f4       	brcc	.+10     	; 0x13da <vfprintf+0x10a>
    13d0:	0c 5f       	subi	r16, 0xFC	; 252
    13d2:	1f 4f       	sbci	r17, 0xFF	; 255
    13d4:	9f e3       	ldi	r25, 0x3F	; 63
    13d6:	99 83       	std	Y+1, r25	; 0x01
    13d8:	0d c0       	rjmp	.+26     	; 0x13f4 <vfprintf+0x124>
    13da:	83 36       	cpi	r24, 0x63	; 99
    13dc:	31 f0       	breq	.+12     	; 0x13ea <vfprintf+0x11a>
    13de:	83 37       	cpi	r24, 0x73	; 115
    13e0:	71 f0       	breq	.+28     	; 0x13fe <vfprintf+0x12e>
    13e2:	83 35       	cpi	r24, 0x53	; 83
    13e4:	09 f0       	breq	.+2      	; 0x13e8 <vfprintf+0x118>
    13e6:	59 c0       	rjmp	.+178    	; 0x149a <vfprintf+0x1ca>
    13e8:	21 c0       	rjmp	.+66     	; 0x142c <vfprintf+0x15c>
    13ea:	f8 01       	movw	r30, r16
    13ec:	80 81       	ld	r24, Z
    13ee:	89 83       	std	Y+1, r24	; 0x01
    13f0:	0e 5f       	subi	r16, 0xFE	; 254
    13f2:	1f 4f       	sbci	r17, 0xFF	; 255
    13f4:	88 24       	eor	r8, r8
    13f6:	83 94       	inc	r8
    13f8:	91 2c       	mov	r9, r1
    13fa:	53 01       	movw	r10, r6
    13fc:	13 c0       	rjmp	.+38     	; 0x1424 <vfprintf+0x154>
    13fe:	28 01       	movw	r4, r16
    1400:	f2 e0       	ldi	r31, 0x02	; 2
    1402:	4f 0e       	add	r4, r31
    1404:	51 1c       	adc	r5, r1
    1406:	f8 01       	movw	r30, r16
    1408:	a0 80       	ld	r10, Z
    140a:	b1 80       	ldd	r11, Z+1	; 0x01
    140c:	36 fe       	sbrs	r3, 6
    140e:	03 c0       	rjmp	.+6      	; 0x1416 <vfprintf+0x146>
    1410:	69 2d       	mov	r22, r9
    1412:	70 e0       	ldi	r23, 0x00	; 0
    1414:	02 c0       	rjmp	.+4      	; 0x141a <vfprintf+0x14a>
    1416:	6f ef       	ldi	r22, 0xFF	; 255
    1418:	7f ef       	ldi	r23, 0xFF	; 255
    141a:	c5 01       	movw	r24, r10
    141c:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <strnlen>
    1420:	4c 01       	movw	r8, r24
    1422:	82 01       	movw	r16, r4
    1424:	f3 2d       	mov	r31, r3
    1426:	ff 77       	andi	r31, 0x7F	; 127
    1428:	3f 2e       	mov	r3, r31
    142a:	16 c0       	rjmp	.+44     	; 0x1458 <vfprintf+0x188>
    142c:	28 01       	movw	r4, r16
    142e:	22 e0       	ldi	r18, 0x02	; 2
    1430:	42 0e       	add	r4, r18
    1432:	51 1c       	adc	r5, r1
    1434:	f8 01       	movw	r30, r16
    1436:	a0 80       	ld	r10, Z
    1438:	b1 80       	ldd	r11, Z+1	; 0x01
    143a:	36 fe       	sbrs	r3, 6
    143c:	03 c0       	rjmp	.+6      	; 0x1444 <vfprintf+0x174>
    143e:	69 2d       	mov	r22, r9
    1440:	70 e0       	ldi	r23, 0x00	; 0
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <vfprintf+0x178>
    1444:	6f ef       	ldi	r22, 0xFF	; 255
    1446:	7f ef       	ldi	r23, 0xFF	; 255
    1448:	c5 01       	movw	r24, r10
    144a:	0e 94 49 0b 	call	0x1692	; 0x1692 <strnlen_P>
    144e:	4c 01       	movw	r8, r24
    1450:	f3 2d       	mov	r31, r3
    1452:	f0 68       	ori	r31, 0x80	; 128
    1454:	3f 2e       	mov	r3, r31
    1456:	82 01       	movw	r16, r4
    1458:	33 fc       	sbrc	r3, 3
    145a:	1b c0       	rjmp	.+54     	; 0x1492 <vfprintf+0x1c2>
    145c:	82 2d       	mov	r24, r2
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	88 16       	cp	r8, r24
    1462:	99 06       	cpc	r9, r25
    1464:	b0 f4       	brcc	.+44     	; 0x1492 <vfprintf+0x1c2>
    1466:	b6 01       	movw	r22, r12
    1468:	80 e2       	ldi	r24, 0x20	; 32
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	0e 94 5f 0b 	call	0x16be	; 0x16be <fputc>
    1470:	2a 94       	dec	r2
    1472:	f4 cf       	rjmp	.-24     	; 0x145c <vfprintf+0x18c>
    1474:	f5 01       	movw	r30, r10
    1476:	37 fc       	sbrc	r3, 7
    1478:	85 91       	lpm	r24, Z+
    147a:	37 fe       	sbrs	r3, 7
    147c:	81 91       	ld	r24, Z+
    147e:	5f 01       	movw	r10, r30
    1480:	b6 01       	movw	r22, r12
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	0e 94 5f 0b 	call	0x16be	; 0x16be <fputc>
    1488:	21 10       	cpse	r2, r1
    148a:	2a 94       	dec	r2
    148c:	21 e0       	ldi	r18, 0x01	; 1
    148e:	82 1a       	sub	r8, r18
    1490:	91 08       	sbc	r9, r1
    1492:	81 14       	cp	r8, r1
    1494:	91 04       	cpc	r9, r1
    1496:	71 f7       	brne	.-36     	; 0x1474 <vfprintf+0x1a4>
    1498:	e8 c0       	rjmp	.+464    	; 0x166a <vfprintf+0x39a>
    149a:	84 36       	cpi	r24, 0x64	; 100
    149c:	11 f0       	breq	.+4      	; 0x14a2 <vfprintf+0x1d2>
    149e:	89 36       	cpi	r24, 0x69	; 105
    14a0:	41 f5       	brne	.+80     	; 0x14f2 <vfprintf+0x222>
    14a2:	f8 01       	movw	r30, r16
    14a4:	37 fe       	sbrs	r3, 7
    14a6:	07 c0       	rjmp	.+14     	; 0x14b6 <vfprintf+0x1e6>
    14a8:	60 81       	ld	r22, Z
    14aa:	71 81       	ldd	r23, Z+1	; 0x01
    14ac:	82 81       	ldd	r24, Z+2	; 0x02
    14ae:	93 81       	ldd	r25, Z+3	; 0x03
    14b0:	0c 5f       	subi	r16, 0xFC	; 252
    14b2:	1f 4f       	sbci	r17, 0xFF	; 255
    14b4:	08 c0       	rjmp	.+16     	; 0x14c6 <vfprintf+0x1f6>
    14b6:	60 81       	ld	r22, Z
    14b8:	71 81       	ldd	r23, Z+1	; 0x01
    14ba:	07 2e       	mov	r0, r23
    14bc:	00 0c       	add	r0, r0
    14be:	88 0b       	sbc	r24, r24
    14c0:	99 0b       	sbc	r25, r25
    14c2:	0e 5f       	subi	r16, 0xFE	; 254
    14c4:	1f 4f       	sbci	r17, 0xFF	; 255
    14c6:	f3 2d       	mov	r31, r3
    14c8:	ff 76       	andi	r31, 0x6F	; 111
    14ca:	3f 2e       	mov	r3, r31
    14cc:	97 ff       	sbrs	r25, 7
    14ce:	09 c0       	rjmp	.+18     	; 0x14e2 <vfprintf+0x212>
    14d0:	90 95       	com	r25
    14d2:	80 95       	com	r24
    14d4:	70 95       	com	r23
    14d6:	61 95       	neg	r22
    14d8:	7f 4f       	sbci	r23, 0xFF	; 255
    14da:	8f 4f       	sbci	r24, 0xFF	; 255
    14dc:	9f 4f       	sbci	r25, 0xFF	; 255
    14de:	f0 68       	ori	r31, 0x80	; 128
    14e0:	3f 2e       	mov	r3, r31
    14e2:	2a e0       	ldi	r18, 0x0A	; 10
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	a3 01       	movw	r20, r6
    14e8:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__ultoa_invert>
    14ec:	88 2e       	mov	r8, r24
    14ee:	86 18       	sub	r8, r6
    14f0:	45 c0       	rjmp	.+138    	; 0x157c <vfprintf+0x2ac>
    14f2:	85 37       	cpi	r24, 0x75	; 117
    14f4:	31 f4       	brne	.+12     	; 0x1502 <vfprintf+0x232>
    14f6:	23 2d       	mov	r18, r3
    14f8:	2f 7e       	andi	r18, 0xEF	; 239
    14fa:	b2 2e       	mov	r11, r18
    14fc:	2a e0       	ldi	r18, 0x0A	; 10
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	25 c0       	rjmp	.+74     	; 0x154c <vfprintf+0x27c>
    1502:	93 2d       	mov	r25, r3
    1504:	99 7f       	andi	r25, 0xF9	; 249
    1506:	b9 2e       	mov	r11, r25
    1508:	8f 36       	cpi	r24, 0x6F	; 111
    150a:	c1 f0       	breq	.+48     	; 0x153c <vfprintf+0x26c>
    150c:	18 f4       	brcc	.+6      	; 0x1514 <vfprintf+0x244>
    150e:	88 35       	cpi	r24, 0x58	; 88
    1510:	79 f0       	breq	.+30     	; 0x1530 <vfprintf+0x260>
    1512:	b5 c0       	rjmp	.+362    	; 0x167e <vfprintf+0x3ae>
    1514:	80 37       	cpi	r24, 0x70	; 112
    1516:	19 f0       	breq	.+6      	; 0x151e <vfprintf+0x24e>
    1518:	88 37       	cpi	r24, 0x78	; 120
    151a:	21 f0       	breq	.+8      	; 0x1524 <vfprintf+0x254>
    151c:	b0 c0       	rjmp	.+352    	; 0x167e <vfprintf+0x3ae>
    151e:	e9 2f       	mov	r30, r25
    1520:	e0 61       	ori	r30, 0x10	; 16
    1522:	be 2e       	mov	r11, r30
    1524:	b4 fe       	sbrs	r11, 4
    1526:	0d c0       	rjmp	.+26     	; 0x1542 <vfprintf+0x272>
    1528:	fb 2d       	mov	r31, r11
    152a:	f4 60       	ori	r31, 0x04	; 4
    152c:	bf 2e       	mov	r11, r31
    152e:	09 c0       	rjmp	.+18     	; 0x1542 <vfprintf+0x272>
    1530:	34 fe       	sbrs	r3, 4
    1532:	0a c0       	rjmp	.+20     	; 0x1548 <vfprintf+0x278>
    1534:	29 2f       	mov	r18, r25
    1536:	26 60       	ori	r18, 0x06	; 6
    1538:	b2 2e       	mov	r11, r18
    153a:	06 c0       	rjmp	.+12     	; 0x1548 <vfprintf+0x278>
    153c:	28 e0       	ldi	r18, 0x08	; 8
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	05 c0       	rjmp	.+10     	; 0x154c <vfprintf+0x27c>
    1542:	20 e1       	ldi	r18, 0x10	; 16
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	02 c0       	rjmp	.+4      	; 0x154c <vfprintf+0x27c>
    1548:	20 e1       	ldi	r18, 0x10	; 16
    154a:	32 e0       	ldi	r19, 0x02	; 2
    154c:	f8 01       	movw	r30, r16
    154e:	b7 fe       	sbrs	r11, 7
    1550:	07 c0       	rjmp	.+14     	; 0x1560 <vfprintf+0x290>
    1552:	60 81       	ld	r22, Z
    1554:	71 81       	ldd	r23, Z+1	; 0x01
    1556:	82 81       	ldd	r24, Z+2	; 0x02
    1558:	93 81       	ldd	r25, Z+3	; 0x03
    155a:	0c 5f       	subi	r16, 0xFC	; 252
    155c:	1f 4f       	sbci	r17, 0xFF	; 255
    155e:	06 c0       	rjmp	.+12     	; 0x156c <vfprintf+0x29c>
    1560:	60 81       	ld	r22, Z
    1562:	71 81       	ldd	r23, Z+1	; 0x01
    1564:	80 e0       	ldi	r24, 0x00	; 0
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	0e 5f       	subi	r16, 0xFE	; 254
    156a:	1f 4f       	sbci	r17, 0xFF	; 255
    156c:	a3 01       	movw	r20, r6
    156e:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__ultoa_invert>
    1572:	88 2e       	mov	r8, r24
    1574:	86 18       	sub	r8, r6
    1576:	fb 2d       	mov	r31, r11
    1578:	ff 77       	andi	r31, 0x7F	; 127
    157a:	3f 2e       	mov	r3, r31
    157c:	36 fe       	sbrs	r3, 6
    157e:	0d c0       	rjmp	.+26     	; 0x159a <vfprintf+0x2ca>
    1580:	23 2d       	mov	r18, r3
    1582:	2e 7f       	andi	r18, 0xFE	; 254
    1584:	a2 2e       	mov	r10, r18
    1586:	89 14       	cp	r8, r9
    1588:	58 f4       	brcc	.+22     	; 0x15a0 <vfprintf+0x2d0>
    158a:	34 fe       	sbrs	r3, 4
    158c:	0b c0       	rjmp	.+22     	; 0x15a4 <vfprintf+0x2d4>
    158e:	32 fc       	sbrc	r3, 2
    1590:	09 c0       	rjmp	.+18     	; 0x15a4 <vfprintf+0x2d4>
    1592:	83 2d       	mov	r24, r3
    1594:	8e 7e       	andi	r24, 0xEE	; 238
    1596:	a8 2e       	mov	r10, r24
    1598:	05 c0       	rjmp	.+10     	; 0x15a4 <vfprintf+0x2d4>
    159a:	b8 2c       	mov	r11, r8
    159c:	a3 2c       	mov	r10, r3
    159e:	03 c0       	rjmp	.+6      	; 0x15a6 <vfprintf+0x2d6>
    15a0:	b8 2c       	mov	r11, r8
    15a2:	01 c0       	rjmp	.+2      	; 0x15a6 <vfprintf+0x2d6>
    15a4:	b9 2c       	mov	r11, r9
    15a6:	a4 fe       	sbrs	r10, 4
    15a8:	0f c0       	rjmp	.+30     	; 0x15c8 <vfprintf+0x2f8>
    15aa:	fe 01       	movw	r30, r28
    15ac:	e8 0d       	add	r30, r8
    15ae:	f1 1d       	adc	r31, r1
    15b0:	80 81       	ld	r24, Z
    15b2:	80 33       	cpi	r24, 0x30	; 48
    15b4:	21 f4       	brne	.+8      	; 0x15be <vfprintf+0x2ee>
    15b6:	9a 2d       	mov	r25, r10
    15b8:	99 7e       	andi	r25, 0xE9	; 233
    15ba:	a9 2e       	mov	r10, r25
    15bc:	09 c0       	rjmp	.+18     	; 0x15d0 <vfprintf+0x300>
    15be:	a2 fe       	sbrs	r10, 2
    15c0:	06 c0       	rjmp	.+12     	; 0x15ce <vfprintf+0x2fe>
    15c2:	b3 94       	inc	r11
    15c4:	b3 94       	inc	r11
    15c6:	04 c0       	rjmp	.+8      	; 0x15d0 <vfprintf+0x300>
    15c8:	8a 2d       	mov	r24, r10
    15ca:	86 78       	andi	r24, 0x86	; 134
    15cc:	09 f0       	breq	.+2      	; 0x15d0 <vfprintf+0x300>
    15ce:	b3 94       	inc	r11
    15d0:	a3 fc       	sbrc	r10, 3
    15d2:	11 c0       	rjmp	.+34     	; 0x15f6 <vfprintf+0x326>
    15d4:	a0 fe       	sbrs	r10, 0
    15d6:	06 c0       	rjmp	.+12     	; 0x15e4 <vfprintf+0x314>
    15d8:	b2 14       	cp	r11, r2
    15da:	88 f4       	brcc	.+34     	; 0x15fe <vfprintf+0x32e>
    15dc:	28 0c       	add	r2, r8
    15de:	92 2c       	mov	r9, r2
    15e0:	9b 18       	sub	r9, r11
    15e2:	0e c0       	rjmp	.+28     	; 0x1600 <vfprintf+0x330>
    15e4:	b2 14       	cp	r11, r2
    15e6:	60 f4       	brcc	.+24     	; 0x1600 <vfprintf+0x330>
    15e8:	b6 01       	movw	r22, r12
    15ea:	80 e2       	ldi	r24, 0x20	; 32
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	0e 94 5f 0b 	call	0x16be	; 0x16be <fputc>
    15f2:	b3 94       	inc	r11
    15f4:	f7 cf       	rjmp	.-18     	; 0x15e4 <vfprintf+0x314>
    15f6:	b2 14       	cp	r11, r2
    15f8:	18 f4       	brcc	.+6      	; 0x1600 <vfprintf+0x330>
    15fa:	2b 18       	sub	r2, r11
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <vfprintf+0x332>
    15fe:	98 2c       	mov	r9, r8
    1600:	21 2c       	mov	r2, r1
    1602:	a4 fe       	sbrs	r10, 4
    1604:	10 c0       	rjmp	.+32     	; 0x1626 <vfprintf+0x356>
    1606:	b6 01       	movw	r22, r12
    1608:	80 e3       	ldi	r24, 0x30	; 48
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	0e 94 5f 0b 	call	0x16be	; 0x16be <fputc>
    1610:	a2 fe       	sbrs	r10, 2
    1612:	17 c0       	rjmp	.+46     	; 0x1642 <vfprintf+0x372>
    1614:	a1 fc       	sbrc	r10, 1
    1616:	03 c0       	rjmp	.+6      	; 0x161e <vfprintf+0x34e>
    1618:	88 e7       	ldi	r24, 0x78	; 120
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <vfprintf+0x352>
    161e:	88 e5       	ldi	r24, 0x58	; 88
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	b6 01       	movw	r22, r12
    1624:	0c c0       	rjmp	.+24     	; 0x163e <vfprintf+0x36e>
    1626:	8a 2d       	mov	r24, r10
    1628:	86 78       	andi	r24, 0x86	; 134
    162a:	59 f0       	breq	.+22     	; 0x1642 <vfprintf+0x372>
    162c:	a1 fe       	sbrs	r10, 1
    162e:	02 c0       	rjmp	.+4      	; 0x1634 <vfprintf+0x364>
    1630:	8b e2       	ldi	r24, 0x2B	; 43
    1632:	01 c0       	rjmp	.+2      	; 0x1636 <vfprintf+0x366>
    1634:	80 e2       	ldi	r24, 0x20	; 32
    1636:	a7 fc       	sbrc	r10, 7
    1638:	8d e2       	ldi	r24, 0x2D	; 45
    163a:	b6 01       	movw	r22, r12
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	0e 94 5f 0b 	call	0x16be	; 0x16be <fputc>
    1642:	89 14       	cp	r8, r9
    1644:	38 f4       	brcc	.+14     	; 0x1654 <vfprintf+0x384>
    1646:	b6 01       	movw	r22, r12
    1648:	80 e3       	ldi	r24, 0x30	; 48
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	0e 94 5f 0b 	call	0x16be	; 0x16be <fputc>
    1650:	9a 94       	dec	r9
    1652:	f7 cf       	rjmp	.-18     	; 0x1642 <vfprintf+0x372>
    1654:	8a 94       	dec	r8
    1656:	f3 01       	movw	r30, r6
    1658:	e8 0d       	add	r30, r8
    165a:	f1 1d       	adc	r31, r1
    165c:	80 81       	ld	r24, Z
    165e:	b6 01       	movw	r22, r12
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	0e 94 5f 0b 	call	0x16be	; 0x16be <fputc>
    1666:	81 10       	cpse	r8, r1
    1668:	f5 cf       	rjmp	.-22     	; 0x1654 <vfprintf+0x384>
    166a:	22 20       	and	r2, r2
    166c:	09 f4       	brne	.+2      	; 0x1670 <vfprintf+0x3a0>
    166e:	42 ce       	rjmp	.-892    	; 0x12f4 <vfprintf+0x24>
    1670:	b6 01       	movw	r22, r12
    1672:	80 e2       	ldi	r24, 0x20	; 32
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	0e 94 5f 0b 	call	0x16be	; 0x16be <fputc>
    167a:	2a 94       	dec	r2
    167c:	f6 cf       	rjmp	.-20     	; 0x166a <vfprintf+0x39a>
    167e:	f6 01       	movw	r30, r12
    1680:	86 81       	ldd	r24, Z+6	; 0x06
    1682:	97 81       	ldd	r25, Z+7	; 0x07
    1684:	02 c0       	rjmp	.+4      	; 0x168a <vfprintf+0x3ba>
    1686:	8f ef       	ldi	r24, 0xFF	; 255
    1688:	9f ef       	ldi	r25, 0xFF	; 255
    168a:	2b 96       	adiw	r28, 0x0b	; 11
    168c:	e2 e1       	ldi	r30, 0x12	; 18
    168e:	0c 94 47 0c 	jmp	0x188e	; 0x188e <__epilogue_restores__>

00001692 <strnlen_P>:
    1692:	fc 01       	movw	r30, r24
    1694:	05 90       	lpm	r0, Z+
    1696:	61 50       	subi	r22, 0x01	; 1
    1698:	70 40       	sbci	r23, 0x00	; 0
    169a:	01 10       	cpse	r0, r1
    169c:	d8 f7       	brcc	.-10     	; 0x1694 <strnlen_P+0x2>
    169e:	80 95       	com	r24
    16a0:	90 95       	com	r25
    16a2:	8e 0f       	add	r24, r30
    16a4:	9f 1f       	adc	r25, r31
    16a6:	08 95       	ret

000016a8 <strnlen>:
    16a8:	fc 01       	movw	r30, r24
    16aa:	61 50       	subi	r22, 0x01	; 1
    16ac:	70 40       	sbci	r23, 0x00	; 0
    16ae:	01 90       	ld	r0, Z+
    16b0:	01 10       	cpse	r0, r1
    16b2:	d8 f7       	brcc	.-10     	; 0x16aa <strnlen+0x2>
    16b4:	80 95       	com	r24
    16b6:	90 95       	com	r25
    16b8:	8e 0f       	add	r24, r30
    16ba:	9f 1f       	adc	r25, r31
    16bc:	08 95       	ret

000016be <fputc>:
    16be:	0f 93       	push	r16
    16c0:	1f 93       	push	r17
    16c2:	cf 93       	push	r28
    16c4:	df 93       	push	r29
    16c6:	fb 01       	movw	r30, r22
    16c8:	23 81       	ldd	r18, Z+3	; 0x03
    16ca:	21 fd       	sbrc	r18, 1
    16cc:	03 c0       	rjmp	.+6      	; 0x16d4 <fputc+0x16>
    16ce:	8f ef       	ldi	r24, 0xFF	; 255
    16d0:	9f ef       	ldi	r25, 0xFF	; 255
    16d2:	2c c0       	rjmp	.+88     	; 0x172c <fputc+0x6e>
    16d4:	22 ff       	sbrs	r18, 2
    16d6:	16 c0       	rjmp	.+44     	; 0x1704 <fputc+0x46>
    16d8:	46 81       	ldd	r20, Z+6	; 0x06
    16da:	57 81       	ldd	r21, Z+7	; 0x07
    16dc:	24 81       	ldd	r18, Z+4	; 0x04
    16de:	35 81       	ldd	r19, Z+5	; 0x05
    16e0:	42 17       	cp	r20, r18
    16e2:	53 07       	cpc	r21, r19
    16e4:	44 f4       	brge	.+16     	; 0x16f6 <fputc+0x38>
    16e6:	a0 81       	ld	r26, Z
    16e8:	b1 81       	ldd	r27, Z+1	; 0x01
    16ea:	9d 01       	movw	r18, r26
    16ec:	2f 5f       	subi	r18, 0xFF	; 255
    16ee:	3f 4f       	sbci	r19, 0xFF	; 255
    16f0:	31 83       	std	Z+1, r19	; 0x01
    16f2:	20 83       	st	Z, r18
    16f4:	8c 93       	st	X, r24
    16f6:	26 81       	ldd	r18, Z+6	; 0x06
    16f8:	37 81       	ldd	r19, Z+7	; 0x07
    16fa:	2f 5f       	subi	r18, 0xFF	; 255
    16fc:	3f 4f       	sbci	r19, 0xFF	; 255
    16fe:	37 83       	std	Z+7, r19	; 0x07
    1700:	26 83       	std	Z+6, r18	; 0x06
    1702:	14 c0       	rjmp	.+40     	; 0x172c <fputc+0x6e>
    1704:	8b 01       	movw	r16, r22
    1706:	ec 01       	movw	r28, r24
    1708:	fb 01       	movw	r30, r22
    170a:	00 84       	ldd	r0, Z+8	; 0x08
    170c:	f1 85       	ldd	r31, Z+9	; 0x09
    170e:	e0 2d       	mov	r30, r0
    1710:	09 95       	icall
    1712:	89 2b       	or	r24, r25
    1714:	e1 f6       	brne	.-72     	; 0x16ce <fputc+0x10>
    1716:	d8 01       	movw	r26, r16
    1718:	16 96       	adiw	r26, 0x06	; 6
    171a:	8d 91       	ld	r24, X+
    171c:	9c 91       	ld	r25, X
    171e:	17 97       	sbiw	r26, 0x07	; 7
    1720:	01 96       	adiw	r24, 0x01	; 1
    1722:	17 96       	adiw	r26, 0x07	; 7
    1724:	9c 93       	st	X, r25
    1726:	8e 93       	st	-X, r24
    1728:	16 97       	sbiw	r26, 0x06	; 6
    172a:	ce 01       	movw	r24, r28
    172c:	df 91       	pop	r29
    172e:	cf 91       	pop	r28
    1730:	1f 91       	pop	r17
    1732:	0f 91       	pop	r16
    1734:	08 95       	ret

00001736 <__ultoa_invert>:
    1736:	fa 01       	movw	r30, r20
    1738:	aa 27       	eor	r26, r26
    173a:	28 30       	cpi	r18, 0x08	; 8
    173c:	51 f1       	breq	.+84     	; 0x1792 <__ultoa_invert+0x5c>
    173e:	20 31       	cpi	r18, 0x10	; 16
    1740:	81 f1       	breq	.+96     	; 0x17a2 <__ultoa_invert+0x6c>
    1742:	e8 94       	clt
    1744:	6f 93       	push	r22
    1746:	6e 7f       	andi	r22, 0xFE	; 254
    1748:	6e 5f       	subi	r22, 0xFE	; 254
    174a:	7f 4f       	sbci	r23, 0xFF	; 255
    174c:	8f 4f       	sbci	r24, 0xFF	; 255
    174e:	9f 4f       	sbci	r25, 0xFF	; 255
    1750:	af 4f       	sbci	r26, 0xFF	; 255
    1752:	b1 e0       	ldi	r27, 0x01	; 1
    1754:	3e d0       	rcall	.+124    	; 0x17d2 <__ultoa_invert+0x9c>
    1756:	b4 e0       	ldi	r27, 0x04	; 4
    1758:	3c d0       	rcall	.+120    	; 0x17d2 <__ultoa_invert+0x9c>
    175a:	67 0f       	add	r22, r23
    175c:	78 1f       	adc	r23, r24
    175e:	89 1f       	adc	r24, r25
    1760:	9a 1f       	adc	r25, r26
    1762:	a1 1d       	adc	r26, r1
    1764:	68 0f       	add	r22, r24
    1766:	79 1f       	adc	r23, r25
    1768:	8a 1f       	adc	r24, r26
    176a:	91 1d       	adc	r25, r1
    176c:	a1 1d       	adc	r26, r1
    176e:	6a 0f       	add	r22, r26
    1770:	71 1d       	adc	r23, r1
    1772:	81 1d       	adc	r24, r1
    1774:	91 1d       	adc	r25, r1
    1776:	a1 1d       	adc	r26, r1
    1778:	20 d0       	rcall	.+64     	; 0x17ba <__ultoa_invert+0x84>
    177a:	09 f4       	brne	.+2      	; 0x177e <__ultoa_invert+0x48>
    177c:	68 94       	set
    177e:	3f 91       	pop	r19
    1780:	2a e0       	ldi	r18, 0x0A	; 10
    1782:	26 9f       	mul	r18, r22
    1784:	11 24       	eor	r1, r1
    1786:	30 19       	sub	r19, r0
    1788:	30 5d       	subi	r19, 0xD0	; 208
    178a:	31 93       	st	Z+, r19
    178c:	de f6       	brtc	.-74     	; 0x1744 <__ultoa_invert+0xe>
    178e:	cf 01       	movw	r24, r30
    1790:	08 95       	ret
    1792:	46 2f       	mov	r20, r22
    1794:	47 70       	andi	r20, 0x07	; 7
    1796:	40 5d       	subi	r20, 0xD0	; 208
    1798:	41 93       	st	Z+, r20
    179a:	b3 e0       	ldi	r27, 0x03	; 3
    179c:	0f d0       	rcall	.+30     	; 0x17bc <__ultoa_invert+0x86>
    179e:	c9 f7       	brne	.-14     	; 0x1792 <__ultoa_invert+0x5c>
    17a0:	f6 cf       	rjmp	.-20     	; 0x178e <__ultoa_invert+0x58>
    17a2:	46 2f       	mov	r20, r22
    17a4:	4f 70       	andi	r20, 0x0F	; 15
    17a6:	40 5d       	subi	r20, 0xD0	; 208
    17a8:	4a 33       	cpi	r20, 0x3A	; 58
    17aa:	18 f0       	brcs	.+6      	; 0x17b2 <__ultoa_invert+0x7c>
    17ac:	49 5d       	subi	r20, 0xD9	; 217
    17ae:	31 fd       	sbrc	r19, 1
    17b0:	40 52       	subi	r20, 0x20	; 32
    17b2:	41 93       	st	Z+, r20
    17b4:	02 d0       	rcall	.+4      	; 0x17ba <__ultoa_invert+0x84>
    17b6:	a9 f7       	brne	.-22     	; 0x17a2 <__ultoa_invert+0x6c>
    17b8:	ea cf       	rjmp	.-44     	; 0x178e <__ultoa_invert+0x58>
    17ba:	b4 e0       	ldi	r27, 0x04	; 4
    17bc:	a6 95       	lsr	r26
    17be:	97 95       	ror	r25
    17c0:	87 95       	ror	r24
    17c2:	77 95       	ror	r23
    17c4:	67 95       	ror	r22
    17c6:	ba 95       	dec	r27
    17c8:	c9 f7       	brne	.-14     	; 0x17bc <__ultoa_invert+0x86>
    17ca:	00 97       	sbiw	r24, 0x00	; 0
    17cc:	61 05       	cpc	r22, r1
    17ce:	71 05       	cpc	r23, r1
    17d0:	08 95       	ret
    17d2:	9b 01       	movw	r18, r22
    17d4:	ac 01       	movw	r20, r24
    17d6:	0a 2e       	mov	r0, r26
    17d8:	06 94       	lsr	r0
    17da:	57 95       	ror	r21
    17dc:	47 95       	ror	r20
    17de:	37 95       	ror	r19
    17e0:	27 95       	ror	r18
    17e2:	ba 95       	dec	r27
    17e4:	c9 f7       	brne	.-14     	; 0x17d8 <__ultoa_invert+0xa2>
    17e6:	62 0f       	add	r22, r18
    17e8:	73 1f       	adc	r23, r19
    17ea:	84 1f       	adc	r24, r20
    17ec:	95 1f       	adc	r25, r21
    17ee:	a0 1d       	adc	r26, r0
    17f0:	08 95       	ret

000017f2 <__divmodsi4>:
    17f2:	05 2e       	mov	r0, r21
    17f4:	97 fb       	bst	r25, 7
    17f6:	1e f4       	brtc	.+6      	; 0x17fe <__divmodsi4+0xc>
    17f8:	00 94       	com	r0
    17fa:	0e 94 10 0c 	call	0x1820	; 0x1820 <__negsi2>
    17fe:	57 fd       	sbrc	r21, 7
    1800:	07 d0       	rcall	.+14     	; 0x1810 <__divmodsi4_neg2>
    1802:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <__udivmodsi4>
    1806:	07 fc       	sbrc	r0, 7
    1808:	03 d0       	rcall	.+6      	; 0x1810 <__divmodsi4_neg2>
    180a:	4e f4       	brtc	.+18     	; 0x181e <__divmodsi4_exit>
    180c:	0c 94 10 0c 	jmp	0x1820	; 0x1820 <__negsi2>

00001810 <__divmodsi4_neg2>:
    1810:	50 95       	com	r21
    1812:	40 95       	com	r20
    1814:	30 95       	com	r19
    1816:	21 95       	neg	r18
    1818:	3f 4f       	sbci	r19, 0xFF	; 255
    181a:	4f 4f       	sbci	r20, 0xFF	; 255
    181c:	5f 4f       	sbci	r21, 0xFF	; 255

0000181e <__divmodsi4_exit>:
    181e:	08 95       	ret

00001820 <__negsi2>:
    1820:	90 95       	com	r25
    1822:	80 95       	com	r24
    1824:	70 95       	com	r23
    1826:	61 95       	neg	r22
    1828:	7f 4f       	sbci	r23, 0xFF	; 255
    182a:	8f 4f       	sbci	r24, 0xFF	; 255
    182c:	9f 4f       	sbci	r25, 0xFF	; 255
    182e:	08 95       	ret

00001830 <__muluhisi3>:
    1830:	0e 94 84 0c 	call	0x1908	; 0x1908 <__umulhisi3>
    1834:	a5 9f       	mul	r26, r21
    1836:	90 0d       	add	r25, r0
    1838:	b4 9f       	mul	r27, r20
    183a:	90 0d       	add	r25, r0
    183c:	a4 9f       	mul	r26, r20
    183e:	80 0d       	add	r24, r0
    1840:	91 1d       	adc	r25, r1
    1842:	11 24       	eor	r1, r1
    1844:	08 95       	ret

00001846 <__mulshisi3>:
    1846:	b7 ff       	sbrs	r27, 7
    1848:	0c 94 18 0c 	jmp	0x1830	; 0x1830 <__muluhisi3>

0000184c <__mulohisi3>:
    184c:	0e 94 18 0c 	call	0x1830	; 0x1830 <__muluhisi3>
    1850:	82 1b       	sub	r24, r18
    1852:	93 0b       	sbc	r25, r19
    1854:	08 95       	ret

00001856 <__prologue_saves__>:
    1856:	2f 92       	push	r2
    1858:	3f 92       	push	r3
    185a:	4f 92       	push	r4
    185c:	5f 92       	push	r5
    185e:	6f 92       	push	r6
    1860:	7f 92       	push	r7
    1862:	8f 92       	push	r8
    1864:	9f 92       	push	r9
    1866:	af 92       	push	r10
    1868:	bf 92       	push	r11
    186a:	cf 92       	push	r12
    186c:	df 92       	push	r13
    186e:	ef 92       	push	r14
    1870:	ff 92       	push	r15
    1872:	0f 93       	push	r16
    1874:	1f 93       	push	r17
    1876:	cf 93       	push	r28
    1878:	df 93       	push	r29
    187a:	cd b7       	in	r28, 0x3d	; 61
    187c:	de b7       	in	r29, 0x3e	; 62
    187e:	ca 1b       	sub	r28, r26
    1880:	db 0b       	sbc	r29, r27
    1882:	0f b6       	in	r0, 0x3f	; 63
    1884:	f8 94       	cli
    1886:	de bf       	out	0x3e, r29	; 62
    1888:	0f be       	out	0x3f, r0	; 63
    188a:	cd bf       	out	0x3d, r28	; 61
    188c:	09 94       	ijmp

0000188e <__epilogue_restores__>:
    188e:	2a 88       	ldd	r2, Y+18	; 0x12
    1890:	39 88       	ldd	r3, Y+17	; 0x11
    1892:	48 88       	ldd	r4, Y+16	; 0x10
    1894:	5f 84       	ldd	r5, Y+15	; 0x0f
    1896:	6e 84       	ldd	r6, Y+14	; 0x0e
    1898:	7d 84       	ldd	r7, Y+13	; 0x0d
    189a:	8c 84       	ldd	r8, Y+12	; 0x0c
    189c:	9b 84       	ldd	r9, Y+11	; 0x0b
    189e:	aa 84       	ldd	r10, Y+10	; 0x0a
    18a0:	b9 84       	ldd	r11, Y+9	; 0x09
    18a2:	c8 84       	ldd	r12, Y+8	; 0x08
    18a4:	df 80       	ldd	r13, Y+7	; 0x07
    18a6:	ee 80       	ldd	r14, Y+6	; 0x06
    18a8:	fd 80       	ldd	r15, Y+5	; 0x05
    18aa:	0c 81       	ldd	r16, Y+4	; 0x04
    18ac:	1b 81       	ldd	r17, Y+3	; 0x03
    18ae:	aa 81       	ldd	r26, Y+2	; 0x02
    18b0:	b9 81       	ldd	r27, Y+1	; 0x01
    18b2:	ce 0f       	add	r28, r30
    18b4:	d1 1d       	adc	r29, r1
    18b6:	0f b6       	in	r0, 0x3f	; 63
    18b8:	f8 94       	cli
    18ba:	de bf       	out	0x3e, r29	; 62
    18bc:	0f be       	out	0x3f, r0	; 63
    18be:	cd bf       	out	0x3d, r28	; 61
    18c0:	ed 01       	movw	r28, r26
    18c2:	08 95       	ret

000018c4 <__udivmodsi4>:
    18c4:	a1 e2       	ldi	r26, 0x21	; 33
    18c6:	1a 2e       	mov	r1, r26
    18c8:	aa 1b       	sub	r26, r26
    18ca:	bb 1b       	sub	r27, r27
    18cc:	fd 01       	movw	r30, r26
    18ce:	0d c0       	rjmp	.+26     	; 0x18ea <__udivmodsi4_ep>

000018d0 <__udivmodsi4_loop>:
    18d0:	aa 1f       	adc	r26, r26
    18d2:	bb 1f       	adc	r27, r27
    18d4:	ee 1f       	adc	r30, r30
    18d6:	ff 1f       	adc	r31, r31
    18d8:	a2 17       	cp	r26, r18
    18da:	b3 07       	cpc	r27, r19
    18dc:	e4 07       	cpc	r30, r20
    18de:	f5 07       	cpc	r31, r21
    18e0:	20 f0       	brcs	.+8      	; 0x18ea <__udivmodsi4_ep>
    18e2:	a2 1b       	sub	r26, r18
    18e4:	b3 0b       	sbc	r27, r19
    18e6:	e4 0b       	sbc	r30, r20
    18e8:	f5 0b       	sbc	r31, r21

000018ea <__udivmodsi4_ep>:
    18ea:	66 1f       	adc	r22, r22
    18ec:	77 1f       	adc	r23, r23
    18ee:	88 1f       	adc	r24, r24
    18f0:	99 1f       	adc	r25, r25
    18f2:	1a 94       	dec	r1
    18f4:	69 f7       	brne	.-38     	; 0x18d0 <__udivmodsi4_loop>
    18f6:	60 95       	com	r22
    18f8:	70 95       	com	r23
    18fa:	80 95       	com	r24
    18fc:	90 95       	com	r25
    18fe:	9b 01       	movw	r18, r22
    1900:	ac 01       	movw	r20, r24
    1902:	bd 01       	movw	r22, r26
    1904:	cf 01       	movw	r24, r30
    1906:	08 95       	ret

00001908 <__umulhisi3>:
    1908:	a2 9f       	mul	r26, r18
    190a:	b0 01       	movw	r22, r0
    190c:	b3 9f       	mul	r27, r19
    190e:	c0 01       	movw	r24, r0
    1910:	a3 9f       	mul	r26, r19
    1912:	70 0d       	add	r23, r0
    1914:	81 1d       	adc	r24, r1
    1916:	11 24       	eor	r1, r1
    1918:	91 1d       	adc	r25, r1
    191a:	b2 9f       	mul	r27, r18
    191c:	70 0d       	add	r23, r0
    191e:	81 1d       	adc	r24, r1
    1920:	11 24       	eor	r1, r1
    1922:	91 1d       	adc	r25, r1
    1924:	08 95       	ret

00001926 <_exit>:
    1926:	f8 94       	cli

00001928 <__stop_program>:
    1928:	ff cf       	rjmp	.-2      	; 0x1928 <__stop_program>
