
speedOfLight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000019c  00800100  00001a44  00001ad8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a44  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000035  0080029c  0080029c  00001c74  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001c74  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001cd0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00001d10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022ce  00000000  00000000  00001e70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e4e  00000000  00000000  0000413e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000113f  00000000  00000000  00004f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004dc  00000000  00000000  000060cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000085f  00000000  00000000  000065a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000128c  00000000  00000000  00006e07  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000280  00000000  00000000  00008093  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
       4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      38:	0c 94 2e 02 	jmp	0x45c	; 0x45c <__vector_14>
      3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      44:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__vector_17>
      48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      84:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__vector_33>
      88:	0c 94 c3 01 	jmp	0x386	; 0x386 <__vector_34>
      8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a8:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__vector_42>
      ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	d8 e0       	ldi	r29, 0x08	; 8
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
      c0:	12 e0       	ldi	r17, 0x02	; 2
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	e4 e4       	ldi	r30, 0x44	; 68
      c8:	fa e1       	ldi	r31, 0x1A	; 26
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0
      d0:	ac 39       	cpi	r26, 0x9C	; 156
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
      d6:	22 e0       	ldi	r18, 0x02	; 2
      d8:	ac e9       	ldi	r26, 0x9C	; 156
      da:	b2 e0       	ldi	r27, 0x02	; 2
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	a1 3d       	cpi	r26, 0xD1	; 209
      e2:	b2 07       	cpc	r27, r18
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
      e6:	0e 94 bf 07 	call	0xf7e	; 0xf7e <main>
      ea:	0c 94 20 0d 	jmp	0x1a40	; 0x1a40 <_exit>

000000ee <__bad_interrupt>:
      ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <spiSetup>:
	
}

void spiSetup(){
	// MOSI and SCK to outputs
	DDRB |= (1<<3)|(1<<5);
      f2:	84 b1       	in	r24, 0x04	; 4
      f4:	88 62       	ori	r24, 0x28	; 40
      f6:	84 b9       	out	0x04, r24	; 4
	// STC int enabled master mode, clk/16
	SPCR0 = (1 << SPIE) | (1 << SPE) | (1 << MSTR) | (1 << SPR0);
      f8:	81 ed       	ldi	r24, 0xD1	; 209
      fa:	8c bd       	out	0x2c, r24	; 44
      fc:	08 95       	ret

000000fe <tmrSetup>:
	// timer 3 is used to update the LED display as well as read the button matrix.
	// COMPA will trigger the next multiplexing cycle of the led matrices
	// COMPB will read the next line of buttons
	
	// CTC mode clk/1
	TCCR3B = (1 << WGM12) | (1 << CS11);
      fe:	8a e0       	ldi	r24, 0x0A	; 10
     100:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
	//OCR3A = 3700;
	OCR3A = 3000;
     104:	88 eb       	ldi	r24, 0xB8	; 184
     106:	9b e0       	ldi	r25, 0x0B	; 11
     108:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     10c:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	OCR3B = 1850;
     110:	8a e3       	ldi	r24, 0x3A	; 58
     112:	97 e0       	ldi	r25, 0x07	; 7
     114:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     118:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	TIMSK3 |= (1 << OCIE3B) | 1 << (OCIE3A);
     11c:	e1 e7       	ldi	r30, 0x71	; 113
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	80 81       	ld	r24, Z
     122:	86 60       	ori	r24, 0x06	; 6
     124:	80 83       	st	Z, r24
	TCNT3 = 0;
     126:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     12a:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
     12e:	08 95       	ret

00000130 <buttonsInit>:
0x7F, 0x67, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71, 0x00};


void buttonsInit(){
	// set DDR for button matrix
	DDRD = 0xFF;
     130:	8f ef       	ldi	r24, 0xFF	; 255
     132:	8a b9       	out	0x0a, r24	; 10
	PORTC = 0xFF;
     134:	88 b9       	out	0x08, r24	; 8
	
	// set DDR for latch and blank pins
	DDRB |= 1 << LED_L;
     136:	20 9a       	sbi	0x04, 0	; 4
	DDRE|= 1 << LED_B;
     138:	6b 9a       	sbi	0x0d, 3	; 13
	DDRE |= 1 << 2; // enable LEDs
     13a:	6a 9a       	sbi	0x0d, 2	; 13
	PORTE |= 1 << LED_B;
     13c:	73 9a       	sbi	0x0e, 3	; 14
	
	spiSetup();
     13e:	0e 94 79 00 	call	0xf2	; 0xf2 <spiSetup>
	tmrSetup();
     142:	0e 94 7f 00 	call	0xfe	; 0xfe <tmrSetup>
     146:	08 95       	ret

00000148 <isButtonDown>:
	TIMSK3 |= (1 << OCIE3B) | 1 << (OCIE3A);
	TCNT3 = 0;
}

uint8_t isButtonDown(uint8_t x, uint8_t y){
	return buttonMemory[x] & (1 << y); // may need to change to 1 << (5 - x) test this later
     148:	e8 2f       	mov	r30, r24
     14a:	f0 e0       	ldi	r31, 0x00	; 0
     14c:	ed 55       	subi	r30, 0x5D	; 93
     14e:	fd 4f       	sbci	r31, 0xFD	; 253
     150:	20 81       	ld	r18, Z
     152:	81 e0       	ldi	r24, 0x01	; 1
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	02 c0       	rjmp	.+4      	; 0x15c <isButtonDown+0x14>
     158:	88 0f       	add	r24, r24
     15a:	99 1f       	adc	r25, r25
     15c:	6a 95       	dec	r22
     15e:	e2 f7       	brpl	.-8      	; 0x158 <isButtonDown+0x10>
}
     160:	82 23       	and	r24, r18
     162:	08 95       	ret

00000164 <setButtonLed>:

void setButtonLed(uint8_t x, uint8_t y, uint8_t value){
	if(value){
     164:	44 23       	and	r20, r20
     166:	89 f0       	breq	.+34     	; 0x18a <setButtonLed+0x26>
		ledMemory[9 + y] |= 1 << x;
     168:	e6 2f       	mov	r30, r22
     16a:	f0 e0       	ldi	r31, 0x00	; 0
     16c:	ed 5e       	subi	r30, 0xED	; 237
     16e:	fe 4f       	sbci	r31, 0xFE	; 254
     170:	40 81       	ld	r20, Z
     172:	21 e0       	ldi	r18, 0x01	; 1
     174:	30 e0       	ldi	r19, 0x00	; 0
     176:	b9 01       	movw	r22, r18
     178:	02 c0       	rjmp	.+4      	; 0x17e <setButtonLed+0x1a>
     17a:	66 0f       	add	r22, r22
     17c:	77 1f       	adc	r23, r23
     17e:	8a 95       	dec	r24
     180:	e2 f7       	brpl	.-8      	; 0x17a <setButtonLed+0x16>
     182:	cb 01       	movw	r24, r22
     184:	84 2b       	or	r24, r20
     186:	80 83       	st	Z, r24
		return;
     188:	08 95       	ret
	}
	ledMemory[9 + y] &= ~(1 << x);
     18a:	e6 2f       	mov	r30, r22
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	ed 5e       	subi	r30, 0xED	; 237
     190:	fe 4f       	sbci	r31, 0xFE	; 254
     192:	40 81       	ld	r20, Z
     194:	21 e0       	ldi	r18, 0x01	; 1
     196:	30 e0       	ldi	r19, 0x00	; 0
     198:	b9 01       	movw	r22, r18
     19a:	02 c0       	rjmp	.+4      	; 0x1a0 <setButtonLed+0x3c>
     19c:	66 0f       	add	r22, r22
     19e:	77 1f       	adc	r23, r23
     1a0:	8a 95       	dec	r24
     1a2:	e2 f7       	brpl	.-8      	; 0x19c <setButtonLed+0x38>
     1a4:	cb 01       	movw	r24, r22
     1a6:	80 95       	com	r24
     1a8:	84 23       	and	r24, r20
     1aa:	80 83       	st	Z, r24
     1ac:	08 95       	ret

000001ae <setScore>:
	
}

void setScore(uint8_t display, uint16_t value){
     1ae:	08 95       	ret

000001b0 <clearLeds>:
	
}

void clearLeds(uint8_t mode){
     1b0:	1f 93       	push	r17
     1b2:	cf 93       	push	r28
     1b4:	df 93       	push	r29
     1b6:	18 2f       	mov	r17, r24
	for(uint8_t ledx = 0; ledx < 6; ledx++){
     1b8:	d0 e0       	ldi	r29, 0x00	; 0
     1ba:	0b c0       	rjmp	.+22     	; 0x1d2 <clearLeds+0x22>
		for(uint8_t ledy = 0; ledy < 6; ledy++){
			setButtonLed(ledx, ledy, mode);
     1bc:	41 2f       	mov	r20, r17
     1be:	6c 2f       	mov	r22, r28
     1c0:	8d 2f       	mov	r24, r29
     1c2:	0e 94 b2 00 	call	0x164	; 0x164 <setButtonLed>
	
}

void clearLeds(uint8_t mode){
	for(uint8_t ledx = 0; ledx < 6; ledx++){
		for(uint8_t ledy = 0; ledy < 6; ledy++){
     1c6:	cf 5f       	subi	r28, 0xFF	; 255
     1c8:	c6 30       	cpi	r28, 0x06	; 6
     1ca:	c1 f7       	brne	.-16     	; 0x1bc <clearLeds+0xc>
void setScore(uint8_t display, uint16_t value){
	
}

void clearLeds(uint8_t mode){
	for(uint8_t ledx = 0; ledx < 6; ledx++){
     1cc:	df 5f       	subi	r29, 0xFF	; 255
     1ce:	d6 30       	cpi	r29, 0x06	; 6
     1d0:	11 f0       	breq	.+4      	; 0x1d6 <clearLeds+0x26>

void setScore(uint8_t display, uint16_t value){
	
}

void clearLeds(uint8_t mode){
     1d2:	c0 e0       	ldi	r28, 0x00	; 0
     1d4:	f3 cf       	rjmp	.-26     	; 0x1bc <clearLeds+0xc>
	for(uint8_t ledx = 0; ledx < 6; ledx++){
		for(uint8_t ledy = 0; ledy < 6; ledy++){
			setButtonLed(ledx, ledy, mode);
		}	
	}
}
     1d6:	df 91       	pop	r29
     1d8:	cf 91       	pop	r28
     1da:	1f 91       	pop	r17
     1dc:	08 95       	ret

000001de <__vector_33>:


ISR(TIMER3_COMPA_vect){
     1de:	1f 92       	push	r1
     1e0:	0f 92       	push	r0
     1e2:	0f b6       	in	r0, 0x3f	; 63
     1e4:	0f 92       	push	r0
     1e6:	11 24       	eor	r1, r1
     1e8:	2f 93       	push	r18
     1ea:	3f 93       	push	r19
     1ec:	4f 93       	push	r20
     1ee:	5f 93       	push	r21
     1f0:	6f 93       	push	r22
     1f2:	7f 93       	push	r23
     1f4:	8f 93       	push	r24
     1f6:	9f 93       	push	r25
     1f8:	af 93       	push	r26
     1fa:	bf 93       	push	r27
     1fc:	ef 93       	push	r30
     1fe:	ff 93       	push	r31
	// the row is in the lower nibble and column data is in the upper nibble
	// for each row the two registers need to be set and the other two need to be cleared
	
	// ledData for the matrices are stored as a byte array of the column data
	
	if (muxCounter < 3)
     200:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <muxCounter>
     204:	83 30       	cpi	r24, 0x03	; 3
     206:	90 f5       	brcc	.+100    	; 0x26c <__vector_33+0x8e>
	{
		ledData[3] = ((1 << muxCounter)) | ((ledMemory[9 + muxCounter] & 0b00000111)<<4);
     208:	40 91 9d 02 	lds	r20, 0x029D	; 0x80029d <muxCounter>
     20c:	e0 91 9d 02 	lds	r30, 0x029D	; 0x80029d <muxCounter>
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	ed 5e       	subi	r30, 0xED	; 237
     214:	fe 4f       	sbci	r31, 0xFE	; 254
     216:	20 81       	ld	r18, Z
     218:	27 70       	andi	r18, 0x07	; 7
     21a:	60 e1       	ldi	r22, 0x10	; 16
     21c:	26 9f       	mul	r18, r22
     21e:	90 01       	movw	r18, r0
     220:	11 24       	eor	r1, r1
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	bc 01       	movw	r22, r24
     228:	02 c0       	rjmp	.+4      	; 0x22e <__vector_33+0x50>
     22a:	66 0f       	add	r22, r22
     22c:	77 1f       	adc	r23, r23
     22e:	4a 95       	dec	r20
     230:	e2 f7       	brpl	.-8      	; 0x22a <__vector_33+0x4c>
     232:	26 2b       	or	r18, r22
     234:	a4 e0       	ldi	r26, 0x04	; 4
     236:	b1 e0       	ldi	r27, 0x01	; 1
     238:	13 96       	adiw	r26, 0x03	; 3
     23a:	2c 93       	st	X, r18
     23c:	13 97       	sbiw	r26, 0x03	; 3
		ledData[0] = 0;
     23e:	1c 92       	st	X, r1
		ledData[1] = 0;
     240:	11 96       	adiw	r26, 0x01	; 1
     242:	1c 92       	st	X, r1
     244:	11 97       	sbiw	r26, 0x01	; 1
		ledData[2] = ((1 << muxCounter)) | ((ledMemory[9 + muxCounter] & 0b00111000)<<1);
     246:	30 91 9d 02 	lds	r19, 0x029D	; 0x80029d <muxCounter>
     24a:	e0 91 9d 02 	lds	r30, 0x029D	; 0x80029d <muxCounter>
     24e:	f0 e0       	ldi	r31, 0x00	; 0
     250:	ed 5e       	subi	r30, 0xED	; 237
     252:	fe 4f       	sbci	r31, 0xFE	; 254
     254:	20 81       	ld	r18, Z
     256:	28 73       	andi	r18, 0x38	; 56
     258:	22 0f       	add	r18, r18
     25a:	02 c0       	rjmp	.+4      	; 0x260 <__vector_33+0x82>
     25c:	88 0f       	add	r24, r24
     25e:	99 1f       	adc	r25, r25
     260:	3a 95       	dec	r19
     262:	e2 f7       	brpl	.-8      	; 0x25c <__vector_33+0x7e>
     264:	82 2b       	or	r24, r18
     266:	12 96       	adiw	r26, 0x02	; 2
     268:	8c 93       	st	X, r24
     26a:	33 c0       	rjmp	.+102    	; 0x2d2 <__vector_33+0xf4>
	}
	else{
		ledData[3] = 0;
     26c:	a4 e0       	ldi	r26, 0x04	; 4
     26e:	b1 e0       	ldi	r27, 0x01	; 1
     270:	13 96       	adiw	r26, 0x03	; 3
     272:	1c 92       	st	X, r1
     274:	13 97       	sbiw	r26, 0x03	; 3
		ledData[0] = ((1 << (muxCounter-3))) | ((ledMemory[9 + muxCounter] & 0b00000111)<<4);
     276:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <muxCounter>
     27a:	e0 91 9d 02 	lds	r30, 0x029D	; 0x80029d <muxCounter>
     27e:	f0 e0       	ldi	r31, 0x00	; 0
     280:	ed 5e       	subi	r30, 0xED	; 237
     282:	fe 4f       	sbci	r31, 0xFE	; 254
     284:	90 81       	ld	r25, Z
     286:	83 50       	subi	r24, 0x03	; 3
     288:	21 e0       	ldi	r18, 0x01	; 1
     28a:	30 e0       	ldi	r19, 0x00	; 0
     28c:	a9 01       	movw	r20, r18
     28e:	02 c0       	rjmp	.+4      	; 0x294 <__vector_33+0xb6>
     290:	44 0f       	add	r20, r20
     292:	55 1f       	adc	r21, r21
     294:	8a 95       	dec	r24
     296:	e2 f7       	brpl	.-8      	; 0x290 <__vector_33+0xb2>
     298:	97 70       	andi	r25, 0x07	; 7
     29a:	70 e1       	ldi	r23, 0x10	; 16
     29c:	97 9f       	mul	r25, r23
     29e:	c0 01       	movw	r24, r0
     2a0:	11 24       	eor	r1, r1
     2a2:	84 2b       	or	r24, r20
     2a4:	8c 93       	st	X, r24
		ledData[1] = ((1 << (muxCounter-3))) | ((ledMemory[9 + muxCounter] & 0b00111000)<<1);
     2a6:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <muxCounter>
     2aa:	e0 91 9d 02 	lds	r30, 0x029D	; 0x80029d <muxCounter>
     2ae:	f0 e0       	ldi	r31, 0x00	; 0
     2b0:	ed 5e       	subi	r30, 0xED	; 237
     2b2:	fe 4f       	sbci	r31, 0xFE	; 254
     2b4:	80 81       	ld	r24, Z
     2b6:	93 50       	subi	r25, 0x03	; 3
     2b8:	02 c0       	rjmp	.+4      	; 0x2be <__vector_33+0xe0>
     2ba:	22 0f       	add	r18, r18
     2bc:	33 1f       	adc	r19, r19
     2be:	9a 95       	dec	r25
     2c0:	e2 f7       	brpl	.-8      	; 0x2ba <__vector_33+0xdc>
     2c2:	88 73       	andi	r24, 0x38	; 56
     2c4:	88 0f       	add	r24, r24
     2c6:	28 2b       	or	r18, r24
     2c8:	11 96       	adiw	r26, 0x01	; 1
     2ca:	2c 93       	st	X, r18
     2cc:	11 97       	sbiw	r26, 0x01	; 1
		ledData[2] = 0;
     2ce:	12 96       	adiw	r26, 0x02	; 2
     2d0:	1c 92       	st	X, r1
	}
	
	muxCounter = (muxCounter + 1) % 6;
     2d2:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <muxCounter>
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	01 96       	adiw	r24, 0x01	; 1
     2da:	66 e0       	ldi	r22, 0x06	; 6
     2dc:	70 e0       	ldi	r23, 0x00	; 0
     2de:	0e 94 2b 09 	call	0x1256	; 0x1256 <__divmodhi4>
     2e2:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <muxCounter>
	
	// calculate data for score display
	
	ledData[5] = sevenSegmentDecode[ledMemory[scoreDigitCounter]];
     2e6:	e0 91 9e 02 	lds	r30, 0x029E	; 0x80029e <scoreDigitCounter>
     2ea:	f0 e0       	ldi	r31, 0x00	; 0
     2ec:	e6 5f       	subi	r30, 0xF6	; 246
     2ee:	fe 4f       	sbci	r31, 0xFE	; 254
     2f0:	e0 81       	ld	r30, Z
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	e9 5d       	subi	r30, 0xD9	; 217
     2f6:	fe 4f       	sbci	r31, 0xFE	; 254
     2f8:	80 81       	ld	r24, Z
     2fa:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <ledData+0x5>
	if (scoreDigitCounter == 0){
     2fe:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <scoreDigitCounter>
     302:	81 11       	cpse	r24, r1
     304:	07 c0       	rjmp	.+14     	; 0x314 <__vector_33+0x136>
		ledData[5] |= 1 << 7; // set MSB for D0
     306:	e4 e0       	ldi	r30, 0x04	; 4
     308:	f1 e0       	ldi	r31, 0x01	; 1
     30a:	85 81       	ldd	r24, Z+5	; 0x05
     30c:	80 68       	ori	r24, 0x80	; 128
     30e:	85 83       	std	Z+5, r24	; 0x05
		ledData[4] = 0;
     310:	14 82       	std	Z+4, r1	; 0x04
     312:	0c c0       	rjmp	.+24     	; 0x32c <__vector_33+0x14e>
	}
	else{
		ledData[4] = 1 << (scoreDigitCounter - 1);
     314:	20 91 9e 02 	lds	r18, 0x029E	; 0x80029e <scoreDigitCounter>
     318:	21 50       	subi	r18, 0x01	; 1
     31a:	81 e0       	ldi	r24, 0x01	; 1
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	02 c0       	rjmp	.+4      	; 0x324 <__vector_33+0x146>
     320:	88 0f       	add	r24, r24
     322:	99 1f       	adc	r25, r25
     324:	2a 95       	dec	r18
     326:	e2 f7       	brpl	.-8      	; 0x320 <__vector_33+0x142>
     328:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <ledData+0x4>
	}

	scoreDigitCounter = (scoreDigitCounter + 1) % 9;
     32c:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <scoreDigitCounter>
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	01 96       	adiw	r24, 0x01	; 1
     334:	69 e0       	ldi	r22, 0x09	; 9
     336:	70 e0       	ldi	r23, 0x00	; 0
     338:	0e 94 2b 09 	call	0x1256	; 0x1256 <__divmodhi4>
     33c:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <scoreDigitCounter>
	

	// clear contents of shift register and latch
	PORTB &= ~(1 << LED_L); // set led latch low
     340:	28 98       	cbi	0x05, 0	; 5
	PORTE &= ~(1 << LED_B); // blank leds
     342:	73 98       	cbi	0x0e, 3	; 14
	PORTB |= (1 << LED_L); // set led latch high
     344:	28 9a       	sbi	0x05, 0	; 5
	PORTE |= (1 << LED_B); // unblank leds
     346:	73 9a       	sbi	0x0e, 3	; 14
	PORTB &= ~(1 << LED_L); // set led latch low
     348:	28 98       	cbi	0x05, 0	; 5
	spiByteCounter = 0;
     34a:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <__data_end>
	SPDR0 = ledData[spiByteCounter++];
     34e:	e0 91 9c 02 	lds	r30, 0x029C	; 0x80029c <__data_end>
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	8e 0f       	add	r24, r30
     356:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <__data_end>
     35a:	f0 e0       	ldi	r31, 0x00	; 0
     35c:	ec 5f       	subi	r30, 0xFC	; 252
     35e:	fe 4f       	sbci	r31, 0xFE	; 254
     360:	80 81       	ld	r24, Z
     362:	8e bd       	out	0x2e, r24	; 46
}
     364:	ff 91       	pop	r31
     366:	ef 91       	pop	r30
     368:	bf 91       	pop	r27
     36a:	af 91       	pop	r26
     36c:	9f 91       	pop	r25
     36e:	8f 91       	pop	r24
     370:	7f 91       	pop	r23
     372:	6f 91       	pop	r22
     374:	5f 91       	pop	r21
     376:	4f 91       	pop	r20
     378:	3f 91       	pop	r19
     37a:	2f 91       	pop	r18
     37c:	0f 90       	pop	r0
     37e:	0f be       	out	0x3f, r0	; 63
     380:	0f 90       	pop	r0
     382:	1f 90       	pop	r1
     384:	18 95       	reti

00000386 <__vector_34>:
	PORTD = 0xFF; 
	buttonMemory[muxCounter] = ~PINC;
	
}*/

ISR(TIMER3_COMPB_vect){
     386:	1f 92       	push	r1
     388:	0f 92       	push	r0
     38a:	0f b6       	in	r0, 0x3f	; 63
     38c:	0f 92       	push	r0
     38e:	11 24       	eor	r1, r1
     390:	2f 93       	push	r18
     392:	3f 93       	push	r19
     394:	8f 93       	push	r24
     396:	9f 93       	push	r25
     398:	ef 93       	push	r30
     39a:	ff 93       	push	r31
	DDRD &= ~(1<<(muxCounter+2));
	buttonMemory[muxCounter] = ~PINC; 
	DDRD = 0xFF; 
	*/
	
	DDRD = 0xFF;
     39c:	3f ef       	ldi	r19, 0xFF	; 255
     39e:	3a b9       	out	0x0a, r19	; 10
	DDRC = 0x00;
     3a0:	17 b8       	out	0x07, r1	; 7
	
	PORTD = ~(1<<(muxCounter+2));
     3a2:	20 91 9d 02 	lds	r18, 0x029D	; 0x80029d <muxCounter>
     3a6:	2e 5f       	subi	r18, 0xFE	; 254
     3a8:	81 e0       	ldi	r24, 0x01	; 1
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <__vector_34+0x2c>
     3ae:	88 0f       	add	r24, r24
     3b0:	99 1f       	adc	r25, r25
     3b2:	2a 95       	dec	r18
     3b4:	e2 f7       	brpl	.-8      	; 0x3ae <__vector_34+0x28>
     3b6:	80 95       	com	r24
     3b8:	8b b9       	out	0x0b, r24	; 11
	buttonMemory[muxCounter] = ~PINC;
     3ba:	e0 91 9d 02 	lds	r30, 0x029D	; 0x80029d <muxCounter>
     3be:	f0 e0       	ldi	r31, 0x00	; 0
     3c0:	86 b1       	in	r24, 0x06	; 6
     3c2:	80 95       	com	r24
     3c4:	ed 55       	subi	r30, 0x5D	; 93
     3c6:	fd 4f       	sbci	r31, 0xFD	; 253
     3c8:	80 83       	st	Z, r24
	PORTD = 0xFF;
     3ca:	3b b9       	out	0x0b, r19	; 11
}
     3cc:	ff 91       	pop	r31
     3ce:	ef 91       	pop	r30
     3d0:	9f 91       	pop	r25
     3d2:	8f 91       	pop	r24
     3d4:	3f 91       	pop	r19
     3d6:	2f 91       	pop	r18
     3d8:	0f 90       	pop	r0
     3da:	0f be       	out	0x3f, r0	; 63
     3dc:	0f 90       	pop	r0
     3de:	1f 90       	pop	r1
     3e0:	18 95       	reti

000003e2 <__vector_17>:

ISR(SPI0_STC_vect){
     3e2:	1f 92       	push	r1
     3e4:	0f 92       	push	r0
     3e6:	0f b6       	in	r0, 0x3f	; 63
     3e8:	0f 92       	push	r0
     3ea:	11 24       	eor	r1, r1
     3ec:	8f 93       	push	r24
     3ee:	ef 93       	push	r30
     3f0:	ff 93       	push	r31
	if (spiByteCounter >= 6){
     3f2:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <__data_end>
     3f6:	86 30       	cpi	r24, 0x06	; 6
     3f8:	10 f0       	brcs	.+4      	; 0x3fe <__vector_17+0x1c>
		PORTB |= 1 << LED_L; // set led latch high
     3fa:	28 9a       	sbi	0x05, 0	; 5
		return;
     3fc:	0b c0       	rjmp	.+22     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
	}
	SPDR0 = ledData[spiByteCounter++];
     3fe:	e0 91 9c 02 	lds	r30, 0x029C	; 0x80029c <__data_end>
     402:	81 e0       	ldi	r24, 0x01	; 1
     404:	8e 0f       	add	r24, r30
     406:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <__data_end>
     40a:	f0 e0       	ldi	r31, 0x00	; 0
     40c:	ec 5f       	subi	r30, 0xFC	; 252
     40e:	fe 4f       	sbci	r31, 0xFE	; 254
     410:	80 81       	ld	r24, Z
     412:	8e bd       	out	0x2e, r24	; 46
}
     414:	ff 91       	pop	r31
     416:	ef 91       	pop	r30
     418:	8f 91       	pop	r24
     41a:	0f 90       	pop	r0
     41c:	0f be       	out	0x3f, r0	; 63
     41e:	0f 90       	pop	r0
     420:	1f 90       	pop	r1
     422:	18 95       	reti

00000424 <uart_putchar>:

static int uart_putchar(char c, FILE *stream);
static FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);

static int uart_putchar(char c, FILE *stream)
{
     424:	cf 93       	push	r28
     426:	c8 2f       	mov	r28, r24
	if (c == '\n')
     428:	8a 30       	cpi	r24, 0x0A	; 10
     42a:	19 f4       	brne	.+6      	; 0x432 <uart_putchar+0xe>
	uart_putchar('\r', stream);
     42c:	8d e0       	ldi	r24, 0x0D	; 13
     42e:	0e 94 12 02 	call	0x424	; 0x424 <uart_putchar>
	while(!(UCSR0A &( 1 << UDRE0)));
     432:	e0 ec       	ldi	r30, 0xC0	; 192
     434:	f0 e0       	ldi	r31, 0x00	; 0
     436:	80 81       	ld	r24, Z
     438:	85 ff       	sbrs	r24, 5
     43a:	fd cf       	rjmp	.-6      	; 0x436 <uart_putchar+0x12>
	UDR0 = c;
     43c:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	return 0;
}
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	cf 91       	pop	r28
     446:	08 95       	ret

00000448 <init_uart>:

void init_uart(){
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     448:	88 e1       	ldi	r24, 0x18	; 24
     44a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (3<<UCSZ00);
     44e:	86 e0       	ldi	r24, 0x06	; 6
     450:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0L = 51;
     454:	83 e3       	ldi	r24, 0x33	; 51
     456:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     45a:	08 95       	ret

0000045c <__vector_14>:

	}
}

ISR(TIMER0_COMPA_vect)		// audio interrupt
{
     45c:	1f 92       	push	r1
     45e:	0f 92       	push	r0
     460:	0f b6       	in	r0, 0x3f	; 63
     462:	0f 92       	push	r0
     464:	11 24       	eor	r1, r1
     466:	8f 93       	push	r24
     468:	9f 93       	push	r25
     46a:	ef 93       	push	r30
     46c:	ff 93       	push	r31
	DDRB |= (1<<1);
     46e:	21 9a       	sbi	0x04, 1	; 4
	switch(note_index)
     470:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <note_index>
     474:	90 91 a0 02 	lds	r25, 0x02A0	; 0x8002a0 <note_index+0x1>
     478:	86 30       	cpi	r24, 0x06	; 6
     47a:	91 05       	cpc	r25, r1
     47c:	09 f4       	brne	.+2      	; 0x480 <__vector_14+0x24>
     47e:	4e c0       	rjmp	.+156    	; 0x51c <__vector_14+0xc0>
     480:	30 f4       	brcc	.+12     	; 0x48e <__vector_14+0x32>
     482:	81 30       	cpi	r24, 0x01	; 1
     484:	91 05       	cpc	r25, r1
     486:	61 f0       	breq	.+24     	; 0x4a0 <__vector_14+0x44>
     488:	03 97       	sbiw	r24, 0x03	; 3
     48a:	49 f1       	breq	.+82     	; 0x4de <__vector_14+0x82>
     48c:	7a c0       	rjmp	.+244    	; 0x582 <__vector_14+0x126>
     48e:	8e 30       	cpi	r24, 0x0E	; 14
     490:	91 05       	cpc	r25, r1
     492:	09 f4       	brne	.+2      	; 0x496 <__vector_14+0x3a>
     494:	62 c0       	rjmp	.+196    	; 0x55a <__vector_14+0xfe>
     496:	80 34       	cpi	r24, 0x40	; 64
     498:	91 05       	cpc	r25, r1
     49a:	09 f4       	brne	.+2      	; 0x49e <__vector_14+0x42>
     49c:	63 c0       	rjmp	.+198    	; 0x564 <__vector_14+0x108>
     49e:	71 c0       	rjmp	.+226    	; 0x582 <__vector_14+0x126>
	{	//every 8ms
		
		case 0+1:	//0ms, 8ms on
		ICR1 = notes[beep_index];	//1st note
     4a0:	e0 91 a1 02 	lds	r30, 0x02A1	; 0x8002a1 <beep_index>
     4a4:	f0 91 a2 02 	lds	r31, 0x02A2	; 0x8002a2 <beep_index+0x1>
     4a8:	ee 0f       	add	r30, r30
     4aa:	ff 1f       	adc	r31, r31
     4ac:	ed 57       	subi	r30, 0x7D	; 125
     4ae:	fd 4f       	sbci	r31, 0xFD	; 253
     4b0:	80 81       	ld	r24, Z
     4b2:	91 81       	ldd	r25, Z+1	; 0x01
     4b4:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     4b8:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		OCR1A = notes[beep_index]/2;
     4bc:	e0 91 a1 02 	lds	r30, 0x02A1	; 0x8002a1 <beep_index>
     4c0:	f0 91 a2 02 	lds	r31, 0x02A2	; 0x8002a2 <beep_index+0x1>
     4c4:	ee 0f       	add	r30, r30
     4c6:	ff 1f       	adc	r31, r31
     4c8:	ed 57       	subi	r30, 0x7D	; 125
     4ca:	fd 4f       	sbci	r31, 0xFD	; 253
     4cc:	80 81       	ld	r24, Z
     4ce:	91 81       	ldd	r25, Z+1	; 0x01
     4d0:	96 95       	lsr	r25
     4d2:	87 95       	ror	r24
     4d4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     4d8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		break;
     4dc:	52 c0       	rjmp	.+164    	; 0x582 <__vector_14+0x126>
		case 2+1:	// 16ms, 24, 32 on
		ICR1 = notes[beep_index+1];	//2nd note
     4de:	e0 91 a1 02 	lds	r30, 0x02A1	; 0x8002a1 <beep_index>
     4e2:	f0 91 a2 02 	lds	r31, 0x02A2	; 0x8002a2 <beep_index+0x1>
     4e6:	ee 0f       	add	r30, r30
     4e8:	ff 1f       	adc	r31, r31
     4ea:	eb 57       	subi	r30, 0x7B	; 123
     4ec:	fd 4f       	sbci	r31, 0xFD	; 253
     4ee:	80 81       	ld	r24, Z
     4f0:	91 81       	ldd	r25, Z+1	; 0x01
     4f2:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     4f6:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		OCR1A = notes[beep_index]/2;
     4fa:	e0 91 a1 02 	lds	r30, 0x02A1	; 0x8002a1 <beep_index>
     4fe:	f0 91 a2 02 	lds	r31, 0x02A2	; 0x8002a2 <beep_index+0x1>
     502:	ee 0f       	add	r30, r30
     504:	ff 1f       	adc	r31, r31
     506:	ed 57       	subi	r30, 0x7D	; 125
     508:	fd 4f       	sbci	r31, 0xFD	; 253
     50a:	80 81       	ld	r24, Z
     50c:	91 81       	ldd	r25, Z+1	; 0x01
     50e:	96 95       	lsr	r25
     510:	87 95       	ror	r24
     512:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     516:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		break;
     51a:	33 c0       	rjmp	.+102    	; 0x582 <__vector_14+0x126>
		case 5+1:	// 40ms, 48, 56, 64, 72, 80, 88, 96, on
		ICR1 = notes[beep_index+2];	// 3rd note
     51c:	e0 91 a1 02 	lds	r30, 0x02A1	; 0x8002a1 <beep_index>
     520:	f0 91 a2 02 	lds	r31, 0x02A2	; 0x8002a2 <beep_index+0x1>
     524:	ee 0f       	add	r30, r30
     526:	ff 1f       	adc	r31, r31
     528:	e9 57       	subi	r30, 0x79	; 121
     52a:	fd 4f       	sbci	r31, 0xFD	; 253
     52c:	80 81       	ld	r24, Z
     52e:	91 81       	ldd	r25, Z+1	; 0x01
     530:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     534:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		OCR1A = notes[beep_index]/2;
     538:	e0 91 a1 02 	lds	r30, 0x02A1	; 0x8002a1 <beep_index>
     53c:	f0 91 a2 02 	lds	r31, 0x02A2	; 0x8002a2 <beep_index+0x1>
     540:	ee 0f       	add	r30, r30
     542:	ff 1f       	adc	r31, r31
     544:	ed 57       	subi	r30, 0x7D	; 125
     546:	fd 4f       	sbci	r31, 0xFD	; 253
     548:	80 81       	ld	r24, Z
     54a:	91 81       	ldd	r25, Z+1	; 0x01
     54c:	96 95       	lsr	r25
     54e:	87 95       	ror	r24
     550:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     554:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		break;
     558:	14 c0       	rjmp	.+40     	; 0x582 <__vector_14+0x126>
		case 13+1:
		//ICR1 = 0;					//off
		OCR1A = 0;
     55a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     55e:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		break;
     562:	0f c0       	rjmp	.+30     	; 0x582 <__vector_14+0x126>
		
		case 63+1:
		beep_index = 0;
     564:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <beep_index+0x1>
     568:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <beep_index>
		note_index = -1;
     56c:	8f ef       	ldi	r24, 0xFF	; 255
     56e:	9f ef       	ldi	r25, 0xFF	; 255
     570:	90 93 a0 02 	sts	0x02A0, r25	; 0x8002a0 <note_index+0x1>
     574:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <note_index>
		TCCR0B &= ~(0b101 << CS00);
     578:	85 b5       	in	r24, 0x25	; 37
     57a:	8a 7f       	andi	r24, 0xFA	; 250
     57c:	85 bd       	out	0x25, r24	; 37
		TCNT0 = 0;
     57e:	16 bc       	out	0x26, r1	; 38
		DDRB &= ~(1<<1);
     580:	21 98       	cbi	0x04, 1	; 4
		break;
	}
	note_index += 1;
     582:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <note_index>
     586:	90 91 a0 02 	lds	r25, 0x02A0	; 0x8002a0 <note_index+0x1>
     58a:	01 96       	adiw	r24, 0x01	; 1
     58c:	90 93 a0 02 	sts	0x02A0, r25	; 0x8002a0 <note_index+0x1>
     590:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <note_index>
}
     594:	ff 91       	pop	r31
     596:	ef 91       	pop	r30
     598:	9f 91       	pop	r25
     59a:	8f 91       	pop	r24
     59c:	0f 90       	pop	r0
     59e:	0f be       	out	0x3f, r0	; 63
     5a0:	0f 90       	pop	r0
     5a2:	1f 90       	pop	r1
     5a4:	18 95       	reti

000005a6 <__vector_42>:

ISR(TIMER4_COMPA_vect){		// use timer 4 for decreasing game time every 1s
     5a6:	1f 92       	push	r1
     5a8:	0f 92       	push	r0
     5aa:	0f b6       	in	r0, 0x3f	; 63
     5ac:	0f 92       	push	r0
     5ae:	11 24       	eor	r1, r1
     5b0:	8f 93       	push	r24
	if(TimeRemaining > 0){
     5b2:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <TimeRemaining>
     5b6:	88 23       	and	r24, r24
     5b8:	29 f0       	breq	.+10     	; 0x5c4 <__vector_42+0x1e>
		TimeRemaining--;
     5ba:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <TimeRemaining>
     5be:	81 50       	subi	r24, 0x01	; 1
     5c0:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <TimeRemaining>
	}
}
     5c4:	8f 91       	pop	r24
     5c6:	0f 90       	pop	r0
     5c8:	0f be       	out	0x3f, r0	; 63
     5ca:	0f 90       	pop	r0
     5cc:	1f 90       	pop	r1
     5ce:	18 95       	reti

000005d0 <ShowWinner>:
	EndAttract:
	return;		// start the game

}

void ShowWinner(){
     5d0:	af 92       	push	r10
     5d2:	bf 92       	push	r11
     5d4:	cf 92       	push	r12
     5d6:	df 92       	push	r13
     5d8:	ef 92       	push	r14
     5da:	ff 92       	push	r15
     5dc:	0f 93       	push	r16
     5de:	1f 93       	push	r17
     5e0:	cf 93       	push	r28
     5e2:	df 93       	push	r29
	
	clearLeds(0);
     5e4:	80 e0       	ldi	r24, 0x00	; 0
     5e6:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <clearLeds>
	
	if(GameMode == 0){
     5ea:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <GameMode>
     5ee:	81 11       	cpse	r24, r1
     5f0:	6f c0       	rjmp	.+222    	; 0x6d0 <ShowWinner+0x100>
     5f2:	68 94       	set
     5f4:	dd 24       	eor	r13, r13
     5f6:	d3 f8       	bld	r13, 3
		for(uint8_t count = 0; count < 8; count++){			// flash whole screen
			setScore(0, HighScore1P);
			setScore(2, HighScore1P);
			printf("checkerboard");
     5f8:	0f 2e       	mov	r0, r31
     5fa:	f8 e3       	ldi	r31, 0x38	; 56
     5fc:	af 2e       	mov	r10, r31
     5fe:	f1 e0       	ldi	r31, 0x01	; 1
     600:	bf 2e       	mov	r11, r31
     602:	f0 2d       	mov	r31, r0
			_delay_ms(250);
			setScore(0, 0);	// TODO TURN SEGMENTS OFF
			setScore(2, 0);
			
			for(uint8_t i = 0; i < 30; i++){
				setButtonLed(i % 6, i / 5, 1 - (i%2)); // TODO VERIFY THIS WORKS, turn all leds on
     604:	ee 24       	eor	r14, r14
     606:	e3 94       	inc	r14
     608:	0f 2e       	mov	r0, r31
     60a:	fd ec       	ldi	r31, 0xCD	; 205
     60c:	ff 2e       	mov	r15, r31
     60e:	f0 2d       	mov	r31, r0
     610:	db ea       	ldi	r29, 0xAB	; 171
	
	clearLeds(0);
	
	if(GameMode == 0){
		for(uint8_t count = 0; count < 8; count++){			// flash whole screen
			setScore(0, HighScore1P);
     612:	60 91 b8 02 	lds	r22, 0x02B8	; 0x8002b8 <HighScore1P>
     616:	70 91 b9 02 	lds	r23, 0x02B9	; 0x8002b9 <HighScore1P+0x1>
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
			setScore(2, HighScore1P);
     620:	60 91 b8 02 	lds	r22, 0x02B8	; 0x8002b8 <HighScore1P>
     624:	70 91 b9 02 	lds	r23, 0x02B9	; 0x8002b9 <HighScore1P+0x1>
     628:	82 e0       	ldi	r24, 0x02	; 2
     62a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
			printf("checkerboard");
     62e:	bf 92       	push	r11
     630:	af 92       	push	r10
     632:	0e 94 af 09 	call	0x135e	; 0x135e <printf>
     636:	0f 90       	pop	r0
     638:	0f 90       	pop	r0
			for(uint8_t ledx = 0; ledx < 6; ledx++){		// set checkerboard
     63a:	10 e0       	ldi	r17, 0x00	; 0
     63c:	0d c0       	rjmp	.+26     	; 0x658 <ShowWinner+0x88>
				for(uint8_t ledy = 0; ledy < 6; ledy++){
					setButtonLed(ledx, ledy, (ledx+ledy)%2 );
     63e:	41 2f       	mov	r20, r17
     640:	4c 0f       	add	r20, r28
     642:	41 70       	andi	r20, 0x01	; 1
     644:	6c 2f       	mov	r22, r28
     646:	81 2f       	mov	r24, r17
     648:	0e 94 b2 00 	call	0x164	; 0x164 <setButtonLed>
		for(uint8_t count = 0; count < 8; count++){			// flash whole screen
			setScore(0, HighScore1P);
			setScore(2, HighScore1P);
			printf("checkerboard");
			for(uint8_t ledx = 0; ledx < 6; ledx++){		// set checkerboard
				for(uint8_t ledy = 0; ledy < 6; ledy++){
     64c:	cf 5f       	subi	r28, 0xFF	; 255
     64e:	c6 30       	cpi	r28, 0x06	; 6
     650:	b1 f7       	brne	.-20     	; 0x63e <ShowWinner+0x6e>
	if(GameMode == 0){
		for(uint8_t count = 0; count < 8; count++){			// flash whole screen
			setScore(0, HighScore1P);
			setScore(2, HighScore1P);
			printf("checkerboard");
			for(uint8_t ledx = 0; ledx < 6; ledx++){		// set checkerboard
     652:	1f 5f       	subi	r17, 0xFF	; 255
     654:	16 30       	cpi	r17, 0x06	; 6
     656:	11 f0       	breq	.+4      	; 0x65c <ShowWinner+0x8c>
     658:	c0 e0       	ldi	r28, 0x00	; 0
     65a:	f1 cf       	rjmp	.-30     	; 0x63e <ShowWinner+0x6e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     65c:	2f ef       	ldi	r18, 0xFF	; 255
     65e:	84 e3       	ldi	r24, 0x34	; 52
     660:	9c e0       	ldi	r25, 0x0C	; 12
     662:	21 50       	subi	r18, 0x01	; 1
     664:	80 40       	sbci	r24, 0x00	; 0
     666:	90 40       	sbci	r25, 0x00	; 0
     668:	e1 f7       	brne	.-8      	; 0x662 <ShowWinner+0x92>
     66a:	00 c0       	rjmp	.+0      	; 0x66c <ShowWinner+0x9c>
     66c:	00 00       	nop
					setButtonLed(ledx, ledy, (ledx+ledy)%2 );
				}
			}
			
			_delay_ms(250);
			setScore(0, 0);	// TODO TURN SEGMENTS OFF
     66e:	60 e0       	ldi	r22, 0x00	; 0
     670:	70 e0       	ldi	r23, 0x00	; 0
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
			setScore(2, 0);
     678:	60 e0       	ldi	r22, 0x00	; 0
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	82 e0       	ldi	r24, 0x02	; 2
     67e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
			
			for(uint8_t i = 0; i < 30; i++){
     682:	c0 e0       	ldi	r28, 0x00	; 0
				setButtonLed(i % 6, i / 5, 1 - (i%2)); // TODO VERIFY THIS WORKS, turn all leds on
     684:	4c 2f       	mov	r20, r28
     686:	4e 25       	eor	r20, r14
     688:	41 70       	andi	r20, 0x01	; 1
     68a:	cf 9d       	mul	r28, r15
     68c:	61 2d       	mov	r22, r1
     68e:	11 24       	eor	r1, r1
     690:	66 95       	lsr	r22
     692:	66 95       	lsr	r22
     694:	cd 9f       	mul	r28, r29
     696:	81 2d       	mov	r24, r1
     698:	11 24       	eor	r1, r1
     69a:	86 95       	lsr	r24
     69c:	86 95       	lsr	r24
     69e:	98 2f       	mov	r25, r24
     6a0:	99 0f       	add	r25, r25
     6a2:	89 0f       	add	r24, r25
     6a4:	88 0f       	add	r24, r24
     6a6:	2c 2f       	mov	r18, r28
     6a8:	28 1b       	sub	r18, r24
     6aa:	82 2f       	mov	r24, r18
     6ac:	0e 94 b2 00 	call	0x164	; 0x164 <setButtonLed>
			
			_delay_ms(250);
			setScore(0, 0);	// TODO TURN SEGMENTS OFF
			setScore(2, 0);
			
			for(uint8_t i = 0; i < 30; i++){
     6b0:	cf 5f       	subi	r28, 0xFF	; 255
     6b2:	ce 31       	cpi	r28, 0x1E	; 30
     6b4:	39 f7       	brne	.-50     	; 0x684 <ShowWinner+0xb4>
     6b6:	8f ef       	ldi	r24, 0xFF	; 255
     6b8:	94 e3       	ldi	r25, 0x34	; 52
     6ba:	2c e0       	ldi	r18, 0x0C	; 12
     6bc:	81 50       	subi	r24, 0x01	; 1
     6be:	90 40       	sbci	r25, 0x00	; 0
     6c0:	20 40       	sbci	r18, 0x00	; 0
     6c2:	e1 f7       	brne	.-8      	; 0x6bc <ShowWinner+0xec>
     6c4:	00 c0       	rjmp	.+0      	; 0x6c6 <ShowWinner+0xf6>
     6c6:	00 00       	nop
     6c8:	da 94       	dec	r13
void ShowWinner(){
	
	clearLeds(0);
	
	if(GameMode == 0){
		for(uint8_t count = 0; count < 8; count++){			// flash whole screen
     6ca:	d1 10       	cpse	r13, r1
     6cc:	a2 cf       	rjmp	.-188    	; 0x612 <ShowWinner+0x42>
     6ce:	9c c0       	rjmp	.+312    	; 0x808 <ShowWinner+0x238>
			}
			
			_delay_ms(250);
		}
		}else{										//2p mode, show winner every time
		uint8_t winnerhalf = P1Score > P2Score ? 0 : 3; //index half based on winner
     6d0:	20 91 ba 02 	lds	r18, 0x02BA	; 0x8002ba <P1Score>
     6d4:	30 91 bb 02 	lds	r19, 0x02BB	; 0x8002bb <P1Score+0x1>
     6d8:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <P2Score>
     6dc:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <P2Score+0x1>
     6e0:	82 17       	cp	r24, r18
     6e2:	93 07       	cpc	r25, r19
     6e4:	28 f0       	brcs	.+10     	; 0x6f0 <ShowWinner+0x120>
     6e6:	0f 2e       	mov	r0, r31
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	cf 2e       	mov	r12, r31
     6ec:	f0 2d       	mov	r31, r0
     6ee:	01 c0       	rjmp	.+2      	; 0x6f2 <ShowWinner+0x122>
     6f0:	c1 2c       	mov	r12, r1
     6f2:	68 94       	set
     6f4:	dd 24       	eor	r13, r13
     6f6:	d2 f8       	bld	r13, 2
				setScore(0, HighScore2P);
				setScore(1, 0);	//TODO EMPTY? show 2P flashing opposite
				setScore(2, HighScore2P);
			}
			
			for(uint8_t x = winnerhalf; x < (winnerhalf+3); x++){
     6f8:	ec 2c       	mov	r14, r12
     6fa:	f1 2c       	mov	r15, r1
     6fc:	87 01       	movw	r16, r14
     6fe:	0d 5f       	subi	r16, 0xFD	; 253
     700:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		}else{										//2p mode, show winner every time
		uint8_t winnerhalf = P1Score > P2Score ? 0 : 3; //index half based on winner
		for(uint8_t i = 0; i < 4; i++){
			
			if((P1Score == HighScore2P) || (P2Score == HighScore2P)){
     702:	60 91 c8 02 	lds	r22, 0x02C8	; 0x8002c8 <HighScore2P>
     706:	70 91 c9 02 	lds	r23, 0x02C9	; 0x8002c9 <HighScore2P+0x1>
     70a:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <P1Score>
     70e:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <P1Score+0x1>
     712:	86 17       	cp	r24, r22
     714:	97 07       	cpc	r25, r23
     716:	39 f0       	breq	.+14     	; 0x726 <ShowWinner+0x156>
     718:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <P2Score>
     71c:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <P2Score+0x1>
     720:	68 17       	cp	r22, r24
     722:	79 07       	cpc	r23, r25
     724:	79 f4       	brne	.+30     	; 0x744 <ShowWinner+0x174>
				setScore(0, HighScore2P);
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
				setScore(1, 0);	//TODO EMPTY? show 2P flashing opposite
     72c:	60 e0       	ldi	r22, 0x00	; 0
     72e:	70 e0       	ldi	r23, 0x00	; 0
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
				setScore(2, HighScore2P);
     736:	60 91 c8 02 	lds	r22, 0x02C8	; 0x8002c8 <HighScore2P>
     73a:	70 91 c9 02 	lds	r23, 0x02C9	; 0x8002c9 <HighScore2P+0x1>
     73e:	82 e0       	ldi	r24, 0x02	; 2
     740:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
			}
			
			for(uint8_t x = winnerhalf; x < (winnerhalf+3); x++){
     744:	e0 16       	cp	r14, r16
     746:	f1 06       	cpc	r15, r17
     748:	84 f0       	brlt	.+32     	; 0x76a <ShowWinner+0x19a>
     74a:	12 c0       	rjmp	.+36     	; 0x770 <ShowWinner+0x1a0>
				for(uint8_t y = 0; y < 5; y++){
					setButtonLed(x,y,1);
     74c:	41 e0       	ldi	r20, 0x01	; 1
     74e:	6c 2f       	mov	r22, r28
     750:	8d 2f       	mov	r24, r29
     752:	0e 94 b2 00 	call	0x164	; 0x164 <setButtonLed>
				setScore(1, 0);	//TODO EMPTY? show 2P flashing opposite
				setScore(2, HighScore2P);
			}
			
			for(uint8_t x = winnerhalf; x < (winnerhalf+3); x++){
				for(uint8_t y = 0; y < 5; y++){
     756:	cf 5f       	subi	r28, 0xFF	; 255
     758:	c5 30       	cpi	r28, 0x05	; 5
     75a:	c1 f7       	brne	.-16     	; 0x74c <ShowWinner+0x17c>
				setScore(0, HighScore2P);
				setScore(1, 0);	//TODO EMPTY? show 2P flashing opposite
				setScore(2, HighScore2P);
			}
			
			for(uint8_t x = winnerhalf; x < (winnerhalf+3); x++){
     75c:	df 5f       	subi	r29, 0xFF	; 255
     75e:	8d 2f       	mov	r24, r29
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	80 17       	cp	r24, r16
     764:	91 07       	cpc	r25, r17
     766:	14 f0       	brlt	.+4      	; 0x76c <ShowWinner+0x19c>
     768:	03 c0       	rjmp	.+6      	; 0x770 <ShowWinner+0x1a0>
     76a:	dc 2d       	mov	r29, r12
			}
			
			_delay_ms(250);
		}
		}else{										//2p mode, show winner every time
		uint8_t winnerhalf = P1Score > P2Score ? 0 : 3; //index half based on winner
     76c:	c0 e0       	ldi	r28, 0x00	; 0
     76e:	ee cf       	rjmp	.-36     	; 0x74c <ShowWinner+0x17c>
     770:	8f ef       	ldi	r24, 0xFF	; 255
     772:	94 e3       	ldi	r25, 0x34	; 52
     774:	2c e0       	ldi	r18, 0x0C	; 12
     776:	81 50       	subi	r24, 0x01	; 1
     778:	90 40       	sbci	r25, 0x00	; 0
     77a:	20 40       	sbci	r18, 0x00	; 0
     77c:	e1 f7       	brne	.-8      	; 0x776 <ShowWinner+0x1a6>
     77e:	00 c0       	rjmp	.+0      	; 0x780 <ShowWinner+0x1b0>
     780:	00 00       	nop
					setButtonLed(x,y,1);
				}
			}
			_delay_ms(250);
			
			if((P1Score == HighScore2P) || (P2Score == HighScore2P)){
     782:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <HighScore2P>
     786:	90 91 c9 02 	lds	r25, 0x02C9	; 0x8002c9 <HighScore2P+0x1>
     78a:	20 91 ba 02 	lds	r18, 0x02BA	; 0x8002ba <P1Score>
     78e:	30 91 bb 02 	lds	r19, 0x02BB	; 0x8002bb <P1Score+0x1>
     792:	28 17       	cp	r18, r24
     794:	39 07       	cpc	r19, r25
     796:	39 f0       	breq	.+14     	; 0x7a6 <ShowWinner+0x1d6>
     798:	20 91 bc 02 	lds	r18, 0x02BC	; 0x8002bc <P2Score>
     79c:	30 91 bd 02 	lds	r19, 0x02BD	; 0x8002bd <P2Score+0x1>
     7a0:	82 17       	cp	r24, r18
     7a2:	93 07       	cpc	r25, r19
     7a4:	79 f4       	brne	.+30     	; 0x7c4 <ShowWinner+0x1f4>
				setScore(0, 0); // TODO EMPTY
     7a6:	60 e0       	ldi	r22, 0x00	; 0
     7a8:	70 e0       	ldi	r23, 0x00	; 0
     7aa:	80 e0       	ldi	r24, 0x00	; 0
     7ac:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
				setScore(1, 0);	//TODO SHOW 1P if 1p has hs else 2p
     7b0:	60 e0       	ldi	r22, 0x00	; 0
     7b2:	70 e0       	ldi	r23, 0x00	; 0
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
				setScore(2, 0); // todo empty
     7ba:	60 e0       	ldi	r22, 0x00	; 0
     7bc:	70 e0       	ldi	r23, 0x00	; 0
     7be:	82 e0       	ldi	r24, 0x02	; 2
     7c0:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
			}
			
			for(uint8_t x = winnerhalf; x < (winnerhalf+3); x++){
     7c4:	e0 16       	cp	r14, r16
     7c6:	f1 06       	cpc	r15, r17
     7c8:	84 f0       	brlt	.+32     	; 0x7ea <ShowWinner+0x21a>
     7ca:	12 c0       	rjmp	.+36     	; 0x7f0 <ShowWinner+0x220>
				for(uint8_t y = 0; y < 5; y++){
					setButtonLed(x,y,0);
     7cc:	40 e0       	ldi	r20, 0x00	; 0
     7ce:	6c 2f       	mov	r22, r28
     7d0:	8d 2f       	mov	r24, r29
     7d2:	0e 94 b2 00 	call	0x164	; 0x164 <setButtonLed>
				setScore(1, 0);	//TODO SHOW 1P if 1p has hs else 2p
				setScore(2, 0); // todo empty
			}
			
			for(uint8_t x = winnerhalf; x < (winnerhalf+3); x++){
				for(uint8_t y = 0; y < 5; y++){
     7d6:	cf 5f       	subi	r28, 0xFF	; 255
     7d8:	c5 30       	cpi	r28, 0x05	; 5
     7da:	c1 f7       	brne	.-16     	; 0x7cc <ShowWinner+0x1fc>
				setScore(0, 0); // TODO EMPTY
				setScore(1, 0);	//TODO SHOW 1P if 1p has hs else 2p
				setScore(2, 0); // todo empty
			}
			
			for(uint8_t x = winnerhalf; x < (winnerhalf+3); x++){
     7dc:	df 5f       	subi	r29, 0xFF	; 255
     7de:	8d 2f       	mov	r24, r29
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	80 17       	cp	r24, r16
     7e4:	91 07       	cpc	r25, r17
     7e6:	14 f0       	brlt	.+4      	; 0x7ec <ShowWinner+0x21c>
     7e8:	03 c0       	rjmp	.+6      	; 0x7f0 <ShowWinner+0x220>
     7ea:	dc 2d       	mov	r29, r12
				setScore(0, HighScore2P);
				setScore(1, 0);	//TODO EMPTY? show 2P flashing opposite
				setScore(2, HighScore2P);
			}
			
			for(uint8_t x = winnerhalf; x < (winnerhalf+3); x++){
     7ec:	c0 e0       	ldi	r28, 0x00	; 0
     7ee:	ee cf       	rjmp	.-36     	; 0x7cc <ShowWinner+0x1fc>
     7f0:	8f ef       	ldi	r24, 0xFF	; 255
     7f2:	94 e3       	ldi	r25, 0x34	; 52
     7f4:	2c e0       	ldi	r18, 0x0C	; 12
     7f6:	81 50       	subi	r24, 0x01	; 1
     7f8:	90 40       	sbci	r25, 0x00	; 0
     7fa:	20 40       	sbci	r18, 0x00	; 0
     7fc:	e1 f7       	brne	.-8      	; 0x7f6 <ShowWinner+0x226>
     7fe:	00 c0       	rjmp	.+0      	; 0x800 <ShowWinner+0x230>
     800:	00 00       	nop
     802:	da 94       	dec	r13
			
			_delay_ms(250);
		}
		}else{										//2p mode, show winner every time
		uint8_t winnerhalf = P1Score > P2Score ? 0 : 3; //index half based on winner
		for(uint8_t i = 0; i < 4; i++){
     804:	d1 10       	cpse	r13, r1
     806:	7d cf       	rjmp	.-262    	; 0x702 <ShowWinner+0x132>
				}
			}
			_delay_ms(250);
		}
	}
}
     808:	df 91       	pop	r29
     80a:	cf 91       	pop	r28
     80c:	1f 91       	pop	r17
     80e:	0f 91       	pop	r16
     810:	ff 90       	pop	r15
     812:	ef 90       	pop	r14
     814:	df 90       	pop	r13
     816:	cf 90       	pop	r12
     818:	bf 90       	pop	r11
     81a:	af 90       	pop	r10
     81c:	08 95       	ret

0000081e <IncrementScore>:

void IncrementScore(uint8_t Player, uint16_t value){
	if(Player == 0){
     81e:	81 11       	cpse	r24, r1
     820:	11 c0       	rjmp	.+34     	; 0x844 <IncrementScore+0x26>
		P1Score += value;
		P1Score = P1Score > 999 ? 999 : P1Score;
     822:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <P1Score>
     826:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <P1Score+0x1>
     82a:	68 0f       	add	r22, r24
     82c:	79 1f       	adc	r23, r25
     82e:	68 3e       	cpi	r22, 0xE8	; 232
     830:	83 e0       	ldi	r24, 0x03	; 3
     832:	78 07       	cpc	r23, r24
     834:	10 f0       	brcs	.+4      	; 0x83a <IncrementScore+0x1c>
     836:	67 ee       	ldi	r22, 0xE7	; 231
     838:	73 e0       	ldi	r23, 0x03	; 3
     83a:	70 93 bb 02 	sts	0x02BB, r23	; 0x8002bb <P1Score+0x1>
     83e:	60 93 ba 02 	sts	0x02BA, r22	; 0x8002ba <P1Score>
     842:	08 95       	ret
		}else if(Player == 1){
     844:	81 30       	cpi	r24, 0x01	; 1
     846:	81 f4       	brne	.+32     	; 0x868 <IncrementScore+0x4a>
		P2Score += value;
		P2Score = P2Score > 999 ? 999 : P2Score;
     848:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <P2Score>
     84c:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <P2Score+0x1>
     850:	68 0f       	add	r22, r24
     852:	79 1f       	adc	r23, r25
     854:	68 3e       	cpi	r22, 0xE8	; 232
     856:	83 e0       	ldi	r24, 0x03	; 3
     858:	78 07       	cpc	r23, r24
     85a:	10 f0       	brcs	.+4      	; 0x860 <IncrementScore+0x42>
     85c:	67 ee       	ldi	r22, 0xE7	; 231
     85e:	73 e0       	ldi	r23, 0x03	; 3
     860:	70 93 bd 02 	sts	0x02BD, r23	; 0x8002bd <P2Score+0x1>
     864:	60 93 bc 02 	sts	0x02BC, r22	; 0x8002bc <P2Score>
     868:	08 95       	ret

0000086a <Bonus>:
	// game is over, stop timer
	TCCR4B = (0b000 << CS40);
	
}

void Bonus(){
     86a:	cf 92       	push	r12
     86c:	df 92       	push	r13
     86e:	ef 92       	push	r14
     870:	ff 92       	push	r15
     872:	0f 93       	push	r16
     874:	1f 93       	push	r17
     876:	cf 93       	push	r28
     878:	df 93       	push	r29

	// blink leds to indicate bonus round start

	clearLeds(1);
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <clearLeds>
     880:	2f ef       	ldi	r18, 0xFF	; 255
     882:	89 e6       	ldi	r24, 0x69	; 105
     884:	98 e1       	ldi	r25, 0x18	; 24
     886:	21 50       	subi	r18, 0x01	; 1
     888:	80 40       	sbci	r24, 0x00	; 0
     88a:	90 40       	sbci	r25, 0x00	; 0
     88c:	e1 f7       	brne	.-8      	; 0x886 <Bonus+0x1c>
     88e:	00 c0       	rjmp	.+0      	; 0x890 <Bonus+0x26>
     890:	00 00       	nop
	_delay_ms(500);

	clearLeds(0);
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <clearLeds>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	89 e6       	ldi	r24, 0x69	; 105
     89c:	98 e1       	ldi	r25, 0x18	; 24
     89e:	21 50       	subi	r18, 0x01	; 1
     8a0:	80 40       	sbci	r24, 0x00	; 0
     8a2:	90 40       	sbci	r25, 0x00	; 0
     8a4:	e1 f7       	brne	.-8      	; 0x89e <Bonus+0x34>
     8a6:	00 c0       	rjmp	.+0      	; 0x8a8 <Bonus+0x3e>
     8a8:	00 00       	nop
	_delay_ms(500);

	clearLeds(1);
     8aa:	81 e0       	ldi	r24, 0x01	; 1
     8ac:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <clearLeds>
     8b0:	2f ef       	ldi	r18, 0xFF	; 255
     8b2:	84 e3       	ldi	r24, 0x34	; 52
     8b4:	9c e0       	ldi	r25, 0x0C	; 12
     8b6:	21 50       	subi	r18, 0x01	; 1
     8b8:	80 40       	sbci	r24, 0x00	; 0
     8ba:	90 40       	sbci	r25, 0x00	; 0
     8bc:	e1 f7       	brne	.-8      	; 0x8b6 <Bonus+0x4c>
     8be:	00 c0       	rjmp	.+0      	; 0x8c0 <Bonus+0x56>
     8c0:	00 00       	nop
	_delay_ms(250);

	uint32_t HasPressed = 0;	// store 30 stored buttons
	
	TimeRemaining = BonusTime;
     8c2:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <BonusTime>
     8c6:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <TimeRemaining>
	TCNT4 = 0;
     8ca:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7e00a5>
     8ce:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7e00a4>
	TCCR4B = (0b101 << CS40);	// enable timer 0 (game timer)
     8d2:	85 e0       	ldi	r24, 0x05	; 5
     8d4:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
	
	setScore(0, GameMode == 0 ? HighScore1P : HighScore2P);
     8d8:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <GameMode>
     8dc:	81 11       	cpse	r24, r1
     8de:	05 c0       	rjmp	.+10     	; 0x8ea <Bonus+0x80>
     8e0:	60 91 b8 02 	lds	r22, 0x02B8	; 0x8002b8 <HighScore1P>
     8e4:	70 91 b9 02 	lds	r23, 0x02B9	; 0x8002b9 <HighScore1P+0x1>
     8e8:	04 c0       	rjmp	.+8      	; 0x8f2 <Bonus+0x88>
     8ea:	60 91 c8 02 	lds	r22, 0x02C8	; 0x8002c8 <HighScore2P>
     8ee:	70 91 c9 02 	lds	r23, 0x02C9	; 0x8002c9 <HighScore2P+0x1>
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
			setScore(2, P1Score);	// otherwise show p1 score and high score
		}
		
		for(uint8_t x = 0; x < 6; x++){
			for(uint8_t y = 0; y < 5; y++){
				if( isButtonDown(x, y) && (( 1 << (x*5 + y) ) == 0)){		// check later
     8f8:	cc 24       	eor	r12, r12
     8fa:	c3 94       	inc	r12
     8fc:	d1 2c       	mov	r13, r1
	TCNT4 = 0;
	TCCR4B = (0b101 << CS40);	// enable timer 0 (game timer)
	
	setScore(0, GameMode == 0 ? HighScore1P : HighScore2P);
	
	while(TimeRemaining > 0){
     8fe:	5c c0       	rjmp	.+184    	; 0x9b8 <__stack+0xb9>
		
		setScore(1, TimeRemaining);
     900:	60 91 b7 02 	lds	r22, 0x02B7	; 0x8002b7 <TimeRemaining>
     904:	70 e0       	ldi	r23, 0x00	; 0
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
		if(GameMode == 1){
     90c:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <GameMode>
     910:	81 30       	cpi	r24, 0x01	; 1
     912:	79 f4       	brne	.+30     	; 0x932 <__stack+0x33>
			setScore(0, P1Score);	// if 2p mode, show left p1 and right p2 scores
     914:	60 91 ba 02 	lds	r22, 0x02BA	; 0x8002ba <P1Score>
     918:	70 91 bb 02 	lds	r23, 0x02BB	; 0x8002bb <P1Score+0x1>
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
			setScore(2, P2Score);
     922:	60 91 bc 02 	lds	r22, 0x02BC	; 0x8002bc <P2Score>
     926:	70 91 bd 02 	lds	r23, 0x02BD	; 0x8002bd <P2Score+0x1>
     92a:	82 e0       	ldi	r24, 0x02	; 2
     92c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
     930:	4f c0       	rjmp	.+158    	; 0x9d0 <__stack+0xd1>
			}else{
			setScore(2, P1Score);	// otherwise show p1 score and high score
     932:	60 91 ba 02 	lds	r22, 0x02BA	; 0x8002ba <P1Score>
     936:	70 91 bb 02 	lds	r23, 0x02BB	; 0x8002bb <P1Score+0x1>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
     940:	47 c0       	rjmp	.+142    	; 0x9d0 <__stack+0xd1>
		}
		
		for(uint8_t x = 0; x < 6; x++){
			for(uint8_t y = 0; y < 5; y++){
				if( isButtonDown(x, y) && (( 1 << (x*5 + y) ) == 0)){		// check later
     942:	6c 2f       	mov	r22, r28
     944:	8d 2f       	mov	r24, r29
     946:	0e 94 a4 00 	call	0x148	; 0x148 <isButtonDown>
     94a:	88 23       	and	r24, r24
     94c:	39 f1       	breq	.+78     	; 0x99c <__stack+0x9d>
     94e:	c6 01       	movw	r24, r12
     950:	00 2e       	mov	r0, r16
     952:	02 c0       	rjmp	.+4      	; 0x958 <__stack+0x59>
     954:	88 0f       	add	r24, r24
     956:	99 1f       	adc	r25, r25
     958:	0a 94       	dec	r0
     95a:	e2 f7       	brpl	.-8      	; 0x954 <__stack+0x55>
     95c:	89 2b       	or	r24, r25
     95e:	f1 f4       	brne	.+60     	; 0x99c <__stack+0x9d>

					HasPressed |= (1 << (x*5 + y) );
					setButtonLed(x,y,0);
     960:	40 e0       	ldi	r20, 0x00	; 0
     962:	6c 2f       	mov	r22, r28
     964:	8d 2f       	mov	r24, r29
     966:	0e 94 b2 00 	call	0x164	; 0x164 <setButtonLed>

					if(GameMode == 0){
     96a:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <GameMode>
     96e:	81 11       	cpse	r24, r1
     970:	06 c0       	rjmp	.+12     	; 0x97e <__stack+0x7f>
						IncrementScore(0,BonusPointCount);		// TODO later include mil
     972:	60 91 ca 02 	lds	r22, 0x02CA	; 0x8002ca <BonusPointCount>
     976:	70 e0       	ldi	r23, 0x00	; 0
     978:	0e 94 0f 04 	call	0x81e	; 0x81e <IncrementScore>
     97c:	0f c0       	rjmp	.+30     	; 0x99c <__stack+0x9d>
						}else{
						if(x >= 3){
     97e:	d3 30       	cpi	r29, 0x03	; 3
     980:	38 f0       	brcs	.+14     	; 0x990 <__stack+0x91>
							IncrementScore(1,BonusPointCount);
     982:	60 91 ca 02 	lds	r22, 0x02CA	; 0x8002ca <BonusPointCount>
     986:	70 e0       	ldi	r23, 0x00	; 0
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	0e 94 0f 04 	call	0x81e	; 0x81e <IncrementScore>
     98e:	06 c0       	rjmp	.+12     	; 0x99c <__stack+0x9d>
							}else{
							IncrementScore(0,BonusPointCount);
     990:	60 91 ca 02 	lds	r22, 0x02CA	; 0x8002ca <BonusPointCount>
     994:	70 e0       	ldi	r23, 0x00	; 0
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	0e 94 0f 04 	call	0x81e	; 0x81e <IncrementScore>
			}else{
			setScore(2, P1Score);	// otherwise show p1 score and high score
		}
		
		for(uint8_t x = 0; x < 6; x++){
			for(uint8_t y = 0; y < 5; y++){
     99c:	cf 5f       	subi	r28, 0xFF	; 255
     99e:	0f 5f       	subi	r16, 0xFF	; 255
     9a0:	1f 4f       	sbci	r17, 0xFF	; 255
     9a2:	c5 30       	cpi	r28, 0x05	; 5
     9a4:	71 f6       	brne	.-100    	; 0x942 <__stack+0x43>
			setScore(2, P2Score);
			}else{
			setScore(2, P1Score);	// otherwise show p1 score and high score
		}
		
		for(uint8_t x = 0; x < 6; x++){
     9a6:	df 5f       	subi	r29, 0xFF	; 255
     9a8:	25 e0       	ldi	r18, 0x05	; 5
     9aa:	e2 0e       	add	r14, r18
     9ac:	f1 1c       	adc	r15, r1
     9ae:	d6 30       	cpi	r29, 0x06	; 6
     9b0:	19 f0       	breq	.+6      	; 0x9b8 <__stack+0xb9>
	// game is over, stop timer
	TCCR4B = (0b000 << CS40);
	
}

void Bonus(){
     9b2:	87 01       	movw	r16, r14
     9b4:	c0 e0       	ldi	r28, 0x00	; 0
     9b6:	c5 cf       	rjmp	.-118    	; 0x942 <__stack+0x43>
	TCNT4 = 0;
	TCCR4B = (0b101 << CS40);	// enable timer 0 (game timer)
	
	setScore(0, GameMode == 0 ? HighScore1P : HighScore2P);
	
	while(TimeRemaining > 0){
     9b8:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <TimeRemaining>
     9bc:	81 11       	cpse	r24, r1
     9be:	a0 cf       	rjmp	.-192    	; 0x900 <__stack+0x1>

				}
			}
		}
	}
	TCCR4B = (0b000 << CS40);
     9c0:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
	
	setScore(1, 0); // TODO MAKE DASHES
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	70 e0       	ldi	r23, 0x00	; 0
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>

}
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__stack+0xd9>
	// game is over, stop timer
	TCCR4B = (0b000 << CS40);
	
}

void Bonus(){
     9d0:	e1 2c       	mov	r14, r1
     9d2:	f1 2c       	mov	r15, r1
     9d4:	d0 e0       	ldi	r29, 0x00	; 0
     9d6:	ed cf       	rjmp	.-38     	; 0x9b2 <__stack+0xb3>
	}
	TCCR4B = (0b000 << CS40);
	
	setScore(1, 0); // TODO MAKE DASHES

}
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	1f 91       	pop	r17
     9de:	0f 91       	pop	r16
     9e0:	ff 90       	pop	r15
     9e2:	ef 90       	pop	r14
     9e4:	df 90       	pop	r13
     9e6:	cf 90       	pop	r12
     9e8:	08 95       	ret

000009ea <playChirp>:
		_delay_ms(1000);
	}
}

void playChirp(uint8_t tone){
	beep_index = tone;
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	90 93 a2 02 	sts	0x02A2, r25	; 0x8002a2 <beep_index+0x1>
     9f0:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <beep_index>
	note_index = 0;
     9f4:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <note_index+0x1>
     9f8:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <note_index>
	TCCR0B = (0b101 << CS00);	//turn on clock for speaker
     9fc:	85 e0       	ldi	r24, 0x05	; 5
     9fe:	85 bd       	out	0x25, r24	; 37
     a00:	08 95       	ret

00000a02 <Display321>:
							 2, 3, 2, 2, 2, 3, 2, 1, 0, 0, 0};
const uint8_t onledsY[33] = {1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5,
							 1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5,
							 1, 2, 2, 3, 4, 5, 5, 5, 0, 0, 0};

void Display321(){	//TODO ADD TONES FOR EACH DIGIT
     a02:	7f 92       	push	r7
     a04:	8f 92       	push	r8
     a06:	9f 92       	push	r9
     a08:	af 92       	push	r10
     a0a:	bf 92       	push	r11
     a0c:	cf 92       	push	r12
     a0e:	df 92       	push	r13
     a10:	ef 92       	push	r14
     a12:	ff 92       	push	r15
     a14:	0f 93       	push	r16
     a16:	1f 93       	push	r17
     a18:	cf 93       	push	r28
     a1a:	df 93       	push	r29
	
	clearLeds(0);
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <clearLeds>
	
	if(GameMode){	//light up 2p button
     a22:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <GameMode>
     a26:	88 23       	and	r24, r24
     a28:	a1 f0       	breq	.+40     	; 0xa52 <Display321+0x50>
     a2a:	c0 e0       	ldi	r28, 0x00	; 0
		for(uint8_t i = 0; i < 8; i++){
			setButtonLed(Player2ButtonX, Player2ButtonY, i%2);
     a2c:	4c 2f       	mov	r20, r28
     a2e:	41 70       	andi	r20, 0x01	; 1
     a30:	60 e0       	ldi	r22, 0x00	; 0
     a32:	82 e0       	ldi	r24, 0x02	; 2
     a34:	0e 94 b2 00 	call	0x164	; 0x164 <setButtonLed>
     a38:	2f ef       	ldi	r18, 0xFF	; 255
     a3a:	81 ee       	ldi	r24, 0xE1	; 225
     a3c:	94 e0       	ldi	r25, 0x04	; 4
     a3e:	21 50       	subi	r18, 0x01	; 1
     a40:	80 40       	sbci	r24, 0x00	; 0
     a42:	90 40       	sbci	r25, 0x00	; 0
     a44:	e1 f7       	brne	.-8      	; 0xa3e <Display321+0x3c>
     a46:	00 c0       	rjmp	.+0      	; 0xa48 <Display321+0x46>
     a48:	00 00       	nop
void Display321(){	//TODO ADD TONES FOR EACH DIGIT
	
	clearLeds(0);
	
	if(GameMode){	//light up 2p button
		for(uint8_t i = 0; i < 8; i++){
     a4a:	cf 5f       	subi	r28, 0xFF	; 255
     a4c:	c8 30       	cpi	r28, 0x08	; 8
     a4e:	71 f7       	brne	.-36     	; 0xa2c <Display321+0x2a>
     a50:	13 c0       	rjmp	.+38     	; 0xa78 <Display321+0x76>
     a52:	c0 e0       	ldi	r28, 0x00	; 0
			setButtonLed(Player2ButtonX, Player2ButtonY, i%2);
			_delay_ms(100);
		}
	}else{
		for(uint8_t i = 0; i < 8; i++){
			setButtonLed(Player1ButtonX, Player1ButtonY, i%2);
     a54:	4c 2f       	mov	r20, r28
     a56:	41 70       	andi	r20, 0x01	; 1
     a58:	60 e0       	ldi	r22, 0x00	; 0
     a5a:	83 e0       	ldi	r24, 0x03	; 3
     a5c:	0e 94 b2 00 	call	0x164	; 0x164 <setButtonLed>
     a60:	ef ef       	ldi	r30, 0xFF	; 255
     a62:	f1 ee       	ldi	r31, 0xE1	; 225
     a64:	24 e0       	ldi	r18, 0x04	; 4
     a66:	e1 50       	subi	r30, 0x01	; 1
     a68:	f0 40       	sbci	r31, 0x00	; 0
     a6a:	20 40       	sbci	r18, 0x00	; 0
     a6c:	e1 f7       	brne	.-8      	; 0xa66 <Display321+0x64>
     a6e:	00 c0       	rjmp	.+0      	; 0xa70 <Display321+0x6e>
     a70:	00 00       	nop
		for(uint8_t i = 0; i < 8; i++){
			setButtonLed(Player2ButtonX, Player2ButtonY, i%2);
			_delay_ms(100);
		}
	}else{
		for(uint8_t i = 0; i < 8; i++){
     a72:	cf 5f       	subi	r28, 0xFF	; 255
     a74:	c8 30       	cpi	r28, 0x08	; 8
     a76:	71 f7       	brne	.-36     	; 0xa54 <Display321+0x52>
			setButtonLed(Player1ButtonX, Player1ButtonY, i%2);
			_delay_ms(100);
		}
	}

	playChirp(4);
     a78:	84 e0       	ldi	r24, 0x04	; 4
     a7a:	0e 94 f5 04 	call	0x9ea	; 0x9ea <playChirp>
     a7e:	8f ef       	ldi	r24, 0xFF	; 255
     a80:	9c eb       	ldi	r25, 0xBC	; 188
     a82:	ef e1       	ldi	r30, 0x1F	; 31
     a84:	81 50       	subi	r24, 0x01	; 1
     a86:	90 40       	sbci	r25, 0x00	; 0
     a88:	e0 40       	sbci	r30, 0x00	; 0
     a8a:	e1 f7       	brne	.-8      	; 0xa84 <Display321+0x82>
     a8c:	00 c0       	rjmp	.+0      	; 0xa8e <Display321+0x8c>
     a8e:	00 00       	nop
     a90:	00 e0       	ldi	r16, 0x00	; 0
     a92:	10 e0       	ldi	r17, 0x00	; 0
     a94:	71 2c       	mov	r7, r1
     a96:	0f 2e       	mov	r0, r31
     a98:	f3 e0       	ldi	r31, 0x03	; 3
     a9a:	cf 2e       	mov	r12, r31
     a9c:	d1 2c       	mov	r13, r1
     a9e:	f0 2d       	mov	r31, r0
	_delay_ms(650);
	for(uint8_t count = 3; count >= 1; count--){
		printf("%d\n", count);
     aa0:	0f 2e       	mov	r0, r31
     aa2:	f5 e4       	ldi	r31, 0x45	; 69
     aa4:	af 2e       	mov	r10, r31
     aa6:	f1 e0       	ldi	r31, 0x01	; 1
     aa8:	bf 2e       	mov	r11, r31
     aaa:	f0 2d       	mov	r31, r0
     aac:	df 92       	push	r13
     aae:	cf 92       	push	r12
     ab0:	bf 92       	push	r11
     ab2:	af 92       	push	r10
     ab4:	0e 94 af 09 	call	0x135e	; 0x135e <printf>
		clearLeds(0);
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <clearLeds>
     abe:	c8 01       	movw	r24, r16
     ac0:	8f 5b       	subi	r24, 0xBF	; 191
     ac2:	9d 4f       	sbci	r25, 0xFD	; 253
     ac4:	4c 01       	movw	r8, r24
     ac6:	e8 01       	movw	r28, r16
     ac8:	ce 59       	subi	r28, 0x9E	; 158
     aca:	dd 4f       	sbci	r29, 0xFD	; 253
     acc:	78 01       	movw	r14, r16
     ace:	9b e0       	ldi	r25, 0x0B	; 11
     ad0:	e9 0e       	add	r14, r25
     ad2:	f1 1c       	adc	r15, r1
     ad4:	87 01       	movw	r16, r14
     ad6:	0f 5b       	subi	r16, 0xBF	; 191
     ad8:	1d 4f       	sbci	r17, 0xFD	; 253
     ada:	0f 90       	pop	r0
     adc:	0f 90       	pop	r0
     ade:	0f 90       	pop	r0
     ae0:	0f 90       	pop	r0
		
		for(uint8_t index = 0; index < 11; index++){
			setButtonLed(onledsX[index + ((3-count)*11)], onledsY[index + ((3-count)*11)], 1);
     ae2:	f4 01       	movw	r30, r8
     ae4:	61 91       	ld	r22, Z+
     ae6:	4f 01       	movw	r8, r30
     ae8:	41 e0       	ldi	r20, 0x01	; 1
     aea:	89 91       	ld	r24, Y+
     aec:	0e 94 b2 00 	call	0x164	; 0x164 <setButtonLed>
	_delay_ms(650);
	for(uint8_t count = 3; count >= 1; count--){
		printf("%d\n", count);
		clearLeds(0);
		
		for(uint8_t index = 0; index < 11; index++){
     af0:	80 16       	cp	r8, r16
     af2:	91 06       	cpc	r9, r17
     af4:	b1 f7       	brne	.-20     	; 0xae2 <Display321+0xe0>
			setButtonLed(onledsX[index + ((3-count)*11)], onledsY[index + ((3-count)*11)], 1);
		}
		playChirp(3-count);
     af6:	87 2d       	mov	r24, r7
     af8:	0e 94 f5 04 	call	0x9ea	; 0x9ea <playChirp>
     afc:	ff ef       	ldi	r31, 0xFF	; 255
     afe:	23 ed       	ldi	r18, 0xD3	; 211
     b00:	80 e3       	ldi	r24, 0x30	; 48
     b02:	f1 50       	subi	r31, 0x01	; 1
     b04:	20 40       	sbci	r18, 0x00	; 0
     b06:	80 40       	sbci	r24, 0x00	; 0
     b08:	e1 f7       	brne	.-8      	; 0xb02 <Display321+0x100>
     b0a:	00 c0       	rjmp	.+0      	; 0xb0c <Display321+0x10a>
     b0c:	00 00       	nop
     b0e:	91 e0       	ldi	r25, 0x01	; 1
     b10:	c9 1a       	sub	r12, r25
     b12:	d1 08       	sbc	r13, r1
     b14:	73 94       	inc	r7
     b16:	87 01       	movw	r16, r14
		}
	}

	playChirp(4);
	_delay_ms(650);
	for(uint8_t count = 3; count >= 1; count--){
     b18:	c1 14       	cp	r12, r1
     b1a:	d1 04       	cpc	r13, r1
     b1c:	39 f6       	brne	.-114    	; 0xaac <Display321+0xaa>
			setButtonLed(onledsX[index + ((3-count)*11)], onledsY[index + ((3-count)*11)], 1);
		}
		playChirp(3-count);
		_delay_ms(1000);
	}
}
     b1e:	df 91       	pop	r29
     b20:	cf 91       	pop	r28
     b22:	1f 91       	pop	r17
     b24:	0f 91       	pop	r16
     b26:	ff 90       	pop	r15
     b28:	ef 90       	pop	r14
     b2a:	df 90       	pop	r13
     b2c:	cf 90       	pop	r12
     b2e:	bf 90       	pop	r11
     b30:	af 90       	pop	r10
     b32:	9f 90       	pop	r9
     b34:	8f 90       	pop	r8
     b36:	7f 90       	pop	r7
     b38:	08 95       	ret

00000b3a <Game>:
	if(TimeRemaining > 0){
		TimeRemaining--;
	}
}

void Game(){
     b3a:	3f 92       	push	r3
     b3c:	4f 92       	push	r4
     b3e:	6f 92       	push	r6
     b40:	7f 92       	push	r7
     b42:	8f 92       	push	r8
     b44:	9f 92       	push	r9
     b46:	af 92       	push	r10
     b48:	bf 92       	push	r11
     b4a:	cf 92       	push	r12
     b4c:	df 92       	push	r13
     b4e:	ef 92       	push	r14
     b50:	ff 92       	push	r15
     b52:	0f 93       	push	r16
     b54:	1f 93       	push	r17
     b56:	cf 93       	push	r28
     b58:	df 93       	push	r29

	// game mode is set when leaving attract mode
	Display321();
     b5a:	0e 94 01 05 	call	0xa02	; 0xa02 <Display321>
	printf("GAME START\n");
     b5e:	89 e4       	ldi	r24, 0x49	; 73
     b60:	91 e0       	ldi	r25, 0x01	; 1
     b62:	0e 94 c5 09 	call	0x138a	; 0x138a <puts>
	
	P1Score = 0;			// reset scores and multipliers
     b66:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <P1Score+0x1>
     b6a:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <P1Score>
	P2Score = 0;
     b6e:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <P2Score+0x1>
     b72:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <P2Score>
	P1Multiplier = 1;
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <P1Multiplier>
	P2Multiplier = 1;
     b7c:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <P2Multiplier>
     b80:	0f 2e       	mov	r0, r31
     b82:	f2 ec       	ldi	r31, 0xC2	; 194
     b84:	ef 2e       	mov	r14, r31
     b86:	f2 e0       	ldi	r31, 0x02	; 2
     b88:	ff 2e       	mov	r15, r31
     b8a:	f0 2d       	mov	r31, r0
     b8c:	0e ea       	ldi	r16, 0xAE	; 174
     b8e:	12 e0       	ldi	r17, 0x02	; 2
     b90:	cf eb       	ldi	r28, 0xBF	; 191
     b92:	d2 e0       	ldi	r29, 0x02	; 2

	// pick 6 random leds to enable regardless of mode
	// (3 left side 3 right side)
	for(int i = 0; i < 3; i++){
		gameledsX[i] = rand() % 3;			// turn 3 on right side
     b94:	0f 2e       	mov	r0, r31
     b96:	f3 e0       	ldi	r31, 0x03	; 3
     b98:	cf 2e       	mov	r12, r31
     b9a:	d1 2c       	mov	r13, r1
     b9c:	f0 2d       	mov	r31, r0
		gameledsY[i] = rand() % 5;
     b9e:	0f 2e       	mov	r0, r31
     ba0:	f5 e0       	ldi	r31, 0x05	; 5
     ba2:	af 2e       	mov	r10, r31
     ba4:	b1 2c       	mov	r11, r1
     ba6:	f0 2d       	mov	r31, r0
	P2Multiplier = 1;

	// pick 6 random leds to enable regardless of mode
	// (3 left side 3 right side)
	for(int i = 0; i < 3; i++){
		gameledsX[i] = rand() % 3;			// turn 3 on right side
     ba8:	0e 94 9f 09 	call	0x133e	; 0x133e <rand>
     bac:	b6 01       	movw	r22, r12
     bae:	0e 94 2b 09 	call	0x1256	; 0x1256 <__divmodhi4>
     bb2:	89 93       	st	Y+, r24
		gameledsY[i] = rand() % 5;
     bb4:	0e 94 9f 09 	call	0x133e	; 0x133e <rand>
     bb8:	b5 01       	movw	r22, r10
     bba:	0e 94 2b 09 	call	0x1256	; 0x1256 <__divmodhi4>
     bbe:	f8 01       	movw	r30, r16
     bc0:	81 93       	st	Z+, r24
     bc2:	8f 01       	movw	r16, r30
		
		gameledsX[i+3] = 3 + rand() % 3;	// turn 3 on left side
     bc4:	0e 94 9f 09 	call	0x133e	; 0x133e <rand>
     bc8:	b6 01       	movw	r22, r12
     bca:	0e 94 2b 09 	call	0x1256	; 0x1256 <__divmodhi4>
     bce:	8d 5f       	subi	r24, 0xFD	; 253
     bd0:	8a 83       	std	Y+2, r24	; 0x02
		gameledsY[i+3] = rand() % 5;
     bd2:	0e 94 9f 09 	call	0x133e	; 0x133e <rand>
     bd6:	b5 01       	movw	r22, r10
     bd8:	0e 94 2b 09 	call	0x1256	; 0x1256 <__divmodhi4>
     bdc:	f8 01       	movw	r30, r16
     bde:	82 83       	std	Z+2, r24	; 0x02
	P1Multiplier = 1;
	P2Multiplier = 1;

	// pick 6 random leds to enable regardless of mode
	// (3 left side 3 right side)
	for(int i = 0; i < 3; i++){
     be0:	ce 15       	cp	r28, r14
     be2:	df 05       	cpc	r29, r15
     be4:	09 f7       	brne	.-62     	; 0xba8 <Game+0x6e>
		gameledsX[i+3] = 3 + rand() % 3;	// turn 3 on left side
		gameledsY[i+3] = rand() % 5;
	}


	TimeRemaining = RoundTime;
     be6:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <RoundTime>
     bea:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <TimeRemaining>
	TCNT4 = 0;					// reset timer
     bee:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7e00a5>
     bf2:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7e00a4>
	TCCR4B = (0b101 << CS40);	// enable timer 0 (game timer)
     bf6:	85 e0       	ldi	r24, 0x05	; 5
     bf8:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
	
	setScore(0, HighScore1P);	// will be replaced if 2p mode
     bfc:	60 91 b8 02 	lds	r22, 0x02B8	; 0x8002b8 <HighScore1P>
     c00:	70 91 b9 02 	lds	r23, 0x02B9	; 0x8002b9 <HighScore1P+0x1>
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>

				do{		// move led to random DIFFERENT spot
					if(i >= 3){
						gameledsX[i+3] = 3 + rand() % 3;
						}else{
						gameledsX[i] = rand() % 3;
     c0a:	0f 2e       	mov	r0, r31
     c0c:	f3 e0       	ldi	r31, 0x03	; 3
     c0e:	ef 2e       	mov	r14, r31
     c10:	f1 2c       	mov	r15, r1
     c12:	f0 2d       	mov	r31, r0
					}
					gameledsY[i] = rand() % 5;
     c14:	0f 2e       	mov	r0, r31
     c16:	f5 e0       	ldi	r31, 0x05	; 5
     c18:	8f 2e       	mov	r8, r31
     c1a:	91 2c       	mov	r9, r1
     c1c:	f0 2d       	mov	r31, r0
	TCNT4 = 0;					// reset timer
	TCCR4B = (0b101 << CS40);	// enable timer 0 (game timer)
	
	setScore(0, HighScore1P);	// will be replaced if 2p mode
	
	while(TimeRemaining > 0){
     c1e:	ac c0       	rjmp	.+344    	; 0xd78 <Game+0x23e>

		printf("%Ds REMAINING\n");
     c20:	84 e5       	ldi	r24, 0x54	; 84
     c22:	91 e0       	ldi	r25, 0x01	; 1
     c24:	9f 93       	push	r25
     c26:	8f 93       	push	r24
     c28:	0e 94 af 09 	call	0x135e	; 0x135e <printf>
		
		setScore(1, TimeRemaining);
     c2c:	60 91 b7 02 	lds	r22, 0x02B7	; 0x8002b7 <TimeRemaining>
     c30:	70 e0       	ldi	r23, 0x00	; 0
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
		if(GameMode == 1){
     c38:	0f 90       	pop	r0
     c3a:	0f 90       	pop	r0
     c3c:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <GameMode>
     c40:	81 30       	cpi	r24, 0x01	; 1
     c42:	79 f4       	brne	.+30     	; 0xc62 <Game+0x128>
			setScore(0, P1Score);	// if 2p mode, show left p1 and right p2 scores
     c44:	60 91 ba 02 	lds	r22, 0x02BA	; 0x8002ba <P1Score>
     c48:	70 91 bb 02 	lds	r23, 0x02BB	; 0x8002bb <P1Score+0x1>
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
			setScore(2, P2Score);
     c52:	60 91 bc 02 	lds	r22, 0x02BC	; 0x8002bc <P2Score>
     c56:	70 91 bd 02 	lds	r23, 0x02BD	; 0x8002bd <P2Score+0x1>
     c5a:	82 e0       	ldi	r24, 0x02	; 2
     c5c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
     c60:	92 c0       	rjmp	.+292    	; 0xd86 <Game+0x24c>
			}else{
			setScore(2, P1Score);	// otherwise show p1 score and high score
     c62:	60 91 ba 02 	lds	r22, 0x02BA	; 0x8002ba <P1Score>
     c66:	70 91 bb 02 	lds	r23, 0x02BB	; 0x8002bb <P1Score+0x1>
     c6a:	82 e0       	ldi	r24, 0x02	; 2
     c6c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
     c70:	8a c0       	rjmp	.+276    	; 0xd86 <Game+0x24c>
     c72:	36 01       	movw	r6, r12
     c74:	e5 01       	movw	r28, r10
		}

		for(uint8_t i = 0; i < 6; i++){
			if (isButtonDown(gameledsX[i], gameledsY[i]) ){
     c76:	f6 01       	movw	r30, r12
     c78:	60 81       	ld	r22, Z
     c7a:	88 81       	ld	r24, Y
     c7c:	0e 94 a4 00 	call	0x148	; 0x148 <isButtonDown>
     c80:	88 23       	and	r24, r24
     c82:	09 f4       	brne	.+2      	; 0xc86 <Game+0x14c>
     c84:	63 c0       	rjmp	.+198    	; 0xd4c <Game+0x212>

				uint8_t oldX = gameledsX[i];
     c86:	48 80       	ld	r4, Y
				uint8_t oldY = gameledsY[i];
     c88:	f6 01       	movw	r30, r12
     c8a:	30 80       	ld	r3, Z

				do{		// move led to random DIFFERENT spot
					if(i >= 3){
     c8c:	13 30       	cpi	r17, 0x03	; 3
     c8e:	40 f0       	brcs	.+16     	; 0xca0 <Game+0x166>
						gameledsX[i+3] = 3 + rand() % 3;
     c90:	0e 94 9f 09 	call	0x133e	; 0x133e <rand>
     c94:	b7 01       	movw	r22, r14
     c96:	0e 94 2b 09 	call	0x1256	; 0x1256 <__divmodhi4>
     c9a:	8d 5f       	subi	r24, 0xFD	; 253
     c9c:	8b 83       	std	Y+3, r24	; 0x03
     c9e:	06 c0       	rjmp	.+12     	; 0xcac <Game+0x172>
						}else{
						gameledsX[i] = rand() % 3;
     ca0:	0e 94 9f 09 	call	0x133e	; 0x133e <rand>
     ca4:	b7 01       	movw	r22, r14
     ca6:	0e 94 2b 09 	call	0x1256	; 0x1256 <__divmodhi4>
     caa:	88 83       	st	Y, r24
					}
					gameledsY[i] = rand() % 5;
     cac:	0e 94 9f 09 	call	0x133e	; 0x133e <rand>
     cb0:	b4 01       	movw	r22, r8
     cb2:	0e 94 2b 09 	call	0x1256	; 0x1256 <__divmodhi4>
     cb6:	98 2f       	mov	r25, r24
     cb8:	f3 01       	movw	r30, r6
     cba:	80 83       	st	Z, r24

				}while((gameledsX[i] == oldX) && (gameledsY[i] == oldY));
     cbc:	88 81       	ld	r24, Y
     cbe:	48 12       	cpse	r4, r24
     cc0:	02 c0       	rjmp	.+4      	; 0xcc6 <Game+0x18c>
     cc2:	39 16       	cp	r3, r25
     cc4:	19 f3       	breq	.-58     	; 0xc8c <Game+0x152>


				if(GameMode == 0){
     cc6:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <GameMode>
     cca:	81 11       	cpse	r24, r1
     ccc:	14 c0       	rjmp	.+40     	; 0xcf6 <Game+0x1bc>
					IncrementScore(0, P1Multiplier);	// add score and inc multiplier (singleplayer)
     cce:	60 91 aa 02 	lds	r22, 0x02AA	; 0x8002aa <P1Multiplier>
     cd2:	70 e0       	ldi	r23, 0x00	; 0
     cd4:	0e 94 0f 04 	call	0x81e	; 0x81e <IncrementScore>
					playChirp(P1Multiplier);
     cd8:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <P1Multiplier>
     cdc:	0e 94 f5 04 	call	0x9ea	; 0x9ea <playChirp>
					P1Multiplier = (P1Multiplier == MultiplierMax) ? MultiplierMax : (P1Multiplier + 1);
     ce0:	90 91 aa 02 	lds	r25, 0x02AA	; 0x8002aa <P1Multiplier>
     ce4:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <MultiplierMax>
     ce8:	98 17       	cp	r25, r24
     cea:	11 f0       	breq	.+4      	; 0xcf0 <Game+0x1b6>
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	89 0f       	add	r24, r25
     cf0:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <P1Multiplier>
     cf4:	2b c0       	rjmp	.+86     	; 0xd4c <Game+0x212>
					}else{
					if(i >= 3){
     cf6:	13 30       	cpi	r17, 0x03	; 3
     cf8:	a8 f0       	brcs	.+42     	; 0xd24 <Game+0x1ea>
						IncrementScore(1, P2Multiplier);	// add depending on side of button pressed
     cfa:	60 91 a9 02 	lds	r22, 0x02A9	; 0x8002a9 <P2Multiplier>
     cfe:	70 e0       	ldi	r23, 0x00	; 0
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	0e 94 0f 04 	call	0x81e	; 0x81e <IncrementScore>
						playChirp(P2Multiplier);
     d06:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <P2Multiplier>
     d0a:	0e 94 f5 04 	call	0x9ea	; 0x9ea <playChirp>
						P2Multiplier = (P2Multiplier == MultiplierMax) ? MultiplierMax : (P2Multiplier + 1);
     d0e:	90 91 a9 02 	lds	r25, 0x02A9	; 0x8002a9 <P2Multiplier>
     d12:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <MultiplierMax>
     d16:	98 17       	cp	r25, r24
     d18:	11 f0       	breq	.+4      	; 0xd1e <Game+0x1e4>
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	89 0f       	add	r24, r25
     d1e:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <P2Multiplier>
     d22:	14 c0       	rjmp	.+40     	; 0xd4c <Game+0x212>
						}else{
						IncrementScore(0, P1Multiplier);
     d24:	60 91 aa 02 	lds	r22, 0x02AA	; 0x8002aa <P1Multiplier>
     d28:	70 e0       	ldi	r23, 0x00	; 0
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	0e 94 0f 04 	call	0x81e	; 0x81e <IncrementScore>
						playChirp(P1Multiplier);
     d30:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <P1Multiplier>
     d34:	0e 94 f5 04 	call	0x9ea	; 0x9ea <playChirp>
						P1Multiplier = (P1Multiplier == MultiplierMax) ? MultiplierMax : (P1Multiplier + 1);
     d38:	90 91 aa 02 	lds	r25, 0x02AA	; 0x8002aa <P1Multiplier>
     d3c:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <MultiplierMax>
     d40:	98 17       	cp	r25, r24
     d42:	11 f0       	breq	.+4      	; 0xd48 <Game+0x20e>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	89 0f       	add	r24, r25
     d48:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <P1Multiplier>
			setScore(2, P2Score);
			}else{
			setScore(2, P1Score);	// otherwise show p1 score and high score
		}

		for(uint8_t i = 0; i < 6; i++){
     d4c:	1f 5f       	subi	r17, 0xFF	; 255
     d4e:	ff ef       	ldi	r31, 0xFF	; 255
     d50:	cf 1a       	sub	r12, r31
     d52:	df 0a       	sbc	r13, r31
     d54:	2f ef       	ldi	r18, 0xFF	; 255
     d56:	a2 1a       	sub	r10, r18
     d58:	b2 0a       	sbc	r11, r18
     d5a:	16 30       	cpi	r17, 0x06	; 6
     d5c:	09 f0       	breq	.+2      	; 0xd60 <Game+0x226>
     d5e:	89 cf       	rjmp	.-238    	; 0xc72 <Game+0x138>

			}
		}
		
		
		if (P1Multiplier > 1){
     d60:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <P1Multiplier>
     d64:	82 30       	cpi	r24, 0x02	; 2
     d66:	10 f0       	brcs	.+4      	; 0xd6c <Game+0x232>
			if ( (P1MultTimeS + MultiplierDecaySeconds) <= TimeRemaining){
     d68:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <TimeRemaining>
				if(P1MultTimeT < MultiplierDecayTicks){	// TODO INCORPORATE TICK OFFSET
					P1Multiplier--;
				}
			}
		}
		if (P2Multiplier > 1){
     d6c:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <P2Multiplier>
     d70:	82 30       	cpi	r24, 0x02	; 2
     d72:	10 f0       	brcs	.+4      	; 0xd78 <Game+0x23e>
			if ( (P2MultTimeS + MultiplierDecaySeconds) <= TimeRemaining){
     d74:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <TimeRemaining>
	TCNT4 = 0;					// reset timer
	TCCR4B = (0b101 << CS40);	// enable timer 0 (game timer)
	
	setScore(0, HighScore1P);	// will be replaced if 2p mode
	
	while(TimeRemaining > 0){
     d78:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <TimeRemaining>
     d7c:	81 11       	cpse	r24, r1
     d7e:	50 cf       	rjmp	.-352    	; 0xc20 <Game+0xe6>
		//_delay_ms(50);	// TODO maybe change this later

	}
	
	// game is over, stop timer
	TCCR4B = (0b000 << CS40);
     d80:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
	
}
     d84:	0e c0       	rjmp	.+28     	; 0xda2 <Game+0x268>
	printf("GAME START\n");
	
	P1Score = 0;			// reset scores and multipliers
	P2Score = 0;
	P1Multiplier = 1;
	P2Multiplier = 1;
     d86:	0f 2e       	mov	r0, r31
     d88:	ff eb       	ldi	r31, 0xBF	; 191
     d8a:	af 2e       	mov	r10, r31
     d8c:	f2 e0       	ldi	r31, 0x02	; 2
     d8e:	bf 2e       	mov	r11, r31
     d90:	f0 2d       	mov	r31, r0
     d92:	0f 2e       	mov	r0, r31
     d94:	fe ea       	ldi	r31, 0xAE	; 174
     d96:	cf 2e       	mov	r12, r31
     d98:	f2 e0       	ldi	r31, 0x02	; 2
     d9a:	df 2e       	mov	r13, r31
     d9c:	f0 2d       	mov	r31, r0
     d9e:	10 e0       	ldi	r17, 0x00	; 0
     da0:	68 cf       	rjmp	.-304    	; 0xc72 <Game+0x138>
	}
	
	// game is over, stop timer
	TCCR4B = (0b000 << CS40);
	
}
     da2:	df 91       	pop	r29
     da4:	cf 91       	pop	r28
     da6:	1f 91       	pop	r17
     da8:	0f 91       	pop	r16
     daa:	ff 90       	pop	r15
     dac:	ef 90       	pop	r14
     dae:	df 90       	pop	r13
     db0:	cf 90       	pop	r12
     db2:	bf 90       	pop	r11
     db4:	af 90       	pop	r10
     db6:	9f 90       	pop	r9
     db8:	8f 90       	pop	r8
     dba:	7f 90       	pop	r7
     dbc:	6f 90       	pop	r6
     dbe:	4f 90       	pop	r4
     dc0:	3f 90       	pop	r3
     dc2:	08 95       	ret

00000dc4 <AttractCheckGameStart>:
	beep_index = tone;
	note_index = 0;
	TCCR0B = (0b101 << CS00);	//turn on clock for speaker
}

uint8_t AttractCheckGameStart(uint16_t count){
     dc4:	0f 93       	push	r16
     dc6:	1f 93       	push	r17
     dc8:	cf 93       	push	r28
     dca:	df 93       	push	r29
	// pauses some time while checking player button inputs, skip and start game if pressed
	for(uint16_t delayCount = 0; delayCount < count; delayCount++){
     dcc:	00 97       	sbiw	r24, 0x00	; 0
     dce:	51 f1       	breq	.+84     	; 0xe24 <AttractCheckGameStart+0x60>
     dd0:	8c 01       	movw	r16, r24
     dd2:	c0 e0       	ldi	r28, 0x00	; 0
     dd4:	d0 e0       	ldi	r29, 0x00	; 0
		//delay some ms between each button light and check for game start
		if(isButtonDown(Player1ButtonX, Player1ButtonY) || isButtonDown(Player2ButtonX, Player2ButtonY)){
     dd6:	60 e0       	ldi	r22, 0x00	; 0
     dd8:	83 e0       	ldi	r24, 0x03	; 3
     dda:	0e 94 a4 00 	call	0x148	; 0x148 <isButtonDown>
     dde:	81 11       	cpse	r24, r1
     de0:	06 c0       	rjmp	.+12     	; 0xdee <AttractCheckGameStart+0x2a>
     de2:	60 e0       	ldi	r22, 0x00	; 0
     de4:	82 e0       	ldi	r24, 0x02	; 2
     de6:	0e 94 a4 00 	call	0x148	; 0x148 <isButtonDown>
     dea:	88 23       	and	r24, r24
     dec:	b1 f0       	breq	.+44     	; 0xe1a <AttractCheckGameStart+0x56>
			GameMode = isButtonDown(Player2ButtonX, Player2ButtonY);
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	82 e0       	ldi	r24, 0x02	; 2
     df2:	0e 94 a4 00 	call	0x148	; 0x148 <isButtonDown>
     df6:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <GameMode>
			printf("STARTING %dP mode\n", GameMode+1);
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	01 96       	adiw	r24, 0x01	; 1
     dfe:	9f 93       	push	r25
     e00:	8f 93       	push	r24
     e02:	83 e6       	ldi	r24, 0x63	; 99
     e04:	91 e0       	ldi	r25, 0x01	; 1
     e06:	9f 93       	push	r25
     e08:	8f 93       	push	r24
     e0a:	0e 94 af 09 	call	0x135e	; 0x135e <printf>
			return 1;	// instantly return and quit waiting
     e0e:	0f 90       	pop	r0
     e10:	0f 90       	pop	r0
     e12:	0f 90       	pop	r0
     e14:	0f 90       	pop	r0
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	06 c0       	rjmp	.+12     	; 0xe26 <AttractCheckGameStart+0x62>
	TCCR0B = (0b101 << CS00);	//turn on clock for speaker
}

uint8_t AttractCheckGameStart(uint16_t count){
	// pauses some time while checking player button inputs, skip and start game if pressed
	for(uint16_t delayCount = 0; delayCount < count; delayCount++){
     e1a:	21 96       	adiw	r28, 0x01	; 1
     e1c:	0c 17       	cp	r16, r28
     e1e:	1d 07       	cpc	r17, r29
     e20:	d1 f6       	brne	.-76     	; 0xdd6 <AttractCheckGameStart+0x12>
     e22:	01 c0       	rjmp	.+2      	; 0xe26 <AttractCheckGameStart+0x62>
			GameMode = isButtonDown(Player2ButtonX, Player2ButtonY);
			printf("STARTING %dP mode\n", GameMode+1);
			return 1;	// instantly return and quit waiting
		}
	}
	return 0;	// return that it finished without button presses
     e24:	80 e0       	ldi	r24, 0x00	; 0
}
     e26:	df 91       	pop	r29
     e28:	cf 91       	pop	r28
     e2a:	1f 91       	pop	r17
     e2c:	0f 91       	pop	r16
     e2e:	08 95       	ret

00000e30 <Attractive>:
	
	setScore(1, 0); // TODO MAKE DASHES

}

void Attractive(){
     e30:	cf 92       	push	r12
     e32:	df 92       	push	r13
     e34:	ff 92       	push	r15
     e36:	0f 93       	push	r16
     e38:	1f 93       	push	r17
     e3a:	cf 93       	push	r28
     e3c:	df 93       	push	r29
	setScore(0, HighScore1P);
     e3e:	60 91 b8 02 	lds	r22, 0x02B8	; 0x8002b8 <HighScore1P>
     e42:	70 91 b9 02 	lds	r23, 0x02B9	; 0x8002b9 <HighScore1P+0x1>
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
	setScore(1, 0);			// TODO MAKE DASHES AND FLASH "1P" on left and "2P" on right
     e4c:	60 e0       	ldi	r22, 0x00	; 0
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
	setScore(0, HighScore2P);
     e56:	60 91 c8 02 	lds	r22, 0x02C8	; 0x8002c8 <HighScore2P>
     e5a:	70 91 c9 02 	lds	r23, 0x02C9	; 0x8002c9 <HighScore2P+0x1>
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setScore>
	while(1){
		uint8_t blinkyMode = rand() % AttractPatternCount;	// todo make random, ADD DISPLAY BLANKING
     e64:	0e 94 9f 09 	call	0x133e	; 0x133e <rand>
		switch(blinkyMode){	// multiple blinky modes (todo randomly pick one)
			case 0:
				while(1){
					for(uint8_t y = 1; y < 6; y++){
						for(uint8_t x = 0; x < 6; x++){
							setButtonLed( (y%2)==0 ? x : (5-x) ,y,1);
     e68:	0f 2e       	mov	r0, r31
     e6a:	f5 e0       	ldi	r31, 0x05	; 5
     e6c:	ff 2e       	mov	r15, r31
     e6e:	f0 2d       	mov	r31, r0
     e70:	68 94       	set
     e72:	cc 24       	eor	r12, r12
     e74:	c1 f8       	bld	r12, 1
     e76:	d1 2c       	mov	r13, r1
	while(1){
		uint8_t blinkyMode = rand() % AttractPatternCount;	// todo make random, ADD DISPLAY BLANKING
		switch(blinkyMode){	// multiple blinky modes (todo randomly pick one)
			case 0:
				while(1){
					for(uint8_t y = 1; y < 6; y++){
     e78:	11 e0       	ldi	r17, 0x01	; 1
     e7a:	2e c0       	rjmp	.+92     	; 0xed8 <Attractive+0xa8>
						for(uint8_t x = 0; x < 6; x++){
							setButtonLed( (y%2)==0 ? x : (5-x) ,y,1);
     e7c:	0d 2f       	mov	r16, r29
     e7e:	dd 23       	and	r29, r29
     e80:	19 f0       	breq	.+6      	; 0xe88 <Attractive+0x58>
     e82:	8f 2d       	mov	r24, r15
     e84:	8c 1b       	sub	r24, r28
     e86:	01 c0       	rjmp	.+2      	; 0xe8a <Attractive+0x5a>
     e88:	8c 2f       	mov	r24, r28
     e8a:	41 e0       	ldi	r20, 0x01	; 1
     e8c:	61 2f       	mov	r22, r17
     e8e:	0e 94 b2 00 	call	0x164	; 0x164 <setButtonLed>
							if( AttractCheckGameStart(10000) ){
     e92:	80 e1       	ldi	r24, 0x10	; 16
     e94:	97 e2       	ldi	r25, 0x27	; 39
     e96:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <AttractCheckGameStart>
     e9a:	81 11       	cpse	r24, r1
     e9c:	59 c0       	rjmp	.+178    	; 0xf50 <Attractive+0x120>
		uint8_t blinkyMode = rand() % AttractPatternCount;	// todo make random, ADD DISPLAY BLANKING
		switch(blinkyMode){	// multiple blinky modes (todo randomly pick one)
			case 0:
				while(1){
					for(uint8_t y = 1; y < 6; y++){
						for(uint8_t x = 0; x < 6; x++){
     e9e:	cf 5f       	subi	r28, 0xFF	; 255
     ea0:	c6 30       	cpi	r28, 0x06	; 6
     ea2:	61 f7       	brne	.-40     	; 0xe7c <Attractive+0x4c>
							if( AttractCheckGameStart(10000) ){
								
								goto EndAttract;
							}
						}
						setButtonLed(Player1ButtonX, Player1ButtonY, y%2);
     ea4:	40 2f       	mov	r20, r16
     ea6:	60 e0       	ldi	r22, 0x00	; 0
     ea8:	83 e0       	ldi	r24, 0x03	; 3
     eaa:	0e 94 b2 00 	call	0x164	; 0x164 <setButtonLed>
						setButtonLed(Player2ButtonX, Player2ButtonY, (y+1) % 2);
     eae:	a6 01       	movw	r20, r12
     eb0:	41 70       	andi	r20, 0x01	; 1
     eb2:	50 78       	andi	r21, 0x80	; 128
     eb4:	55 23       	and	r21, r21
     eb6:	34 f4       	brge	.+12     	; 0xec4 <Attractive+0x94>
     eb8:	41 50       	subi	r20, 0x01	; 1
     eba:	51 09       	sbc	r21, r1
     ebc:	4e 6f       	ori	r20, 0xFE	; 254
     ebe:	5f 6f       	ori	r21, 0xFF	; 255
     ec0:	4f 5f       	subi	r20, 0xFF	; 255
     ec2:	5f 4f       	sbci	r21, 0xFF	; 255
     ec4:	60 e0       	ldi	r22, 0x00	; 0
     ec6:	82 e0       	ldi	r24, 0x02	; 2
     ec8:	0e 94 b2 00 	call	0x164	; 0x164 <setButtonLed>
	while(1){
		uint8_t blinkyMode = rand() % AttractPatternCount;	// todo make random, ADD DISPLAY BLANKING
		switch(blinkyMode){	// multiple blinky modes (todo randomly pick one)
			case 0:
				while(1){
					for(uint8_t y = 1; y < 6; y++){
     ecc:	1f 5f       	subi	r17, 0xFF	; 255
     ece:	8f ef       	ldi	r24, 0xFF	; 255
     ed0:	c8 1a       	sub	r12, r24
     ed2:	d8 0a       	sbc	r13, r24
     ed4:	16 30       	cpi	r17, 0x06	; 6
     ed6:	99 f1       	breq	.+102    	; 0xf3e <Attractive+0x10e>
	
	setScore(1, 0); // TODO MAKE DASHES

}

void Attractive(){
     ed8:	c0 e0       	ldi	r28, 0x00	; 0
		switch(blinkyMode){	// multiple blinky modes (todo randomly pick one)
			case 0:
				while(1){
					for(uint8_t y = 1; y < 6; y++){
						for(uint8_t x = 0; x < 6; x++){
							setButtonLed( (y%2)==0 ? x : (5-x) ,y,1);
     eda:	d1 2f       	mov	r29, r17
     edc:	d1 70       	andi	r29, 0x01	; 1
     ede:	ce cf       	rjmp	.-100    	; 0xe7c <Attractive+0x4c>
						setButtonLed(Player1ButtonX, Player1ButtonY, y%2);
						setButtonLed(Player2ButtonX, Player2ButtonY, (y+1) % 2);
					}
					for(uint8_t y = 1; y < 6; y++){
						for(uint8_t x = 0; x < 6; x++){
							setButtonLed( (y%2)==0 ? x : (5-x) ,y,0);
     ee0:	0d 2f       	mov	r16, r29
     ee2:	dd 23       	and	r29, r29
     ee4:	19 f0       	breq	.+6      	; 0xeec <Attractive+0xbc>
     ee6:	8f 2d       	mov	r24, r15
     ee8:	8c 1b       	sub	r24, r28
     eea:	01 c0       	rjmp	.+2      	; 0xeee <Attractive+0xbe>
     eec:	8c 2f       	mov	r24, r28
     eee:	40 e0       	ldi	r20, 0x00	; 0
     ef0:	61 2f       	mov	r22, r17
     ef2:	0e 94 b2 00 	call	0x164	; 0x164 <setButtonLed>
							if( AttractCheckGameStart(10000) ){
     ef6:	80 e1       	ldi	r24, 0x10	; 16
     ef8:	97 e2       	ldi	r25, 0x27	; 39
     efa:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <AttractCheckGameStart>
     efe:	81 11       	cpse	r24, r1
     f00:	27 c0       	rjmp	.+78     	; 0xf50 <Attractive+0x120>
						}
						setButtonLed(Player1ButtonX, Player1ButtonY, y%2);
						setButtonLed(Player2ButtonX, Player2ButtonY, (y+1) % 2);
					}
					for(uint8_t y = 1; y < 6; y++){
						for(uint8_t x = 0; x < 6; x++){
     f02:	cf 5f       	subi	r28, 0xFF	; 255
     f04:	c6 30       	cpi	r28, 0x06	; 6
     f06:	61 f7       	brne	.-40     	; 0xee0 <Attractive+0xb0>
							if( AttractCheckGameStart(10000) ){
								
								goto EndAttract;
							}
						}
						setButtonLed(Player1ButtonX, Player1ButtonY, y%2);
     f08:	40 2f       	mov	r20, r16
     f0a:	60 e0       	ldi	r22, 0x00	; 0
     f0c:	83 e0       	ldi	r24, 0x03	; 3
     f0e:	0e 94 b2 00 	call	0x164	; 0x164 <setButtonLed>
						setButtonLed(Player2ButtonX, Player2ButtonY,(y+1) % 2);
     f12:	a6 01       	movw	r20, r12
     f14:	41 70       	andi	r20, 0x01	; 1
     f16:	50 78       	andi	r21, 0x80	; 128
     f18:	55 23       	and	r21, r21
     f1a:	34 f4       	brge	.+12     	; 0xf28 <Attractive+0xf8>
     f1c:	41 50       	subi	r20, 0x01	; 1
     f1e:	51 09       	sbc	r21, r1
     f20:	4e 6f       	ori	r20, 0xFE	; 254
     f22:	5f 6f       	ori	r21, 0xFF	; 255
     f24:	4f 5f       	subi	r20, 0xFF	; 255
     f26:	5f 4f       	sbci	r21, 0xFF	; 255
     f28:	60 e0       	ldi	r22, 0x00	; 0
     f2a:	82 e0       	ldi	r24, 0x02	; 2
     f2c:	0e 94 b2 00 	call	0x164	; 0x164 <setButtonLed>
							}
						}
						setButtonLed(Player1ButtonX, Player1ButtonY, y%2);
						setButtonLed(Player2ButtonX, Player2ButtonY, (y+1) % 2);
					}
					for(uint8_t y = 1; y < 6; y++){
     f30:	1f 5f       	subi	r17, 0xFF	; 255
     f32:	8f ef       	ldi	r24, 0xFF	; 255
     f34:	c8 1a       	sub	r12, r24
     f36:	d8 0a       	sbc	r13, r24
     f38:	16 30       	cpi	r17, 0x06	; 6
     f3a:	31 f4       	brne	.+12     	; 0xf48 <Attractive+0x118>
     f3c:	99 cf       	rjmp	.-206    	; 0xe70 <Attractive+0x40>
     f3e:	68 94       	set
     f40:	cc 24       	eor	r12, r12
     f42:	c1 f8       	bld	r12, 1
     f44:	d1 2c       	mov	r13, r1
     f46:	11 e0       	ldi	r17, 0x01	; 1
	while(1){
		uint8_t blinkyMode = rand() % AttractPatternCount;	// todo make random, ADD DISPLAY BLANKING
		switch(blinkyMode){	// multiple blinky modes (todo randomly pick one)
			case 0:
				while(1){
					for(uint8_t y = 1; y < 6; y++){
     f48:	c0 e0       	ldi	r28, 0x00	; 0
						setButtonLed(Player1ButtonX, Player1ButtonY, y%2);
						setButtonLed(Player2ButtonX, Player2ButtonY, (y+1) % 2);
					}
					for(uint8_t y = 1; y < 6; y++){
						for(uint8_t x = 0; x < 6; x++){
							setButtonLed( (y%2)==0 ? x : (5-x) ,y,0);
     f4a:	d1 2f       	mov	r29, r17
     f4c:	d1 70       	andi	r29, 0x01	; 1
     f4e:	c8 cf       	rjmp	.-112    	; 0xee0 <Attractive+0xb0>
		}
	}
	EndAttract:
	return;		// start the game

}
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	1f 91       	pop	r17
     f56:	0f 91       	pop	r16
     f58:	ff 90       	pop	r15
     f5a:	df 90       	pop	r13
     f5c:	cf 90       	pop	r12
     f5e:	08 95       	ret

00000f60 <EEPROM_write>:


void EEPROM_write(uint16_t uiAddress, uint8_t ucData)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
     f60:	f9 99       	sbic	0x1f, 1	; 31
     f62:	fe cf       	rjmp	.-4      	; 0xf60 <EEPROM_write>
	;
	/* Set up address and Data Registers */
	EEAR = uiAddress;
     f64:	92 bd       	out	0x22, r25	; 34
     f66:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
     f68:	60 bd       	out	0x20, r22	; 32
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMPE);
     f6a:	fa 9a       	sbi	0x1f, 2	; 31
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEPE);
     f6c:	f9 9a       	sbi	0x1f, 1	; 31
     f6e:	08 95       	ret

00000f70 <EEPROM_read>:
}

uint8_t EEPROM_read(uint16_t uiAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
     f70:	f9 99       	sbic	0x1f, 1	; 31
     f72:	fe cf       	rjmp	.-4      	; 0xf70 <EEPROM_read>
	;
	/* Set up address register */
	EEAR = uiAddress;
     f74:	92 bd       	out	0x22, r25	; 34
     f76:	81 bd       	out	0x21, r24	; 33
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
     f78:	f8 9a       	sbi	0x1f, 0	; 31
	/* Return data from Data Register */
	return EEDR;
     f7a:	80 b5       	in	r24, 0x20	; 32
}
     f7c:	08 95       	ret

00000f7e <main>:
}

int main(void)
{

	usbQcInit();
     f7e:	0e 94 21 09 	call	0x1242	; 0x1242 <usbQcInit>
	QCset12V();
     f82:	0e 94 26 09 	call	0x124c	; 0x124c <QCset12V>
	
	buttonsInit();
     f86:	0e 94 98 00 	call	0x130	; 0x130 <buttonsInit>
	init_uart();
     f8a:	0e 94 24 02 	call	0x448	; 0x448 <init_uart>
	stdout = &mystdout;
     f8e:	89 e1       	ldi	r24, 0x19	; 25
     f90:	91 e0       	ldi	r25, 0x01	; 1
     f92:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <__iob+0x3>
     f96:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <__iob+0x2>
	
	printf("\n\nWelcome to bartending robot OS ver 4.7B\n");
     f9a:	86 e7       	ldi	r24, 0x76	; 118
     f9c:	91 e0       	ldi	r25, 0x01	; 1
     f9e:	0e 94 c5 09 	call	0x138a	; 0x138a <puts>
	
	sei();
     fa2:	78 94       	sei
		_delay_ms(100);
		
	}*/
	
	// initialize timer0 for audio circuit
	DDRB |= (1 << DDB1) | (1 << DDB5); // output speaker pin B1
     fa4:	84 b1       	in	r24, 0x04	; 4
     fa6:	82 62       	ori	r24, 0x22	; 34
     fa8:	84 b9       	out	0x04, r24	; 4
	ICR1 = 0;	// TOP of counter, start OFF
     faa:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     fae:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	OCR1A = 0; //0x1FFF;	// OFF at
     fb2:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     fb6:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TCCR1A |= (1 << COM1A1) | (1 << WGM11); //|(0 << COM1B1);
     fba:	e0 e8       	ldi	r30, 0x80	; 128
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	82 68       	ori	r24, 0x82	; 130
     fc2:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12 ) | (1 << WGM13) | (1 << CS41);
     fc4:	e1 e8       	ldi	r30, 0x81	; 129
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	8a 61       	ori	r24, 0x1A	; 26
     fcc:	80 83       	st	Z, r24
	PORTB &= ~(1 << 1);
     fce:	29 98       	cbi	0x05, 1	; 5
	
	TCCR0A = (1 << WGM01);	// enable CTC mode timer 0
     fd0:	82 e0       	ldi	r24, 0x02	; 2
     fd2:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0;		//disable clock for timer0, as it will be enabled when "beeped"
     fd4:	15 bc       	out	0x25, r1	; 37
	OCR0A = 125;
     fd6:	9d e7       	ldi	r25, 0x7D	; 125
     fd8:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = ( 1 << OCIE0A );
     fda:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	
	printf("AUDIO TIMERS & PORT SET\n");
     fde:	80 ea       	ldi	r24, 0xA0	; 160
     fe0:	91 e0       	ldi	r25, 0x01	; 1
     fe2:	0e 94 c5 09 	call	0x138a	; 0x138a <puts>

	//load values from eeprom
	
	

	HighScore1P = (EEPROM_read(EEP_ADDR_HighScore1P_H) << 8) | (EEPROM_read(EEP_ADDR_HighScore1P_L));
     fe6:	80 e0       	ldi	r24, 0x00	; 0
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	0e 94 b8 07 	call	0xf70	; 0xf70 <EEPROM_read>
     fee:	c8 2f       	mov	r28, r24
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	0e 94 b8 07 	call	0xf70	; 0xf70 <EEPROM_read>
     ff8:	2c 2f       	mov	r18, r28
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	32 2f       	mov	r19, r18
     ffe:	22 27       	eor	r18, r18
    1000:	28 2b       	or	r18, r24
    1002:	30 93 b9 02 	sts	0x02B9, r19	; 0x8002b9 <HighScore1P+0x1>
    1006:	20 93 b8 02 	sts	0x02B8, r18	; 0x8002b8 <HighScore1P>
	HighScore2P = (EEPROM_read(EEP_ADDR_HighScore2P_H) << 8) | (EEPROM_read(EEP_ADDR_HighScore2P_L));
    100a:	82 e0       	ldi	r24, 0x02	; 2
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	0e 94 b8 07 	call	0xf70	; 0xf70 <EEPROM_read>
    1012:	c8 2f       	mov	r28, r24
    1014:	83 e0       	ldi	r24, 0x03	; 3
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	0e 94 b8 07 	call	0xf70	; 0xf70 <EEPROM_read>
    101c:	2c 2f       	mov	r18, r28
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	32 2f       	mov	r19, r18
    1022:	22 27       	eor	r18, r18
    1024:	28 2b       	or	r18, r24
    1026:	30 93 c9 02 	sts	0x02C9, r19	; 0x8002c9 <HighScore2P+0x1>
    102a:	20 93 c8 02 	sts	0x02C8, r18	; 0x8002c8 <HighScore2P>
	RoundTime = EEPROM_read(EEP_ADDR_RoundTime);
    102e:	80 e1       	ldi	r24, 0x10	; 16
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	0e 94 b8 07 	call	0xf70	; 0xf70 <EEPROM_read>
    1036:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <RoundTime>
	BonusTime = EEPROM_read(EEP_ADDR_BonusTime);
    103a:	80 e2       	ldi	r24, 0x20	; 32
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	0e 94 b8 07 	call	0xf70	; 0xf70 <EEPROM_read>
    1042:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <BonusTime>
	MultiplierMax = EEPROM_read(EEP_ADDR_MultMax);
    1046:	80 e5       	ldi	r24, 0x50	; 80
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	0e 94 b8 07 	call	0xf70	; 0xf70 <EEPROM_read>
    104e:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <MultiplierMax>
	BonusPointCount = EEPROM_read(EEP_ADDR_BonusPtCount);
    1052:	80 e6       	ldi	r24, 0x60	; 96
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	0e 94 b8 07 	call	0xf70	; 0xf70 <EEPROM_read>
    105a:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <BonusPointCount>
	
	// load random value from eeprom as seed and write new random value
	srand((EEPROM_read(EEP_ADDR_RandomSeed_H) << 8) | EEPROM_read(EEP_ADDR_RandomSeed_L));
    105e:	80 e4       	ldi	r24, 0x40	; 64
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	0e 94 b8 07 	call	0xf70	; 0xf70 <EEPROM_read>
    1066:	c8 2f       	mov	r28, r24
    1068:	81 e4       	ldi	r24, 0x41	; 65
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	0e 94 b8 07 	call	0xf70	; 0xf70 <EEPROM_read>
    1070:	2c 2f       	mov	r18, r28
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	32 2f       	mov	r19, r18
    1076:	22 27       	eor	r18, r18
    1078:	a9 01       	movw	r20, r18
    107a:	48 2b       	or	r20, r24
    107c:	ca 01       	movw	r24, r20
    107e:	0e 94 a4 09 	call	0x1348	; 0x1348 <srand>
	EEPROM_write(EEP_ADDR_RandomSeed_H, rand()%256 );
    1082:	0e 94 9f 09 	call	0x133e	; 0x133e <rand>
    1086:	90 78       	andi	r25, 0x80	; 128
    1088:	99 23       	and	r25, r25
    108a:	1c f4       	brge	.+6      	; 0x1092 <main+0x114>
    108c:	01 97       	sbiw	r24, 0x01	; 1
    108e:	9f 6f       	ori	r25, 0xFF	; 255
    1090:	01 96       	adiw	r24, 0x01	; 1
    1092:	68 2f       	mov	r22, r24
    1094:	80 e4       	ldi	r24, 0x40	; 64
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	0e 94 b0 07 	call	0xf60	; 0xf60 <EEPROM_write>
	EEPROM_write(EEP_ADDR_RandomSeed_L, rand()%256 );
    109c:	0e 94 9f 09 	call	0x133e	; 0x133e <rand>
    10a0:	90 78       	andi	r25, 0x80	; 128
    10a2:	99 23       	and	r25, r25
    10a4:	1c f4       	brge	.+6      	; 0x10ac <main+0x12e>
    10a6:	01 97       	sbiw	r24, 0x01	; 1
    10a8:	9f 6f       	ori	r25, 0xFF	; 255
    10aa:	01 96       	adiw	r24, 0x01	; 1
    10ac:	68 2f       	mov	r22, r24
    10ae:	81 e4       	ldi	r24, 0x41	; 65
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	0e 94 b0 07 	call	0xf60	; 0xf60 <EEPROM_write>
	
	printf("EEPROM VALUES SET:\n");
    10b6:	88 eb       	ldi	r24, 0xB8	; 184
    10b8:	91 e0       	ldi	r25, 0x01	; 1
    10ba:	0e 94 c5 09 	call	0x138a	; 0x138a <puts>
	printf("HS1P: %d \t HS2P: %d \t RT: %d \t BT: %d \t MMAX: %d \t BPC: %d \n",HighScore1P, HighScore2P, RoundTime, BonusTime, MultiplierMax, BonusPointCount);
    10be:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <BonusPointCount>
    10c2:	1f 92       	push	r1
    10c4:	8f 93       	push	r24
    10c6:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <MultiplierMax>
    10ca:	1f 92       	push	r1
    10cc:	8f 93       	push	r24
    10ce:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <BonusTime>
    10d2:	1f 92       	push	r1
    10d4:	8f 93       	push	r24
    10d6:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <RoundTime>
    10da:	1f 92       	push	r1
    10dc:	8f 93       	push	r24
    10de:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <HighScore2P+0x1>
    10e2:	8f 93       	push	r24
    10e4:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <HighScore2P>
    10e8:	8f 93       	push	r24
    10ea:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <HighScore1P+0x1>
    10ee:	8f 93       	push	r24
    10f0:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <HighScore1P>
    10f4:	8f 93       	push	r24
    10f6:	8b ec       	ldi	r24, 0xCB	; 203
    10f8:	91 e0       	ldi	r25, 0x01	; 1
    10fa:	9f 93       	push	r25
    10fc:	8f 93       	push	r24
    10fe:	0e 94 af 09 	call	0x135e	; 0x135e <printf>
	printf("RANDOMSEED: 0x%X%X\n\n", EEPROM_read(EEP_ADDR_RandomSeed_H), EEPROM_read(EEP_ADDR_RandomSeed_L));
    1102:	81 e4       	ldi	r24, 0x41	; 65
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	0e 94 b8 07 	call	0xf70	; 0xf70 <EEPROM_read>
    110a:	c8 2f       	mov	r28, r24
    110c:	80 e4       	ldi	r24, 0x40	; 64
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	0e 94 b8 07 	call	0xf70	; 0xf70 <EEPROM_read>
    1114:	1f 92       	push	r1
    1116:	cf 93       	push	r28
    1118:	1f 92       	push	r1
    111a:	8f 93       	push	r24
    111c:	88 e0       	ldi	r24, 0x08	; 8
    111e:	92 e0       	ldi	r25, 0x02	; 2
    1120:	9f 93       	push	r25
    1122:	8f 93       	push	r24
    1124:	0e 94 af 09 	call	0x135e	; 0x135e <printf>
	
	
	
	
	// set up timer4 for game timer
	TCCR4A = (1 << WGM41);	// CTC mode
    1128:	82 e0       	ldi	r24, 0x02	; 2
    112a:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	TCCR4B = 0;				// disable timer until game start (set to 64 prescale later in code)
    112e:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
	TIMSK4 = (1 << OCIE4A);
    1132:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7e0072>
	OCR4A = 15625;			// set up for 1s
    1136:	89 e0       	ldi	r24, 0x09	; 9
    1138:	9d e3       	ldi	r25, 0x3D	; 61
    113a:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    113e:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>

	sei();
    1142:	78 94       	sei
    1144:	8d b7       	in	r24, 0x3d	; 61
    1146:	9e b7       	in	r25, 0x3e	; 62
    1148:	44 96       	adiw	r24, 0x14	; 20
    114a:	0f b6       	in	r0, 0x3f	; 63
    114c:	f8 94       	cli
    114e:	9e bf       	out	0x3e, r25	; 62
    1150:	0f be       	out	0x3f, r0	; 63
    1152:	8d bf       	out	0x3d, r24	; 61

	while (1)
	{
		printf("STARTING ATTRACT MODE\n");
    1154:	8d e1       	ldi	r24, 0x1D	; 29
    1156:	92 e0       	ldi	r25, 0x02	; 2
    1158:	0e 94 c5 09 	call	0x138a	; 0x138a <puts>
		Attractive();		// loop thru patterns until game start is pressed (TODO IMPLEMENT DEBUG PATTERN)
    115c:	0e 94 18 07 	call	0xe30	; 0xe30 <Attractive>
		printf("STARTING GAME\n");
    1160:	83 e3       	ldi	r24, 0x33	; 51
    1162:	92 e0       	ldi	r25, 0x02	; 2
    1164:	0e 94 c5 09 	call	0x138a	; 0x138a <puts>
		Game();
    1168:	0e 94 9d 05 	call	0xb3a	; 0xb3a <Game>
    116c:	9f ef       	ldi	r25, 0xFF	; 255
    116e:	2e e9       	ldi	r18, 0x9E	; 158
    1170:	44 e2       	ldi	r20, 0x24	; 36
    1172:	91 50       	subi	r25, 0x01	; 1
    1174:	20 40       	sbci	r18, 0x00	; 0
    1176:	40 40       	sbci	r20, 0x00	; 0
    1178:	e1 f7       	brne	.-8      	; 0x1172 <main+0x1f4>
    117a:	00 c0       	rjmp	.+0      	; 0x117c <main+0x1fe>
    117c:	00 00       	nop
		_delay_ms(750);
		Bonus();
    117e:	0e 94 35 04 	call	0x86a	; 0x86a <Bonus>
		
		if(GameMode == 0){
    1182:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <GameMode>
    1186:	81 11       	cpse	r24, r1
    1188:	12 c0       	rjmp	.+36     	; 0x11ae <main+0x230>
			if(P1Score > HighScore1P){
    118a:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <P1Score>
    118e:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <P1Score+0x1>
    1192:	20 91 b8 02 	lds	r18, 0x02B8	; 0x8002b8 <HighScore1P>
    1196:	30 91 b9 02 	lds	r19, 0x02B9	; 0x8002b9 <HighScore1P+0x1>
    119a:	28 17       	cp	r18, r24
    119c:	39 07       	cpc	r19, r25
    119e:	38 f5       	brcc	.+78     	; 0x11ee <main+0x270>
				HighScore1P = P1Score;
    11a0:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <HighScore1P+0x1>
    11a4:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <HighScore1P>
				ShowWinner();			//if new high score, flash screen
    11a8:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <ShowWinner>
    11ac:	20 c0       	rjmp	.+64     	; 0x11ee <main+0x270>
			}
			}else{
			if((P1Score > HighScore2P) || (P2Score > HighScore2P)){
    11ae:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <P1Score>
    11b2:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <P1Score+0x1>
    11b6:	20 91 c8 02 	lds	r18, 0x02C8	; 0x8002c8 <HighScore2P>
    11ba:	30 91 c9 02 	lds	r19, 0x02C9	; 0x8002c9 <HighScore2P+0x1>
    11be:	28 17       	cp	r18, r24
    11c0:	39 07       	cpc	r19, r25
    11c2:	38 f0       	brcs	.+14     	; 0x11d2 <main+0x254>
    11c4:	40 91 bc 02 	lds	r20, 0x02BC	; 0x8002bc <P2Score>
    11c8:	50 91 bd 02 	lds	r21, 0x02BD	; 0x8002bd <P2Score+0x1>
    11cc:	24 17       	cp	r18, r20
    11ce:	35 07       	cpc	r19, r21
    11d0:	60 f4       	brcc	.+24     	; 0x11ea <main+0x26c>
				HighScore2P = (P1Score > P2Score ? P1Score : P2Score);
    11d2:	20 91 bc 02 	lds	r18, 0x02BC	; 0x8002bc <P2Score>
    11d6:	30 91 bd 02 	lds	r19, 0x02BD	; 0x8002bd <P2Score+0x1>
    11da:	28 17       	cp	r18, r24
    11dc:	39 07       	cpc	r19, r25
    11de:	08 f4       	brcc	.+2      	; 0x11e2 <main+0x264>
    11e0:	9c 01       	movw	r18, r24
    11e2:	30 93 c9 02 	sts	0x02C9, r19	; 0x8002c9 <HighScore2P+0x1>
    11e6:	20 93 c8 02 	sts	0x02C8, r18	; 0x8002c8 <HighScore2P>
			}
			ShowWinner();				//if 2 player mode show winner anyway
    11ea:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <ShowWinner>
    11ee:	5f ef       	ldi	r21, 0xFF	; 255
    11f0:	8e e9       	ldi	r24, 0x9E	; 158
    11f2:	94 e2       	ldi	r25, 0x24	; 36
    11f4:	51 50       	subi	r21, 0x01	; 1
    11f6:	80 40       	sbci	r24, 0x00	; 0
    11f8:	90 40       	sbci	r25, 0x00	; 0
    11fa:	e1 f7       	brne	.-8      	; 0x11f4 <main+0x276>
    11fc:	00 c0       	rjmp	.+0      	; 0x11fe <main+0x280>
    11fe:	00 00       	nop
    1200:	a9 cf       	rjmp	.-174    	; 0x1154 <main+0x1d6>

00001202 <_dm0V>:
	_dp600mV();
	_dm600mV();
}

void _dm0V(){
	QC_PORT &= ~(1 << QC_DM);
    1202:	70 98       	cbi	0x0e, 0	; 14
	QC_DDR |= 1 << QC_DM;
    1204:	68 9a       	sbi	0x0d, 0	; 13
    1206:	08 95       	ret

00001208 <_dp600mV>:
}

void _dp600mV(){
	QC_DDR &= ~(1 << QC_DP);
    1208:	69 98       	cbi	0x0d, 1	; 13
    120a:	08 95       	ret

0000120c <QCset5V>:
	_delay_ms(2);
	
}

void QCset5V(){
	_dp600mV();
    120c:	0e 94 04 09 	call	0x1208	; 0x1208 <_dp600mV>
	_dm0V();
    1210:	0e 94 01 09 	call	0x1202	; 0x1202 <_dm0V>
    1214:	08 95       	ret

00001216 <_dm600mV>:
void _dp600mV(){
	QC_DDR &= ~(1 << QC_DP);
}

void _dm600mV(){
	QC_DDR &= ~(1 << QC_DM);
    1216:	68 98       	cbi	0x0d, 0	; 13
    1218:	08 95       	ret

0000121a <_handshake>:
	_handshake();
	QCset5V();
}

void _handshake(){
	_dm600mV();
    121a:	0e 94 0b 09 	call	0x1216	; 0x1216 <_dm600mV>
    121e:	2f ef       	ldi	r18, 0xFF	; 255
    1220:	8d e3       	ldi	r24, 0x3D	; 61
    1222:	99 e4       	ldi	r25, 0x49	; 73
    1224:	21 50       	subi	r18, 0x01	; 1
    1226:	80 40       	sbci	r24, 0x00	; 0
    1228:	90 40       	sbci	r25, 0x00	; 0
    122a:	e1 f7       	brne	.-8      	; 0x1224 <_handshake+0xa>
    122c:	00 c0       	rjmp	.+0      	; 0x122e <_handshake+0x14>
    122e:	00 00       	nop
	_delay_ms(1500);
	_dm0V();
    1230:	0e 94 01 09 	call	0x1202	; 0x1202 <_dm0V>
    1234:	8f e3       	ldi	r24, 0x3F	; 63
    1236:	9f e1       	ldi	r25, 0x1F	; 31
    1238:	01 97       	sbiw	r24, 0x01	; 1
    123a:	f1 f7       	brne	.-4      	; 0x1238 <_handshake+0x1e>
    123c:	00 c0       	rjmp	.+0      	; 0x123e <_handshake+0x24>
    123e:	00 00       	nop
    1240:	08 95       	ret

00001242 <usbQcInit>:
#include "usbQc.h"
#define F_CPU 16000000UL
#include <util/delay.h>

void usbQcInit(){
	_handshake();
    1242:	0e 94 0d 09 	call	0x121a	; 0x121a <_handshake>
	QCset5V();
    1246:	0e 94 06 09 	call	0x120c	; 0x120c <QCset5V>
    124a:	08 95       	ret

0000124c <QCset12V>:
	_dm600mV();
	
}

void QCset12V(){
	_dp600mV();
    124c:	0e 94 04 09 	call	0x1208	; 0x1208 <_dp600mV>
	_dm600mV();
    1250:	0e 94 0b 09 	call	0x1216	; 0x1216 <_dm600mV>
    1254:	08 95       	ret

00001256 <__divmodhi4>:
    1256:	97 fb       	bst	r25, 7
    1258:	07 2e       	mov	r0, r23
    125a:	16 f4       	brtc	.+4      	; 0x1260 <__divmodhi4+0xa>
    125c:	00 94       	com	r0
    125e:	07 d0       	rcall	.+14     	; 0x126e <__divmodhi4_neg1>
    1260:	77 fd       	sbrc	r23, 7
    1262:	09 d0       	rcall	.+18     	; 0x1276 <__divmodhi4_neg2>
    1264:	0e 94 3f 09 	call	0x127e	; 0x127e <__udivmodhi4>
    1268:	07 fc       	sbrc	r0, 7
    126a:	05 d0       	rcall	.+10     	; 0x1276 <__divmodhi4_neg2>
    126c:	3e f4       	brtc	.+14     	; 0x127c <__divmodhi4_exit>

0000126e <__divmodhi4_neg1>:
    126e:	90 95       	com	r25
    1270:	81 95       	neg	r24
    1272:	9f 4f       	sbci	r25, 0xFF	; 255
    1274:	08 95       	ret

00001276 <__divmodhi4_neg2>:
    1276:	70 95       	com	r23
    1278:	61 95       	neg	r22
    127a:	7f 4f       	sbci	r23, 0xFF	; 255

0000127c <__divmodhi4_exit>:
    127c:	08 95       	ret

0000127e <__udivmodhi4>:
    127e:	aa 1b       	sub	r26, r26
    1280:	bb 1b       	sub	r27, r27
    1282:	51 e1       	ldi	r21, 0x11	; 17
    1284:	07 c0       	rjmp	.+14     	; 0x1294 <__udivmodhi4_ep>

00001286 <__udivmodhi4_loop>:
    1286:	aa 1f       	adc	r26, r26
    1288:	bb 1f       	adc	r27, r27
    128a:	a6 17       	cp	r26, r22
    128c:	b7 07       	cpc	r27, r23
    128e:	10 f0       	brcs	.+4      	; 0x1294 <__udivmodhi4_ep>
    1290:	a6 1b       	sub	r26, r22
    1292:	b7 0b       	sbc	r27, r23

00001294 <__udivmodhi4_ep>:
    1294:	88 1f       	adc	r24, r24
    1296:	99 1f       	adc	r25, r25
    1298:	5a 95       	dec	r21
    129a:	a9 f7       	brne	.-22     	; 0x1286 <__udivmodhi4_loop>
    129c:	80 95       	com	r24
    129e:	90 95       	com	r25
    12a0:	bc 01       	movw	r22, r24
    12a2:	cd 01       	movw	r24, r26
    12a4:	08 95       	ret

000012a6 <do_rand>:
    12a6:	8f 92       	push	r8
    12a8:	9f 92       	push	r9
    12aa:	af 92       	push	r10
    12ac:	bf 92       	push	r11
    12ae:	cf 92       	push	r12
    12b0:	df 92       	push	r13
    12b2:	ef 92       	push	r14
    12b4:	ff 92       	push	r15
    12b6:	cf 93       	push	r28
    12b8:	df 93       	push	r29
    12ba:	ec 01       	movw	r28, r24
    12bc:	68 81       	ld	r22, Y
    12be:	79 81       	ldd	r23, Y+1	; 0x01
    12c0:	8a 81       	ldd	r24, Y+2	; 0x02
    12c2:	9b 81       	ldd	r25, Y+3	; 0x03
    12c4:	61 15       	cp	r22, r1
    12c6:	71 05       	cpc	r23, r1
    12c8:	81 05       	cpc	r24, r1
    12ca:	91 05       	cpc	r25, r1
    12cc:	21 f4       	brne	.+8      	; 0x12d6 <do_rand+0x30>
    12ce:	64 e2       	ldi	r22, 0x24	; 36
    12d0:	79 ed       	ldi	r23, 0xD9	; 217
    12d2:	8b e5       	ldi	r24, 0x5B	; 91
    12d4:	97 e0       	ldi	r25, 0x07	; 7
    12d6:	2d e1       	ldi	r18, 0x1D	; 29
    12d8:	33 ef       	ldi	r19, 0xF3	; 243
    12da:	41 e0       	ldi	r20, 0x01	; 1
    12dc:	50 e0       	ldi	r21, 0x00	; 0
    12de:	0e 94 86 0c 	call	0x190c	; 0x190c <__divmodsi4>
    12e2:	49 01       	movw	r8, r18
    12e4:	5a 01       	movw	r10, r20
    12e6:	9b 01       	movw	r18, r22
    12e8:	ac 01       	movw	r20, r24
    12ea:	a7 ea       	ldi	r26, 0xA7	; 167
    12ec:	b1 e4       	ldi	r27, 0x41	; 65
    12ee:	0e 94 a5 0c 	call	0x194a	; 0x194a <__muluhisi3>
    12f2:	6b 01       	movw	r12, r22
    12f4:	7c 01       	movw	r14, r24
    12f6:	ac ee       	ldi	r26, 0xEC	; 236
    12f8:	b4 ef       	ldi	r27, 0xF4	; 244
    12fa:	a5 01       	movw	r20, r10
    12fc:	94 01       	movw	r18, r8
    12fe:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__mulohisi3>
    1302:	dc 01       	movw	r26, r24
    1304:	cb 01       	movw	r24, r22
    1306:	8c 0d       	add	r24, r12
    1308:	9d 1d       	adc	r25, r13
    130a:	ae 1d       	adc	r26, r14
    130c:	bf 1d       	adc	r27, r15
    130e:	b7 ff       	sbrs	r27, 7
    1310:	03 c0       	rjmp	.+6      	; 0x1318 <do_rand+0x72>
    1312:	01 97       	sbiw	r24, 0x01	; 1
    1314:	a1 09       	sbc	r26, r1
    1316:	b0 48       	sbci	r27, 0x80	; 128
    1318:	88 83       	st	Y, r24
    131a:	99 83       	std	Y+1, r25	; 0x01
    131c:	aa 83       	std	Y+2, r26	; 0x02
    131e:	bb 83       	std	Y+3, r27	; 0x03
    1320:	9f 77       	andi	r25, 0x7F	; 127
    1322:	df 91       	pop	r29
    1324:	cf 91       	pop	r28
    1326:	ff 90       	pop	r15
    1328:	ef 90       	pop	r14
    132a:	df 90       	pop	r13
    132c:	cf 90       	pop	r12
    132e:	bf 90       	pop	r11
    1330:	af 90       	pop	r10
    1332:	9f 90       	pop	r9
    1334:	8f 90       	pop	r8
    1336:	08 95       	ret

00001338 <rand_r>:
    1338:	0e 94 53 09 	call	0x12a6	; 0x12a6 <do_rand>
    133c:	08 95       	ret

0000133e <rand>:
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	91 e0       	ldi	r25, 0x01	; 1
    1342:	0e 94 53 09 	call	0x12a6	; 0x12a6 <do_rand>
    1346:	08 95       	ret

00001348 <srand>:
    1348:	a0 e0       	ldi	r26, 0x00	; 0
    134a:	b0 e0       	ldi	r27, 0x00	; 0
    134c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    1350:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1354:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    1358:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    135c:	08 95       	ret

0000135e <printf>:
    135e:	a0 e0       	ldi	r26, 0x00	; 0
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	e5 eb       	ldi	r30, 0xB5	; 181
    1364:	f9 e0       	ldi	r31, 0x09	; 9
    1366:	0c 94 c8 0c 	jmp	0x1990	; 0x1990 <__prologue_saves__+0x20>
    136a:	ae 01       	movw	r20, r28
    136c:	4b 5f       	subi	r20, 0xFB	; 251
    136e:	5f 4f       	sbci	r21, 0xFF	; 255
    1370:	fa 01       	movw	r30, r20
    1372:	61 91       	ld	r22, Z+
    1374:	71 91       	ld	r23, Z+
    1376:	af 01       	movw	r20, r30
    1378:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <__iob+0x2>
    137c:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <__iob+0x3>
    1380:	0e 94 f5 09 	call	0x13ea	; 0x13ea <vfprintf>
    1384:	e2 e0       	ldi	r30, 0x02	; 2
    1386:	0c 94 e4 0c 	jmp	0x19c8	; 0x19c8 <__epilogue_restores__+0x20>

0000138a <puts>:
    138a:	0f 93       	push	r16
    138c:	1f 93       	push	r17
    138e:	cf 93       	push	r28
    1390:	df 93       	push	r29
    1392:	e0 91 cd 02 	lds	r30, 0x02CD	; 0x8002cd <__iob+0x2>
    1396:	f0 91 ce 02 	lds	r31, 0x02CE	; 0x8002ce <__iob+0x3>
    139a:	23 81       	ldd	r18, Z+3	; 0x03
    139c:	21 ff       	sbrs	r18, 1
    139e:	1b c0       	rjmp	.+54     	; 0x13d6 <puts+0x4c>
    13a0:	8c 01       	movw	r16, r24
    13a2:	d0 e0       	ldi	r29, 0x00	; 0
    13a4:	c0 e0       	ldi	r28, 0x00	; 0
    13a6:	f8 01       	movw	r30, r16
    13a8:	81 91       	ld	r24, Z+
    13aa:	8f 01       	movw	r16, r30
    13ac:	60 91 cd 02 	lds	r22, 0x02CD	; 0x8002cd <__iob+0x2>
    13b0:	70 91 ce 02 	lds	r23, 0x02CE	; 0x8002ce <__iob+0x3>
    13b4:	db 01       	movw	r26, r22
    13b6:	18 96       	adiw	r26, 0x08	; 8
    13b8:	ed 91       	ld	r30, X+
    13ba:	fc 91       	ld	r31, X
    13bc:	19 97       	sbiw	r26, 0x09	; 9
    13be:	88 23       	and	r24, r24
    13c0:	31 f0       	breq	.+12     	; 0x13ce <puts+0x44>
    13c2:	09 95       	icall
    13c4:	89 2b       	or	r24, r25
    13c6:	79 f3       	breq	.-34     	; 0x13a6 <puts+0x1c>
    13c8:	df ef       	ldi	r29, 0xFF	; 255
    13ca:	cf ef       	ldi	r28, 0xFF	; 255
    13cc:	ec cf       	rjmp	.-40     	; 0x13a6 <puts+0x1c>
    13ce:	8a e0       	ldi	r24, 0x0A	; 10
    13d0:	09 95       	icall
    13d2:	89 2b       	or	r24, r25
    13d4:	19 f0       	breq	.+6      	; 0x13dc <puts+0x52>
    13d6:	8f ef       	ldi	r24, 0xFF	; 255
    13d8:	9f ef       	ldi	r25, 0xFF	; 255
    13da:	02 c0       	rjmp	.+4      	; 0x13e0 <puts+0x56>
    13dc:	8d 2f       	mov	r24, r29
    13de:	9c 2f       	mov	r25, r28
    13e0:	df 91       	pop	r29
    13e2:	cf 91       	pop	r28
    13e4:	1f 91       	pop	r17
    13e6:	0f 91       	pop	r16
    13e8:	08 95       	ret

000013ea <vfprintf>:
    13ea:	ab e0       	ldi	r26, 0x0B	; 11
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	eb ef       	ldi	r30, 0xFB	; 251
    13f0:	f9 e0       	ldi	r31, 0x09	; 9
    13f2:	0c 94 b8 0c 	jmp	0x1970	; 0x1970 <__prologue_saves__>
    13f6:	6c 01       	movw	r12, r24
    13f8:	7b 01       	movw	r14, r22
    13fa:	8a 01       	movw	r16, r20
    13fc:	fc 01       	movw	r30, r24
    13fe:	17 82       	std	Z+7, r1	; 0x07
    1400:	16 82       	std	Z+6, r1	; 0x06
    1402:	83 81       	ldd	r24, Z+3	; 0x03
    1404:	81 ff       	sbrs	r24, 1
    1406:	cc c1       	rjmp	.+920    	; 0x17a0 <vfprintf+0x3b6>
    1408:	ce 01       	movw	r24, r28
    140a:	01 96       	adiw	r24, 0x01	; 1
    140c:	3c 01       	movw	r6, r24
    140e:	f6 01       	movw	r30, r12
    1410:	93 81       	ldd	r25, Z+3	; 0x03
    1412:	f7 01       	movw	r30, r14
    1414:	93 fd       	sbrc	r25, 3
    1416:	85 91       	lpm	r24, Z+
    1418:	93 ff       	sbrs	r25, 3
    141a:	81 91       	ld	r24, Z+
    141c:	7f 01       	movw	r14, r30
    141e:	88 23       	and	r24, r24
    1420:	09 f4       	brne	.+2      	; 0x1424 <vfprintf+0x3a>
    1422:	ba c1       	rjmp	.+884    	; 0x1798 <vfprintf+0x3ae>
    1424:	85 32       	cpi	r24, 0x25	; 37
    1426:	39 f4       	brne	.+14     	; 0x1436 <vfprintf+0x4c>
    1428:	93 fd       	sbrc	r25, 3
    142a:	85 91       	lpm	r24, Z+
    142c:	93 ff       	sbrs	r25, 3
    142e:	81 91       	ld	r24, Z+
    1430:	7f 01       	movw	r14, r30
    1432:	85 32       	cpi	r24, 0x25	; 37
    1434:	29 f4       	brne	.+10     	; 0x1440 <vfprintf+0x56>
    1436:	b6 01       	movw	r22, r12
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <fputc>
    143e:	e7 cf       	rjmp	.-50     	; 0x140e <vfprintf+0x24>
    1440:	91 2c       	mov	r9, r1
    1442:	21 2c       	mov	r2, r1
    1444:	31 2c       	mov	r3, r1
    1446:	ff e1       	ldi	r31, 0x1F	; 31
    1448:	f3 15       	cp	r31, r3
    144a:	d8 f0       	brcs	.+54     	; 0x1482 <vfprintf+0x98>
    144c:	8b 32       	cpi	r24, 0x2B	; 43
    144e:	79 f0       	breq	.+30     	; 0x146e <vfprintf+0x84>
    1450:	38 f4       	brcc	.+14     	; 0x1460 <vfprintf+0x76>
    1452:	80 32       	cpi	r24, 0x20	; 32
    1454:	79 f0       	breq	.+30     	; 0x1474 <vfprintf+0x8a>
    1456:	83 32       	cpi	r24, 0x23	; 35
    1458:	a1 f4       	brne	.+40     	; 0x1482 <vfprintf+0x98>
    145a:	23 2d       	mov	r18, r3
    145c:	20 61       	ori	r18, 0x10	; 16
    145e:	1d c0       	rjmp	.+58     	; 0x149a <vfprintf+0xb0>
    1460:	8d 32       	cpi	r24, 0x2D	; 45
    1462:	61 f0       	breq	.+24     	; 0x147c <vfprintf+0x92>
    1464:	80 33       	cpi	r24, 0x30	; 48
    1466:	69 f4       	brne	.+26     	; 0x1482 <vfprintf+0x98>
    1468:	23 2d       	mov	r18, r3
    146a:	21 60       	ori	r18, 0x01	; 1
    146c:	16 c0       	rjmp	.+44     	; 0x149a <vfprintf+0xb0>
    146e:	83 2d       	mov	r24, r3
    1470:	82 60       	ori	r24, 0x02	; 2
    1472:	38 2e       	mov	r3, r24
    1474:	e3 2d       	mov	r30, r3
    1476:	e4 60       	ori	r30, 0x04	; 4
    1478:	3e 2e       	mov	r3, r30
    147a:	2a c0       	rjmp	.+84     	; 0x14d0 <vfprintf+0xe6>
    147c:	f3 2d       	mov	r31, r3
    147e:	f8 60       	ori	r31, 0x08	; 8
    1480:	1d c0       	rjmp	.+58     	; 0x14bc <vfprintf+0xd2>
    1482:	37 fc       	sbrc	r3, 7
    1484:	2d c0       	rjmp	.+90     	; 0x14e0 <vfprintf+0xf6>
    1486:	20 ed       	ldi	r18, 0xD0	; 208
    1488:	28 0f       	add	r18, r24
    148a:	2a 30       	cpi	r18, 0x0A	; 10
    148c:	40 f0       	brcs	.+16     	; 0x149e <vfprintf+0xb4>
    148e:	8e 32       	cpi	r24, 0x2E	; 46
    1490:	b9 f4       	brne	.+46     	; 0x14c0 <vfprintf+0xd6>
    1492:	36 fc       	sbrc	r3, 6
    1494:	81 c1       	rjmp	.+770    	; 0x1798 <vfprintf+0x3ae>
    1496:	23 2d       	mov	r18, r3
    1498:	20 64       	ori	r18, 0x40	; 64
    149a:	32 2e       	mov	r3, r18
    149c:	19 c0       	rjmp	.+50     	; 0x14d0 <vfprintf+0xe6>
    149e:	36 fe       	sbrs	r3, 6
    14a0:	06 c0       	rjmp	.+12     	; 0x14ae <vfprintf+0xc4>
    14a2:	8a e0       	ldi	r24, 0x0A	; 10
    14a4:	98 9e       	mul	r9, r24
    14a6:	20 0d       	add	r18, r0
    14a8:	11 24       	eor	r1, r1
    14aa:	92 2e       	mov	r9, r18
    14ac:	11 c0       	rjmp	.+34     	; 0x14d0 <vfprintf+0xe6>
    14ae:	ea e0       	ldi	r30, 0x0A	; 10
    14b0:	2e 9e       	mul	r2, r30
    14b2:	20 0d       	add	r18, r0
    14b4:	11 24       	eor	r1, r1
    14b6:	22 2e       	mov	r2, r18
    14b8:	f3 2d       	mov	r31, r3
    14ba:	f0 62       	ori	r31, 0x20	; 32
    14bc:	3f 2e       	mov	r3, r31
    14be:	08 c0       	rjmp	.+16     	; 0x14d0 <vfprintf+0xe6>
    14c0:	8c 36       	cpi	r24, 0x6C	; 108
    14c2:	21 f4       	brne	.+8      	; 0x14cc <vfprintf+0xe2>
    14c4:	83 2d       	mov	r24, r3
    14c6:	80 68       	ori	r24, 0x80	; 128
    14c8:	38 2e       	mov	r3, r24
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <vfprintf+0xe6>
    14cc:	88 36       	cpi	r24, 0x68	; 104
    14ce:	41 f4       	brne	.+16     	; 0x14e0 <vfprintf+0xf6>
    14d0:	f7 01       	movw	r30, r14
    14d2:	93 fd       	sbrc	r25, 3
    14d4:	85 91       	lpm	r24, Z+
    14d6:	93 ff       	sbrs	r25, 3
    14d8:	81 91       	ld	r24, Z+
    14da:	7f 01       	movw	r14, r30
    14dc:	81 11       	cpse	r24, r1
    14de:	b3 cf       	rjmp	.-154    	; 0x1446 <vfprintf+0x5c>
    14e0:	98 2f       	mov	r25, r24
    14e2:	9f 7d       	andi	r25, 0xDF	; 223
    14e4:	95 54       	subi	r25, 0x45	; 69
    14e6:	93 30       	cpi	r25, 0x03	; 3
    14e8:	28 f4       	brcc	.+10     	; 0x14f4 <vfprintf+0x10a>
    14ea:	0c 5f       	subi	r16, 0xFC	; 252
    14ec:	1f 4f       	sbci	r17, 0xFF	; 255
    14ee:	9f e3       	ldi	r25, 0x3F	; 63
    14f0:	99 83       	std	Y+1, r25	; 0x01
    14f2:	0d c0       	rjmp	.+26     	; 0x150e <vfprintf+0x124>
    14f4:	83 36       	cpi	r24, 0x63	; 99
    14f6:	31 f0       	breq	.+12     	; 0x1504 <vfprintf+0x11a>
    14f8:	83 37       	cpi	r24, 0x73	; 115
    14fa:	71 f0       	breq	.+28     	; 0x1518 <vfprintf+0x12e>
    14fc:	83 35       	cpi	r24, 0x53	; 83
    14fe:	09 f0       	breq	.+2      	; 0x1502 <vfprintf+0x118>
    1500:	59 c0       	rjmp	.+178    	; 0x15b4 <vfprintf+0x1ca>
    1502:	21 c0       	rjmp	.+66     	; 0x1546 <vfprintf+0x15c>
    1504:	f8 01       	movw	r30, r16
    1506:	80 81       	ld	r24, Z
    1508:	89 83       	std	Y+1, r24	; 0x01
    150a:	0e 5f       	subi	r16, 0xFE	; 254
    150c:	1f 4f       	sbci	r17, 0xFF	; 255
    150e:	88 24       	eor	r8, r8
    1510:	83 94       	inc	r8
    1512:	91 2c       	mov	r9, r1
    1514:	53 01       	movw	r10, r6
    1516:	13 c0       	rjmp	.+38     	; 0x153e <vfprintf+0x154>
    1518:	28 01       	movw	r4, r16
    151a:	f2 e0       	ldi	r31, 0x02	; 2
    151c:	4f 0e       	add	r4, r31
    151e:	51 1c       	adc	r5, r1
    1520:	f8 01       	movw	r30, r16
    1522:	a0 80       	ld	r10, Z
    1524:	b1 80       	ldd	r11, Z+1	; 0x01
    1526:	36 fe       	sbrs	r3, 6
    1528:	03 c0       	rjmp	.+6      	; 0x1530 <vfprintf+0x146>
    152a:	69 2d       	mov	r22, r9
    152c:	70 e0       	ldi	r23, 0x00	; 0
    152e:	02 c0       	rjmp	.+4      	; 0x1534 <vfprintf+0x14a>
    1530:	6f ef       	ldi	r22, 0xFF	; 255
    1532:	7f ef       	ldi	r23, 0xFF	; 255
    1534:	c5 01       	movw	r24, r10
    1536:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <strnlen>
    153a:	4c 01       	movw	r8, r24
    153c:	82 01       	movw	r16, r4
    153e:	f3 2d       	mov	r31, r3
    1540:	ff 77       	andi	r31, 0x7F	; 127
    1542:	3f 2e       	mov	r3, r31
    1544:	16 c0       	rjmp	.+44     	; 0x1572 <vfprintf+0x188>
    1546:	28 01       	movw	r4, r16
    1548:	22 e0       	ldi	r18, 0x02	; 2
    154a:	42 0e       	add	r4, r18
    154c:	51 1c       	adc	r5, r1
    154e:	f8 01       	movw	r30, r16
    1550:	a0 80       	ld	r10, Z
    1552:	b1 80       	ldd	r11, Z+1	; 0x01
    1554:	36 fe       	sbrs	r3, 6
    1556:	03 c0       	rjmp	.+6      	; 0x155e <vfprintf+0x174>
    1558:	69 2d       	mov	r22, r9
    155a:	70 e0       	ldi	r23, 0x00	; 0
    155c:	02 c0       	rjmp	.+4      	; 0x1562 <vfprintf+0x178>
    155e:	6f ef       	ldi	r22, 0xFF	; 255
    1560:	7f ef       	ldi	r23, 0xFF	; 255
    1562:	c5 01       	movw	r24, r10
    1564:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <strnlen_P>
    1568:	4c 01       	movw	r8, r24
    156a:	f3 2d       	mov	r31, r3
    156c:	f0 68       	ori	r31, 0x80	; 128
    156e:	3f 2e       	mov	r3, r31
    1570:	82 01       	movw	r16, r4
    1572:	33 fc       	sbrc	r3, 3
    1574:	1b c0       	rjmp	.+54     	; 0x15ac <vfprintf+0x1c2>
    1576:	82 2d       	mov	r24, r2
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	88 16       	cp	r8, r24
    157c:	99 06       	cpc	r9, r25
    157e:	b0 f4       	brcc	.+44     	; 0x15ac <vfprintf+0x1c2>
    1580:	b6 01       	movw	r22, r12
    1582:	80 e2       	ldi	r24, 0x20	; 32
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <fputc>
    158a:	2a 94       	dec	r2
    158c:	f4 cf       	rjmp	.-24     	; 0x1576 <vfprintf+0x18c>
    158e:	f5 01       	movw	r30, r10
    1590:	37 fc       	sbrc	r3, 7
    1592:	85 91       	lpm	r24, Z+
    1594:	37 fe       	sbrs	r3, 7
    1596:	81 91       	ld	r24, Z+
    1598:	5f 01       	movw	r10, r30
    159a:	b6 01       	movw	r22, r12
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <fputc>
    15a2:	21 10       	cpse	r2, r1
    15a4:	2a 94       	dec	r2
    15a6:	21 e0       	ldi	r18, 0x01	; 1
    15a8:	82 1a       	sub	r8, r18
    15aa:	91 08       	sbc	r9, r1
    15ac:	81 14       	cp	r8, r1
    15ae:	91 04       	cpc	r9, r1
    15b0:	71 f7       	brne	.-36     	; 0x158e <vfprintf+0x1a4>
    15b2:	e8 c0       	rjmp	.+464    	; 0x1784 <vfprintf+0x39a>
    15b4:	84 36       	cpi	r24, 0x64	; 100
    15b6:	11 f0       	breq	.+4      	; 0x15bc <vfprintf+0x1d2>
    15b8:	89 36       	cpi	r24, 0x69	; 105
    15ba:	41 f5       	brne	.+80     	; 0x160c <vfprintf+0x222>
    15bc:	f8 01       	movw	r30, r16
    15be:	37 fe       	sbrs	r3, 7
    15c0:	07 c0       	rjmp	.+14     	; 0x15d0 <vfprintf+0x1e6>
    15c2:	60 81       	ld	r22, Z
    15c4:	71 81       	ldd	r23, Z+1	; 0x01
    15c6:	82 81       	ldd	r24, Z+2	; 0x02
    15c8:	93 81       	ldd	r25, Z+3	; 0x03
    15ca:	0c 5f       	subi	r16, 0xFC	; 252
    15cc:	1f 4f       	sbci	r17, 0xFF	; 255
    15ce:	08 c0       	rjmp	.+16     	; 0x15e0 <vfprintf+0x1f6>
    15d0:	60 81       	ld	r22, Z
    15d2:	71 81       	ldd	r23, Z+1	; 0x01
    15d4:	07 2e       	mov	r0, r23
    15d6:	00 0c       	add	r0, r0
    15d8:	88 0b       	sbc	r24, r24
    15da:	99 0b       	sbc	r25, r25
    15dc:	0e 5f       	subi	r16, 0xFE	; 254
    15de:	1f 4f       	sbci	r17, 0xFF	; 255
    15e0:	f3 2d       	mov	r31, r3
    15e2:	ff 76       	andi	r31, 0x6F	; 111
    15e4:	3f 2e       	mov	r3, r31
    15e6:	97 ff       	sbrs	r25, 7
    15e8:	09 c0       	rjmp	.+18     	; 0x15fc <vfprintf+0x212>
    15ea:	90 95       	com	r25
    15ec:	80 95       	com	r24
    15ee:	70 95       	com	r23
    15f0:	61 95       	neg	r22
    15f2:	7f 4f       	sbci	r23, 0xFF	; 255
    15f4:	8f 4f       	sbci	r24, 0xFF	; 255
    15f6:	9f 4f       	sbci	r25, 0xFF	; 255
    15f8:	f0 68       	ori	r31, 0x80	; 128
    15fa:	3f 2e       	mov	r3, r31
    15fc:	2a e0       	ldi	r18, 0x0A	; 10
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	a3 01       	movw	r20, r6
    1602:	0e 94 28 0c 	call	0x1850	; 0x1850 <__ultoa_invert>
    1606:	88 2e       	mov	r8, r24
    1608:	86 18       	sub	r8, r6
    160a:	45 c0       	rjmp	.+138    	; 0x1696 <vfprintf+0x2ac>
    160c:	85 37       	cpi	r24, 0x75	; 117
    160e:	31 f4       	brne	.+12     	; 0x161c <vfprintf+0x232>
    1610:	23 2d       	mov	r18, r3
    1612:	2f 7e       	andi	r18, 0xEF	; 239
    1614:	b2 2e       	mov	r11, r18
    1616:	2a e0       	ldi	r18, 0x0A	; 10
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	25 c0       	rjmp	.+74     	; 0x1666 <vfprintf+0x27c>
    161c:	93 2d       	mov	r25, r3
    161e:	99 7f       	andi	r25, 0xF9	; 249
    1620:	b9 2e       	mov	r11, r25
    1622:	8f 36       	cpi	r24, 0x6F	; 111
    1624:	c1 f0       	breq	.+48     	; 0x1656 <vfprintf+0x26c>
    1626:	18 f4       	brcc	.+6      	; 0x162e <vfprintf+0x244>
    1628:	88 35       	cpi	r24, 0x58	; 88
    162a:	79 f0       	breq	.+30     	; 0x164a <vfprintf+0x260>
    162c:	b5 c0       	rjmp	.+362    	; 0x1798 <vfprintf+0x3ae>
    162e:	80 37       	cpi	r24, 0x70	; 112
    1630:	19 f0       	breq	.+6      	; 0x1638 <vfprintf+0x24e>
    1632:	88 37       	cpi	r24, 0x78	; 120
    1634:	21 f0       	breq	.+8      	; 0x163e <vfprintf+0x254>
    1636:	b0 c0       	rjmp	.+352    	; 0x1798 <vfprintf+0x3ae>
    1638:	e9 2f       	mov	r30, r25
    163a:	e0 61       	ori	r30, 0x10	; 16
    163c:	be 2e       	mov	r11, r30
    163e:	b4 fe       	sbrs	r11, 4
    1640:	0d c0       	rjmp	.+26     	; 0x165c <vfprintf+0x272>
    1642:	fb 2d       	mov	r31, r11
    1644:	f4 60       	ori	r31, 0x04	; 4
    1646:	bf 2e       	mov	r11, r31
    1648:	09 c0       	rjmp	.+18     	; 0x165c <vfprintf+0x272>
    164a:	34 fe       	sbrs	r3, 4
    164c:	0a c0       	rjmp	.+20     	; 0x1662 <vfprintf+0x278>
    164e:	29 2f       	mov	r18, r25
    1650:	26 60       	ori	r18, 0x06	; 6
    1652:	b2 2e       	mov	r11, r18
    1654:	06 c0       	rjmp	.+12     	; 0x1662 <vfprintf+0x278>
    1656:	28 e0       	ldi	r18, 0x08	; 8
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	05 c0       	rjmp	.+10     	; 0x1666 <vfprintf+0x27c>
    165c:	20 e1       	ldi	r18, 0x10	; 16
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	02 c0       	rjmp	.+4      	; 0x1666 <vfprintf+0x27c>
    1662:	20 e1       	ldi	r18, 0x10	; 16
    1664:	32 e0       	ldi	r19, 0x02	; 2
    1666:	f8 01       	movw	r30, r16
    1668:	b7 fe       	sbrs	r11, 7
    166a:	07 c0       	rjmp	.+14     	; 0x167a <vfprintf+0x290>
    166c:	60 81       	ld	r22, Z
    166e:	71 81       	ldd	r23, Z+1	; 0x01
    1670:	82 81       	ldd	r24, Z+2	; 0x02
    1672:	93 81       	ldd	r25, Z+3	; 0x03
    1674:	0c 5f       	subi	r16, 0xFC	; 252
    1676:	1f 4f       	sbci	r17, 0xFF	; 255
    1678:	06 c0       	rjmp	.+12     	; 0x1686 <vfprintf+0x29c>
    167a:	60 81       	ld	r22, Z
    167c:	71 81       	ldd	r23, Z+1	; 0x01
    167e:	80 e0       	ldi	r24, 0x00	; 0
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	0e 5f       	subi	r16, 0xFE	; 254
    1684:	1f 4f       	sbci	r17, 0xFF	; 255
    1686:	a3 01       	movw	r20, r6
    1688:	0e 94 28 0c 	call	0x1850	; 0x1850 <__ultoa_invert>
    168c:	88 2e       	mov	r8, r24
    168e:	86 18       	sub	r8, r6
    1690:	fb 2d       	mov	r31, r11
    1692:	ff 77       	andi	r31, 0x7F	; 127
    1694:	3f 2e       	mov	r3, r31
    1696:	36 fe       	sbrs	r3, 6
    1698:	0d c0       	rjmp	.+26     	; 0x16b4 <vfprintf+0x2ca>
    169a:	23 2d       	mov	r18, r3
    169c:	2e 7f       	andi	r18, 0xFE	; 254
    169e:	a2 2e       	mov	r10, r18
    16a0:	89 14       	cp	r8, r9
    16a2:	58 f4       	brcc	.+22     	; 0x16ba <vfprintf+0x2d0>
    16a4:	34 fe       	sbrs	r3, 4
    16a6:	0b c0       	rjmp	.+22     	; 0x16be <vfprintf+0x2d4>
    16a8:	32 fc       	sbrc	r3, 2
    16aa:	09 c0       	rjmp	.+18     	; 0x16be <vfprintf+0x2d4>
    16ac:	83 2d       	mov	r24, r3
    16ae:	8e 7e       	andi	r24, 0xEE	; 238
    16b0:	a8 2e       	mov	r10, r24
    16b2:	05 c0       	rjmp	.+10     	; 0x16be <vfprintf+0x2d4>
    16b4:	b8 2c       	mov	r11, r8
    16b6:	a3 2c       	mov	r10, r3
    16b8:	03 c0       	rjmp	.+6      	; 0x16c0 <vfprintf+0x2d6>
    16ba:	b8 2c       	mov	r11, r8
    16bc:	01 c0       	rjmp	.+2      	; 0x16c0 <vfprintf+0x2d6>
    16be:	b9 2c       	mov	r11, r9
    16c0:	a4 fe       	sbrs	r10, 4
    16c2:	0f c0       	rjmp	.+30     	; 0x16e2 <vfprintf+0x2f8>
    16c4:	fe 01       	movw	r30, r28
    16c6:	e8 0d       	add	r30, r8
    16c8:	f1 1d       	adc	r31, r1
    16ca:	80 81       	ld	r24, Z
    16cc:	80 33       	cpi	r24, 0x30	; 48
    16ce:	21 f4       	brne	.+8      	; 0x16d8 <vfprintf+0x2ee>
    16d0:	9a 2d       	mov	r25, r10
    16d2:	99 7e       	andi	r25, 0xE9	; 233
    16d4:	a9 2e       	mov	r10, r25
    16d6:	09 c0       	rjmp	.+18     	; 0x16ea <vfprintf+0x300>
    16d8:	a2 fe       	sbrs	r10, 2
    16da:	06 c0       	rjmp	.+12     	; 0x16e8 <vfprintf+0x2fe>
    16dc:	b3 94       	inc	r11
    16de:	b3 94       	inc	r11
    16e0:	04 c0       	rjmp	.+8      	; 0x16ea <vfprintf+0x300>
    16e2:	8a 2d       	mov	r24, r10
    16e4:	86 78       	andi	r24, 0x86	; 134
    16e6:	09 f0       	breq	.+2      	; 0x16ea <vfprintf+0x300>
    16e8:	b3 94       	inc	r11
    16ea:	a3 fc       	sbrc	r10, 3
    16ec:	11 c0       	rjmp	.+34     	; 0x1710 <vfprintf+0x326>
    16ee:	a0 fe       	sbrs	r10, 0
    16f0:	06 c0       	rjmp	.+12     	; 0x16fe <vfprintf+0x314>
    16f2:	b2 14       	cp	r11, r2
    16f4:	88 f4       	brcc	.+34     	; 0x1718 <vfprintf+0x32e>
    16f6:	28 0c       	add	r2, r8
    16f8:	92 2c       	mov	r9, r2
    16fa:	9b 18       	sub	r9, r11
    16fc:	0e c0       	rjmp	.+28     	; 0x171a <vfprintf+0x330>
    16fe:	b2 14       	cp	r11, r2
    1700:	60 f4       	brcc	.+24     	; 0x171a <vfprintf+0x330>
    1702:	b6 01       	movw	r22, r12
    1704:	80 e2       	ldi	r24, 0x20	; 32
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <fputc>
    170c:	b3 94       	inc	r11
    170e:	f7 cf       	rjmp	.-18     	; 0x16fe <vfprintf+0x314>
    1710:	b2 14       	cp	r11, r2
    1712:	18 f4       	brcc	.+6      	; 0x171a <vfprintf+0x330>
    1714:	2b 18       	sub	r2, r11
    1716:	02 c0       	rjmp	.+4      	; 0x171c <vfprintf+0x332>
    1718:	98 2c       	mov	r9, r8
    171a:	21 2c       	mov	r2, r1
    171c:	a4 fe       	sbrs	r10, 4
    171e:	10 c0       	rjmp	.+32     	; 0x1740 <vfprintf+0x356>
    1720:	b6 01       	movw	r22, r12
    1722:	80 e3       	ldi	r24, 0x30	; 48
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <fputc>
    172a:	a2 fe       	sbrs	r10, 2
    172c:	17 c0       	rjmp	.+46     	; 0x175c <vfprintf+0x372>
    172e:	a1 fc       	sbrc	r10, 1
    1730:	03 c0       	rjmp	.+6      	; 0x1738 <vfprintf+0x34e>
    1732:	88 e7       	ldi	r24, 0x78	; 120
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	02 c0       	rjmp	.+4      	; 0x173c <vfprintf+0x352>
    1738:	88 e5       	ldi	r24, 0x58	; 88
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	b6 01       	movw	r22, r12
    173e:	0c c0       	rjmp	.+24     	; 0x1758 <vfprintf+0x36e>
    1740:	8a 2d       	mov	r24, r10
    1742:	86 78       	andi	r24, 0x86	; 134
    1744:	59 f0       	breq	.+22     	; 0x175c <vfprintf+0x372>
    1746:	a1 fe       	sbrs	r10, 1
    1748:	02 c0       	rjmp	.+4      	; 0x174e <vfprintf+0x364>
    174a:	8b e2       	ldi	r24, 0x2B	; 43
    174c:	01 c0       	rjmp	.+2      	; 0x1750 <vfprintf+0x366>
    174e:	80 e2       	ldi	r24, 0x20	; 32
    1750:	a7 fc       	sbrc	r10, 7
    1752:	8d e2       	ldi	r24, 0x2D	; 45
    1754:	b6 01       	movw	r22, r12
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <fputc>
    175c:	89 14       	cp	r8, r9
    175e:	38 f4       	brcc	.+14     	; 0x176e <vfprintf+0x384>
    1760:	b6 01       	movw	r22, r12
    1762:	80 e3       	ldi	r24, 0x30	; 48
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <fputc>
    176a:	9a 94       	dec	r9
    176c:	f7 cf       	rjmp	.-18     	; 0x175c <vfprintf+0x372>
    176e:	8a 94       	dec	r8
    1770:	f3 01       	movw	r30, r6
    1772:	e8 0d       	add	r30, r8
    1774:	f1 1d       	adc	r31, r1
    1776:	80 81       	ld	r24, Z
    1778:	b6 01       	movw	r22, r12
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <fputc>
    1780:	81 10       	cpse	r8, r1
    1782:	f5 cf       	rjmp	.-22     	; 0x176e <vfprintf+0x384>
    1784:	22 20       	and	r2, r2
    1786:	09 f4       	brne	.+2      	; 0x178a <vfprintf+0x3a0>
    1788:	42 ce       	rjmp	.-892    	; 0x140e <vfprintf+0x24>
    178a:	b6 01       	movw	r22, r12
    178c:	80 e2       	ldi	r24, 0x20	; 32
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <fputc>
    1794:	2a 94       	dec	r2
    1796:	f6 cf       	rjmp	.-20     	; 0x1784 <vfprintf+0x39a>
    1798:	f6 01       	movw	r30, r12
    179a:	86 81       	ldd	r24, Z+6	; 0x06
    179c:	97 81       	ldd	r25, Z+7	; 0x07
    179e:	02 c0       	rjmp	.+4      	; 0x17a4 <vfprintf+0x3ba>
    17a0:	8f ef       	ldi	r24, 0xFF	; 255
    17a2:	9f ef       	ldi	r25, 0xFF	; 255
    17a4:	2b 96       	adiw	r28, 0x0b	; 11
    17a6:	e2 e1       	ldi	r30, 0x12	; 18
    17a8:	0c 94 d4 0c 	jmp	0x19a8	; 0x19a8 <__epilogue_restores__>

000017ac <strnlen_P>:
    17ac:	fc 01       	movw	r30, r24
    17ae:	05 90       	lpm	r0, Z+
    17b0:	61 50       	subi	r22, 0x01	; 1
    17b2:	70 40       	sbci	r23, 0x00	; 0
    17b4:	01 10       	cpse	r0, r1
    17b6:	d8 f7       	brcc	.-10     	; 0x17ae <strnlen_P+0x2>
    17b8:	80 95       	com	r24
    17ba:	90 95       	com	r25
    17bc:	8e 0f       	add	r24, r30
    17be:	9f 1f       	adc	r25, r31
    17c0:	08 95       	ret

000017c2 <strnlen>:
    17c2:	fc 01       	movw	r30, r24
    17c4:	61 50       	subi	r22, 0x01	; 1
    17c6:	70 40       	sbci	r23, 0x00	; 0
    17c8:	01 90       	ld	r0, Z+
    17ca:	01 10       	cpse	r0, r1
    17cc:	d8 f7       	brcc	.-10     	; 0x17c4 <strnlen+0x2>
    17ce:	80 95       	com	r24
    17d0:	90 95       	com	r25
    17d2:	8e 0f       	add	r24, r30
    17d4:	9f 1f       	adc	r25, r31
    17d6:	08 95       	ret

000017d8 <fputc>:
    17d8:	0f 93       	push	r16
    17da:	1f 93       	push	r17
    17dc:	cf 93       	push	r28
    17de:	df 93       	push	r29
    17e0:	fb 01       	movw	r30, r22
    17e2:	23 81       	ldd	r18, Z+3	; 0x03
    17e4:	21 fd       	sbrc	r18, 1
    17e6:	03 c0       	rjmp	.+6      	; 0x17ee <fputc+0x16>
    17e8:	8f ef       	ldi	r24, 0xFF	; 255
    17ea:	9f ef       	ldi	r25, 0xFF	; 255
    17ec:	2c c0       	rjmp	.+88     	; 0x1846 <fputc+0x6e>
    17ee:	22 ff       	sbrs	r18, 2
    17f0:	16 c0       	rjmp	.+44     	; 0x181e <fputc+0x46>
    17f2:	46 81       	ldd	r20, Z+6	; 0x06
    17f4:	57 81       	ldd	r21, Z+7	; 0x07
    17f6:	24 81       	ldd	r18, Z+4	; 0x04
    17f8:	35 81       	ldd	r19, Z+5	; 0x05
    17fa:	42 17       	cp	r20, r18
    17fc:	53 07       	cpc	r21, r19
    17fe:	44 f4       	brge	.+16     	; 0x1810 <fputc+0x38>
    1800:	a0 81       	ld	r26, Z
    1802:	b1 81       	ldd	r27, Z+1	; 0x01
    1804:	9d 01       	movw	r18, r26
    1806:	2f 5f       	subi	r18, 0xFF	; 255
    1808:	3f 4f       	sbci	r19, 0xFF	; 255
    180a:	31 83       	std	Z+1, r19	; 0x01
    180c:	20 83       	st	Z, r18
    180e:	8c 93       	st	X, r24
    1810:	26 81       	ldd	r18, Z+6	; 0x06
    1812:	37 81       	ldd	r19, Z+7	; 0x07
    1814:	2f 5f       	subi	r18, 0xFF	; 255
    1816:	3f 4f       	sbci	r19, 0xFF	; 255
    1818:	37 83       	std	Z+7, r19	; 0x07
    181a:	26 83       	std	Z+6, r18	; 0x06
    181c:	14 c0       	rjmp	.+40     	; 0x1846 <fputc+0x6e>
    181e:	8b 01       	movw	r16, r22
    1820:	ec 01       	movw	r28, r24
    1822:	fb 01       	movw	r30, r22
    1824:	00 84       	ldd	r0, Z+8	; 0x08
    1826:	f1 85       	ldd	r31, Z+9	; 0x09
    1828:	e0 2d       	mov	r30, r0
    182a:	09 95       	icall
    182c:	89 2b       	or	r24, r25
    182e:	e1 f6       	brne	.-72     	; 0x17e8 <fputc+0x10>
    1830:	d8 01       	movw	r26, r16
    1832:	16 96       	adiw	r26, 0x06	; 6
    1834:	8d 91       	ld	r24, X+
    1836:	9c 91       	ld	r25, X
    1838:	17 97       	sbiw	r26, 0x07	; 7
    183a:	01 96       	adiw	r24, 0x01	; 1
    183c:	17 96       	adiw	r26, 0x07	; 7
    183e:	9c 93       	st	X, r25
    1840:	8e 93       	st	-X, r24
    1842:	16 97       	sbiw	r26, 0x06	; 6
    1844:	ce 01       	movw	r24, r28
    1846:	df 91       	pop	r29
    1848:	cf 91       	pop	r28
    184a:	1f 91       	pop	r17
    184c:	0f 91       	pop	r16
    184e:	08 95       	ret

00001850 <__ultoa_invert>:
    1850:	fa 01       	movw	r30, r20
    1852:	aa 27       	eor	r26, r26
    1854:	28 30       	cpi	r18, 0x08	; 8
    1856:	51 f1       	breq	.+84     	; 0x18ac <__ultoa_invert+0x5c>
    1858:	20 31       	cpi	r18, 0x10	; 16
    185a:	81 f1       	breq	.+96     	; 0x18bc <__ultoa_invert+0x6c>
    185c:	e8 94       	clt
    185e:	6f 93       	push	r22
    1860:	6e 7f       	andi	r22, 0xFE	; 254
    1862:	6e 5f       	subi	r22, 0xFE	; 254
    1864:	7f 4f       	sbci	r23, 0xFF	; 255
    1866:	8f 4f       	sbci	r24, 0xFF	; 255
    1868:	9f 4f       	sbci	r25, 0xFF	; 255
    186a:	af 4f       	sbci	r26, 0xFF	; 255
    186c:	b1 e0       	ldi	r27, 0x01	; 1
    186e:	3e d0       	rcall	.+124    	; 0x18ec <__ultoa_invert+0x9c>
    1870:	b4 e0       	ldi	r27, 0x04	; 4
    1872:	3c d0       	rcall	.+120    	; 0x18ec <__ultoa_invert+0x9c>
    1874:	67 0f       	add	r22, r23
    1876:	78 1f       	adc	r23, r24
    1878:	89 1f       	adc	r24, r25
    187a:	9a 1f       	adc	r25, r26
    187c:	a1 1d       	adc	r26, r1
    187e:	68 0f       	add	r22, r24
    1880:	79 1f       	adc	r23, r25
    1882:	8a 1f       	adc	r24, r26
    1884:	91 1d       	adc	r25, r1
    1886:	a1 1d       	adc	r26, r1
    1888:	6a 0f       	add	r22, r26
    188a:	71 1d       	adc	r23, r1
    188c:	81 1d       	adc	r24, r1
    188e:	91 1d       	adc	r25, r1
    1890:	a1 1d       	adc	r26, r1
    1892:	20 d0       	rcall	.+64     	; 0x18d4 <__ultoa_invert+0x84>
    1894:	09 f4       	brne	.+2      	; 0x1898 <__ultoa_invert+0x48>
    1896:	68 94       	set
    1898:	3f 91       	pop	r19
    189a:	2a e0       	ldi	r18, 0x0A	; 10
    189c:	26 9f       	mul	r18, r22
    189e:	11 24       	eor	r1, r1
    18a0:	30 19       	sub	r19, r0
    18a2:	30 5d       	subi	r19, 0xD0	; 208
    18a4:	31 93       	st	Z+, r19
    18a6:	de f6       	brtc	.-74     	; 0x185e <__ultoa_invert+0xe>
    18a8:	cf 01       	movw	r24, r30
    18aa:	08 95       	ret
    18ac:	46 2f       	mov	r20, r22
    18ae:	47 70       	andi	r20, 0x07	; 7
    18b0:	40 5d       	subi	r20, 0xD0	; 208
    18b2:	41 93       	st	Z+, r20
    18b4:	b3 e0       	ldi	r27, 0x03	; 3
    18b6:	0f d0       	rcall	.+30     	; 0x18d6 <__ultoa_invert+0x86>
    18b8:	c9 f7       	brne	.-14     	; 0x18ac <__ultoa_invert+0x5c>
    18ba:	f6 cf       	rjmp	.-20     	; 0x18a8 <__ultoa_invert+0x58>
    18bc:	46 2f       	mov	r20, r22
    18be:	4f 70       	andi	r20, 0x0F	; 15
    18c0:	40 5d       	subi	r20, 0xD0	; 208
    18c2:	4a 33       	cpi	r20, 0x3A	; 58
    18c4:	18 f0       	brcs	.+6      	; 0x18cc <__ultoa_invert+0x7c>
    18c6:	49 5d       	subi	r20, 0xD9	; 217
    18c8:	31 fd       	sbrc	r19, 1
    18ca:	40 52       	subi	r20, 0x20	; 32
    18cc:	41 93       	st	Z+, r20
    18ce:	02 d0       	rcall	.+4      	; 0x18d4 <__ultoa_invert+0x84>
    18d0:	a9 f7       	brne	.-22     	; 0x18bc <__ultoa_invert+0x6c>
    18d2:	ea cf       	rjmp	.-44     	; 0x18a8 <__ultoa_invert+0x58>
    18d4:	b4 e0       	ldi	r27, 0x04	; 4
    18d6:	a6 95       	lsr	r26
    18d8:	97 95       	ror	r25
    18da:	87 95       	ror	r24
    18dc:	77 95       	ror	r23
    18de:	67 95       	ror	r22
    18e0:	ba 95       	dec	r27
    18e2:	c9 f7       	brne	.-14     	; 0x18d6 <__ultoa_invert+0x86>
    18e4:	00 97       	sbiw	r24, 0x00	; 0
    18e6:	61 05       	cpc	r22, r1
    18e8:	71 05       	cpc	r23, r1
    18ea:	08 95       	ret
    18ec:	9b 01       	movw	r18, r22
    18ee:	ac 01       	movw	r20, r24
    18f0:	0a 2e       	mov	r0, r26
    18f2:	06 94       	lsr	r0
    18f4:	57 95       	ror	r21
    18f6:	47 95       	ror	r20
    18f8:	37 95       	ror	r19
    18fa:	27 95       	ror	r18
    18fc:	ba 95       	dec	r27
    18fe:	c9 f7       	brne	.-14     	; 0x18f2 <__ultoa_invert+0xa2>
    1900:	62 0f       	add	r22, r18
    1902:	73 1f       	adc	r23, r19
    1904:	84 1f       	adc	r24, r20
    1906:	95 1f       	adc	r25, r21
    1908:	a0 1d       	adc	r26, r0
    190a:	08 95       	ret

0000190c <__divmodsi4>:
    190c:	05 2e       	mov	r0, r21
    190e:	97 fb       	bst	r25, 7
    1910:	1e f4       	brtc	.+6      	; 0x1918 <__divmodsi4+0xc>
    1912:	00 94       	com	r0
    1914:	0e 94 9d 0c 	call	0x193a	; 0x193a <__negsi2>
    1918:	57 fd       	sbrc	r21, 7
    191a:	07 d0       	rcall	.+14     	; 0x192a <__divmodsi4_neg2>
    191c:	0e 94 ef 0c 	call	0x19de	; 0x19de <__udivmodsi4>
    1920:	07 fc       	sbrc	r0, 7
    1922:	03 d0       	rcall	.+6      	; 0x192a <__divmodsi4_neg2>
    1924:	4e f4       	brtc	.+18     	; 0x1938 <__divmodsi4_exit>
    1926:	0c 94 9d 0c 	jmp	0x193a	; 0x193a <__negsi2>

0000192a <__divmodsi4_neg2>:
    192a:	50 95       	com	r21
    192c:	40 95       	com	r20
    192e:	30 95       	com	r19
    1930:	21 95       	neg	r18
    1932:	3f 4f       	sbci	r19, 0xFF	; 255
    1934:	4f 4f       	sbci	r20, 0xFF	; 255
    1936:	5f 4f       	sbci	r21, 0xFF	; 255

00001938 <__divmodsi4_exit>:
    1938:	08 95       	ret

0000193a <__negsi2>:
    193a:	90 95       	com	r25
    193c:	80 95       	com	r24
    193e:	70 95       	com	r23
    1940:	61 95       	neg	r22
    1942:	7f 4f       	sbci	r23, 0xFF	; 255
    1944:	8f 4f       	sbci	r24, 0xFF	; 255
    1946:	9f 4f       	sbci	r25, 0xFF	; 255
    1948:	08 95       	ret

0000194a <__muluhisi3>:
    194a:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <__umulhisi3>
    194e:	a5 9f       	mul	r26, r21
    1950:	90 0d       	add	r25, r0
    1952:	b4 9f       	mul	r27, r20
    1954:	90 0d       	add	r25, r0
    1956:	a4 9f       	mul	r26, r20
    1958:	80 0d       	add	r24, r0
    195a:	91 1d       	adc	r25, r1
    195c:	11 24       	eor	r1, r1
    195e:	08 95       	ret

00001960 <__mulshisi3>:
    1960:	b7 ff       	sbrs	r27, 7
    1962:	0c 94 a5 0c 	jmp	0x194a	; 0x194a <__muluhisi3>

00001966 <__mulohisi3>:
    1966:	0e 94 a5 0c 	call	0x194a	; 0x194a <__muluhisi3>
    196a:	82 1b       	sub	r24, r18
    196c:	93 0b       	sbc	r25, r19
    196e:	08 95       	ret

00001970 <__prologue_saves__>:
    1970:	2f 92       	push	r2
    1972:	3f 92       	push	r3
    1974:	4f 92       	push	r4
    1976:	5f 92       	push	r5
    1978:	6f 92       	push	r6
    197a:	7f 92       	push	r7
    197c:	8f 92       	push	r8
    197e:	9f 92       	push	r9
    1980:	af 92       	push	r10
    1982:	bf 92       	push	r11
    1984:	cf 92       	push	r12
    1986:	df 92       	push	r13
    1988:	ef 92       	push	r14
    198a:	ff 92       	push	r15
    198c:	0f 93       	push	r16
    198e:	1f 93       	push	r17
    1990:	cf 93       	push	r28
    1992:	df 93       	push	r29
    1994:	cd b7       	in	r28, 0x3d	; 61
    1996:	de b7       	in	r29, 0x3e	; 62
    1998:	ca 1b       	sub	r28, r26
    199a:	db 0b       	sbc	r29, r27
    199c:	0f b6       	in	r0, 0x3f	; 63
    199e:	f8 94       	cli
    19a0:	de bf       	out	0x3e, r29	; 62
    19a2:	0f be       	out	0x3f, r0	; 63
    19a4:	cd bf       	out	0x3d, r28	; 61
    19a6:	09 94       	ijmp

000019a8 <__epilogue_restores__>:
    19a8:	2a 88       	ldd	r2, Y+18	; 0x12
    19aa:	39 88       	ldd	r3, Y+17	; 0x11
    19ac:	48 88       	ldd	r4, Y+16	; 0x10
    19ae:	5f 84       	ldd	r5, Y+15	; 0x0f
    19b0:	6e 84       	ldd	r6, Y+14	; 0x0e
    19b2:	7d 84       	ldd	r7, Y+13	; 0x0d
    19b4:	8c 84       	ldd	r8, Y+12	; 0x0c
    19b6:	9b 84       	ldd	r9, Y+11	; 0x0b
    19b8:	aa 84       	ldd	r10, Y+10	; 0x0a
    19ba:	b9 84       	ldd	r11, Y+9	; 0x09
    19bc:	c8 84       	ldd	r12, Y+8	; 0x08
    19be:	df 80       	ldd	r13, Y+7	; 0x07
    19c0:	ee 80       	ldd	r14, Y+6	; 0x06
    19c2:	fd 80       	ldd	r15, Y+5	; 0x05
    19c4:	0c 81       	ldd	r16, Y+4	; 0x04
    19c6:	1b 81       	ldd	r17, Y+3	; 0x03
    19c8:	aa 81       	ldd	r26, Y+2	; 0x02
    19ca:	b9 81       	ldd	r27, Y+1	; 0x01
    19cc:	ce 0f       	add	r28, r30
    19ce:	d1 1d       	adc	r29, r1
    19d0:	0f b6       	in	r0, 0x3f	; 63
    19d2:	f8 94       	cli
    19d4:	de bf       	out	0x3e, r29	; 62
    19d6:	0f be       	out	0x3f, r0	; 63
    19d8:	cd bf       	out	0x3d, r28	; 61
    19da:	ed 01       	movw	r28, r26
    19dc:	08 95       	ret

000019de <__udivmodsi4>:
    19de:	a1 e2       	ldi	r26, 0x21	; 33
    19e0:	1a 2e       	mov	r1, r26
    19e2:	aa 1b       	sub	r26, r26
    19e4:	bb 1b       	sub	r27, r27
    19e6:	fd 01       	movw	r30, r26
    19e8:	0d c0       	rjmp	.+26     	; 0x1a04 <__udivmodsi4_ep>

000019ea <__udivmodsi4_loop>:
    19ea:	aa 1f       	adc	r26, r26
    19ec:	bb 1f       	adc	r27, r27
    19ee:	ee 1f       	adc	r30, r30
    19f0:	ff 1f       	adc	r31, r31
    19f2:	a2 17       	cp	r26, r18
    19f4:	b3 07       	cpc	r27, r19
    19f6:	e4 07       	cpc	r30, r20
    19f8:	f5 07       	cpc	r31, r21
    19fa:	20 f0       	brcs	.+8      	; 0x1a04 <__udivmodsi4_ep>
    19fc:	a2 1b       	sub	r26, r18
    19fe:	b3 0b       	sbc	r27, r19
    1a00:	e4 0b       	sbc	r30, r20
    1a02:	f5 0b       	sbc	r31, r21

00001a04 <__udivmodsi4_ep>:
    1a04:	66 1f       	adc	r22, r22
    1a06:	77 1f       	adc	r23, r23
    1a08:	88 1f       	adc	r24, r24
    1a0a:	99 1f       	adc	r25, r25
    1a0c:	1a 94       	dec	r1
    1a0e:	69 f7       	brne	.-38     	; 0x19ea <__udivmodsi4_loop>
    1a10:	60 95       	com	r22
    1a12:	70 95       	com	r23
    1a14:	80 95       	com	r24
    1a16:	90 95       	com	r25
    1a18:	9b 01       	movw	r18, r22
    1a1a:	ac 01       	movw	r20, r24
    1a1c:	bd 01       	movw	r22, r26
    1a1e:	cf 01       	movw	r24, r30
    1a20:	08 95       	ret

00001a22 <__umulhisi3>:
    1a22:	a2 9f       	mul	r26, r18
    1a24:	b0 01       	movw	r22, r0
    1a26:	b3 9f       	mul	r27, r19
    1a28:	c0 01       	movw	r24, r0
    1a2a:	a3 9f       	mul	r26, r19
    1a2c:	70 0d       	add	r23, r0
    1a2e:	81 1d       	adc	r24, r1
    1a30:	11 24       	eor	r1, r1
    1a32:	91 1d       	adc	r25, r1
    1a34:	b2 9f       	mul	r27, r18
    1a36:	70 0d       	add	r23, r0
    1a38:	81 1d       	adc	r24, r1
    1a3a:	11 24       	eor	r1, r1
    1a3c:	91 1d       	adc	r25, r1
    1a3e:	08 95       	ret

00001a40 <_exit>:
    1a40:	f8 94       	cli

00001a42 <__stop_program>:
    1a42:	ff cf       	rjmp	.-2      	; 0x1a42 <__stop_program>
