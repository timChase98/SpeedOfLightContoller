
speedOfLight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001d8  00800100  000035de  00003672  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000035de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003f  008002d8  008002d8  0000384a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000384a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000038a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  000038e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003e0f  00000000  00000000  00003a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ea2  00000000  00000000  0000786f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002076  00000000  00000000  00008711  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000650  00000000  00000000  0000a788  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009b7  00000000  00000000  0000add8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000025a8  00000000  00000000  0000b78f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000558  00000000  00000000  0000dd37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
       4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
       8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
       c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      10:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      14:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      18:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      1c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      20:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      24:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      28:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      2c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      30:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      34:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      38:	0c 94 b9 02 	jmp	0x572	; 0x572 <__vector_14>
      3c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      40:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      44:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <__vector_17>
      48:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      4c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      50:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      54:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      58:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      5c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      68:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      6c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      70:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      74:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      78:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      7c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      80:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      84:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__vector_33>
      88:	0c 94 4e 02 	jmp	0x49c	; 0x49c <__vector_34>
      8c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      90:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      94:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      98:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      9c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      a0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      a4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      a8:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__vector_42>
      ac:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      b0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      b4:	88 0d       	add	r24, r8
      b6:	c1 0e       	add	r12, r17
      b8:	fc 0f       	add	r31, r28
      ba:	b4 10       	cpse	r11, r4
      bc:	6c 11       	cpse	r22, r12
      be:	a7 12       	cpse	r10, r23
      c0:	5f 13       	cpse	r21, r31

000000c2 <__ctors_end>:
      c2:	11 24       	eor	r1, r1
      c4:	1f be       	out	0x3f, r1	; 63
      c6:	cf ef       	ldi	r28, 0xFF	; 255
      c8:	d8 e0       	ldi	r29, 0x08	; 8
      ca:	de bf       	out	0x3e, r29	; 62
      cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_copy_data>:
      ce:	12 e0       	ldi	r17, 0x02	; 2
      d0:	a0 e0       	ldi	r26, 0x00	; 0
      d2:	b1 e0       	ldi	r27, 0x01	; 1
      d4:	ee ed       	ldi	r30, 0xDE	; 222
      d6:	f5 e3       	ldi	r31, 0x35	; 53
      d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x10>
      da:	05 90       	lpm	r0, Z+
      dc:	0d 92       	st	X+, r0
      de:	a8 3d       	cpi	r26, 0xD8	; 216
      e0:	b1 07       	cpc	r27, r17
      e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0xc>

000000e4 <__do_clear_bss>:
      e4:	23 e0       	ldi	r18, 0x03	; 3
      e6:	a8 ed       	ldi	r26, 0xD8	; 216
      e8:	b2 e0       	ldi	r27, 0x02	; 2
      ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
      ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
      ee:	a7 31       	cpi	r26, 0x17	; 23
      f0:	b2 07       	cpc	r27, r18
      f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>
      f4:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <main>
      f8:	0c 94 ed 1a 	jmp	0x35da	; 0x35da <_exit>

000000fc <__bad_interrupt>:
      fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000100 <spiSetup>:
	
}

void spiSetup(){
	// MOSI and SCK to outputs
	DDRB |= (1<<3)|(1<<5);
     100:	84 b1       	in	r24, 0x04	; 4
     102:	88 62       	ori	r24, 0x28	; 40
     104:	84 b9       	out	0x04, r24	; 4
	// STC int enabled master mode, clk/16
	SPCR0 = (1 << SPIE) | (1 << SPE) | (1 << MSTR) | (1 << SPR0);
     106:	81 ed       	ldi	r24, 0xD1	; 209
     108:	8c bd       	out	0x2c, r24	; 44
     10a:	08 95       	ret

0000010c <tmrSetup>:
	// timer 3 is used to update the LED display as well as read the button matrix.
	// COMPA will trigger the next multiplexing cycle of the led matrices
	// COMPB will read the next line of buttons
	
	// CTC mode clk/1
	TCCR3B = (1 << WGM12) | (1 << CS11);
     10c:	8a e0       	ldi	r24, 0x0A	; 10
     10e:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
	//OCR3A = 3700;
	OCR3A = 3000;
     112:	88 eb       	ldi	r24, 0xB8	; 184
     114:	9b e0       	ldi	r25, 0x0B	; 11
     116:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     11a:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	OCR3B = 1850;
     11e:	8a e3       	ldi	r24, 0x3A	; 58
     120:	97 e0       	ldi	r25, 0x07	; 7
     122:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     126:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	TIMSK3 |= (1 << OCIE3B) | 1 << (OCIE3A);
     12a:	e1 e7       	ldi	r30, 0x71	; 113
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	80 81       	ld	r24, Z
     130:	86 60       	ori	r24, 0x06	; 6
     132:	80 83       	st	Z, r24
	TCNT3 = 0;
     134:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     138:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
     13c:	08 95       	ret

0000013e <buttonsInit>:
									  0x73}; // p


void buttonsInit(){
	// set DDR for button matrix
	DDRD = 0xFF;
     13e:	8f ef       	ldi	r24, 0xFF	; 255
     140:	8a b9       	out	0x0a, r24	; 10
	PORTC = 0xFF;
     142:	88 b9       	out	0x08, r24	; 8
	
	// set DDR for latch and blank pins
	DDRB |= 1 << LED_L;
     144:	20 9a       	sbi	0x04, 0	; 4
	DDRE|= 1 << LED_B;
     146:	6b 9a       	sbi	0x0d, 3	; 13
	DDRE |= 1 << 2; // enable LEDs
     148:	6a 9a       	sbi	0x0d, 2	; 13
	PORTE |= 1 << LED_B;
     14a:	73 9a       	sbi	0x0e, 3	; 14
	
	spiSetup();
     14c:	0e 94 80 00 	call	0x100	; 0x100 <spiSetup>
	tmrSetup();
     150:	0e 94 86 00 	call	0x10c	; 0x10c <tmrSetup>
     154:	08 95       	ret

00000156 <isButtonDown>:
	TIMSK3 |= (1 << OCIE3B) | 1 << (OCIE3A);
	TCNT3 = 0;
}

uint8_t isButtonDown(uint8_t x, uint8_t y){
	return buttonMemory[x] & (1 << y); // may need to change to 1 << (5 - x) test this later
     156:	e8 2f       	mov	r30, r24
     158:	f0 e0       	ldi	r31, 0x00	; 0
     15a:	eb 51       	subi	r30, 0x1B	; 27
     15c:	fd 4f       	sbci	r31, 0xFD	; 253
     15e:	20 81       	ld	r18, Z
     160:	81 e0       	ldi	r24, 0x01	; 1
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	02 c0       	rjmp	.+4      	; 0x16a <isButtonDown+0x14>
     166:	88 0f       	add	r24, r24
     168:	99 1f       	adc	r25, r25
     16a:	6a 95       	dec	r22
     16c:	e2 f7       	brpl	.-8      	; 0x166 <isButtonDown+0x10>
}
     16e:	82 23       	and	r24, r18
     170:	08 95       	ret

00000172 <setButtonLed>:

void setButtonLed(uint8_t x, uint8_t y, uint8_t value){
	if(value){
     172:	44 23       	and	r20, r20
     174:	89 f0       	breq	.+34     	; 0x198 <setButtonLed+0x26>
		ledMemory[9 + y] |= 1 << x;
     176:	e6 2f       	mov	r30, r22
     178:	f0 e0       	ldi	r31, 0x00	; 0
     17a:	ed 5e       	subi	r30, 0xED	; 237
     17c:	fe 4f       	sbci	r31, 0xFE	; 254
     17e:	40 81       	ld	r20, Z
     180:	21 e0       	ldi	r18, 0x01	; 1
     182:	30 e0       	ldi	r19, 0x00	; 0
     184:	b9 01       	movw	r22, r18
     186:	02 c0       	rjmp	.+4      	; 0x18c <setButtonLed+0x1a>
     188:	66 0f       	add	r22, r22
     18a:	77 1f       	adc	r23, r23
     18c:	8a 95       	dec	r24
     18e:	e2 f7       	brpl	.-8      	; 0x188 <setButtonLed+0x16>
     190:	cb 01       	movw	r24, r22
     192:	84 2b       	or	r24, r20
     194:	80 83       	st	Z, r24
		return;
     196:	08 95       	ret
	}
	ledMemory[9 + y] &= ~(1 << x);
     198:	e6 2f       	mov	r30, r22
     19a:	f0 e0       	ldi	r31, 0x00	; 0
     19c:	ed 5e       	subi	r30, 0xED	; 237
     19e:	fe 4f       	sbci	r31, 0xFE	; 254
     1a0:	40 81       	ld	r20, Z
     1a2:	21 e0       	ldi	r18, 0x01	; 1
     1a4:	30 e0       	ldi	r19, 0x00	; 0
     1a6:	b9 01       	movw	r22, r18
     1a8:	02 c0       	rjmp	.+4      	; 0x1ae <setButtonLed+0x3c>
     1aa:	66 0f       	add	r22, r22
     1ac:	77 1f       	adc	r23, r23
     1ae:	8a 95       	dec	r24
     1b0:	e2 f7       	brpl	.-8      	; 0x1aa <setButtonLed+0x38>
     1b2:	cb 01       	movw	r24, r22
     1b4:	80 95       	com	r24
     1b6:	84 23       	and	r24, r20
     1b8:	80 83       	st	Z, r24
     1ba:	08 95       	ret

000001bc <getButtonLed>:
	
}

int getButtonLed(uint8_t x, uint8_t y){
		return (ledMemory[9 + y] >> x) & 0x01;
     1bc:	e6 2f       	mov	r30, r22
     1be:	f0 e0       	ldi	r31, 0x00	; 0
     1c0:	ed 5e       	subi	r30, 0xED	; 237
     1c2:	fe 4f       	sbci	r31, 0xFE	; 254
     1c4:	20 81       	ld	r18, Z
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	a9 01       	movw	r20, r18
     1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <getButtonLed+0x14>
     1cc:	55 95       	asr	r21
     1ce:	47 95       	ror	r20
     1d0:	8a 95       	dec	r24
     1d2:	e2 f7       	brpl	.-8      	; 0x1cc <getButtonLed+0x10>
     1d4:	ca 01       	movw	r24, r20
	
}
     1d6:	81 70       	andi	r24, 0x01	; 1
     1d8:	99 27       	eor	r25, r25
     1da:	08 95       	ret

000001dc <setScore>:

void setScore(uint8_t display, uint16_t value){
     1dc:	cf 93       	push	r28
     1de:	df 93       	push	r29
     1e0:	eb 01       	movw	r28, r22
	ledMemory[3*display] = value % 10;
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	ac 01       	movw	r20, r24
     1e6:	44 0f       	add	r20, r20
     1e8:	55 1f       	adc	r21, r21
     1ea:	48 0f       	add	r20, r24
     1ec:	59 1f       	adc	r21, r25
     1ee:	9b 01       	movw	r18, r22
     1f0:	ad ec       	ldi	r26, 0xCD	; 205
     1f2:	bc ec       	ldi	r27, 0xCC	; 204
     1f4:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <__umulhisi3>
     1f8:	fc 01       	movw	r30, r24
     1fa:	f6 95       	lsr	r31
     1fc:	e7 95       	ror	r30
     1fe:	f6 95       	lsr	r31
     200:	e7 95       	ror	r30
     202:	f6 95       	lsr	r31
     204:	e7 95       	ror	r30
     206:	9f 01       	movw	r18, r30
     208:	22 0f       	add	r18, r18
     20a:	33 1f       	adc	r19, r19
     20c:	cf 01       	movw	r24, r30
     20e:	88 0f       	add	r24, r24
     210:	99 1f       	adc	r25, r25
     212:	88 0f       	add	r24, r24
     214:	99 1f       	adc	r25, r25
     216:	88 0f       	add	r24, r24
     218:	99 1f       	adc	r25, r25
     21a:	82 0f       	add	r24, r18
     21c:	93 1f       	adc	r25, r19
     21e:	9e 01       	movw	r18, r28
     220:	28 1b       	sub	r18, r24
     222:	39 0b       	sbc	r19, r25
     224:	da 01       	movw	r26, r20
     226:	a6 5f       	subi	r26, 0xF6	; 246
     228:	be 4f       	sbci	r27, 0xFE	; 254
     22a:	2c 93       	st	X, r18
	ledMemory[3*display+1] = (value / 10) % 10;
     22c:	9f 01       	movw	r18, r30
     22e:	ad ec       	ldi	r26, 0xCD	; 205
     230:	bc ec       	ldi	r27, 0xCC	; 204
     232:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <__umulhisi3>
     236:	96 95       	lsr	r25
     238:	87 95       	ror	r24
     23a:	96 95       	lsr	r25
     23c:	87 95       	ror	r24
     23e:	96 95       	lsr	r25
     240:	87 95       	ror	r24
     242:	9c 01       	movw	r18, r24
     244:	22 0f       	add	r18, r18
     246:	33 1f       	adc	r19, r19
     248:	88 0f       	add	r24, r24
     24a:	99 1f       	adc	r25, r25
     24c:	88 0f       	add	r24, r24
     24e:	99 1f       	adc	r25, r25
     250:	88 0f       	add	r24, r24
     252:	99 1f       	adc	r25, r25
     254:	82 0f       	add	r24, r18
     256:	93 1f       	adc	r25, r19
     258:	e8 1b       	sub	r30, r24
     25a:	f9 0b       	sbc	r31, r25
     25c:	da 01       	movw	r26, r20
     25e:	a5 5f       	subi	r26, 0xF5	; 245
     260:	be 4f       	sbci	r27, 0xFE	; 254
     262:	ec 93       	st	X, r30
	ledMemory[3*display+2] = (value / 100) % 10;
     264:	9e 01       	movw	r18, r28
     266:	36 95       	lsr	r19
     268:	27 95       	ror	r18
     26a:	36 95       	lsr	r19
     26c:	27 95       	ror	r18
     26e:	ab e7       	ldi	r26, 0x7B	; 123
     270:	b4 e1       	ldi	r27, 0x14	; 20
     272:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <__umulhisi3>
     276:	fc 01       	movw	r30, r24
     278:	f6 95       	lsr	r31
     27a:	e7 95       	ror	r30
     27c:	9f 01       	movw	r18, r30
     27e:	ad ec       	ldi	r26, 0xCD	; 205
     280:	bc ec       	ldi	r27, 0xCC	; 204
     282:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <__umulhisi3>
     286:	96 95       	lsr	r25
     288:	87 95       	ror	r24
     28a:	96 95       	lsr	r25
     28c:	87 95       	ror	r24
     28e:	96 95       	lsr	r25
     290:	87 95       	ror	r24
     292:	9c 01       	movw	r18, r24
     294:	22 0f       	add	r18, r18
     296:	33 1f       	adc	r19, r19
     298:	88 0f       	add	r24, r24
     29a:	99 1f       	adc	r25, r25
     29c:	88 0f       	add	r24, r24
     29e:	99 1f       	adc	r25, r25
     2a0:	88 0f       	add	r24, r24
     2a2:	99 1f       	adc	r25, r25
     2a4:	82 0f       	add	r24, r18
     2a6:	93 1f       	adc	r25, r19
     2a8:	e8 1b       	sub	r30, r24
     2aa:	f9 0b       	sbc	r31, r25
     2ac:	da 01       	movw	r26, r20
     2ae:	a4 5f       	subi	r26, 0xF4	; 244
     2b0:	be 4f       	sbci	r27, 0xFE	; 254
     2b2:	ec 93       	st	X, r30
	
}
     2b4:	df 91       	pop	r29
     2b6:	cf 91       	pop	r28
     2b8:	08 95       	ret

000002ba <setScoreSegment>:

void setScoreSegment(uint8_t segment, uint8_t val){
	ledMemory[segment] = val;
     2ba:	e8 2f       	mov	r30, r24
     2bc:	f0 e0       	ldi	r31, 0x00	; 0
     2be:	e6 5f       	subi	r30, 0xF6	; 246
     2c0:	fe 4f       	sbci	r31, 0xFE	; 254
     2c2:	60 83       	st	Z, r22
     2c4:	08 95       	ret

000002c6 <clearLeds>:
}
	

void clearLeds(uint8_t mode){
     2c6:	1f 93       	push	r17
     2c8:	cf 93       	push	r28
     2ca:	df 93       	push	r29
     2cc:	18 2f       	mov	r17, r24
	for(uint8_t ledx = 0; ledx < 6; ledx++){
     2ce:	d0 e0       	ldi	r29, 0x00	; 0
     2d0:	0b c0       	rjmp	.+22     	; 0x2e8 <clearLeds+0x22>
		for(uint8_t ledy = 0; ledy < 6; ledy++){
			setButtonLed(ledx, ledy, mode);
     2d2:	41 2f       	mov	r20, r17
     2d4:	6c 2f       	mov	r22, r28
     2d6:	8d 2f       	mov	r24, r29
     2d8:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
}
	

void clearLeds(uint8_t mode){
	for(uint8_t ledx = 0; ledx < 6; ledx++){
		for(uint8_t ledy = 0; ledy < 6; ledy++){
     2dc:	cf 5f       	subi	r28, 0xFF	; 255
     2de:	c6 30       	cpi	r28, 0x06	; 6
     2e0:	c1 f7       	brne	.-16     	; 0x2d2 <clearLeds+0xc>
	ledMemory[segment] = val;
}
	

void clearLeds(uint8_t mode){
	for(uint8_t ledx = 0; ledx < 6; ledx++){
     2e2:	df 5f       	subi	r29, 0xFF	; 255
     2e4:	d6 30       	cpi	r29, 0x06	; 6
     2e6:	11 f0       	breq	.+4      	; 0x2ec <clearLeds+0x26>
void setScoreSegment(uint8_t segment, uint8_t val){
	ledMemory[segment] = val;
}
	

void clearLeds(uint8_t mode){
     2e8:	c0 e0       	ldi	r28, 0x00	; 0
     2ea:	f3 cf       	rjmp	.-26     	; 0x2d2 <clearLeds+0xc>
	for(uint8_t ledx = 0; ledx < 6; ledx++){
		for(uint8_t ledy = 0; ledy < 6; ledy++){
			setButtonLed(ledx, ledy, mode);
		}	
	}
}
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	1f 91       	pop	r17
     2f2:	08 95       	ret

000002f4 <__vector_33>:



ISR(TIMER3_COMPA_vect){
     2f4:	1f 92       	push	r1
     2f6:	0f 92       	push	r0
     2f8:	0f b6       	in	r0, 0x3f	; 63
     2fa:	0f 92       	push	r0
     2fc:	11 24       	eor	r1, r1
     2fe:	2f 93       	push	r18
     300:	3f 93       	push	r19
     302:	4f 93       	push	r20
     304:	5f 93       	push	r21
     306:	6f 93       	push	r22
     308:	7f 93       	push	r23
     30a:	8f 93       	push	r24
     30c:	9f 93       	push	r25
     30e:	af 93       	push	r26
     310:	bf 93       	push	r27
     312:	ef 93       	push	r30
     314:	ff 93       	push	r31
	// the row is in the lower nibble and column data is in the upper nibble
	// for each row the two registers need to be set and the other two need to be cleared
	
	// ledData for the matrices are stored as a byte array of the column data
	
	if (muxCounter < 3)
     316:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <muxCounter>
     31a:	83 30       	cpi	r24, 0x03	; 3
     31c:	90 f5       	brcc	.+100    	; 0x382 <__vector_33+0x8e>
	{
		ledData[3] = ((1 << muxCounter)) | ((ledMemory[9 + muxCounter] & 0b00000111)<<4);
     31e:	40 91 d9 02 	lds	r20, 0x02D9	; 0x8002d9 <muxCounter>
     322:	e0 91 d9 02 	lds	r30, 0x02D9	; 0x8002d9 <muxCounter>
     326:	f0 e0       	ldi	r31, 0x00	; 0
     328:	ed 5e       	subi	r30, 0xED	; 237
     32a:	fe 4f       	sbci	r31, 0xFE	; 254
     32c:	20 81       	ld	r18, Z
     32e:	27 70       	andi	r18, 0x07	; 7
     330:	60 e1       	ldi	r22, 0x10	; 16
     332:	26 9f       	mul	r18, r22
     334:	90 01       	movw	r18, r0
     336:	11 24       	eor	r1, r1
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	bc 01       	movw	r22, r24
     33e:	02 c0       	rjmp	.+4      	; 0x344 <__vector_33+0x50>
     340:	66 0f       	add	r22, r22
     342:	77 1f       	adc	r23, r23
     344:	4a 95       	dec	r20
     346:	e2 f7       	brpl	.-8      	; 0x340 <__vector_33+0x4c>
     348:	26 2b       	or	r18, r22
     34a:	a4 e0       	ldi	r26, 0x04	; 4
     34c:	b1 e0       	ldi	r27, 0x01	; 1
     34e:	13 96       	adiw	r26, 0x03	; 3
     350:	2c 93       	st	X, r18
     352:	13 97       	sbiw	r26, 0x03	; 3
		ledData[0] = 0;
     354:	1c 92       	st	X, r1
		ledData[1] = 0;
     356:	11 96       	adiw	r26, 0x01	; 1
     358:	1c 92       	st	X, r1
     35a:	11 97       	sbiw	r26, 0x01	; 1
		ledData[2] = ((1 << muxCounter)) | ((ledMemory[9 + muxCounter] & 0b00111000)<<1);
     35c:	30 91 d9 02 	lds	r19, 0x02D9	; 0x8002d9 <muxCounter>
     360:	e0 91 d9 02 	lds	r30, 0x02D9	; 0x8002d9 <muxCounter>
     364:	f0 e0       	ldi	r31, 0x00	; 0
     366:	ed 5e       	subi	r30, 0xED	; 237
     368:	fe 4f       	sbci	r31, 0xFE	; 254
     36a:	20 81       	ld	r18, Z
     36c:	28 73       	andi	r18, 0x38	; 56
     36e:	22 0f       	add	r18, r18
     370:	02 c0       	rjmp	.+4      	; 0x376 <__vector_33+0x82>
     372:	88 0f       	add	r24, r24
     374:	99 1f       	adc	r25, r25
     376:	3a 95       	dec	r19
     378:	e2 f7       	brpl	.-8      	; 0x372 <__vector_33+0x7e>
     37a:	82 2b       	or	r24, r18
     37c:	12 96       	adiw	r26, 0x02	; 2
     37e:	8c 93       	st	X, r24
     380:	33 c0       	rjmp	.+102    	; 0x3e8 <__vector_33+0xf4>
	}
	else{
		ledData[3] = 0;
     382:	a4 e0       	ldi	r26, 0x04	; 4
     384:	b1 e0       	ldi	r27, 0x01	; 1
     386:	13 96       	adiw	r26, 0x03	; 3
     388:	1c 92       	st	X, r1
     38a:	13 97       	sbiw	r26, 0x03	; 3
		ledData[0] = ((1 << (muxCounter-3))) | ((ledMemory[9 + muxCounter] & 0b00000111)<<4);
     38c:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <muxCounter>
     390:	e0 91 d9 02 	lds	r30, 0x02D9	; 0x8002d9 <muxCounter>
     394:	f0 e0       	ldi	r31, 0x00	; 0
     396:	ed 5e       	subi	r30, 0xED	; 237
     398:	fe 4f       	sbci	r31, 0xFE	; 254
     39a:	90 81       	ld	r25, Z
     39c:	83 50       	subi	r24, 0x03	; 3
     39e:	21 e0       	ldi	r18, 0x01	; 1
     3a0:	30 e0       	ldi	r19, 0x00	; 0
     3a2:	a9 01       	movw	r20, r18
     3a4:	02 c0       	rjmp	.+4      	; 0x3aa <__vector_33+0xb6>
     3a6:	44 0f       	add	r20, r20
     3a8:	55 1f       	adc	r21, r21
     3aa:	8a 95       	dec	r24
     3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <__vector_33+0xb2>
     3ae:	97 70       	andi	r25, 0x07	; 7
     3b0:	70 e1       	ldi	r23, 0x10	; 16
     3b2:	97 9f       	mul	r25, r23
     3b4:	c0 01       	movw	r24, r0
     3b6:	11 24       	eor	r1, r1
     3b8:	84 2b       	or	r24, r20
     3ba:	8c 93       	st	X, r24
		ledData[1] = ((1 << (muxCounter-3))) | ((ledMemory[9 + muxCounter] & 0b00111000)<<1);
     3bc:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <muxCounter>
     3c0:	e0 91 d9 02 	lds	r30, 0x02D9	; 0x8002d9 <muxCounter>
     3c4:	f0 e0       	ldi	r31, 0x00	; 0
     3c6:	ed 5e       	subi	r30, 0xED	; 237
     3c8:	fe 4f       	sbci	r31, 0xFE	; 254
     3ca:	80 81       	ld	r24, Z
     3cc:	93 50       	subi	r25, 0x03	; 3
     3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <__vector_33+0xe0>
     3d0:	22 0f       	add	r18, r18
     3d2:	33 1f       	adc	r19, r19
     3d4:	9a 95       	dec	r25
     3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <__vector_33+0xdc>
     3d8:	88 73       	andi	r24, 0x38	; 56
     3da:	88 0f       	add	r24, r24
     3dc:	28 2b       	or	r18, r24
     3de:	11 96       	adiw	r26, 0x01	; 1
     3e0:	2c 93       	st	X, r18
     3e2:	11 97       	sbiw	r26, 0x01	; 1
		ledData[2] = 0;
     3e4:	12 96       	adiw	r26, 0x02	; 2
     3e6:	1c 92       	st	X, r1
	}
	
	muxCounter = (muxCounter + 1) % 6;
     3e8:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <muxCounter>
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	01 96       	adiw	r24, 0x01	; 1
     3f0:	66 e0       	ldi	r22, 0x06	; 6
     3f2:	70 e0       	ldi	r23, 0x00	; 0
     3f4:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <__divmodhi4>
     3f8:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <muxCounter>
	
	// calculate data for score display
	
	ledData[5] = sevenSegmentDecode[ledMemory[scoreDigitCounter]];
     3fc:	e0 91 da 02 	lds	r30, 0x02DA	; 0x8002da <scoreDigitCounter>
     400:	f0 e0       	ldi	r31, 0x00	; 0
     402:	e6 5f       	subi	r30, 0xF6	; 246
     404:	fe 4f       	sbci	r31, 0xFE	; 254
     406:	e0 81       	ld	r30, Z
     408:	f0 e0       	ldi	r31, 0x00	; 0
     40a:	e9 5d       	subi	r30, 0xD9	; 217
     40c:	fe 4f       	sbci	r31, 0xFE	; 254
     40e:	80 81       	ld	r24, Z
     410:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <ledData+0x5>
	if (scoreDigitCounter == 0){
     414:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <scoreDigitCounter>
     418:	81 11       	cpse	r24, r1
     41a:	07 c0       	rjmp	.+14     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
		ledData[5] |= 1 << 7; // set MSB for D0
     41c:	e4 e0       	ldi	r30, 0x04	; 4
     41e:	f1 e0       	ldi	r31, 0x01	; 1
     420:	85 81       	ldd	r24, Z+5	; 0x05
     422:	80 68       	ori	r24, 0x80	; 128
     424:	85 83       	std	Z+5, r24	; 0x05
		ledData[4] = 0;
     426:	14 82       	std	Z+4, r1	; 0x04
     428:	0c c0       	rjmp	.+24     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
	}
	else{
		ledData[4] = 1 << (scoreDigitCounter - 1);
     42a:	20 91 da 02 	lds	r18, 0x02DA	; 0x8002da <scoreDigitCounter>
     42e:	21 50       	subi	r18, 0x01	; 1
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	02 c0       	rjmp	.+4      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     436:	88 0f       	add	r24, r24
     438:	99 1f       	adc	r25, r25
     43a:	2a 95       	dec	r18
     43c:	e2 f7       	brpl	.-8      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     43e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <ledData+0x4>
	}

	scoreDigitCounter = (scoreDigitCounter + 1) % 9;
     442:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <scoreDigitCounter>
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	01 96       	adiw	r24, 0x01	; 1
     44a:	69 e0       	ldi	r22, 0x09	; 9
     44c:	70 e0       	ldi	r23, 0x00	; 0
     44e:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <__divmodhi4>
     452:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <scoreDigitCounter>
	

	// clear contents of shift register and latch
	PORTB &= ~(1 << LED_L); // set led latch low
     456:	28 98       	cbi	0x05, 0	; 5
	PORTE &= ~(1 << LED_B); // blank leds
     458:	73 98       	cbi	0x0e, 3	; 14
	PORTB |= (1 << LED_L); // set led latch high
     45a:	28 9a       	sbi	0x05, 0	; 5
	PORTE |= (1 << LED_B); // unblank leds
     45c:	73 9a       	sbi	0x0e, 3	; 14
	PORTB &= ~(1 << LED_L); // set led latch low
     45e:	28 98       	cbi	0x05, 0	; 5
	spiByteCounter = 0;
     460:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <__data_end>
	SPDR0 = ledData[spiByteCounter++];
     464:	e0 91 d8 02 	lds	r30, 0x02D8	; 0x8002d8 <__data_end>
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	8e 0f       	add	r24, r30
     46c:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <__data_end>
     470:	f0 e0       	ldi	r31, 0x00	; 0
     472:	ec 5f       	subi	r30, 0xFC	; 252
     474:	fe 4f       	sbci	r31, 0xFE	; 254
     476:	80 81       	ld	r24, Z
     478:	8e bd       	out	0x2e, r24	; 46
}
     47a:	ff 91       	pop	r31
     47c:	ef 91       	pop	r30
     47e:	bf 91       	pop	r27
     480:	af 91       	pop	r26
     482:	9f 91       	pop	r25
     484:	8f 91       	pop	r24
     486:	7f 91       	pop	r23
     488:	6f 91       	pop	r22
     48a:	5f 91       	pop	r21
     48c:	4f 91       	pop	r20
     48e:	3f 91       	pop	r19
     490:	2f 91       	pop	r18
     492:	0f 90       	pop	r0
     494:	0f be       	out	0x3f, r0	; 63
     496:	0f 90       	pop	r0
     498:	1f 90       	pop	r1
     49a:	18 95       	reti

0000049c <__vector_34>:
	PORTD = 0xFF; 
	buttonMemory[muxCounter] = ~PINC;
	
}*/

ISR(TIMER3_COMPB_vect){
     49c:	1f 92       	push	r1
     49e:	0f 92       	push	r0
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	0f 92       	push	r0
     4a4:	11 24       	eor	r1, r1
     4a6:	2f 93       	push	r18
     4a8:	3f 93       	push	r19
     4aa:	8f 93       	push	r24
     4ac:	9f 93       	push	r25
     4ae:	ef 93       	push	r30
     4b0:	ff 93       	push	r31
	DDRD &= ~(1<<(muxCounter+2));
	buttonMemory[muxCounter] = ~PINC; 
	DDRD = 0xFF; 
	*/
	
	DDRD = 0xFF;
     4b2:	3f ef       	ldi	r19, 0xFF	; 255
     4b4:	3a b9       	out	0x0a, r19	; 10
	DDRC = 0x00;
     4b6:	17 b8       	out	0x07, r1	; 7
	
	PORTD = ~(1<<(muxCounter+2));
     4b8:	20 91 d9 02 	lds	r18, 0x02D9	; 0x8002d9 <muxCounter>
     4bc:	2e 5f       	subi	r18, 0xFE	; 254
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <__vector_34+0x2c>
     4c4:	88 0f       	add	r24, r24
     4c6:	99 1f       	adc	r25, r25
     4c8:	2a 95       	dec	r18
     4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <__vector_34+0x28>
     4cc:	80 95       	com	r24
     4ce:	8b b9       	out	0x0b, r24	; 11
	buttonMemory[muxCounter] = ~PINC;
     4d0:	e0 91 d9 02 	lds	r30, 0x02D9	; 0x8002d9 <muxCounter>
     4d4:	f0 e0       	ldi	r31, 0x00	; 0
     4d6:	86 b1       	in	r24, 0x06	; 6
     4d8:	80 95       	com	r24
     4da:	eb 51       	subi	r30, 0x1B	; 27
     4dc:	fd 4f       	sbci	r31, 0xFD	; 253
     4de:	80 83       	st	Z, r24
	PORTD = 0xFF;
     4e0:	3b b9       	out	0x0b, r19	; 11
}
     4e2:	ff 91       	pop	r31
     4e4:	ef 91       	pop	r30
     4e6:	9f 91       	pop	r25
     4e8:	8f 91       	pop	r24
     4ea:	3f 91       	pop	r19
     4ec:	2f 91       	pop	r18
     4ee:	0f 90       	pop	r0
     4f0:	0f be       	out	0x3f, r0	; 63
     4f2:	0f 90       	pop	r0
     4f4:	1f 90       	pop	r1
     4f6:	18 95       	reti

000004f8 <__vector_17>:

ISR(SPI0_STC_vect){
     4f8:	1f 92       	push	r1
     4fa:	0f 92       	push	r0
     4fc:	0f b6       	in	r0, 0x3f	; 63
     4fe:	0f 92       	push	r0
     500:	11 24       	eor	r1, r1
     502:	8f 93       	push	r24
     504:	ef 93       	push	r30
     506:	ff 93       	push	r31
	if (spiByteCounter >= 6){
     508:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <__data_end>
     50c:	86 30       	cpi	r24, 0x06	; 6
     50e:	10 f0       	brcs	.+4      	; 0x514 <__vector_17+0x1c>
		PORTB |= 1 << LED_L; // set led latch high
     510:	28 9a       	sbi	0x05, 0	; 5
		return;
     512:	0b c0       	rjmp	.+22     	; 0x52a <__vector_17+0x32>
	}
	SPDR0 = ledData[spiByteCounter++];
     514:	e0 91 d8 02 	lds	r30, 0x02D8	; 0x8002d8 <__data_end>
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	8e 0f       	add	r24, r30
     51c:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <__data_end>
     520:	f0 e0       	ldi	r31, 0x00	; 0
     522:	ec 5f       	subi	r30, 0xFC	; 252
     524:	fe 4f       	sbci	r31, 0xFE	; 254
     526:	80 81       	ld	r24, Z
     528:	8e bd       	out	0x2e, r24	; 46
}
     52a:	ff 91       	pop	r31
     52c:	ef 91       	pop	r30
     52e:	8f 91       	pop	r24
     530:	0f 90       	pop	r0
     532:	0f be       	out	0x3f, r0	; 63
     534:	0f 90       	pop	r0
     536:	1f 90       	pop	r1
     538:	18 95       	reti

0000053a <uart_putchar>:

static int uart_putchar(char c, FILE *stream);
static FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);

static int uart_putchar(char c, FILE *stream)
{
     53a:	cf 93       	push	r28
     53c:	c8 2f       	mov	r28, r24
	if (c == '\n')
     53e:	8a 30       	cpi	r24, 0x0A	; 10
     540:	19 f4       	brne	.+6      	; 0x548 <uart_putchar+0xe>
	uart_putchar('\r', stream);
     542:	8d e0       	ldi	r24, 0x0D	; 13
     544:	0e 94 9d 02 	call	0x53a	; 0x53a <uart_putchar>
	while(!(UCSR0A &( 1 << UDRE0)));
     548:	e0 ec       	ldi	r30, 0xC0	; 192
     54a:	f0 e0       	ldi	r31, 0x00	; 0
     54c:	80 81       	ld	r24, Z
     54e:	85 ff       	sbrs	r24, 5
     550:	fd cf       	rjmp	.-6      	; 0x54c <uart_putchar+0x12>
	UDR0 = c;
     552:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	return 0;
}
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	cf 91       	pop	r28
     55c:	08 95       	ret

0000055e <init_uart>:

void init_uart(){
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     55e:	88 e1       	ldi	r24, 0x18	; 24
     560:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (3<<UCSZ00);
     564:	86 e0       	ldi	r24, 0x06	; 6
     566:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0L = 51;
     56a:	83 e3       	ldi	r24, 0x33	; 51
     56c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     570:	08 95       	ret

00000572 <__vector_14>:

	}
}

ISR(TIMER0_COMPA_vect)		// audio interrupt
{
     572:	1f 92       	push	r1
     574:	0f 92       	push	r0
     576:	0f b6       	in	r0, 0x3f	; 63
     578:	0f 92       	push	r0
     57a:	11 24       	eor	r1, r1
     57c:	8f 93       	push	r24
     57e:	9f 93       	push	r25
     580:	ef 93       	push	r30
     582:	ff 93       	push	r31
	DDRB |= (1<<1);
     584:	21 9a       	sbi	0x04, 1	; 4
	soundPlaying = 1;
     586:	81 e0       	ldi	r24, 0x01	; 1
     588:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <soundPlaying>
	switch(note_index)
     58c:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <note_index>
     590:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <note_index+0x1>
     594:	86 30       	cpi	r24, 0x06	; 6
     596:	91 05       	cpc	r25, r1
     598:	09 f4       	brne	.+2      	; 0x59c <__vector_14+0x2a>
     59a:	4e c0       	rjmp	.+156    	; 0x638 <__vector_14+0xc6>
     59c:	30 f4       	brcc	.+12     	; 0x5aa <__vector_14+0x38>
     59e:	81 30       	cpi	r24, 0x01	; 1
     5a0:	91 05       	cpc	r25, r1
     5a2:	61 f0       	breq	.+24     	; 0x5bc <__vector_14+0x4a>
     5a4:	03 97       	sbiw	r24, 0x03	; 3
     5a6:	49 f1       	breq	.+82     	; 0x5fa <__vector_14+0x88>
     5a8:	7c c0       	rjmp	.+248    	; 0x6a2 <__vector_14+0x130>
     5aa:	8e 30       	cpi	r24, 0x0E	; 14
     5ac:	91 05       	cpc	r25, r1
     5ae:	09 f4       	brne	.+2      	; 0x5b2 <__vector_14+0x40>
     5b0:	62 c0       	rjmp	.+196    	; 0x676 <__vector_14+0x104>
     5b2:	80 34       	cpi	r24, 0x40	; 64
     5b4:	91 05       	cpc	r25, r1
     5b6:	09 f4       	brne	.+2      	; 0x5ba <__vector_14+0x48>
     5b8:	63 c0       	rjmp	.+198    	; 0x680 <__vector_14+0x10e>
     5ba:	73 c0       	rjmp	.+230    	; 0x6a2 <__vector_14+0x130>
	{	//every 8ms
		
		case 0+1:	//0ms, 8ms on
		ICR1 = notes[beep_index];	//1st note
     5bc:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <beep_index>
     5c0:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <beep_index+0x1>
     5c4:	ee 0f       	add	r30, r30
     5c6:	ff 1f       	adc	r31, r31
     5c8:	e1 54       	subi	r30, 0x41	; 65
     5ca:	fd 4f       	sbci	r31, 0xFD	; 253
     5cc:	80 81       	ld	r24, Z
     5ce:	91 81       	ldd	r25, Z+1	; 0x01
     5d0:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     5d4:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		OCR1A = notes[beep_index]/2;
     5d8:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <beep_index>
     5dc:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <beep_index+0x1>
     5e0:	ee 0f       	add	r30, r30
     5e2:	ff 1f       	adc	r31, r31
     5e4:	e1 54       	subi	r30, 0x41	; 65
     5e6:	fd 4f       	sbci	r31, 0xFD	; 253
     5e8:	80 81       	ld	r24, Z
     5ea:	91 81       	ldd	r25, Z+1	; 0x01
     5ec:	96 95       	lsr	r25
     5ee:	87 95       	ror	r24
     5f0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     5f4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		break;
     5f8:	54 c0       	rjmp	.+168    	; 0x6a2 <__vector_14+0x130>
		case 2+1:	// 16ms, 24, 32 on
		ICR1 = notes[beep_index+1];	//2nd note
     5fa:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <beep_index>
     5fe:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <beep_index+0x1>
     602:	ee 0f       	add	r30, r30
     604:	ff 1f       	adc	r31, r31
     606:	ef 53       	subi	r30, 0x3F	; 63
     608:	fd 4f       	sbci	r31, 0xFD	; 253
     60a:	80 81       	ld	r24, Z
     60c:	91 81       	ldd	r25, Z+1	; 0x01
     60e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     612:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		OCR1A = notes[beep_index]/2;
     616:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <beep_index>
     61a:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <beep_index+0x1>
     61e:	ee 0f       	add	r30, r30
     620:	ff 1f       	adc	r31, r31
     622:	e1 54       	subi	r30, 0x41	; 65
     624:	fd 4f       	sbci	r31, 0xFD	; 253
     626:	80 81       	ld	r24, Z
     628:	91 81       	ldd	r25, Z+1	; 0x01
     62a:	96 95       	lsr	r25
     62c:	87 95       	ror	r24
     62e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     632:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		break;
     636:	35 c0       	rjmp	.+106    	; 0x6a2 <__vector_14+0x130>
		case 5+1:	// 40ms, 48, 56, 64, 72, 80, 88, 96, on
		ICR1 = notes[beep_index+2];	// 3rd note
     638:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <beep_index>
     63c:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <beep_index+0x1>
     640:	ee 0f       	add	r30, r30
     642:	ff 1f       	adc	r31, r31
     644:	ed 53       	subi	r30, 0x3D	; 61
     646:	fd 4f       	sbci	r31, 0xFD	; 253
     648:	80 81       	ld	r24, Z
     64a:	91 81       	ldd	r25, Z+1	; 0x01
     64c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     650:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		OCR1A = notes[beep_index]/2;
     654:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <beep_index>
     658:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <beep_index+0x1>
     65c:	ee 0f       	add	r30, r30
     65e:	ff 1f       	adc	r31, r31
     660:	e1 54       	subi	r30, 0x41	; 65
     662:	fd 4f       	sbci	r31, 0xFD	; 253
     664:	80 81       	ld	r24, Z
     666:	91 81       	ldd	r25, Z+1	; 0x01
     668:	96 95       	lsr	r25
     66a:	87 95       	ror	r24
     66c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     670:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		break;
     674:	16 c0       	rjmp	.+44     	; 0x6a2 <__vector_14+0x130>
		case 13+1:
		//ICR1 = 0;					//off
		OCR1A = 0;
     676:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     67a:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		break;
     67e:	11 c0       	rjmp	.+34     	; 0x6a2 <__vector_14+0x130>
		
		case 63+1:
		beep_index = 0;
     680:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <beep_index+0x1>
     684:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <beep_index>
		note_index = -1;
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	9f ef       	ldi	r25, 0xFF	; 255
     68c:	90 93 e2 02 	sts	0x02E2, r25	; 0x8002e2 <note_index+0x1>
     690:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <note_index>
		TCCR0B &= ~(0b101 << CS00);
     694:	85 b5       	in	r24, 0x25	; 37
     696:	8a 7f       	andi	r24, 0xFA	; 250
     698:	85 bd       	out	0x25, r24	; 37
		TCNT0 = 0;
     69a:	16 bc       	out	0x26, r1	; 38
		DDRB &= ~(1<<1);
     69c:	21 98       	cbi	0x04, 1	; 4
		soundPlaying = 0;
     69e:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <soundPlaying>
		break;
	}
	note_index += 1;
     6a2:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <note_index>
     6a6:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <note_index+0x1>
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	90 93 e2 02 	sts	0x02E2, r25	; 0x8002e2 <note_index+0x1>
     6b0:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <note_index>
}
     6b4:	ff 91       	pop	r31
     6b6:	ef 91       	pop	r30
     6b8:	9f 91       	pop	r25
     6ba:	8f 91       	pop	r24
     6bc:	0f 90       	pop	r0
     6be:	0f be       	out	0x3f, r0	; 63
     6c0:	0f 90       	pop	r0
     6c2:	1f 90       	pop	r1
     6c4:	18 95       	reti

000006c6 <__vector_42>:

ISR(TIMER4_COMPA_vect){		// use timer 4 for decreasing game time every 1s
     6c6:	1f 92       	push	r1
     6c8:	0f 92       	push	r0
     6ca:	0f b6       	in	r0, 0x3f	; 63
     6cc:	0f 92       	push	r0
     6ce:	11 24       	eor	r1, r1
     6d0:	8f 93       	push	r24
	if(TimeRemaining > 0){
     6d2:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <TimeRemaining>
     6d6:	88 23       	and	r24, r24
     6d8:	29 f0       	breq	.+10     	; 0x6e4 <__vector_42+0x1e>
		TimeRemaining--;
     6da:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <TimeRemaining>
     6de:	81 50       	subi	r24, 0x01	; 1
     6e0:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <TimeRemaining>
	}
}
     6e4:	8f 91       	pop	r24
     6e6:	0f 90       	pop	r0
     6e8:	0f be       	out	0x3f, r0	; 63
     6ea:	0f 90       	pop	r0
     6ec:	1f 90       	pop	r1
     6ee:	18 95       	reti

000006f0 <ShowWinner>:
	}
	return;		// start the game

}

void ShowWinner(){
     6f0:	2f 92       	push	r2
     6f2:	3f 92       	push	r3
     6f4:	4f 92       	push	r4
     6f6:	5f 92       	push	r5
     6f8:	6f 92       	push	r6
     6fa:	7f 92       	push	r7
     6fc:	8f 92       	push	r8
     6fe:	af 92       	push	r10
     700:	bf 92       	push	r11
     702:	cf 92       	push	r12
     704:	df 92       	push	r13
     706:	ef 92       	push	r14
     708:	ff 92       	push	r15
     70a:	1f 93       	push	r17
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
	clearLeds(0);
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	0e 94 63 01 	call	0x2c6	; 0x2c6 <clearLeds>
	if(GameMode && (P1Score == P2Score)){
     716:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <GameMode>
     71a:	88 23       	and	r24, r24
     71c:	09 f4       	brne	.+2      	; 0x720 <ShowWinner+0x30>
     71e:	ed c0       	rjmp	.+474    	; 0x8fa <ShowWinner+0x20a>
     720:	20 91 fc 02 	lds	r18, 0x02FC	; 0x8002fc <P1Score>
     724:	30 91 fd 02 	lds	r19, 0x02FD	; 0x8002fd <P1Score+0x1>
     728:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <P2Score>
     72c:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <P2Score+0x1>
     730:	28 17       	cp	r18, r24
     732:	39 07       	cpc	r19, r25
     734:	09 f0       	breq	.+2      	; 0x738 <ShowWinner+0x48>
     736:	dc c0       	rjmp	.+440    	; 0x8f0 <ShowWinner+0x200>
		GameMode = 0;		// if there's a tie, just show 1p winning screen	
     738:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <GameMode>
     73c:	de c0       	rjmp	.+444    	; 0x8fa <ShowWinner+0x20a>
     73e:	74 2c       	mov	r7, r4
	}
	if(GameMode == 0){
		
		for(uint8_t count = 0; count < 24; count++){			// flash whole screen
			
			setScore(RIGHT, HighScore1P);
     740:	60 91 fa 02 	lds	r22, 0x02FA	; 0x8002fa <HighScore1P>
     744:	70 91 fb 02 	lds	r23, 0x02FB	; 0x8002fb <HighScore1P+0x1>
     748:	82 e0       	ldi	r24, 0x02	; 2
     74a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
			setScore(LEFT, HighScore1P);
     74e:	60 91 fa 02 	lds	r22, 0x02FA	; 0x8002fa <HighScore1P>
     752:	70 91 fb 02 	lds	r23, 0x02FB	; 0x8002fb <HighScore1P+0x1>
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
     75c:	e2 01       	movw	r28, r4
			
			for(uint8_t ledx = 0; ledx < 6; ledx++){
     75e:	81 2c       	mov	r8, r1
     760:	1a c0       	rjmp	.+52     	; 0x796 <ShowWinner+0xa6>
				for(uint8_t ledy = 0; ledy < 6; ledy++){
					setButtonLed(ledx, ledy, (ledx+ledy+count)%2 );
     762:	a5 01       	movw	r20, r10
     764:	41 70       	andi	r20, 0x01	; 1
     766:	50 78       	andi	r21, 0x80	; 128
     768:	55 23       	and	r21, r21
     76a:	34 f4       	brge	.+12     	; 0x778 <ShowWinner+0x88>
     76c:	41 50       	subi	r20, 0x01	; 1
     76e:	51 09       	sbc	r21, r1
     770:	4e 6f       	ori	r20, 0xFE	; 254
     772:	5f 6f       	ori	r21, 0xFF	; 255
     774:	4f 5f       	subi	r20, 0xFF	; 255
     776:	5f 4f       	sbci	r21, 0xFF	; 255
     778:	61 2f       	mov	r22, r17
     77a:	88 2d       	mov	r24, r8
     77c:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
			
			setScore(RIGHT, HighScore1P);
			setScore(LEFT, HighScore1P);
			
			for(uint8_t ledx = 0; ledx < 6; ledx++){
				for(uint8_t ledy = 0; ledy < 6; ledy++){
     780:	1f 5f       	subi	r17, 0xFF	; 255
     782:	2f ef       	ldi	r18, 0xFF	; 255
     784:	a2 1a       	sub	r10, r18
     786:	b2 0a       	sbc	r11, r18
     788:	16 30       	cpi	r17, 0x06	; 6
     78a:	59 f7       	brne	.-42     	; 0x762 <ShowWinner+0x72>
		for(uint8_t count = 0; count < 24; count++){			// flash whole screen
			
			setScore(RIGHT, HighScore1P);
			setScore(LEFT, HighScore1P);
			
			for(uint8_t ledx = 0; ledx < 6; ledx++){
     78c:	83 94       	inc	r8
     78e:	21 96       	adiw	r28, 0x01	; 1
     790:	86 e0       	ldi	r24, 0x06	; 6
     792:	88 16       	cp	r8, r24
     794:	19 f0       	breq	.+6      	; 0x79c <ShowWinner+0xac>
	}
	return;		// start the game

}

void ShowWinner(){
     796:	5e 01       	movw	r10, r28
     798:	10 e0       	ldi	r17, 0x00	; 0
     79a:	e3 cf       	rjmp	.-58     	; 0x762 <ShowWinner+0x72>
			for(uint8_t ledx = 0; ledx < 6; ledx++){
				for(uint8_t ledy = 0; ledy < 6; ledy++){
					setButtonLed(ledx, ledy, (ledx+ledy+count)%2 );
				}
			}
			if(SoundEnabled){
     79c:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <SoundEnabled>
     7a0:	88 23       	and	r24, r24
     7a2:	91 f0       	breq	.+36     	; 0x7c8 <ShowWinner+0xd8>
				DDRB |= (1<<1);	//play tone
     7a4:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[5+(count%4)];
     7a6:	e7 2d       	mov	r30, r7
     7a8:	e3 70       	andi	r30, 0x03	; 3
     7aa:	f0 e0       	ldi	r31, 0x00	; 0
     7ac:	ee 0f       	add	r30, r30
     7ae:	ff 1f       	adc	r31, r31
     7b0:	e7 53       	subi	r30, 0x37	; 55
     7b2:	fd 4f       	sbci	r31, 0xFD	; 253
     7b4:	80 81       	ld	r24, Z
     7b6:	91 81       	ldd	r25, Z+1	; 0x01
     7b8:	f6 01       	movw	r30, r12
     7ba:	91 83       	std	Z+1, r25	; 0x01
     7bc:	80 83       	st	Z, r24
				OCR1A = notes[5+(count%4)] / 2;
     7be:	96 95       	lsr	r25
     7c0:	87 95       	ror	r24
     7c2:	f7 01       	movw	r30, r14
     7c4:	91 83       	std	Z+1, r25	; 0x01
     7c6:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7c8:	ff ef       	ldi	r31, 0xFF	; 255
     7ca:	21 ee       	ldi	r18, 0xE1	; 225
     7cc:	84 e0       	ldi	r24, 0x04	; 4
     7ce:	f1 50       	subi	r31, 0x01	; 1
     7d0:	20 40       	sbci	r18, 0x00	; 0
     7d2:	80 40       	sbci	r24, 0x00	; 0
     7d4:	e1 f7       	brne	.-8      	; 0x7ce <ShowWinner+0xde>
     7d6:	00 c0       	rjmp	.+0      	; 0x7d8 <ShowWinner+0xe8>
     7d8:	00 00       	nop
     7da:	9f ef       	ldi	r25, 0xFF	; 255
     7dc:	49 1a       	sub	r4, r25
     7de:	59 0a       	sbc	r5, r25
	if(GameMode && (P1Score == P2Score)){
		GameMode = 0;		// if there's a tie, just show 1p winning screen	
	}
	if(GameMode == 0){
		
		for(uint8_t count = 0; count < 24; count++){			// flash whole screen
     7e0:	e8 e1       	ldi	r30, 0x18	; 24
     7e2:	4e 16       	cp	r4, r30
     7e4:	51 04       	cpc	r5, r1
     7e6:	09 f0       	breq	.+2      	; 0x7ea <ShowWinner+0xfa>
     7e8:	aa cf       	rjmp	.-172    	; 0x73e <ShowWinner+0x4e>
				ICR1 = notes[5+(count%4)];
				OCR1A = notes[5+(count%4)] / 2;
			}
			_delay_ms(100);
		}
		DDRB &= ~(1<<1);
     7ea:	21 98       	cbi	0x04, 1	; 4
     7ec:	96 c0       	rjmp	.+300    	; 0x91a <__stack+0x1b>
		}else{										//2p mode, show winner every time
		uint8_t winnerhalf = P1Score > P2Score ? 0 : 3; //index half based on winner
     7ee:	0f 2e       	mov	r0, r31
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	6f 2e       	mov	r6, r31
     7f4:	f0 2d       	mov	r31, r0
     7f6:	01 c0       	rjmp	.+2      	; 0x7fa <ShowWinner+0x10a>
     7f8:	61 2c       	mov	r6, r1
		
		clearLeds(0);
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	0e 94 63 01 	call	0x2c6	; 0x2c6 <clearLeds>
     800:	21 2c       	mov	r2, r1
     802:	31 2c       	mov	r3, r1
     804:	0f 2e       	mov	r0, r31
     806:	f3 e0       	ldi	r31, 0x03	; 3
     808:	7f 2e       	mov	r7, r31
     80a:	f0 2d       	mov	r31, r0
     80c:	76 0c       	add	r7, r6
					setButtonLed(winnerhalf+ledx, ledy, (ledx+ledy+count)%2 );
				}
			}
			if(SoundEnabled){
				DDRB |= (1<<1);	//play tone
				ICR1 = notes[5+(count%4)];
     80e:	0f 2e       	mov	r0, r31
     810:	f6 e8       	ldi	r31, 0x86	; 134
     812:	cf 2e       	mov	r12, r31
     814:	d1 2c       	mov	r13, r1
     816:	f0 2d       	mov	r31, r0
				OCR1A = notes[5+(count%4)] / 2;
     818:	0f 2e       	mov	r0, r31
     81a:	f8 e8       	ldi	r31, 0x88	; 136
     81c:	ef 2e       	mov	r14, r31
     81e:	f1 2c       	mov	r15, r1
     820:	f0 2d       	mov	r31, r0
     822:	52 2c       	mov	r5, r2
		uint8_t winnerhalf = P1Score > P2Score ? 0 : 3; //index half based on winner
		
		clearLeds(0);
		for(uint8_t count = 0; count < 24; count++){			// flash whole screen
			
			if(P1Score > P2Score){
     824:	60 91 fe 02 	lds	r22, 0x02FE	; 0x8002fe <P2Score>
     828:	70 91 ff 02 	lds	r23, 0x02FF	; 0x8002ff <P2Score+0x1>
     82c:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <P1Score>
     830:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <P1Score+0x1>
     834:	68 17       	cp	r22, r24
     836:	79 07       	cpc	r23, r25
     838:	68 f4       	brcc	.+26     	; 0x854 <ShowWinner+0x164>
				setScore(RIGHT, 16);
     83a:	60 e1       	ldi	r22, 0x10	; 16
     83c:	70 e0       	ldi	r23, 0x00	; 0
     83e:	82 e0       	ldi	r24, 0x02	; 2
     840:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
				setScore(LEFT, P1Score);
     844:	60 91 fc 02 	lds	r22, 0x02FC	; 0x8002fc <P1Score>
     848:	70 91 fd 02 	lds	r23, 0x02FD	; 0x8002fd <P1Score+0x1>
     84c:	80 e0       	ldi	r24, 0x00	; 0
     84e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
     852:	60 c0       	rjmp	.+192    	; 0x914 <__stack+0x15>
			}else{
				setScore(RIGHT, P2Score);
     854:	82 e0       	ldi	r24, 0x02	; 2
     856:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
				setScore(LEFT, 16);
     85a:	60 e1       	ldi	r22, 0x10	; 16
     85c:	70 e0       	ldi	r23, 0x00	; 0
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
     864:	57 c0       	rjmp	.+174    	; 0x914 <__stack+0x15>
			}
			
			
			for(uint8_t ledx = 0; ledx < 3; ledx++){
				for(uint8_t ledy = 0; ledy < 6; ledy++){
					setButtonLed(winnerhalf+ledx, ledy, (ledx+ledy+count)%2 );
     866:	a5 01       	movw	r20, r10
     868:	41 70       	andi	r20, 0x01	; 1
     86a:	50 78       	andi	r21, 0x80	; 128
     86c:	55 23       	and	r21, r21
     86e:	34 f4       	brge	.+12     	; 0x87c <ShowWinner+0x18c>
     870:	41 50       	subi	r20, 0x01	; 1
     872:	51 09       	sbc	r21, r1
     874:	4e 6f       	ori	r20, 0xFE	; 254
     876:	5f 6f       	ori	r21, 0xFF	; 255
     878:	4f 5f       	subi	r20, 0xFF	; 255
     87a:	5f 4f       	sbci	r21, 0xFF	; 255
     87c:	61 2f       	mov	r22, r17
     87e:	88 2d       	mov	r24, r8
     880:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
				setScore(LEFT, 16);
			}
			
			
			for(uint8_t ledx = 0; ledx < 3; ledx++){
				for(uint8_t ledy = 0; ledy < 6; ledy++){
     884:	1f 5f       	subi	r17, 0xFF	; 255
     886:	ff ef       	ldi	r31, 0xFF	; 255
     888:	af 1a       	sub	r10, r31
     88a:	bf 0a       	sbc	r11, r31
     88c:	16 30       	cpi	r17, 0x06	; 6
     88e:	59 f7       	brne	.-42     	; 0x866 <ShowWinner+0x176>
     890:	21 96       	adiw	r28, 0x01	; 1
     892:	83 94       	inc	r8
				setScore(RIGHT, P2Score);
				setScore(LEFT, 16);
			}
			
			
			for(uint8_t ledx = 0; ledx < 3; ledx++){
     894:	78 14       	cp	r7, r8
     896:	19 f0       	breq	.+6      	; 0x89e <ShowWinner+0x1ae>
		}
		DDRB &= ~(1<<1);
		}else{										//2p mode, show winner every time
		uint8_t winnerhalf = P1Score > P2Score ? 0 : 3; //index half based on winner
		
		clearLeds(0);
     898:	5e 01       	movw	r10, r28
     89a:	10 e0       	ldi	r17, 0x00	; 0
     89c:	e4 cf       	rjmp	.-56     	; 0x866 <ShowWinner+0x176>
			for(uint8_t ledx = 0; ledx < 3; ledx++){
				for(uint8_t ledy = 0; ledy < 6; ledy++){
					setButtonLed(winnerhalf+ledx, ledy, (ledx+ledy+count)%2 );
				}
			}
			if(SoundEnabled){
     89e:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <SoundEnabled>
     8a2:	88 23       	and	r24, r24
     8a4:	91 f0       	breq	.+36     	; 0x8ca <ShowWinner+0x1da>
				DDRB |= (1<<1);	//play tone
     8a6:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[5+(count%4)];
     8a8:	e5 2d       	mov	r30, r5
     8aa:	e3 70       	andi	r30, 0x03	; 3
     8ac:	f0 e0       	ldi	r31, 0x00	; 0
     8ae:	ee 0f       	add	r30, r30
     8b0:	ff 1f       	adc	r31, r31
     8b2:	e7 53       	subi	r30, 0x37	; 55
     8b4:	fd 4f       	sbci	r31, 0xFD	; 253
     8b6:	80 81       	ld	r24, Z
     8b8:	91 81       	ldd	r25, Z+1	; 0x01
     8ba:	f6 01       	movw	r30, r12
     8bc:	91 83       	std	Z+1, r25	; 0x01
     8be:	80 83       	st	Z, r24
				OCR1A = notes[5+(count%4)] / 2;
     8c0:	96 95       	lsr	r25
     8c2:	87 95       	ror	r24
     8c4:	f7 01       	movw	r30, r14
     8c6:	91 83       	std	Z+1, r25	; 0x01
     8c8:	80 83       	st	Z, r24
     8ca:	ff ef       	ldi	r31, 0xFF	; 255
     8cc:	21 ee       	ldi	r18, 0xE1	; 225
     8ce:	84 e0       	ldi	r24, 0x04	; 4
     8d0:	f1 50       	subi	r31, 0x01	; 1
     8d2:	20 40       	sbci	r18, 0x00	; 0
     8d4:	80 40       	sbci	r24, 0x00	; 0
     8d6:	e1 f7       	brne	.-8      	; 0x8d0 <ShowWinner+0x1e0>
     8d8:	00 c0       	rjmp	.+0      	; 0x8da <ShowWinner+0x1ea>
     8da:	00 00       	nop
     8dc:	9f ef       	ldi	r25, 0xFF	; 255
     8de:	29 1a       	sub	r2, r25
     8e0:	39 0a       	sbc	r3, r25
		DDRB &= ~(1<<1);
		}else{										//2p mode, show winner every time
		uint8_t winnerhalf = P1Score > P2Score ? 0 : 3; //index half based on winner
		
		clearLeds(0);
		for(uint8_t count = 0; count < 24; count++){			// flash whole screen
     8e2:	e8 e1       	ldi	r30, 0x18	; 24
     8e4:	2e 16       	cp	r2, r30
     8e6:	31 04       	cpc	r3, r1
     8e8:	09 f0       	breq	.+2      	; 0x8ec <ShowWinner+0x1fc>
     8ea:	9b cf       	rjmp	.-202    	; 0x822 <ShowWinner+0x132>
				ICR1 = notes[5+(count%4)];
				OCR1A = notes[5+(count%4)] / 2;
			}
			_delay_ms(100);
		}
		DDRB &= ~(1<<1);
     8ec:	21 98       	cbi	0x04, 1	; 4
	}
}
     8ee:	15 c0       	rjmp	.+42     	; 0x91a <__stack+0x1b>
			}
			_delay_ms(100);
		}
		DDRB &= ~(1<<1);
		}else{										//2p mode, show winner every time
		uint8_t winnerhalf = P1Score > P2Score ? 0 : 3; //index half based on winner
     8f0:	82 17       	cp	r24, r18
     8f2:	93 07       	cpc	r25, r19
     8f4:	08 f4       	brcc	.+2      	; 0x8f8 <ShowWinner+0x208>
     8f6:	80 cf       	rjmp	.-256    	; 0x7f8 <ShowWinner+0x108>
     8f8:	7a cf       	rjmp	.-268    	; 0x7ee <ShowWinner+0xfe>
	}
	return;		// start the game

}

void ShowWinner(){
     8fa:	41 2c       	mov	r4, r1
     8fc:	51 2c       	mov	r5, r1
					setButtonLed(ledx, ledy, (ledx+ledy+count)%2 );
				}
			}
			if(SoundEnabled){
				DDRB |= (1<<1);	//play tone
				ICR1 = notes[5+(count%4)];
     8fe:	0f 2e       	mov	r0, r31
     900:	f6 e8       	ldi	r31, 0x86	; 134
     902:	cf 2e       	mov	r12, r31
     904:	d1 2c       	mov	r13, r1
     906:	f0 2d       	mov	r31, r0
				OCR1A = notes[5+(count%4)] / 2;
     908:	0f 2e       	mov	r0, r31
     90a:	f8 e8       	ldi	r31, 0x88	; 136
     90c:	ef 2e       	mov	r14, r31
     90e:	f1 2c       	mov	r15, r1
     910:	f0 2d       	mov	r31, r0
     912:	15 cf       	rjmp	.-470    	; 0x73e <ShowWinner+0x4e>
		}
		DDRB &= ~(1<<1);
		}else{										//2p mode, show winner every time
		uint8_t winnerhalf = P1Score > P2Score ? 0 : 3; //index half based on winner
		
		clearLeds(0);
     914:	86 2c       	mov	r8, r6
     916:	e1 01       	movw	r28, r2
     918:	bf cf       	rjmp	.-130    	; 0x898 <ShowWinner+0x1a8>
			}
			_delay_ms(100);
		}
		DDRB &= ~(1<<1);
	}
}
     91a:	df 91       	pop	r29
     91c:	cf 91       	pop	r28
     91e:	1f 91       	pop	r17
     920:	ff 90       	pop	r15
     922:	ef 90       	pop	r14
     924:	df 90       	pop	r13
     926:	cf 90       	pop	r12
     928:	bf 90       	pop	r11
     92a:	af 90       	pop	r10
     92c:	8f 90       	pop	r8
     92e:	7f 90       	pop	r7
     930:	6f 90       	pop	r6
     932:	5f 90       	pop	r5
     934:	4f 90       	pop	r4
     936:	3f 90       	pop	r3
     938:	2f 90       	pop	r2
     93a:	08 95       	ret

0000093c <IncrementScore>:

void IncrementScore(uint8_t Player, uint16_t value){
	if(Player == 0){
     93c:	81 11       	cpse	r24, r1
     93e:	11 c0       	rjmp	.+34     	; 0x962 <IncrementScore+0x26>
		P1Score += value;
		P1Score = P1Score > 999 ? 999 : P1Score;
     940:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <P1Score>
     944:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <P1Score+0x1>
     948:	68 0f       	add	r22, r24
     94a:	79 1f       	adc	r23, r25
     94c:	68 3e       	cpi	r22, 0xE8	; 232
     94e:	83 e0       	ldi	r24, 0x03	; 3
     950:	78 07       	cpc	r23, r24
     952:	10 f0       	brcs	.+4      	; 0x958 <IncrementScore+0x1c>
     954:	67 ee       	ldi	r22, 0xE7	; 231
     956:	73 e0       	ldi	r23, 0x03	; 3
     958:	70 93 fd 02 	sts	0x02FD, r23	; 0x8002fd <P1Score+0x1>
     95c:	60 93 fc 02 	sts	0x02FC, r22	; 0x8002fc <P1Score>
     960:	08 95       	ret
		}else if(Player == 1){
     962:	81 30       	cpi	r24, 0x01	; 1
     964:	81 f4       	brne	.+32     	; 0x986 <IncrementScore+0x4a>
		P2Score += value;
		P2Score = P2Score > 999 ? 999 : P2Score;
     966:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <P2Score>
     96a:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <P2Score+0x1>
     96e:	68 0f       	add	r22, r24
     970:	79 1f       	adc	r23, r25
     972:	68 3e       	cpi	r22, 0xE8	; 232
     974:	83 e0       	ldi	r24, 0x03	; 3
     976:	78 07       	cpc	r23, r24
     978:	10 f0       	brcs	.+4      	; 0x97e <IncrementScore+0x42>
     97a:	67 ee       	ldi	r22, 0xE7	; 231
     97c:	73 e0       	ldi	r23, 0x03	; 3
     97e:	70 93 ff 02 	sts	0x02FF, r23	; 0x8002ff <P2Score+0x1>
     982:	60 93 fe 02 	sts	0x02FE, r22	; 0x8002fe <P2Score>
     986:	08 95       	ret

00000988 <playChirp>:
		_delay_ms(1000);
	}
}

void playChirp(uint8_t tone){
	if(!SoundEnabled){
     988:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <SoundEnabled>
     98c:	99 23       	and	r25, r25
     98e:	59 f0       	breq	.+22     	; 0x9a6 <playChirp+0x1e>
		return;
	}
	beep_index = tone;
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <beep_index+0x1>
     996:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <beep_index>
	note_index = 0;
     99a:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <note_index+0x1>
     99e:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <note_index>
	TCCR0B = (0b101 << CS00);	//turn on clock for speaker
     9a2:	85 e0       	ldi	r24, 0x05	; 5
     9a4:	85 bd       	out	0x25, r24	; 37
     9a6:	08 95       	ret

000009a8 <Bonus>:
	printf("GAMa ovar\n");
	// game is over, stop timer
	
}

void Bonus(){
     9a8:	2f 92       	push	r2
     9aa:	3f 92       	push	r3
     9ac:	4f 92       	push	r4
     9ae:	5f 92       	push	r5
     9b0:	6f 92       	push	r6
     9b2:	7f 92       	push	r7
     9b4:	8f 92       	push	r8
     9b6:	9f 92       	push	r9
     9b8:	af 92       	push	r10
     9ba:	bf 92       	push	r11
     9bc:	cf 92       	push	r12
     9be:	df 92       	push	r13
     9c0:	ef 92       	push	r14
     9c2:	ff 92       	push	r15
     9c4:	0f 93       	push	r16
     9c6:	1f 93       	push	r17
     9c8:	cf 93       	push	r28
     9ca:	df 93       	push	r29
     9cc:	cd b7       	in	r28, 0x3d	; 61
     9ce:	de b7       	in	r29, 0x3e	; 62
     9d0:	2b 97       	sbiw	r28, 0x0b	; 11
     9d2:	0f b6       	in	r0, 0x3f	; 63
     9d4:	f8 94       	cli
     9d6:	de bf       	out	0x3e, r29	; 62
     9d8:	0f be       	out	0x3f, r0	; 63
     9da:	cd bf       	out	0x3d, r28	; 61

	// blink leds to indicate bonus round start

	for(uint8_t blinkIndex = 0; blinkIndex < 6; blinkIndex++){
     9dc:	10 e0       	ldi	r17, 0x00	; 0
		clearLeds(blinkIndex % 2);
		if(SoundEnabled){
			DDRB |= (1<<1);	//play page tone
			ICR1 = notes[blinkIndex % 2];
     9de:	0f 2e       	mov	r0, r31
     9e0:	f6 e8       	ldi	r31, 0x86	; 134
     9e2:	cf 2e       	mov	r12, r31
     9e4:	d1 2c       	mov	r13, r1
     9e6:	f0 2d       	mov	r31, r0
			OCR1A = notes[blinkIndex % 2] / 2;
     9e8:	0f 2e       	mov	r0, r31
     9ea:	f8 e8       	ldi	r31, 0x88	; 136
     9ec:	ef 2e       	mov	r14, r31
     9ee:	f1 2c       	mov	r15, r1
     9f0:	f0 2d       	mov	r31, r0
void Bonus(){

	// blink leds to indicate bonus round start

	for(uint8_t blinkIndex = 0; blinkIndex < 6; blinkIndex++){
		clearLeds(blinkIndex % 2);
     9f2:	01 2f       	mov	r16, r17
     9f4:	01 70       	andi	r16, 0x01	; 1
     9f6:	80 2f       	mov	r24, r16
     9f8:	0e 94 63 01 	call	0x2c6	; 0x2c6 <clearLeds>
		if(SoundEnabled){
     9fc:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <SoundEnabled>
     a00:	88 23       	and	r24, r24
     a02:	e1 f0       	breq	.+56     	; 0xa3c <Bonus+0x94>
			DDRB |= (1<<1);	//play page tone
     a04:	21 9a       	sbi	0x04, 1	; 4
			ICR1 = notes[blinkIndex % 2];
     a06:	e0 2f       	mov	r30, r16
     a08:	f0 e0       	ldi	r31, 0x00	; 0
     a0a:	ee 0f       	add	r30, r30
     a0c:	ff 1f       	adc	r31, r31
     a0e:	e1 54       	subi	r30, 0x41	; 65
     a10:	fd 4f       	sbci	r31, 0xFD	; 253
     a12:	80 81       	ld	r24, Z
     a14:	91 81       	ldd	r25, Z+1	; 0x01
     a16:	d6 01       	movw	r26, r12
     a18:	11 96       	adiw	r26, 0x01	; 1
     a1a:	9c 93       	st	X, r25
     a1c:	8e 93       	st	-X, r24
			OCR1A = notes[blinkIndex % 2] / 2;
     a1e:	96 95       	lsr	r25
     a20:	87 95       	ror	r24
     a22:	f7 01       	movw	r30, r14
     a24:	91 83       	std	Z+1, r25	; 0x01
     a26:	80 83       	st	Z, r24
     a28:	ff e7       	ldi	r31, 0x7F	; 127
     a2a:	2a e1       	ldi	r18, 0x1A	; 26
     a2c:	56 e0       	ldi	r21, 0x06	; 6
     a2e:	f1 50       	subi	r31, 0x01	; 1
     a30:	20 40       	sbci	r18, 0x00	; 0
     a32:	50 40       	sbci	r21, 0x00	; 0
     a34:	e1 f7       	brne	.-8      	; 0xa2e <Bonus+0x86>
     a36:	00 c0       	rjmp	.+0      	; 0xa38 <Bonus+0x90>
     a38:	00 00       	nop
			_delay_ms(125);
			DDRB &= ~(1<<1);
     a3a:	21 98       	cbi	0x04, 1	; 4

void Bonus(){

	// blink leds to indicate bonus round start

	for(uint8_t blinkIndex = 0; blinkIndex < 6; blinkIndex++){
     a3c:	1f 5f       	subi	r17, 0xFF	; 255
     a3e:	16 30       	cpi	r17, 0x06	; 6
     a40:	c1 f6       	brne	.-80     	; 0x9f2 <Bonus+0x4a>
     a42:	8f ef       	ldi	r24, 0xFF	; 255
     a44:	94 e3       	ldi	r25, 0x34	; 52
     a46:	ac e0       	ldi	r26, 0x0C	; 12
     a48:	81 50       	subi	r24, 0x01	; 1
     a4a:	90 40       	sbci	r25, 0x00	; 0
     a4c:	a0 40       	sbci	r26, 0x00	; 0
     a4e:	e1 f7       	brne	.-8      	; 0xa48 <Bonus+0xa0>
     a50:	00 c0       	rjmp	.+0      	; 0xa52 <Bonus+0xaa>
     a52:	00 00       	nop
		}
		
	}
	_delay_ms(250);

	TimeRemaining = BonusTime;
     a54:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <BonusTime>
     a58:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <TimeRemaining>
	
	printf("STARTING BONUS\n");
     a5c:	80 e4       	ldi	r24, 0x40	; 64
     a5e:	91 e0       	ldi	r25, 0x01	; 1
     a60:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <puts>
	
	setScore(0, GameMode == 0 ? HighScore1P : HighScore2P);
     a64:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <GameMode>
     a68:	81 11       	cpse	r24, r1
     a6a:	05 c0       	rjmp	.+10     	; 0xa76 <Bonus+0xce>
     a6c:	60 91 fa 02 	lds	r22, 0x02FA	; 0x8002fa <HighScore1P>
     a70:	70 91 fb 02 	lds	r23, 0x02FB	; 0x8002fb <HighScore1P+0x1>
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <Bonus+0xd6>
     a76:	60 91 0e 03 	lds	r22, 0x030E	; 0x80030e <HighScore2P>
     a7a:	70 91 0f 03 	lds	r23, 0x030F	; 0x80030f <HighScore2P+0x1>
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
	uint8_t pressed[] = {0,0,0,0,0,0};
     a84:	fe 01       	movw	r30, r28
     a86:	31 96       	adiw	r30, 0x01	; 1
     a88:	86 e0       	ldi	r24, 0x06	; 6
     a8a:	df 01       	movw	r26, r30
     a8c:	1d 92       	st	X+, r1
     a8e:	8a 95       	dec	r24
     a90:	e9 f7       	brne	.-6      	; 0xa8c <Bonus+0xe4>
	TCNT4 = 0;
     a92:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7e00a5>
     a96:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7e00a4>
	uint8_t lastTime = TimeRemaining;
     a9a:	b0 91 f9 02 	lds	r27, 0x02F9	; 0x8002f9 <TimeRemaining>
     a9e:	bf 83       	std	Y+7, r27	; 0x07
	while(TimeRemaining > 0){
		
		if(SoundEnabled & (lastTime != TimeRemaining) & (soundPlaying == 0)){
     aa0:	88 24       	eor	r8, r8
     aa2:	83 94       	inc	r8
     aa4:	91 2c       	mov	r9, r1
		}

		for(uint8_t x = 0; x < 6; x++){
			for(uint8_t y = 1; y < 6; y++){
				uint8_t isavail = (pressed[x] & (1 << y)) == 0 ? 1 : 0;
				setButtonLed(x,y,isavail);
     aa6:	44 24       	eor	r4, r4
     aa8:	43 94       	inc	r4
     aaa:	21 2c       	mov	r2, r1
	
	setScore(0, GameMode == 0 ? HighScore1P : HighScore2P);
	uint8_t pressed[] = {0,0,0,0,0,0};
	TCNT4 = 0;
	uint8_t lastTime = TimeRemaining;
	while(TimeRemaining > 0){
     aac:	ca c0       	rjmp	.+404    	; 0xc42 <Bonus+0x29a>
		
		if(SoundEnabled & (lastTime != TimeRemaining) & (soundPlaying == 0)){
     aae:	40 91 f9 02 	lds	r20, 0x02F9	; 0x8002f9 <TimeRemaining>
     ab2:	50 91 0b 03 	lds	r21, 0x030B	; 0x80030b <soundPlaying>
     ab6:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <SoundEnabled>
     aba:	28 2f       	mov	r18, r24
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	c4 01       	movw	r24, r8
     ac0:	55 23       	and	r21, r21
     ac2:	11 f0       	breq	.+4      	; 0xac8 <Bonus+0x120>
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	82 23       	and	r24, r18
     aca:	93 23       	and	r25, r19
     acc:	94 01       	movw	r18, r8
     ace:	ef 81       	ldd	r30, Y+7	; 0x07
     ad0:	e4 13       	cpse	r30, r20
     ad2:	02 c0       	rjmp	.+4      	; 0xad8 <Bonus+0x130>
     ad4:	20 e0       	ldi	r18, 0x00	; 0
     ad6:	30 e0       	ldi	r19, 0x00	; 0
     ad8:	82 23       	and	r24, r18
     ada:	93 23       	and	r25, r19
     adc:	89 2b       	or	r24, r25
     ade:	91 f1       	breq	.+100    	; 0xb44 <Bonus+0x19c>
			lastTime = TimeRemaining;
     ae0:	f0 91 f9 02 	lds	r31, 0x02F9	; 0x8002f9 <TimeRemaining>
     ae4:	ff 83       	std	Y+7, r31	; 0x07
			DDRB |= (1<<1);	//make ticking noise
     ae6:	21 9a       	sbi	0x04, 1	; 4
			ICR1 = notes[4 + (TimeRemaining%2)];
     ae8:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <TimeRemaining>
     aec:	81 70       	andi	r24, 0x01	; 1
     aee:	88 87       	std	Y+8, r24	; 0x08
     af0:	19 86       	std	Y+9, r1	; 0x09
     af2:	e8 85       	ldd	r30, Y+8	; 0x08
     af4:	f9 85       	ldd	r31, Y+9	; 0x09
     af6:	34 96       	adiw	r30, 0x04	; 4
     af8:	ee 0f       	add	r30, r30
     afa:	ff 1f       	adc	r31, r31
     afc:	e1 54       	subi	r30, 0x41	; 65
     afe:	fd 4f       	sbci	r31, 0xFD	; 253
     b00:	80 81       	ld	r24, Z
     b02:	91 81       	ldd	r25, Z+1	; 0x01
     b04:	a6 e8       	ldi	r26, 0x86	; 134
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	11 96       	adiw	r26, 0x01	; 1
     b0a:	9c 93       	st	X, r25
     b0c:	8e 93       	st	-X, r24
			OCR1A = notes[4 + (TimeRemaining%2)] / 2;
     b0e:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <TimeRemaining>
     b12:	81 70       	andi	r24, 0x01	; 1
     b14:	8a 87       	std	Y+10, r24	; 0x0a
     b16:	1b 86       	std	Y+11, r1	; 0x0b
     b18:	ea 85       	ldd	r30, Y+10	; 0x0a
     b1a:	fb 85       	ldd	r31, Y+11	; 0x0b
     b1c:	34 96       	adiw	r30, 0x04	; 4
     b1e:	ee 0f       	add	r30, r30
     b20:	ff 1f       	adc	r31, r31
     b22:	e1 54       	subi	r30, 0x41	; 65
     b24:	fd 4f       	sbci	r31, 0xFD	; 253
     b26:	80 81       	ld	r24, Z
     b28:	91 81       	ldd	r25, Z+1	; 0x01
     b2a:	96 95       	lsr	r25
     b2c:	87 95       	ror	r24
     b2e:	e8 e8       	ldi	r30, 0x88	; 136
     b30:	f0 e0       	ldi	r31, 0x00	; 0
     b32:	91 83       	std	Z+1, r25	; 0x01
     b34:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b36:	8f ea       	ldi	r24, 0xAF	; 175
     b38:	96 e3       	ldi	r25, 0x36	; 54
     b3a:	01 97       	sbiw	r24, 0x01	; 1
     b3c:	f1 f7       	brne	.-4      	; 0xb3a <Bonus+0x192>
     b3e:	00 c0       	rjmp	.+0      	; 0xb40 <Bonus+0x198>
     b40:	00 00       	nop
			_delay_us(3500);
			DDRB &= ~(1<<1);
     b42:	21 98       	cbi	0x04, 1	; 4
		}
		
		setScore(1, TimeRemaining);
     b44:	60 91 f9 02 	lds	r22, 0x02F9	; 0x8002f9 <TimeRemaining>
     b48:	70 e0       	ldi	r23, 0x00	; 0
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
		if(GameMode){
     b50:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <GameMode>
     b54:	88 23       	and	r24, r24
     b56:	79 f0       	breq	.+30     	; 0xb76 <Bonus+0x1ce>
			setScore(0, P1Score);	// if 2p mode, show left p1 and right p2 scores
     b58:	60 91 fc 02 	lds	r22, 0x02FC	; 0x8002fc <P1Score>
     b5c:	70 91 fd 02 	lds	r23, 0x02FD	; 0x8002fd <P1Score+0x1>
     b60:	80 e0       	ldi	r24, 0x00	; 0
     b62:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
			setScore(2, P2Score);
     b66:	60 91 fe 02 	lds	r22, 0x02FE	; 0x8002fe <P2Score>
     b6a:	70 91 ff 02 	lds	r23, 0x02FF	; 0x8002ff <P2Score+0x1>
     b6e:	82 e0       	ldi	r24, 0x02	; 2
     b70:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
     b74:	77 c0       	rjmp	.+238    	; 0xc64 <Bonus+0x2bc>
			}else{
			setScore(2, P1Score);	// otherwise show p1 score and high score
     b76:	60 91 fc 02 	lds	r22, 0x02FC	; 0x8002fc <P1Score>
     b7a:	70 91 fd 02 	lds	r23, 0x02FD	; 0x8002fd <P1Score+0x1>
     b7e:	82 e0       	ldi	r24, 0x02	; 2
     b80:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
     b84:	6f c0       	rjmp	.+222    	; 0xc64 <Bonus+0x2bc>
     b86:	b0 2e       	mov	r11, r16
		}

		for(uint8_t x = 0; x < 6; x++){
			for(uint8_t y = 1; y < 6; y++){
				uint8_t isavail = (pressed[x] & (1 << y)) == 0 ? 1 : 0;
     b88:	d7 01       	movw	r26, r14
     b8a:	5c 90       	ld	r5, X
     b8c:	30 2e       	mov	r3, r16
     b8e:	85 2d       	mov	r24, r5
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	00 2e       	mov	r0, r16
     b94:	02 c0       	rjmp	.+4      	; 0xb9a <Bonus+0x1f2>
     b96:	95 95       	asr	r25
     b98:	87 95       	ror	r24
     b9a:	0a 94       	dec	r0
     b9c:	e2 f7       	brpl	.-8      	; 0xb96 <Bonus+0x1ee>
				setButtonLed(x,y,isavail);
     b9e:	44 2d       	mov	r20, r4
     ba0:	3c 01       	movw	r6, r24
     ba2:	b1 e0       	ldi	r27, 0x01	; 1
     ba4:	6b 22       	and	r6, r27
     ba6:	77 24       	eor	r7, r7
     ba8:	80 fd       	sbrc	r24, 0
     baa:	42 2d       	mov	r20, r2
     bac:	6b 2d       	mov	r22, r11
     bae:	8a 2d       	mov	r24, r10
     bb0:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
				
				if(isButtonDown(x,y) && isavail){
     bb4:	6b 2d       	mov	r22, r11
     bb6:	8a 2d       	mov	r24, r10
     bb8:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
     bbc:	88 23       	and	r24, r24
     bbe:	71 f1       	breq	.+92     	; 0xc1c <Bonus+0x274>
     bc0:	67 28       	or	r6, r7
     bc2:	61 f5       	brne	.+88     	; 0xc1c <Bonus+0x274>
					playChirp(1);
     bc4:	84 2d       	mov	r24, r4
     bc6:	0e 94 c4 04 	call	0x988	; 0x988 <playChirp>
					pressed[x] |= (1 << y);
     bca:	c4 01       	movw	r24, r8
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <Bonus+0x22a>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	3a 94       	dec	r3
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <Bonus+0x226>
     bd6:	58 2a       	or	r5, r24
     bd8:	f6 01       	movw	r30, r12
     bda:	50 82       	st	Z, r5
					if((x >= 3) && (GameMode)){	//player 2 bonus
     bdc:	f2 e0       	ldi	r31, 0x02	; 2
     bde:	fa 15       	cp	r31, r10
     be0:	88 f4       	brcc	.+34     	; 0xc04 <Bonus+0x25c>
     be2:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <GameMode>
     be6:	88 23       	and	r24, r24
     be8:	69 f0       	breq	.+26     	; 0xc04 <Bonus+0x25c>
						P2Score += BonusPointCount;
     bea:	20 91 10 03 	lds	r18, 0x0310	; 0x800310 <BonusPointCount>
     bee:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <P2Score>
     bf2:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <P2Score+0x1>
     bf6:	82 0f       	add	r24, r18
     bf8:	91 1d       	adc	r25, r1
     bfa:	90 93 ff 02 	sts	0x02FF, r25	; 0x8002ff <P2Score+0x1>
     bfe:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <P2Score>
     c02:	0c c0       	rjmp	.+24     	; 0xc1c <Bonus+0x274>
						}else{
						P1Score += BonusPointCount;
     c04:	20 91 10 03 	lds	r18, 0x0310	; 0x800310 <BonusPointCount>
     c08:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <P1Score>
     c0c:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <P1Score+0x1>
     c10:	82 0f       	add	r24, r18
     c12:	91 1d       	adc	r25, r1
     c14:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <P1Score+0x1>
     c18:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <P1Score>
     c1c:	0f 5f       	subi	r16, 0xFF	; 255
     c1e:	1f 4f       	sbci	r17, 0xFF	; 255
			}else{
			setScore(2, P1Score);	// otherwise show p1 score and high score
		}

		for(uint8_t x = 0; x < 6; x++){
			for(uint8_t y = 1; y < 6; y++){
     c20:	06 30       	cpi	r16, 0x06	; 6
     c22:	11 05       	cpc	r17, r1
     c24:	09 f0       	breq	.+2      	; 0xc28 <Bonus+0x280>
     c26:	af cf       	rjmp	.-162    	; 0xb86 <Bonus+0x1de>
     c28:	6a 2c       	mov	r6, r10
			setScore(2, P2Score);
			}else{
			setScore(2, P1Score);	// otherwise show p1 score and high score
		}

		for(uint8_t x = 0; x < 6; x++){
     c2a:	63 94       	inc	r6
     c2c:	2f ef       	ldi	r18, 0xFF	; 255
     c2e:	e2 1a       	sub	r14, r18
     c30:	f2 0a       	sbc	r15, r18
     c32:	56 e0       	ldi	r21, 0x06	; 6
     c34:	65 16       	cp	r6, r21
     c36:	29 f0       	breq	.+10     	; 0xc42 <Bonus+0x29a>

void Bonus(){

	// blink leds to indicate bonus round start

	for(uint8_t blinkIndex = 0; blinkIndex < 6; blinkIndex++){
     c38:	01 e0       	ldi	r16, 0x01	; 1
     c3a:	10 e0       	ldi	r17, 0x00	; 0
     c3c:	67 01       	movw	r12, r14
     c3e:	a6 2c       	mov	r10, r6
     c40:	a2 cf       	rjmp	.-188    	; 0xb86 <Bonus+0x1de>
	
	setScore(0, GameMode == 0 ? HighScore1P : HighScore2P);
	uint8_t pressed[] = {0,0,0,0,0,0};
	TCNT4 = 0;
	uint8_t lastTime = TimeRemaining;
	while(TimeRemaining > 0){
     c42:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <TimeRemaining>
     c46:	81 11       	cpse	r24, r1
     c48:	32 cf       	rjmp	.-412    	; 0xaae <Bonus+0x106>
			}
		}
		
	}
	
	setScoreSegment(TIMER1, 18); // 18 is the dash
     c4a:	62 e1       	ldi	r22, 0x12	; 18
     c4c:	83 e0       	ldi	r24, 0x03	; 3
     c4e:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
	setScoreSegment(TIMER10, 18);
     c52:	62 e1       	ldi	r22, 0x12	; 18
     c54:	84 e0       	ldi	r24, 0x04	; 4
     c56:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
	setScoreSegment(TIMER100, 18);
     c5a:	62 e1       	ldi	r22, 0x12	; 18
     c5c:	85 e0       	ldi	r24, 0x05	; 5
     c5e:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>

}
     c62:	05 c0       	rjmp	.+10     	; 0xc6e <Bonus+0x2c6>
     c64:	ce 01       	movw	r24, r28
     c66:	01 96       	adiw	r24, 0x01	; 1
     c68:	7c 01       	movw	r14, r24

void Bonus(){

	// blink leds to indicate bonus round start

	for(uint8_t blinkIndex = 0; blinkIndex < 6; blinkIndex++){
     c6a:	61 2c       	mov	r6, r1
     c6c:	e5 cf       	rjmp	.-54     	; 0xc38 <Bonus+0x290>
	
	setScoreSegment(TIMER1, 18); // 18 is the dash
	setScoreSegment(TIMER10, 18);
	setScoreSegment(TIMER100, 18);

}
     c6e:	2b 96       	adiw	r28, 0x0b	; 11
     c70:	0f b6       	in	r0, 0x3f	; 63
     c72:	f8 94       	cli
     c74:	de bf       	out	0x3e, r29	; 62
     c76:	0f be       	out	0x3f, r0	; 63
     c78:	cd bf       	out	0x3d, r28	; 61
     c7a:	df 91       	pop	r29
     c7c:	cf 91       	pop	r28
     c7e:	1f 91       	pop	r17
     c80:	0f 91       	pop	r16
     c82:	ff 90       	pop	r15
     c84:	ef 90       	pop	r14
     c86:	df 90       	pop	r13
     c88:	cf 90       	pop	r12
     c8a:	bf 90       	pop	r11
     c8c:	af 90       	pop	r10
     c8e:	9f 90       	pop	r9
     c90:	8f 90       	pop	r8
     c92:	7f 90       	pop	r7
     c94:	6f 90       	pop	r6
     c96:	5f 90       	pop	r5
     c98:	4f 90       	pop	r4
     c9a:	3f 90       	pop	r3
     c9c:	2f 90       	pop	r2
     c9e:	08 95       	ret

00000ca0 <Display321>:
2, 3, 2, 2, 2, 3, 2, 1, 0, 0, 0};
const uint8_t onledsY[33] = {1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5,
	1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5,
1, 2, 2, 3, 4, 5, 5, 5, 0, 0, 0};

void Display321(){
     ca0:	7f 92       	push	r7
     ca2:	8f 92       	push	r8
     ca4:	9f 92       	push	r9
     ca6:	af 92       	push	r10
     ca8:	bf 92       	push	r11
     caa:	cf 92       	push	r12
     cac:	df 92       	push	r13
     cae:	ef 92       	push	r14
     cb0:	ff 92       	push	r15
     cb2:	0f 93       	push	r16
     cb4:	1f 93       	push	r17
     cb6:	cf 93       	push	r28
     cb8:	df 93       	push	r29
	
	clearLeds(0);
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	0e 94 63 01 	call	0x2c6	; 0x2c6 <clearLeds>
	
	if(GameMode){	//light up 2p button
     cc0:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <GameMode>
     cc4:	88 23       	and	r24, r24
     cc6:	b1 f1       	breq	.+108    	; 0xd34 <Display321+0x94>
     cc8:	0f eb       	ldi	r16, 0xBF	; 191
     cca:	12 e0       	ldi	r17, 0x02	; 2
     ccc:	c0 e0       	ldi	r28, 0x00	; 0
		for(uint8_t i = 0; i < 8; i++){
			setButtonLed(Player2ButtonX, Player2ButtonY, i%2);
			if(SoundEnabled){
				DDRB |= (1<<1);	//play page tone
				ICR1 = notes[i];
     cce:	0f 2e       	mov	r0, r31
     cd0:	f6 e8       	ldi	r31, 0x86	; 134
     cd2:	cf 2e       	mov	r12, r31
     cd4:	d1 2c       	mov	r13, r1
     cd6:	f0 2d       	mov	r31, r0
				OCR1A = notes[i] / 2;
     cd8:	0f 2e       	mov	r0, r31
     cda:	f8 e8       	ldi	r31, 0x88	; 136
     cdc:	ef 2e       	mov	r14, r31
     cde:	f1 2c       	mov	r15, r1
     ce0:	f0 2d       	mov	r31, r0
	
	clearLeds(0);
	
	if(GameMode){	//light up 2p button
		for(uint8_t i = 0; i < 8; i++){
			setButtonLed(Player2ButtonX, Player2ButtonY, i%2);
     ce2:	4c 2f       	mov	r20, r28
     ce4:	41 70       	andi	r20, 0x01	; 1
     ce6:	60 e0       	ldi	r22, 0x00	; 0
     ce8:	82 e0       	ldi	r24, 0x02	; 2
     cea:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
			if(SoundEnabled){
     cee:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <SoundEnabled>
     cf2:	88 23       	and	r24, r24
     cf4:	79 f0       	breq	.+30     	; 0xd14 <Display321+0x74>
				DDRB |= (1<<1);	//play page tone
     cf6:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[i];
     cf8:	f8 01       	movw	r30, r16
     cfa:	80 81       	ld	r24, Z
     cfc:	91 81       	ldd	r25, Z+1	; 0x01
     cfe:	f6 01       	movw	r30, r12
     d00:	91 83       	std	Z+1, r25	; 0x01
     d02:	80 83       	st	Z, r24
				OCR1A = notes[i] / 2;
     d04:	f8 01       	movw	r30, r16
     d06:	80 81       	ld	r24, Z
     d08:	91 81       	ldd	r25, Z+1	; 0x01
     d0a:	96 95       	lsr	r25
     d0c:	87 95       	ror	r24
     d0e:	f7 01       	movw	r30, r14
     d10:	91 83       	std	Z+1, r25	; 0x01
     d12:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d14:	ff ef       	ldi	r31, 0xFF	; 255
     d16:	26 e0       	ldi	r18, 0x06	; 6
     d18:	83 e0       	ldi	r24, 0x03	; 3
     d1a:	f1 50       	subi	r31, 0x01	; 1
     d1c:	20 40       	sbci	r18, 0x00	; 0
     d1e:	80 40       	sbci	r24, 0x00	; 0
     d20:	e1 f7       	brne	.-8      	; 0xd1a <Display321+0x7a>
     d22:	00 c0       	rjmp	.+0      	; 0xd24 <Display321+0x84>
     d24:	00 00       	nop
			}
			_delay_ms(62);
			DDRB &= ~(1<<1);
     d26:	21 98       	cbi	0x04, 1	; 4
void Display321(){
	
	clearLeds(0);
	
	if(GameMode){	//light up 2p button
		for(uint8_t i = 0; i < 8; i++){
     d28:	cf 5f       	subi	r28, 0xFF	; 255
     d2a:	0e 5f       	subi	r16, 0xFE	; 254
     d2c:	1f 4f       	sbci	r17, 0xFF	; 255
     d2e:	c8 30       	cpi	r28, 0x08	; 8
     d30:	c1 f6       	brne	.-80     	; 0xce2 <Display321+0x42>
     d32:	35 c0       	rjmp	.+106    	; 0xd9e <Display321+0xfe>
     d34:	0f eb       	ldi	r16, 0xBF	; 191
     d36:	12 e0       	ldi	r17, 0x02	; 2

void Display321(){
	
	clearLeds(0);
	
	if(GameMode){	//light up 2p button
     d38:	c0 e0       	ldi	r28, 0x00	; 0
		}else{
		for(uint8_t i = 0; i < 8; i++){
			setButtonLed(Player1ButtonX, Player1ButtonY, i%2);
			if(SoundEnabled){
				DDRB |= (1<<1);	//play page tone
				ICR1 = notes[i];
     d3a:	0f 2e       	mov	r0, r31
     d3c:	f6 e8       	ldi	r31, 0x86	; 134
     d3e:	cf 2e       	mov	r12, r31
     d40:	d1 2c       	mov	r13, r1
     d42:	f0 2d       	mov	r31, r0
				OCR1A = notes[i] / 2;
     d44:	0f 2e       	mov	r0, r31
     d46:	f8 e8       	ldi	r31, 0x88	; 136
     d48:	ef 2e       	mov	r14, r31
     d4a:	f1 2c       	mov	r15, r1
     d4c:	f0 2d       	mov	r31, r0
			_delay_ms(62);
			DDRB &= ~(1<<1);
		}
		}else{
		for(uint8_t i = 0; i < 8; i++){
			setButtonLed(Player1ButtonX, Player1ButtonY, i%2);
     d4e:	4c 2f       	mov	r20, r28
     d50:	41 70       	andi	r20, 0x01	; 1
     d52:	60 e0       	ldi	r22, 0x00	; 0
     d54:	83 e0       	ldi	r24, 0x03	; 3
     d56:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
			if(SoundEnabled){
     d5a:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <SoundEnabled>
     d5e:	88 23       	and	r24, r24
     d60:	79 f0       	breq	.+30     	; 0xd80 <Display321+0xe0>
				DDRB |= (1<<1);	//play page tone
     d62:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[i];
     d64:	f8 01       	movw	r30, r16
     d66:	80 81       	ld	r24, Z
     d68:	91 81       	ldd	r25, Z+1	; 0x01
     d6a:	f6 01       	movw	r30, r12
     d6c:	91 83       	std	Z+1, r25	; 0x01
     d6e:	80 83       	st	Z, r24
				OCR1A = notes[i] / 2;
     d70:	f8 01       	movw	r30, r16
     d72:	80 81       	ld	r24, Z
     d74:	91 81       	ldd	r25, Z+1	; 0x01
     d76:	96 95       	lsr	r25
     d78:	87 95       	ror	r24
     d7a:	f7 01       	movw	r30, r14
     d7c:	91 83       	std	Z+1, r25	; 0x01
     d7e:	80 83       	st	Z, r24
     d80:	ff ef       	ldi	r31, 0xFF	; 255
     d82:	26 e0       	ldi	r18, 0x06	; 6
     d84:	83 e0       	ldi	r24, 0x03	; 3
     d86:	f1 50       	subi	r31, 0x01	; 1
     d88:	20 40       	sbci	r18, 0x00	; 0
     d8a:	80 40       	sbci	r24, 0x00	; 0
     d8c:	e1 f7       	brne	.-8      	; 0xd86 <Display321+0xe6>
     d8e:	00 c0       	rjmp	.+0      	; 0xd90 <Display321+0xf0>
     d90:	00 00       	nop
			}
			_delay_ms(62);
			DDRB &= ~(1<<1);
     d92:	21 98       	cbi	0x04, 1	; 4
			}
			_delay_ms(62);
			DDRB &= ~(1<<1);
		}
		}else{
		for(uint8_t i = 0; i < 8; i++){
     d94:	cf 5f       	subi	r28, 0xFF	; 255
     d96:	0e 5f       	subi	r16, 0xFE	; 254
     d98:	1f 4f       	sbci	r17, 0xFF	; 255
     d9a:	c8 30       	cpi	r28, 0x08	; 8
     d9c:	c1 f6       	brne	.-80     	; 0xd4e <Display321+0xae>
     d9e:	9f ef       	ldi	r25, 0xFF	; 255
     da0:	ec eb       	ldi	r30, 0xBC	; 188
     da2:	ff e1       	ldi	r31, 0x1F	; 31
     da4:	91 50       	subi	r25, 0x01	; 1
     da6:	e0 40       	sbci	r30, 0x00	; 0
     da8:	f0 40       	sbci	r31, 0x00	; 0
     daa:	e1 f7       	brne	.-8      	; 0xda4 <Display321+0x104>
     dac:	00 c0       	rjmp	.+0      	; 0xdae <Display321+0x10e>
     dae:	00 00       	nop
     db0:	0f 2e       	mov	r0, r31
     db2:	fd e7       	ldi	r31, 0x7D	; 125
     db4:	8f 2e       	mov	r8, r31
     db6:	f2 e0       	ldi	r31, 0x02	; 2
     db8:	9f 2e       	mov	r9, r31
     dba:	f0 2d       	mov	r31, r0
     dbc:	0f 2e       	mov	r0, r31
     dbe:	fe e9       	ldi	r31, 0x9E	; 158
     dc0:	cf 2e       	mov	r12, r31
     dc2:	f2 e0       	ldi	r31, 0x02	; 2
     dc4:	df 2e       	mov	r13, r31
     dc6:	f0 2d       	mov	r31, r0
     dc8:	71 2c       	mov	r7, r1
     dca:	0f 2e       	mov	r0, r31
     dcc:	f3 e0       	ldi	r31, 0x03	; 3
     dce:	ef 2e       	mov	r14, r31
     dd0:	f1 2c       	mov	r15, r1
     dd2:	f0 2d       	mov	r31, r0
	_delay_ms(650);
	for(uint8_t count = 3; count >= 1; count--){
		for(uint8_t disp = 0; disp < 3; disp++){
			setScore(disp, count);
		}
		printf("%d\n", count);
     dd4:	0f 2e       	mov	r0, r31
     dd6:	f5 e6       	ldi	r31, 0x65	; 101
     dd8:	af 2e       	mov	r10, r31
     dda:	f1 e0       	ldi	r31, 0x01	; 1
     ddc:	bf 2e       	mov	r11, r31
     dde:	f0 2d       	mov	r31, r0
     de0:	21 c0       	rjmp	.+66     	; 0xe24 <Display321+0x184>
		clearLeds(0);
		
		for(uint8_t index = 0; index < 11; index++){
			setButtonLed(onledsX[index + ((3-count)*11)], onledsY[index + ((3-count)*11)], 1);
     de2:	f4 01       	movw	r30, r8
     de4:	61 91       	ld	r22, Z+
     de6:	4f 01       	movw	r8, r30
     de8:	41 e0       	ldi	r20, 0x01	; 1
     dea:	89 91       	ld	r24, Y+
     dec:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
			setScore(disp, count);
		}
		printf("%d\n", count);
		clearLeds(0);
		
		for(uint8_t index = 0; index < 11; index++){
     df0:	80 16       	cp	r8, r16
     df2:	91 06       	cpc	r9, r17
     df4:	b1 f7       	brne	.-20     	; 0xde2 <Display321+0x142>
			setButtonLed(onledsX[index + ((3-count)*11)], onledsY[index + ((3-count)*11)], 1);
		}
		playChirp(3-count);
     df6:	87 2d       	mov	r24, r7
     df8:	0e 94 c4 04 	call	0x988	; 0x988 <playChirp>
     dfc:	ff ef       	ldi	r31, 0xFF	; 255
     dfe:	23 ed       	ldi	r18, 0xD3	; 211
     e00:	80 e3       	ldi	r24, 0x30	; 48
     e02:	f1 50       	subi	r31, 0x01	; 1
     e04:	20 40       	sbci	r18, 0x00	; 0
     e06:	80 40       	sbci	r24, 0x00	; 0
     e08:	e1 f7       	brne	.-8      	; 0xe02 <Display321+0x162>
     e0a:	00 c0       	rjmp	.+0      	; 0xe0c <Display321+0x16c>
     e0c:	00 00       	nop
     e0e:	91 e0       	ldi	r25, 0x01	; 1
     e10:	e9 1a       	sub	r14, r25
     e12:	f1 08       	sbc	r15, r1
     e14:	73 94       	inc	r7
     e16:	eb e0       	ldi	r30, 0x0B	; 11
     e18:	ce 0e       	add	r12, r30
     e1a:	d1 1c       	adc	r13, r1
     e1c:	48 01       	movw	r8, r16
			DDRB &= ~(1<<1);
		}
	}

	_delay_ms(650);
	for(uint8_t count = 3; count >= 1; count--){
     e1e:	f3 e0       	ldi	r31, 0x03	; 3
     e20:	7f 16       	cp	r7, r31
     e22:	f1 f0       	breq	.+60     	; 0xe60 <Display321+0x1c0>
		for(uint8_t disp = 0; disp < 3; disp++){
			setScore(disp, count);
     e24:	b7 01       	movw	r22, r14
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
     e2c:	b7 01       	movw	r22, r14
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
     e34:	b7 01       	movw	r22, r14
     e36:	82 e0       	ldi	r24, 0x02	; 2
     e38:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
		}
		printf("%d\n", count);
     e3c:	ff 92       	push	r15
     e3e:	ef 92       	push	r14
     e40:	bf 92       	push	r11
     e42:	af 92       	push	r10
     e44:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <printf>
		clearLeds(0);
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	0e 94 63 01 	call	0x2c6	; 0x2c6 <clearLeds>
     e4e:	84 01       	movw	r16, r8
     e50:	05 5f       	subi	r16, 0xF5	; 245
     e52:	1f 4f       	sbci	r17, 0xFF	; 255
     e54:	0f 90       	pop	r0
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	e6 01       	movw	r28, r12
     e5e:	c1 cf       	rjmp	.-126    	; 0xde2 <Display321+0x142>
			setButtonLed(onledsX[index + ((3-count)*11)], onledsY[index + ((3-count)*11)], 1);
		}
		playChirp(3-count);
		_delay_ms(1000);
	}
}
     e60:	df 91       	pop	r29
     e62:	cf 91       	pop	r28
     e64:	1f 91       	pop	r17
     e66:	0f 91       	pop	r16
     e68:	ff 90       	pop	r15
     e6a:	ef 90       	pop	r14
     e6c:	df 90       	pop	r13
     e6e:	cf 90       	pop	r12
     e70:	bf 90       	pop	r11
     e72:	af 90       	pop	r10
     e74:	9f 90       	pop	r9
     e76:	8f 90       	pop	r8
     e78:	7f 90       	pop	r7
     e7a:	08 95       	ret

00000e7c <Game>:
			return;
		}
	}
}

void Game(){
     e7c:	2f 92       	push	r2
     e7e:	3f 92       	push	r3
     e80:	4f 92       	push	r4
     e82:	5f 92       	push	r5
     e84:	6f 92       	push	r6
     e86:	7f 92       	push	r7
     e88:	8f 92       	push	r8
     e8a:	9f 92       	push	r9
     e8c:	af 92       	push	r10
     e8e:	bf 92       	push	r11
     e90:	cf 92       	push	r12
     e92:	df 92       	push	r13
     e94:	ef 92       	push	r14
     e96:	ff 92       	push	r15
     e98:	0f 93       	push	r16
     e9a:	1f 93       	push	r17
     e9c:	cf 93       	push	r28
     e9e:	df 93       	push	r29
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
     ea4:	29 97       	sbiw	r28, 0x09	; 9
     ea6:	0f b6       	in	r0, 0x3f	; 63
     ea8:	f8 94       	cli
     eaa:	de bf       	out	0x3e, r29	; 62
     eac:	0f be       	out	0x3f, r0	; 63
     eae:	cd bf       	out	0x3d, r28	; 61

	// game mode is set when leaving attract mode
	Display321();
     eb0:	0e 94 50 06 	call	0xca0	; 0xca0 <Display321>
	printf("GAME START\n");
     eb4:	8f e4       	ldi	r24, 0x4F	; 79
     eb6:	91 e0       	ldi	r25, 0x01	; 1
     eb8:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <puts>
	
	P1Score = 0;			// reset scores and multipliers
     ebc:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <P1Score+0x1>
     ec0:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <P1Score>
	P2Score = 0;
     ec4:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <P2Score+0x1>
     ec8:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <P2Score>
	P1Multiplier = 1;
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <P1Multiplier>
	P2Multiplier = 1;
     ed2:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <P2Multiplier>
     ed6:	0f 2e       	mov	r0, r31
     ed8:	f1 e0       	ldi	r31, 0x01	; 1
     eda:	af 2e       	mov	r10, r31
     edc:	f3 e0       	ldi	r31, 0x03	; 3
     ede:	bf 2e       	mov	r11, r31
     ee0:	f0 2d       	mov	r31, r0
     ee2:	0f 2e       	mov	r0, r31
     ee4:	f0 ef       	ldi	r31, 0xF0	; 240
     ee6:	ef 2e       	mov	r14, r31
     ee8:	f2 e0       	ldi	r31, 0x02	; 2
     eea:	ff 2e       	mov	r15, r31
     eec:	f0 2d       	mov	r31, r0
     eee:	0f 2e       	mov	r0, r31
     ef0:	f4 e0       	ldi	r31, 0x04	; 4
     ef2:	6f 2e       	mov	r6, r31
     ef4:	f3 e0       	ldi	r31, 0x03	; 3
     ef6:	7f 2e       	mov	r7, r31
     ef8:	f0 2d       	mov	r31, r0
     efa:	87 01       	movw	r16, r14

	// pick 6 random leds to enable regardless of mode
	// (3 left side 3 right side)
	for(int i = 0; i < 3; i++){
		gameledsX[i] = rand() % 3;			// turn 3 on right side
     efc:	0f 2e       	mov	r0, r31
     efe:	f3 e0       	ldi	r31, 0x03	; 3
     f00:	8f 2e       	mov	r8, r31
     f02:	91 2c       	mov	r9, r1
     f04:	f0 2d       	mov	r31, r0
		gameledsY[i] = 1+ (rand() % 5);
     f06:	0f 2e       	mov	r0, r31
     f08:	f5 e0       	ldi	r31, 0x05	; 5
     f0a:	cf 2e       	mov	r12, r31
     f0c:	d1 2c       	mov	r13, r1
     f0e:	f0 2d       	mov	r31, r0
     f10:	ba 82       	std	Y+2, r11	; 0x02
     f12:	a9 82       	std	Y+1, r10	; 0x01
	P2Multiplier = 1;

	// pick 6 random leds to enable regardless of mode
	// (3 left side 3 right side)
	for(int i = 0; i < 3; i++){
		gameledsX[i] = rand() % 3;			// turn 3 on right side
     f14:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <rand>
     f18:	b4 01       	movw	r22, r8
     f1a:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <__divmodhi4>
     f1e:	e9 81       	ldd	r30, Y+1	; 0x01
     f20:	fa 81       	ldd	r31, Y+2	; 0x02
     f22:	81 93       	st	Z+, r24
     f24:	fa 83       	std	Y+2, r31	; 0x02
     f26:	e9 83       	std	Y+1, r30	; 0x01
		gameledsY[i] = 1+ (rand() % 5);
     f28:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <rand>
     f2c:	b6 01       	movw	r22, r12
     f2e:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <__divmodhi4>
     f32:	8f 5f       	subi	r24, 0xFF	; 255
     f34:	f8 01       	movw	r30, r16
     f36:	81 93       	st	Z+, r24
     f38:	8f 01       	movw	r16, r30
		
		gameledsX[i+3] = 3 + rand() % 3;	// turn 3 on left side
     f3a:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <rand>
     f3e:	b4 01       	movw	r22, r8
     f40:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <__divmodhi4>
     f44:	8d 5f       	subi	r24, 0xFD	; 253
     f46:	e9 81       	ldd	r30, Y+1	; 0x01
     f48:	fa 81       	ldd	r31, Y+2	; 0x02
     f4a:	82 83       	std	Z+2, r24	; 0x02
		gameledsY[i+3] = 1+(rand() % 5);
     f4c:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <rand>
     f50:	b6 01       	movw	r22, r12
     f52:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <__divmodhi4>
     f56:	8f 5f       	subi	r24, 0xFF	; 255
     f58:	f8 01       	movw	r30, r16
     f5a:	82 83       	std	Z+2, r24	; 0x02
	P1Multiplier = 1;
	P2Multiplier = 1;

	// pick 6 random leds to enable regardless of mode
	// (3 left side 3 right side)
	for(int i = 0; i < 3; i++){
     f5c:	29 81       	ldd	r18, Y+1	; 0x01
     f5e:	3a 81       	ldd	r19, Y+2	; 0x02
     f60:	26 15       	cp	r18, r6
     f62:	37 05       	cpc	r19, r7
     f64:	b9 f6       	brne	.-82     	; 0xf14 <Game+0x98>
		gameledsY[i+3] = 1+(rand() % 5);
	}
	
	uint16_t ticksrem;			// used in resetting multiplier
	
	TimeRemaining = RoundTime;
     f66:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <RoundTime>
     f6a:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <TimeRemaining>
	printf("round time %d\n", TimeRemaining);
     f6e:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <TimeRemaining>
     f72:	1f 92       	push	r1
     f74:	8f 93       	push	r24
     f76:	8a e5       	ldi	r24, 0x5A	; 90
     f78:	91 e0       	ldi	r25, 0x01	; 1
     f7a:	9f 93       	push	r25
     f7c:	8f 93       	push	r24
     f7e:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <printf>
	TCNT4 = 0;					// reset timer
     f82:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7e00a5>
     f86:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7e00a4>
	
	setScore(0, HighScore1P);	// will be replaced if 2p mode
     f8a:	60 91 fa 02 	lds	r22, 0x02FA	; 0x8002fa <HighScore1P>
     f8e:	70 91 fb 02 	lds	r23, 0x02FB	; 0x8002fb <HighScore1P+0x1>
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
	uint8_t lastTime = TimeRemaining;
     f98:	30 91 f9 02 	lds	r19, 0x02F9	; 0x8002f9 <TimeRemaining>
     f9c:	3b 83       	std	Y+3, r19	; 0x03
	while(TimeRemaining > 0){
     f9e:	0f 90       	pop	r0
     fa0:	0f 90       	pop	r0
     fa2:	0f 90       	pop	r0
     fa4:	0f 90       	pop	r0
						//gameLedsX[i]
						newX = 3 + (rand() % 3);
						}else{
						newX = rand() % 3;
					}
					newY = 1 + (rand() % 5);
     fa6:	0f 2e       	mov	r0, r31
     fa8:	f5 e0       	ldi	r31, 0x05	; 5
     faa:	2f 2e       	mov	r2, r31
     fac:	31 2c       	mov	r3, r1
     fae:	f0 2d       	mov	r31, r0
     fb0:	0f 2e       	mov	r0, r31
     fb2:	f7 e0       	ldi	r31, 0x07	; 7
     fb4:	8f 2e       	mov	r8, r31
     fb6:	f3 e0       	ldi	r31, 0x03	; 3
     fb8:	9f 2e       	mov	r9, r31
     fba:	f0 2d       	mov	r31, r0
	printf("round time %d\n", TimeRemaining);
	TCNT4 = 0;					// reset timer
	
	setScore(0, HighScore1P);	// will be replaced if 2p mode
	uint8_t lastTime = TimeRemaining;
	while(TimeRemaining > 0){
     fbc:	ea c1       	rjmp	.+980    	; 0x1392 <Game+0x516>
		
		
		if((SoundEnabled) & (lastTime != TimeRemaining) & (soundPlaying == 0)){
     fbe:	40 91 f9 02 	lds	r20, 0x02F9	; 0x8002f9 <TimeRemaining>
     fc2:	50 91 0b 03 	lds	r21, 0x030B	; 0x80030b <soundPlaying>
     fc6:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <SoundEnabled>
     fca:	28 2f       	mov	r18, r24
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	55 23       	and	r21, r21
     fd4:	11 f0       	breq	.+4      	; 0xfda <Game+0x15e>
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	82 23       	and	r24, r18
     fdc:	93 23       	and	r25, r19
     fde:	21 e0       	ldi	r18, 0x01	; 1
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	5b 81       	ldd	r21, Y+3	; 0x03
     fe4:	54 13       	cpse	r21, r20
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <Game+0x170>
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	82 23       	and	r24, r18
     fee:	93 23       	and	r25, r19
     ff0:	89 2b       	or	r24, r25
     ff2:	89 f1       	breq	.+98     	; 0x1056 <Game+0x1da>
			lastTime = TimeRemaining;
     ff4:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <TimeRemaining>
     ff8:	8b 83       	std	Y+3, r24	; 0x03
			DDRB |= (1<<1);	//make ticking noise
     ffa:	21 9a       	sbi	0x04, 1	; 4
			ICR1 = notes[4 + (TimeRemaining%2)];
     ffc:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <TimeRemaining>
    1000:	81 70       	andi	r24, 0x01	; 1
    1002:	8c 83       	std	Y+4, r24	; 0x04
    1004:	1d 82       	std	Y+5, r1	; 0x05
    1006:	ec 81       	ldd	r30, Y+4	; 0x04
    1008:	fd 81       	ldd	r31, Y+5	; 0x05
    100a:	34 96       	adiw	r30, 0x04	; 4
    100c:	ee 0f       	add	r30, r30
    100e:	ff 1f       	adc	r31, r31
    1010:	e1 54       	subi	r30, 0x41	; 65
    1012:	fd 4f       	sbci	r31, 0xFD	; 253
    1014:	80 81       	ld	r24, Z
    1016:	91 81       	ldd	r25, Z+1	; 0x01
    1018:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    101c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
			OCR1A = notes[4 + (TimeRemaining%2)] / 2;
    1020:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <TimeRemaining>
    1024:	81 70       	andi	r24, 0x01	; 1
    1026:	8e 83       	std	Y+6, r24	; 0x06
    1028:	1f 82       	std	Y+7, r1	; 0x07
    102a:	ee 81       	ldd	r30, Y+6	; 0x06
    102c:	ff 81       	ldd	r31, Y+7	; 0x07
    102e:	34 96       	adiw	r30, 0x04	; 4
    1030:	ee 0f       	add	r30, r30
    1032:	ff 1f       	adc	r31, r31
    1034:	e1 54       	subi	r30, 0x41	; 65
    1036:	fd 4f       	sbci	r31, 0xFD	; 253
    1038:	80 81       	ld	r24, Z
    103a:	91 81       	ldd	r25, Z+1	; 0x01
    103c:	96 95       	lsr	r25
    103e:	87 95       	ror	r24
    1040:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1044:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1048:	ef ea       	ldi	r30, 0xAF	; 175
    104a:	f6 e3       	ldi	r31, 0x36	; 54
    104c:	31 97       	sbiw	r30, 0x01	; 1
    104e:	f1 f7       	brne	.-4      	; 0x104c <Game+0x1d0>
    1050:	00 c0       	rjmp	.+0      	; 0x1052 <Game+0x1d6>
    1052:	00 00       	nop
			_delay_us(3500);
			DDRB &= ~(1<<1);
    1054:	21 98       	cbi	0x04, 1	; 4
		}
		//printf("%ds REMAINING\n", TimeRemaining);
		
		setScore(1, TimeRemaining);
    1056:	60 91 f9 02 	lds	r22, 0x02F9	; 0x8002f9 <TimeRemaining>
    105a:	70 e0       	ldi	r23, 0x00	; 0
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
		if(GameMode == 1){
    1062:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <GameMode>
    1066:	81 30       	cpi	r24, 0x01	; 1
    1068:	79 f4       	brne	.+30     	; 0x1088 <Game+0x20c>
			setScore(0, P1Score);	// if 2p mode, show left p1 and right p2 scores
    106a:	60 91 fc 02 	lds	r22, 0x02FC	; 0x8002fc <P1Score>
    106e:	70 91 fd 02 	lds	r23, 0x02FD	; 0x8002fd <P1Score+0x1>
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
			setScore(2, P2Score);
    1078:	60 91 fe 02 	lds	r22, 0x02FE	; 0x8002fe <P2Score>
    107c:	70 91 ff 02 	lds	r23, 0x02FF	; 0x8002ff <P2Score+0x1>
    1080:	82 e0       	ldi	r24, 0x02	; 2
    1082:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
    1086:	9a c1       	rjmp	.+820    	; 0x13bc <Game+0x540>
			}else{
			setScore(2, P1Score);	// otherwise show p1 score and high score
    1088:	60 91 fc 02 	lds	r22, 0x02FC	; 0x8002fc <P1Score>
    108c:	70 91 fd 02 	lds	r23, 0x02FD	; 0x8002fd <P1Score+0x1>
    1090:	82 e0       	ldi	r24, 0x02	; 2
    1092:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
    1096:	92 c1       	rjmp	.+804    	; 0x13bc <Game+0x540>
    1098:	7a 82       	std	Y+2, r7	; 0x02
    109a:	69 82       	std	Y+1, r6	; 0x01
    109c:	c8 84       	ldd	r12, Y+8	; 0x08
    109e:	d9 84       	ldd	r13, Y+9	; 0x09
		}

		for(uint8_t i = 0; i < 6; i++){
			if (isButtonDown(gameledsX[i], gameledsY[i]) ){
    10a0:	f3 01       	movw	r30, r6
    10a2:	60 81       	ld	r22, Z
    10a4:	f6 01       	movw	r30, r12
    10a6:	80 81       	ld	r24, Z
    10a8:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    10ac:	88 23       	and	r24, r24
    10ae:	09 f4       	brne	.+2      	; 0x10b2 <Game+0x236>
    10b0:	e9 c0       	rjmp	.+466    	; 0x1284 <Game+0x408>
    10b2:	50 2e       	mov	r5, r16
    10b4:	01 2f       	mov	r16, r17

				uint8_t newX, newY;
				while(1){				// repeatedly search for new open location
					if(i >= 3){
    10b6:	03 30       	cpi	r16, 0x03	; 3
    10b8:	48 f0       	brcs	.+18     	; 0x10cc <Game+0x250>
						//gameLedsX[i]
						newX = 3 + (rand() % 3);
    10ba:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <rand>
    10be:	63 e0       	ldi	r22, 0x03	; 3
    10c0:	70 e0       	ldi	r23, 0x00	; 0
    10c2:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <__divmodhi4>
    10c6:	13 e0       	ldi	r17, 0x03	; 3
    10c8:	18 0f       	add	r17, r24
    10ca:	07 c0       	rjmp	.+14     	; 0x10da <Game+0x25e>
						}else{
						newX = rand() % 3;
    10cc:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <rand>
    10d0:	63 e0       	ldi	r22, 0x03	; 3
    10d2:	70 e0       	ldi	r23, 0x00	; 0
    10d4:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <__divmodhi4>
    10d8:	18 2f       	mov	r17, r24
					}
					newY = 1 + (rand() % 5);
    10da:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <rand>
    10de:	b1 01       	movw	r22, r2
    10e0:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <__divmodhi4>
    10e4:	8f 5f       	subi	r24, 0xFF	; 255
    10e6:	d7 01       	movw	r26, r14
    10e8:	f5 01       	movw	r30, r10
					//gameLedsY
					
					uint8_t clearSpot = 1;
    10ea:	25 2d       	mov	r18, r5
					for(uint8_t idx = 0; idx < 6; idx++){
						if((gameledsX[idx] == newX) && (gameledsY[idx] == newY)){
    10ec:	91 91       	ld	r25, Z+
    10ee:	19 13       	cpse	r17, r25
    10f0:	04 c0       	rjmp	.+8      	; 0x10fa <Game+0x27e>
    10f2:	9c 91       	ld	r25, X
    10f4:	89 13       	cpse	r24, r25
    10f6:	01 c0       	rjmp	.+2      	; 0x10fa <Game+0x27e>
							clearSpot = 0;	// "new" location is in use
    10f8:	24 2d       	mov	r18, r4
    10fa:	11 96       	adiw	r26, 0x01	; 1
					}
					newY = 1 + (rand() % 5);
					//gameLedsY
					
					uint8_t clearSpot = 1;
					for(uint8_t idx = 0; idx < 6; idx++){
    10fc:	e8 15       	cp	r30, r8
    10fe:	f9 05       	cpc	r31, r9
    1100:	a9 f7       	brne	.-22     	; 0x10ec <Game+0x270>
						if((gameledsX[idx] == newX) && (gameledsY[idx] == newY)){
							clearSpot = 0;	// "new" location is in use
						}
					}
					if(clearSpot){
    1102:	22 23       	and	r18, r18
    1104:	c1 f2       	breq	.-80     	; 0x10b6 <Game+0x23a>
    1106:	95 2d       	mov	r25, r5
    1108:	51 2e       	mov	r5, r17
    110a:	10 2f       	mov	r17, r16
    110c:	09 2f       	mov	r16, r25
						gameledsX[i] = newX;
    110e:	f6 01       	movw	r30, r12
    1110:	50 82       	st	Z, r5
						gameledsY[i] = newY;
    1112:	e9 81       	ldd	r30, Y+1	; 0x01
    1114:	fa 81       	ldd	r31, Y+2	; 0x02
    1116:	80 83       	st	Z, r24
						break;
					}
					
				}

				if(GameMode == 0){
    1118:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <GameMode>
    111c:	81 11       	cpse	r24, r1
    111e:	4f c0       	rjmp	.+158    	; 0x11be <Game+0x342>
					IncrementScore(0, P1Multiplier);	// add score and inc multiplier (singleplayer)
    1120:	60 91 ec 02 	lds	r22, 0x02EC	; 0x8002ec <P1Multiplier>
    1124:	70 e0       	ldi	r23, 0x00	; 0
    1126:	0e 94 9e 04 	call	0x93c	; 0x93c <IncrementScore>
					playChirp(P1Multiplier);
    112a:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <P1Multiplier>
    112e:	0e 94 c4 04 	call	0x988	; 0x988 <playChirp>
					
					P1Multiplier = (P1Multiplier == MultiplierMax) ? MultiplierMax : (P1Multiplier + 1);
    1132:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <P1Multiplier>
    1136:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <MultiplierMax>
    113a:	98 17       	cp	r25, r24
    113c:	11 f0       	breq	.+4      	; 0x1142 <Game+0x2c6>
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	89 0f       	add	r24, r25
    1142:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <P1Multiplier>
					ticksrem = 15*MultTimeKill;
    1146:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <MultTimeKill>
    114a:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <MultTimeKill+0x1>
    114e:	4f e0       	ldi	r20, 0x0F	; 15
    1150:	48 9f       	mul	r20, r24
    1152:	90 01       	movw	r18, r0
    1154:	49 9f       	mul	r20, r25
    1156:	30 0d       	add	r19, r0
    1158:	11 24       	eor	r1, r1
					P1MultTimeT = OCR4A - TCNT4;	// subseconds counting down
    115a:	e8 ea       	ldi	r30, 0xA8	; 168
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	91 81       	ldd	r25, Z+1	; 0x01
    1162:	e4 ea       	ldi	r30, 0xA4	; 164
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	40 81       	ld	r20, Z
    1168:	51 81       	ldd	r21, Z+1	; 0x01
    116a:	84 1b       	sub	r24, r20
    116c:	95 0b       	sbc	r25, r21
    116e:	90 93 f7 02 	sts	0x02F7, r25	; 0x8002f7 <P1MultTimeT+0x1>
    1172:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <P1MultTimeT>
					if(ticksrem > P1MultTimeT){		//
    1176:	82 17       	cp	r24, r18
    1178:	93 07       	cpc	r25, r19
    117a:	b0 f4       	brcc	.+44     	; 0x11a8 <Game+0x32c>
						P1MultTimeS = TimeRemaining - MultiplierDecaySeconds;
    117c:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <TimeRemaining>
    1180:	81 50       	subi	r24, 0x01	; 1
    1182:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <P1MultTimeS>
						P1MultTimeT = (OCR4A - (ticksrem - P2MultTimeT));
    1186:	e8 ea       	ldi	r30, 0xA8	; 168
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	40 81       	ld	r20, Z
    118c:	51 81       	ldd	r21, Z+1	; 0x01
    118e:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <P2MultTimeT>
    1192:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <P2MultTimeT+0x1>
    1196:	84 0f       	add	r24, r20
    1198:	95 1f       	adc	r25, r21
    119a:	82 1b       	sub	r24, r18
    119c:	93 0b       	sbc	r25, r19
    119e:	90 93 f7 02 	sts	0x02F7, r25	; 0x8002f7 <P1MultTimeT+0x1>
    11a2:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <P1MultTimeT>
    11a6:	6e c0       	rjmp	.+220    	; 0x1284 <Game+0x408>
						}else{
						P1MultTimeS = TimeRemaining;
    11a8:	40 91 f9 02 	lds	r20, 0x02F9	; 0x8002f9 <TimeRemaining>
    11ac:	40 93 00 03 	sts	0x0300, r20	; 0x800300 <P1MultTimeS>
						P1MultTimeT = P1MultTimeT - ticksrem;	// this second, earlier
    11b0:	82 1b       	sub	r24, r18
    11b2:	93 0b       	sbc	r25, r19
    11b4:	90 93 f7 02 	sts	0x02F7, r25	; 0x8002f7 <P1MultTimeT+0x1>
    11b8:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <P1MultTimeT>
    11bc:	63 c0       	rjmp	.+198    	; 0x1284 <Game+0x408>
					}
					
					}else{
					if(i >= 3){
    11be:	13 30       	cpi	r17, 0x03	; 3
    11c0:	08 f4       	brcc	.+2      	; 0x11c4 <Game+0x348>
    11c2:	4c c0       	rjmp	.+152    	; 0x125c <Game+0x3e0>
						IncrementScore(1, P2Multiplier);	// add depending on side of button pressed
    11c4:	60 91 eb 02 	lds	r22, 0x02EB	; 0x8002eb <P2Multiplier>
    11c8:	70 e0       	ldi	r23, 0x00	; 0
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	0e 94 9e 04 	call	0x93c	; 0x93c <IncrementScore>
						playChirp(P2Multiplier);
    11d0:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <P2Multiplier>
    11d4:	0e 94 c4 04 	call	0x988	; 0x988 <playChirp>
						
						P2Multiplier = (P2Multiplier == MultiplierMax) ? MultiplierMax : (P2Multiplier + 1);
    11d8:	90 91 eb 02 	lds	r25, 0x02EB	; 0x8002eb <P2Multiplier>
    11dc:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <MultiplierMax>
    11e0:	98 17       	cp	r25, r24
    11e2:	11 f0       	breq	.+4      	; 0x11e8 <Game+0x36c>
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	89 0f       	add	r24, r25
    11e8:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <P2Multiplier>
						
						ticksrem = 15*MultTimeKill;
    11ec:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <MultTimeKill>
    11f0:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <MultTimeKill+0x1>
    11f4:	4f e0       	ldi	r20, 0x0F	; 15
    11f6:	48 9f       	mul	r20, r24
    11f8:	90 01       	movw	r18, r0
    11fa:	49 9f       	mul	r20, r25
    11fc:	30 0d       	add	r19, r0
    11fe:	11 24       	eor	r1, r1
						P2MultTimeT = OCR4A - TCNT4;	// subseconds counting down
    1200:	e8 ea       	ldi	r30, 0xA8	; 168
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	91 81       	ldd	r25, Z+1	; 0x01
    1208:	e4 ea       	ldi	r30, 0xA4	; 164
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	40 81       	ld	r20, Z
    120e:	51 81       	ldd	r21, Z+1	; 0x01
    1210:	84 1b       	sub	r24, r20
    1212:	95 0b       	sbc	r25, r21
    1214:	90 93 ef 02 	sts	0x02EF, r25	; 0x8002ef <P2MultTimeT+0x1>
    1218:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <P2MultTimeT>
						if(ticksrem > P2MultTimeT){		// 
    121c:	82 17       	cp	r24, r18
    121e:	93 07       	cpc	r25, r19
    1220:	90 f4       	brcc	.+36     	; 0x1246 <Game+0x3ca>
							P2MultTimeS = TimeRemaining - MultiplierDecaySeconds;
    1222:	40 91 f9 02 	lds	r20, 0x02F9	; 0x8002f9 <TimeRemaining>
    1226:	41 50       	subi	r20, 0x01	; 1
    1228:	40 93 f8 02 	sts	0x02F8, r20	; 0x8002f8 <P2MultTimeS>
							P2MultTimeT = (OCR4A - (ticksrem - P2MultTimeT));
    122c:	e8 ea       	ldi	r30, 0xA8	; 168
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	40 81       	ld	r20, Z
    1232:	51 81       	ldd	r21, Z+1	; 0x01
    1234:	84 0f       	add	r24, r20
    1236:	95 1f       	adc	r25, r21
    1238:	82 1b       	sub	r24, r18
    123a:	93 0b       	sbc	r25, r19
    123c:	90 93 ef 02 	sts	0x02EF, r25	; 0x8002ef <P2MultTimeT+0x1>
    1240:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <P2MultTimeT>
    1244:	1f c0       	rjmp	.+62     	; 0x1284 <Game+0x408>
						}else{
							P2MultTimeS = TimeRemaining;
    1246:	40 91 f9 02 	lds	r20, 0x02F9	; 0x8002f9 <TimeRemaining>
    124a:	40 93 f8 02 	sts	0x02F8, r20	; 0x8002f8 <P2MultTimeS>
							P2MultTimeT = P2MultTimeT - ticksrem;	// this second, earlier
    124e:	82 1b       	sub	r24, r18
    1250:	93 0b       	sbc	r25, r19
    1252:	90 93 ef 02 	sts	0x02EF, r25	; 0x8002ef <P2MultTimeT+0x1>
    1256:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <P2MultTimeT>
    125a:	14 c0       	rjmp	.+40     	; 0x1284 <Game+0x408>
						}
						
						}else{
						IncrementScore(0, P1Multiplier);
    125c:	60 91 ec 02 	lds	r22, 0x02EC	; 0x8002ec <P1Multiplier>
    1260:	70 e0       	ldi	r23, 0x00	; 0
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	0e 94 9e 04 	call	0x93c	; 0x93c <IncrementScore>
						playChirp(P1Multiplier);
    1268:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <P1Multiplier>
    126c:	0e 94 c4 04 	call	0x988	; 0x988 <playChirp>
						
						P1Multiplier = (P1Multiplier == MultiplierMax) ? MultiplierMax : (P1Multiplier + 1);
    1270:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <P1Multiplier>
    1274:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <MultiplierMax>
    1278:	98 17       	cp	r25, r24
    127a:	11 f0       	breq	.+4      	; 0x1280 <Game+0x404>
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	89 0f       	add	r24, r25
    1280:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <P1Multiplier>
			setScore(2, P2Score);
			}else{
			setScore(2, P1Score);	// otherwise show p1 score and high score
		}

		for(uint8_t i = 0; i < 6; i++){
    1284:	1f 5f       	subi	r17, 0xFF	; 255
    1286:	ff ef       	ldi	r31, 0xFF	; 255
    1288:	6f 1a       	sub	r6, r31
    128a:	7f 0a       	sbc	r7, r31
    128c:	28 85       	ldd	r18, Y+8	; 0x08
    128e:	39 85       	ldd	r19, Y+9	; 0x09
    1290:	2f 5f       	subi	r18, 0xFF	; 255
    1292:	3f 4f       	sbci	r19, 0xFF	; 255
    1294:	39 87       	std	Y+9, r19	; 0x09
    1296:	28 87       	std	Y+8, r18	; 0x08
    1298:	16 30       	cpi	r17, 0x06	; 6
    129a:	09 f0       	breq	.+2      	; 0x129e <Game+0x422>
    129c:	fd ce       	rjmp	.-518    	; 0x1098 <Game+0x21c>
		}
		
		
		
		
		if (P1Multiplier > 1){
    129e:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <P1Multiplier>
    12a2:	82 30       	cpi	r24, 0x02	; 2
    12a4:	d0 f0       	brcs	.+52     	; 0x12da <Game+0x45e>
			uint16_t tcountdown = OCR4A - TCNT4;
    12a6:	e8 ea       	ldi	r30, 0xA8	; 168
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	91 81       	ldd	r25, Z+1	; 0x01
    12ae:	e4 ea       	ldi	r30, 0xA4	; 164
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	40 81       	ld	r20, Z
    12b4:	51 81       	ldd	r21, Z+1	; 0x01
			if((TimeRemaining == P1MultTimeS) && (tcountdown <= P1MultTimeT)){
    12b6:	30 91 f9 02 	lds	r19, 0x02F9	; 0x8002f9 <TimeRemaining>
    12ba:	20 91 00 03 	lds	r18, 0x0300	; 0x800300 <P1MultTimeS>
    12be:	32 13       	cpse	r19, r18
    12c0:	0c c0       	rjmp	.+24     	; 0x12da <Game+0x45e>
    12c2:	84 1b       	sub	r24, r20
    12c4:	95 0b       	sbc	r25, r21
    12c6:	20 91 f6 02 	lds	r18, 0x02F6	; 0x8002f6 <P1MultTimeT>
    12ca:	30 91 f7 02 	lds	r19, 0x02F7	; 0x8002f7 <P1MultTimeT+0x1>
    12ce:	28 17       	cp	r18, r24
    12d0:	39 07       	cpc	r19, r25
    12d2:	18 f0       	brcs	.+6      	; 0x12da <Game+0x45e>
				P1Multiplier = 1;
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <P1Multiplier>
			}
		}
		
		if (P2Multiplier > 1){
    12da:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <P2Multiplier>
    12de:	82 30       	cpi	r24, 0x02	; 2
    12e0:	08 f4       	brcc	.+2      	; 0x12e4 <Game+0x468>
    12e2:	73 c0       	rjmp	.+230    	; 0x13ca <Game+0x54e>
			uint16_t tcountdown = OCR4A - TCNT4;
    12e4:	e8 ea       	ldi	r30, 0xA8	; 168
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	91 81       	ldd	r25, Z+1	; 0x01
    12ec:	e4 ea       	ldi	r30, 0xA4	; 164
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	40 81       	ld	r20, Z
    12f2:	51 81       	ldd	r21, Z+1	; 0x01
			if((TimeRemaining == P2MultTimeS) && (tcountdown <= P2MultTimeT)){
    12f4:	30 91 f9 02 	lds	r19, 0x02F9	; 0x8002f9 <TimeRemaining>
    12f8:	20 91 f8 02 	lds	r18, 0x02F8	; 0x8002f8 <P2MultTimeS>
    12fc:	32 13       	cpse	r19, r18
    12fe:	65 c0       	rjmp	.+202    	; 0x13ca <Game+0x54e>
    1300:	84 1b       	sub	r24, r20
    1302:	95 0b       	sbc	r25, r21
    1304:	20 91 ee 02 	lds	r18, 0x02EE	; 0x8002ee <P2MultTimeT>
    1308:	30 91 ef 02 	lds	r19, 0x02EF	; 0x8002ef <P2MultTimeT+0x1>
    130c:	28 17       	cp	r18, r24
    130e:	39 07       	cpc	r19, r25
    1310:	08 f4       	brcc	.+2      	; 0x1314 <Game+0x498>
    1312:	5b c0       	rjmp	.+182    	; 0x13ca <Game+0x54e>
				P2Multiplier = 1;
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <P2Multiplier>
    131a:	57 c0       	rjmp	.+174    	; 0x13ca <Game+0x54e>
		
		for(uint8_t ledIndexX = 0; ledIndexX < 6; ledIndexX++){
			for(uint8_t ledIndexY = 0; ledIndexY < 6; ledIndexY++){
				uint8_t found = 0;
				for(uint8_t ledIndex = 0; ledIndex < 6; ledIndex++){
					if((ledIndexX == gameledsX[ledIndex]) && (ledIndexY == gameledsY[ledIndex]))	//led is on in game
    131c:	81 91       	ld	r24, Z+
    131e:	29 81       	ldd	r18, Y+1	; 0x01
    1320:	82 13       	cpse	r24, r18
    1322:	04 c0       	rjmp	.+8      	; 0x132c <Game+0x4b0>
    1324:	8c 91       	ld	r24, X
    1326:	38 85       	ldd	r19, Y+8	; 0x08
    1328:	83 17       	cp	r24, r19
    132a:	31 f0       	breq	.+12     	; 0x1338 <Game+0x4bc>
    132c:	11 96       	adiw	r26, 0x01	; 1
		
		
		for(uint8_t ledIndexX = 0; ledIndexX < 6; ledIndexX++){
			for(uint8_t ledIndexY = 0; ledIndexY < 6; ledIndexY++){
				uint8_t found = 0;
				for(uint8_t ledIndex = 0; ledIndex < 6; ledIndex++){
    132e:	8e 16       	cp	r8, r30
    1330:	9f 06       	cpc	r9, r31
    1332:	a1 f7       	brne	.-24     	; 0x131c <Game+0x4a0>
		}
		
		
		for(uint8_t ledIndexX = 0; ledIndexX < 6; ledIndexX++){
			for(uint8_t ledIndexY = 0; ledIndexY < 6; ledIndexY++){
				uint8_t found = 0;
    1334:	41 2f       	mov	r20, r17
    1336:	01 c0       	rjmp	.+2      	; 0x133a <Game+0x4be>
				for(uint8_t ledIndex = 0; ledIndex < 6; ledIndex++){
					if((ledIndexX == gameledsX[ledIndex]) && (ledIndexY == gameledsY[ledIndex]))	//led is on in game
					{
						found = 1;
    1338:	40 2f       	mov	r20, r16
						break;
					}
				}
				setButtonLed(ledIndexX, ledIndexY, found);
    133a:	68 85       	ldd	r22, Y+8	; 0x08
    133c:	89 81       	ldd	r24, Y+1	; 0x01
    133e:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
			}
		}
		
		
		for(uint8_t ledIndexX = 0; ledIndexX < 6; ledIndexX++){
			for(uint8_t ledIndexY = 0; ledIndexY < 6; ledIndexY++){
    1342:	48 85       	ldd	r20, Y+8	; 0x08
    1344:	4f 5f       	subi	r20, 0xFF	; 255
    1346:	48 87       	std	Y+8, r20	; 0x08
    1348:	46 30       	cpi	r20, 0x06	; 6
    134a:	19 f0       	breq	.+6      	; 0x1352 <Game+0x4d6>
					//gameLedsY
					
					uint8_t clearSpot = 1;
					for(uint8_t idx = 0; idx < 6; idx++){
						if((gameledsX[idx] == newX) && (gameledsY[idx] == newY)){
							clearSpot = 0;	// "new" location is in use
    134c:	d7 01       	movw	r26, r14
    134e:	f5 01       	movw	r30, r10
    1350:	e5 cf       	rjmp	.-54     	; 0x131c <Game+0x4a0>
				P2Multiplier = 1;
			}
		}
		
		
		for(uint8_t ledIndexX = 0; ledIndexX < 6; ledIndexX++){
    1352:	59 81       	ldd	r21, Y+1	; 0x01
    1354:	5f 5f       	subi	r21, 0xFF	; 255
    1356:	59 83       	std	Y+1, r21	; 0x01
    1358:	56 30       	cpi	r21, 0x06	; 6
    135a:	11 f0       	breq	.+4      	; 0x1360 <Game+0x4e4>
			for(uint8_t ledIndexY = 0; ledIndexY < 6; ledIndexY++){
				uint8_t found = 0;
    135c:	18 86       	std	Y+8, r1	; 0x08
    135e:	f6 cf       	rjmp	.-20     	; 0x134c <Game+0x4d0>
    1360:	0f 2e       	mov	r0, r31
    1362:	f6 ef       	ldi	r31, 0xF6	; 246
    1364:	cf 2e       	mov	r12, r31
    1366:	f2 e0       	ldi	r31, 0x02	; 2
    1368:	df 2e       	mov	r13, r31
    136a:	f0 2d       	mov	r31, r0
				P2Multiplier = 1;
			}
		}
		
		
		for(uint8_t ledIndexX = 0; ledIndexX < 6; ledIndexX++){
    136c:	85 01       	movw	r16, r10
    136e:	fa 82       	std	Y+2, r15	; 0x02
    1370:	e9 82       	std	Y+1, r14	; 0x01
				}
				setButtonLed(ledIndexX, ledIndexY, found);
			}
		}
		for(uint8_t ledIndex = 0; ledIndex < 6; ledIndex++){	//turn on game leds and turn others off
			setButtonLed(gameledsX[ledIndex], gameledsY[ledIndex], 1);
    1372:	e9 81       	ldd	r30, Y+1	; 0x01
    1374:	fa 81       	ldd	r31, Y+2	; 0x02
    1376:	61 91       	ld	r22, Z+
    1378:	fa 83       	std	Y+2, r31	; 0x02
    137a:	e9 83       	std	Y+1, r30	; 0x01
    137c:	41 e0       	ldi	r20, 0x01	; 1
    137e:	f8 01       	movw	r30, r16
    1380:	81 91       	ld	r24, Z+
    1382:	8f 01       	movw	r16, r30
    1384:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
					}
				}
				setButtonLed(ledIndexX, ledIndexY, found);
			}
		}
		for(uint8_t ledIndex = 0; ledIndex < 6; ledIndex++){	//turn on game leds and turn others off
    1388:	29 81       	ldd	r18, Y+1	; 0x01
    138a:	3a 81       	ldd	r19, Y+2	; 0x02
    138c:	c2 16       	cp	r12, r18
    138e:	d3 06       	cpc	r13, r19
    1390:	81 f7       	brne	.-32     	; 0x1372 <Game+0x4f6>
	printf("round time %d\n", TimeRemaining);
	TCNT4 = 0;					// reset timer
	
	setScore(0, HighScore1P);	// will be replaced if 2p mode
	uint8_t lastTime = TimeRemaining;
	while(TimeRemaining > 0){
    1392:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <TimeRemaining>
    1396:	81 11       	cpse	r24, r1
    1398:	12 ce       	rjmp	.-988    	; 0xfbe <Game+0x142>
		}
		
		//_delay_ms(50);	// TODO maybe change this later

	}
	setScoreSegment(TIMER1, 18); // 18 is the dash
    139a:	62 e1       	ldi	r22, 0x12	; 18
    139c:	83 e0       	ldi	r24, 0x03	; 3
    139e:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
	setScoreSegment(TIMER10, 18);
    13a2:	62 e1       	ldi	r22, 0x12	; 18
    13a4:	84 e0       	ldi	r24, 0x04	; 4
    13a6:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
	setScoreSegment(TIMER100, 18);
    13aa:	62 e1       	ldi	r22, 0x12	; 18
    13ac:	85 e0       	ldi	r24, 0x05	; 5
    13ae:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
	printf("GAMa ovar\n");
    13b2:	89 e6       	ldi	r24, 0x69	; 105
    13b4:	91 e0       	ldi	r25, 0x01	; 1
    13b6:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <puts>
	// game is over, stop timer
	
}
    13ba:	0b c0       	rjmp	.+22     	; 0x13d2 <Game+0x556>
	printf("GAME START\n");
	
	P1Score = 0;			// reset scores and multipliers
	P2Score = 0;
	P1Multiplier = 1;
	P2Multiplier = 1;
    13bc:	37 01       	movw	r6, r14
    13be:	10 e0       	ldi	r17, 0x00	; 0
						newX = rand() % 3;
					}
					newY = 1 + (rand() % 5);
					//gameLedsY
					
					uint8_t clearSpot = 1;
    13c0:	01 e0       	ldi	r16, 0x01	; 1
					for(uint8_t idx = 0; idx < 6; idx++){
						if((gameledsX[idx] == newX) && (gameledsY[idx] == newY)){
							clearSpot = 0;	// "new" location is in use
    13c2:	41 2c       	mov	r4, r1
    13c4:	b9 86       	std	Y+9, r11	; 0x09
    13c6:	a8 86       	std	Y+8, r10	; 0x08
    13c8:	67 ce       	rjmp	.-818    	; 0x1098 <Game+0x21c>
		}
		
		
		for(uint8_t ledIndexX = 0; ledIndexX < 6; ledIndexX++){
			for(uint8_t ledIndexY = 0; ledIndexY < 6; ledIndexY++){
				uint8_t found = 0;
    13ca:	19 82       	std	Y+1, r1	; 0x01
    13cc:	10 e0       	ldi	r17, 0x00	; 0
				for(uint8_t ledIndex = 0; ledIndex < 6; ledIndex++){
					if((ledIndexX == gameledsX[ledIndex]) && (ledIndexY == gameledsY[ledIndex]))	//led is on in game
					{
						found = 1;
    13ce:	01 e0       	ldi	r16, 0x01	; 1
    13d0:	c5 cf       	rjmp	.-118    	; 0x135c <Game+0x4e0>
	setScoreSegment(TIMER10, 18);
	setScoreSegment(TIMER100, 18);
	printf("GAMa ovar\n");
	// game is over, stop timer
	
}
    13d2:	29 96       	adiw	r28, 0x09	; 9
    13d4:	0f b6       	in	r0, 0x3f	; 63
    13d6:	f8 94       	cli
    13d8:	de bf       	out	0x3e, r29	; 62
    13da:	0f be       	out	0x3f, r0	; 63
    13dc:	cd bf       	out	0x3d, r28	; 61
    13de:	df 91       	pop	r29
    13e0:	cf 91       	pop	r28
    13e2:	1f 91       	pop	r17
    13e4:	0f 91       	pop	r16
    13e6:	ff 90       	pop	r15
    13e8:	ef 90       	pop	r14
    13ea:	df 90       	pop	r13
    13ec:	cf 90       	pop	r12
    13ee:	bf 90       	pop	r11
    13f0:	af 90       	pop	r10
    13f2:	9f 90       	pop	r9
    13f4:	8f 90       	pop	r8
    13f6:	7f 90       	pop	r7
    13f8:	6f 90       	pop	r6
    13fa:	5f 90       	pop	r5
    13fc:	4f 90       	pop	r4
    13fe:	3f 90       	pop	r3
    1400:	2f 90       	pop	r2
    1402:	08 95       	ret

00001404 <AttractCheckGameStart>:
	TCCR0B = (0b101 << CS00);	//turn on clock for speaker
}

uint8_t attractButtonMemory[] = {0,0,0,0,0,0};
	
uint8_t AttractCheckGameStart(uint16_t count){
    1404:	2f 92       	push	r2
    1406:	3f 92       	push	r3
    1408:	4f 92       	push	r4
    140a:	5f 92       	push	r5
    140c:	6f 92       	push	r6
    140e:	7f 92       	push	r7
    1410:	8f 92       	push	r8
    1412:	9f 92       	push	r9
    1414:	af 92       	push	r10
    1416:	bf 92       	push	r11
    1418:	cf 92       	push	r12
    141a:	df 92       	push	r13
    141c:	ef 92       	push	r14
    141e:	ff 92       	push	r15
    1420:	0f 93       	push	r16
    1422:	1f 93       	push	r17
    1424:	cf 93       	push	r28
    1426:	df 93       	push	r29
    1428:	00 d0       	rcall	.+0      	; 0x142a <AttractCheckGameStart+0x26>
    142a:	00 d0       	rcall	.+0      	; 0x142c <AttractCheckGameStart+0x28>
    142c:	cd b7       	in	r28, 0x3d	; 61
    142e:	de b7       	in	r29, 0x3e	; 62
	// pauses some time while checking player button inputs, skip and start game if pressed
	for(uint16_t delayCount = 0; delayCount < count; delayCount++){
    1430:	00 97       	sbiw	r24, 0x00	; 0
    1432:	09 f4       	brne	.+2      	; 0x1436 <AttractCheckGameStart+0x32>
    1434:	bd c0       	rjmp	.+378    	; 0x15b0 <AttractCheckGameStart+0x1ac>
    1436:	9a 83       	std	Y+2, r25	; 0x02
    1438:	89 83       	std	Y+1, r24	; 0x01
    143a:	a1 2c       	mov	r10, r1
    143c:	b1 2c       	mov	r11, r1
						}
						_delay_ms(20);
						DDRB &= ~(1<<1);
					}
				}else{
					attractButtonMemory[x] &= ~(1 << y);
    143e:	01 e0       	ldi	r16, 0x01	; 1
    1440:	10 e0       	ldi	r17, 0x00	; 0
				if(isButtonDown(x,y)){
					if((attractButtonMemory[x] & (1 << y)) == 0){	//button not pressed
						attractButtonMemory[x] |= (1 << y);
						if(SoundEnabled){
							DDRB |= (1<<1);	//make ticking noise
							ICR1 = notes[rand() % 8];
    1442:	0f 2e       	mov	r0, r31
    1444:	f6 e8       	ldi	r31, 0x86	; 134
    1446:	8f 2e       	mov	r8, r31
    1448:	91 2c       	mov	r9, r1
    144a:	f0 2d       	mov	r31, r0
							OCR1A = notes[4 + (TimeRemaining%2)] / 2;
    144c:	0f 2e       	mov	r0, r31
    144e:	f8 e8       	ldi	r31, 0x88	; 136
    1450:	6f 2e       	mov	r6, r31
    1452:	71 2c       	mov	r7, r1
    1454:	f0 2d       	mov	r31, r0
	
uint8_t AttractCheckGameStart(uint16_t count){
	// pauses some time while checking player button inputs, skip and start game if pressed
	for(uint16_t delayCount = 0; delayCount < count; delayCount++){
		//delay some ms between each button light and check for game start
		if(isButtonDown(Player1ButtonX, Player1ButtonY) || isButtonDown(Player2ButtonX, Player2ButtonY)){
    1456:	60 e0       	ldi	r22, 0x00	; 0
    1458:	83 e0       	ldi	r24, 0x03	; 3
    145a:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    145e:	81 11       	cpse	r24, r1
    1460:	0d c0       	rjmp	.+26     	; 0x147c <AttractCheckGameStart+0x78>
    1462:	60 e0       	ldi	r22, 0x00	; 0
    1464:	82 e0       	ldi	r24, 0x02	; 2
    1466:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    146a:	28 2e       	mov	r2, r24
    146c:	81 11       	cpse	r24, r1
    146e:	06 c0       	rjmp	.+12     	; 0x147c <AttractCheckGameStart+0x78>
    1470:	8b ed       	ldi	r24, 0xDB	; 219
    1472:	92 e0       	ldi	r25, 0x02	; 2
    1474:	9c 83       	std	Y+4, r25	; 0x04
    1476:	8b 83       	std	Y+3, r24	; 0x03
    1478:	31 2c       	mov	r3, r1
    147a:	8a c0       	rjmp	.+276    	; 0x1590 <AttractCheckGameStart+0x18c>
			GameMode = isButtonDown(Player2ButtonX, Player2ButtonY);
    147c:	60 e0       	ldi	r22, 0x00	; 0
    147e:	82 e0       	ldi	r24, 0x02	; 2
    1480:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    1484:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <GameMode>
			printf("STARTING %dP mode\n", GameMode+1);
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	01 96       	adiw	r24, 0x01	; 1
    148c:	9f 93       	push	r25
    148e:	8f 93       	push	r24
    1490:	83 e7       	ldi	r24, 0x73	; 115
    1492:	91 e0       	ldi	r25, 0x01	; 1
    1494:	9f 93       	push	r25
    1496:	8f 93       	push	r24
    1498:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <printf>
			return 1;	// instantly return and quit waiting
    149c:	0f 90       	pop	r0
    149e:	0f 90       	pop	r0
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	22 24       	eor	r2, r2
    14a6:	23 94       	inc	r2
    14a8:	84 c0       	rjmp	.+264    	; 0x15b2 <AttractCheckGameStart+0x1ae>
		}
		for(uint8_t x = 0; x < 6; x++){
			for(uint8_t y = 1; y < 6; y++){
				if(isButtonDown(x,y)){
    14aa:	64 2d       	mov	r22, r4
    14ac:	83 2d       	mov	r24, r3
    14ae:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    14b2:	88 23       	and	r24, r24
    14b4:	09 f4       	brne	.+2      	; 0x14b8 <AttractCheckGameStart+0xb4>
    14b6:	4e c0       	rjmp	.+156    	; 0x1554 <AttractCheckGameStart+0x150>
					if((attractButtonMemory[x] & (1 << y)) == 0){	//button not pressed
    14b8:	eb 81       	ldd	r30, Y+3	; 0x03
    14ba:	fc 81       	ldd	r31, Y+4	; 0x04
    14bc:	20 81       	ld	r18, Z
    14be:	82 2f       	mov	r24, r18
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	04 2c       	mov	r0, r4
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <AttractCheckGameStart+0xc6>
    14c6:	95 95       	asr	r25
    14c8:	87 95       	ror	r24
    14ca:	0a 94       	dec	r0
    14cc:	e2 f7       	brpl	.-8      	; 0x14c6 <AttractCheckGameStart+0xc2>
    14ce:	80 fd       	sbrc	r24, 0
    14d0:	4e c0       	rjmp	.+156    	; 0x156e <AttractCheckGameStart+0x16a>
						attractButtonMemory[x] |= (1 << y);
    14d2:	c8 01       	movw	r24, r16
    14d4:	04 2c       	mov	r0, r4
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <AttractCheckGameStart+0xd8>
    14d8:	88 0f       	add	r24, r24
    14da:	99 1f       	adc	r25, r25
    14dc:	0a 94       	dec	r0
    14de:	e2 f7       	brpl	.-8      	; 0x14d8 <AttractCheckGameStart+0xd4>
    14e0:	28 2b       	or	r18, r24
    14e2:	f7 01       	movw	r30, r14
    14e4:	20 83       	st	Z, r18
						if(SoundEnabled){
    14e6:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <SoundEnabled>
    14ea:	88 23       	and	r24, r24
    14ec:	41 f1       	breq	.+80     	; 0x153e <AttractCheckGameStart+0x13a>
							DDRB |= (1<<1);	//make ticking noise
    14ee:	21 9a       	sbi	0x04, 1	; 4
							ICR1 = notes[rand() % 8];
    14f0:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <rand>
    14f4:	87 70       	andi	r24, 0x07	; 7
    14f6:	90 78       	andi	r25, 0x80	; 128
    14f8:	99 23       	and	r25, r25
    14fa:	24 f4       	brge	.+8      	; 0x1504 <AttractCheckGameStart+0x100>
    14fc:	01 97       	sbiw	r24, 0x01	; 1
    14fe:	88 6f       	ori	r24, 0xF8	; 248
    1500:	9f 6f       	ori	r25, 0xFF	; 255
    1502:	01 96       	adiw	r24, 0x01	; 1
    1504:	88 0f       	add	r24, r24
    1506:	99 1f       	adc	r25, r25
    1508:	fc 01       	movw	r30, r24
    150a:	e1 54       	subi	r30, 0x41	; 65
    150c:	fd 4f       	sbci	r31, 0xFD	; 253
    150e:	80 81       	ld	r24, Z
    1510:	91 81       	ldd	r25, Z+1	; 0x01
    1512:	f4 01       	movw	r30, r8
    1514:	91 83       	std	Z+1, r25	; 0x01
    1516:	80 83       	st	Z, r24
							OCR1A = notes[4 + (TimeRemaining%2)] / 2;
    1518:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <TimeRemaining>
    151c:	80 fb       	bst	r24, 0
    151e:	cc 24       	eor	r12, r12
    1520:	c0 f8       	bld	r12, 0
    1522:	d1 2c       	mov	r13, r1
    1524:	f6 01       	movw	r30, r12
    1526:	34 96       	adiw	r30, 0x04	; 4
    1528:	ee 0f       	add	r30, r30
    152a:	ff 1f       	adc	r31, r31
    152c:	e1 54       	subi	r30, 0x41	; 65
    152e:	fd 4f       	sbci	r31, 0xFD	; 253
    1530:	80 81       	ld	r24, Z
    1532:	91 81       	ldd	r25, Z+1	; 0x01
    1534:	96 95       	lsr	r25
    1536:	87 95       	ror	r24
    1538:	f3 01       	movw	r30, r6
    153a:	91 83       	std	Z+1, r25	; 0x01
    153c:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    153e:	ff ef       	ldi	r31, 0xFF	; 255
    1540:	29 ef       	ldi	r18, 0xF9	; 249
    1542:	80 e0       	ldi	r24, 0x00	; 0
    1544:	f1 50       	subi	r31, 0x01	; 1
    1546:	20 40       	sbci	r18, 0x00	; 0
    1548:	80 40       	sbci	r24, 0x00	; 0
    154a:	e1 f7       	brne	.-8      	; 0x1544 <AttractCheckGameStart+0x140>
    154c:	00 c0       	rjmp	.+0      	; 0x154e <AttractCheckGameStart+0x14a>
    154e:	00 00       	nop
						}
						_delay_ms(20);
						DDRB &= ~(1<<1);
    1550:	21 98       	cbi	0x04, 1	; 4
    1552:	0d c0       	rjmp	.+26     	; 0x156e <AttractCheckGameStart+0x16a>
					}
				}else{
					attractButtonMemory[x] &= ~(1 << y);
    1554:	c8 01       	movw	r24, r16
    1556:	04 2c       	mov	r0, r4
    1558:	02 c0       	rjmp	.+4      	; 0x155e <AttractCheckGameStart+0x15a>
    155a:	88 0f       	add	r24, r24
    155c:	99 1f       	adc	r25, r25
    155e:	0a 94       	dec	r0
    1560:	e2 f7       	brpl	.-8      	; 0x155a <AttractCheckGameStart+0x156>
    1562:	80 95       	com	r24
    1564:	eb 81       	ldd	r30, Y+3	; 0x03
    1566:	fc 81       	ldd	r31, Y+4	; 0x04
    1568:	90 81       	ld	r25, Z
    156a:	89 23       	and	r24, r25
    156c:	80 83       	st	Z, r24
    156e:	ff ef       	ldi	r31, 0xFF	; 255
    1570:	4f 1a       	sub	r4, r31
    1572:	5f 0a       	sbc	r5, r31
			GameMode = isButtonDown(Player2ButtonX, Player2ButtonY);
			printf("STARTING %dP mode\n", GameMode+1);
			return 1;	// instantly return and quit waiting
		}
		for(uint8_t x = 0; x < 6; x++){
			for(uint8_t y = 1; y < 6; y++){
    1574:	26 e0       	ldi	r18, 0x06	; 6
    1576:	42 16       	cp	r4, r18
    1578:	51 04       	cpc	r5, r1
    157a:	09 f0       	breq	.+2      	; 0x157e <AttractCheckGameStart+0x17a>
    157c:	96 cf       	rjmp	.-212    	; 0x14aa <AttractCheckGameStart+0xa6>
		if(isButtonDown(Player1ButtonX, Player1ButtonY) || isButtonDown(Player2ButtonX, Player2ButtonY)){
			GameMode = isButtonDown(Player2ButtonX, Player2ButtonY);
			printf("STARTING %dP mode\n", GameMode+1);
			return 1;	// instantly return and quit waiting
		}
		for(uint8_t x = 0; x < 6; x++){
    157e:	33 94       	inc	r3
    1580:	8b 81       	ldd	r24, Y+3	; 0x03
    1582:	9c 81       	ldd	r25, Y+4	; 0x04
    1584:	01 96       	adiw	r24, 0x01	; 1
    1586:	9c 83       	std	Y+4, r25	; 0x04
    1588:	8b 83       	std	Y+3, r24	; 0x03
    158a:	96 e0       	ldi	r25, 0x06	; 6
    158c:	39 16       	cp	r3, r25
    158e:	31 f0       	breq	.+12     	; 0x159c <AttractCheckGameStart+0x198>

uint8_t attractButtonMemory[] = {0,0,0,0,0,0};
	
uint8_t AttractCheckGameStart(uint16_t count){
	// pauses some time while checking player button inputs, skip and start game if pressed
	for(uint16_t delayCount = 0; delayCount < count; delayCount++){
    1590:	44 24       	eor	r4, r4
    1592:	43 94       	inc	r4
    1594:	51 2c       	mov	r5, r1
    1596:	eb 80       	ldd	r14, Y+3	; 0x03
    1598:	fc 80       	ldd	r15, Y+4	; 0x04
    159a:	87 cf       	rjmp	.-242    	; 0x14aa <AttractCheckGameStart+0xa6>
    159c:	ef ef       	ldi	r30, 0xFF	; 255
    159e:	ae 1a       	sub	r10, r30
    15a0:	be 0a       	sbc	r11, r30
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
    15a4:	9a 81       	ldd	r25, Y+2	; 0x02
    15a6:	8a 15       	cp	r24, r10
    15a8:	9b 05       	cpc	r25, r11
    15aa:	09 f0       	breq	.+2      	; 0x15ae <AttractCheckGameStart+0x1aa>
    15ac:	54 cf       	rjmp	.-344    	; 0x1456 <AttractCheckGameStart+0x52>
    15ae:	01 c0       	rjmp	.+2      	; 0x15b2 <AttractCheckGameStart+0x1ae>
					attractButtonMemory[x] &= ~(1 << y);
				}
			}
		}
	}
	return 0;	// return that it finished without button presses
    15b0:	21 2c       	mov	r2, r1
}
    15b2:	82 2d       	mov	r24, r2
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	0f 90       	pop	r0
    15ba:	0f 90       	pop	r0
    15bc:	df 91       	pop	r29
    15be:	cf 91       	pop	r28
    15c0:	1f 91       	pop	r17
    15c2:	0f 91       	pop	r16
    15c4:	ff 90       	pop	r15
    15c6:	ef 90       	pop	r14
    15c8:	df 90       	pop	r13
    15ca:	cf 90       	pop	r12
    15cc:	bf 90       	pop	r11
    15ce:	af 90       	pop	r10
    15d0:	9f 90       	pop	r9
    15d2:	8f 90       	pop	r8
    15d4:	7f 90       	pop	r7
    15d6:	6f 90       	pop	r6
    15d8:	5f 90       	pop	r5
    15da:	4f 90       	pop	r4
    15dc:	3f 90       	pop	r3
    15de:	2f 90       	pop	r2
    15e0:	08 95       	ret

000015e2 <Attractive>:
	setScoreSegment(TIMER10, 18);
	setScoreSegment(TIMER100, 18);

}

void Attractive(){
    15e2:	2f 92       	push	r2
    15e4:	3f 92       	push	r3
    15e6:	4f 92       	push	r4
    15e8:	5f 92       	push	r5
    15ea:	6f 92       	push	r6
    15ec:	7f 92       	push	r7
    15ee:	8f 92       	push	r8
    15f0:	9f 92       	push	r9
    15f2:	af 92       	push	r10
    15f4:	bf 92       	push	r11
    15f6:	cf 92       	push	r12
    15f8:	df 92       	push	r13
    15fa:	ef 92       	push	r14
    15fc:	ff 92       	push	r15
    15fe:	0f 93       	push	r16
    1600:	1f 93       	push	r17
    1602:	cf 93       	push	r28
    1604:	df 93       	push	r29
	setScore(2, HighScore1P);
    1606:	60 91 fa 02 	lds	r22, 0x02FA	; 0x8002fa <HighScore1P>
    160a:	70 91 fb 02 	lds	r23, 0x02FB	; 0x8002fb <HighScore1P+0x1>
    160e:	82 e0       	ldi	r24, 0x02	; 2
    1610:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
	
	setScoreSegment(TIMER1, 18); // 18 is the dash
    1614:	62 e1       	ldi	r22, 0x12	; 18
    1616:	83 e0       	ldi	r24, 0x03	; 3
    1618:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
	setScoreSegment(TIMER10, 18);
    161c:	62 e1       	ldi	r22, 0x12	; 18
    161e:	84 e0       	ldi	r24, 0x04	; 4
    1620:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
	setScoreSegment(TIMER100, 18);
    1624:	62 e1       	ldi	r22, 0x12	; 18
    1626:	85 e0       	ldi	r24, 0x05	; 5
    1628:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
	
	setScore(0, HighScore2P);
    162c:	60 91 0e 03 	lds	r22, 0x030E	; 0x80030e <HighScore2P>
    1630:	70 91 0f 03 	lds	r23, 0x030F	; 0x80030f <HighScore2P+0x1>
    1634:	80 e0       	ldi	r24, 0x00	; 0
    1636:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
			break;
			
			case 1:
			for(uint8_t count = 0; count < 216; count++){
				
				uint8_t x = rand()%6;
    163a:	0f 2e       	mov	r0, r31
    163c:	f6 e0       	ldi	r31, 0x06	; 6
    163e:	af 2e       	mov	r10, r31
    1640:	b1 2c       	mov	r11, r1
    1642:	f0 2d       	mov	r31, r0
				uint8_t y = 1+(rand()%5);
    1644:	0f 2e       	mov	r0, r31
    1646:	f5 e0       	ldi	r31, 0x05	; 5
    1648:	cf 2e       	mov	r12, r31
    164a:	d1 2c       	mov	r13, r1
    164c:	f0 2d       	mov	r31, r0
				setButtonLed(x,y,!getButtonLed(x,y));
    164e:	f1 2c       	mov	r15, r1
				if( AttractCheckGameStart(260) ){
					goto EndAttract;
				}
				
				if(count % 12 == 0){
    1650:	0f 2e       	mov	r0, r31
    1652:	fb ea       	ldi	r31, 0xAB	; 171
    1654:	ef 2e       	mov	r14, r31
    1656:	f0 2d       	mov	r31, r0
			case 1:
			for(uint8_t count = 0; count < 216; count++){
				
				uint8_t x = rand()%6;
				uint8_t y = 1+(rand()%5);
				setButtonLed(x,y,!getButtonLed(x,y));
    1658:	99 24       	eor	r9, r9
    165a:	93 94       	inc	r9
			
			case 2:
			for(uint8_t count = 0; count < 24; count++){
				for(uint8_t y = 1; y < 6; y++){
					for(uint8_t x = 0; x < 6; x++){
						setButtonLed( (y%2)==0 ? x : (5-x) ,y,1);
    165c:	d5 e0       	ldi	r29, 0x05	; 5
	setScoreSegment(TIMER10, 18);
	setScoreSegment(TIMER100, 18);
	
	setScore(0, HighScore2P);
	while(1){
		uint8_t blinkyMode = rand() % 4;	// todo make random, ADD DISPLAY BLANKING
    165e:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <rand>
		switch(blinkyMode){	// multiple blinky modes (todo randomly pick one)
    1662:	83 70       	andi	r24, 0x03	; 3
    1664:	90 78       	andi	r25, 0x80	; 128
    1666:	99 23       	and	r25, r25
    1668:	24 f4       	brge	.+8      	; 0x1672 <Attractive+0x90>
    166a:	01 97       	sbiw	r24, 0x01	; 1
    166c:	8c 6f       	ori	r24, 0xFC	; 252
    166e:	9f 6f       	ori	r25, 0xFF	; 255
    1670:	01 96       	adiw	r24, 0x01	; 1
    1672:	99 27       	eor	r25, r25
    1674:	81 30       	cpi	r24, 0x01	; 1
    1676:	91 05       	cpc	r25, r1
    1678:	09 f4       	brne	.+2      	; 0x167c <Attractive+0x9a>
    167a:	84 c0       	rjmp	.+264    	; 0x1784 <Attractive+0x1a2>
    167c:	24 f4       	brge	.+8      	; 0x1686 <Attractive+0xa4>
    167e:	89 2b       	or	r24, r25
    1680:	09 f4       	brne	.+2      	; 0x1684 <Attractive+0xa2>
    1682:	79 c0       	rjmp	.+242    	; 0x1776 <Attractive+0x194>
    1684:	ec cf       	rjmp	.-40     	; 0x165e <Attractive+0x7c>
    1686:	82 30       	cpi	r24, 0x02	; 2
    1688:	91 05       	cpc	r25, r1
    168a:	09 f4       	brne	.+2      	; 0x168e <Attractive+0xac>
    168c:	03 c1       	rjmp	.+518    	; 0x1894 <Attractive+0x2b2>
    168e:	03 97       	sbiw	r24, 0x03	; 3
    1690:	09 f4       	brne	.+2      	; 0x1694 <Attractive+0xb2>
    1692:	79 c1       	rjmp	.+754    	; 0x1986 <Attractive+0x3a4>
    1694:	e4 cf       	rjmp	.-56     	; 0x165e <Attractive+0x7c>
			case 0:
			for(uint8_t count = 0; count < 2; count++){
				for(uint8_t y = 1; y < 6; y++){
					for(uint8_t x = 0; x < 6; x++){
						setButtonLed( (y%2)==0 ? x : (5-x) ,y,1);
    1696:	47 2c       	mov	r4, r7
    1698:	77 20       	and	r7, r7
    169a:	19 f0       	breq	.+6      	; 0x16a2 <Attractive+0xc0>
    169c:	8d 2f       	mov	r24, r29
    169e:	88 19       	sub	r24, r8
    16a0:	01 c0       	rjmp	.+2      	; 0x16a4 <Attractive+0xc2>
    16a2:	88 2d       	mov	r24, r8
    16a4:	41 e0       	ldi	r20, 0x01	; 1
    16a6:	6c 2f       	mov	r22, r28
    16a8:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
						if( AttractCheckGameStart(600) ){
    16ac:	88 e5       	ldi	r24, 0x58	; 88
    16ae:	92 e0       	ldi	r25, 0x02	; 2
    16b0:	0e 94 02 0a 	call	0x1404	; 0x1404 <AttractCheckGameStart>
    16b4:	81 11       	cpse	r24, r1
    16b6:	76 c1       	rjmp	.+748    	; 0x19a4 <Attractive+0x3c2>
		uint8_t blinkyMode = rand() % 4;	// todo make random, ADD DISPLAY BLANKING
		switch(blinkyMode){	// multiple blinky modes (todo randomly pick one)
			case 0:
			for(uint8_t count = 0; count < 2; count++){
				for(uint8_t y = 1; y < 6; y++){
					for(uint8_t x = 0; x < 6; x++){
    16b8:	83 94       	inc	r8
    16ba:	86 e0       	ldi	r24, 0x06	; 6
    16bc:	88 12       	cpse	r8, r24
    16be:	eb cf       	rjmp	.-42     	; 0x1696 <Attractive+0xb4>
						if( AttractCheckGameStart(600) ){
							
							goto EndAttract;
						}
					}
					setButtonLed(Player1ButtonX, Player1ButtonY, y%2);
    16c0:	44 2d       	mov	r20, r4
    16c2:	6f 2d       	mov	r22, r15
    16c4:	83 e0       	ldi	r24, 0x03	; 3
    16c6:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
					setButtonLed(Player2ButtonX, Player2ButtonY, (y+1) % 2);
    16ca:	a8 01       	movw	r20, r16
    16cc:	41 70       	andi	r20, 0x01	; 1
    16ce:	50 78       	andi	r21, 0x80	; 128
    16d0:	55 23       	and	r21, r21
    16d2:	34 f4       	brge	.+12     	; 0x16e0 <Attractive+0xfe>
    16d4:	41 50       	subi	r20, 0x01	; 1
    16d6:	51 09       	sbc	r21, r1
    16d8:	4e 6f       	ori	r20, 0xFE	; 254
    16da:	5f 6f       	ori	r21, 0xFF	; 255
    16dc:	4f 5f       	subi	r20, 0xFF	; 255
    16de:	5f 4f       	sbci	r21, 0xFF	; 255
    16e0:	6f 2d       	mov	r22, r15
    16e2:	82 e0       	ldi	r24, 0x02	; 2
    16e4:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
	while(1){
		uint8_t blinkyMode = rand() % 4;	// todo make random, ADD DISPLAY BLANKING
		switch(blinkyMode){	// multiple blinky modes (todo randomly pick one)
			case 0:
			for(uint8_t count = 0; count < 2; count++){
				for(uint8_t y = 1; y < 6; y++){
    16e8:	cf 5f       	subi	r28, 0xFF	; 255
    16ea:	0f 5f       	subi	r16, 0xFF	; 255
    16ec:	1f 4f       	sbci	r17, 0xFF	; 255
    16ee:	c6 30       	cpi	r28, 0x06	; 6
    16f0:	a1 f1       	breq	.+104    	; 0x175a <Attractive+0x178>
	setScoreSegment(TIMER10, 18);
	setScoreSegment(TIMER100, 18);

}

void Attractive(){
    16f2:	81 2c       	mov	r8, r1
		switch(blinkyMode){	// multiple blinky modes (todo randomly pick one)
			case 0:
			for(uint8_t count = 0; count < 2; count++){
				for(uint8_t y = 1; y < 6; y++){
					for(uint8_t x = 0; x < 6; x++){
						setButtonLed( (y%2)==0 ? x : (5-x) ,y,1);
    16f4:	8c 2f       	mov	r24, r28
    16f6:	81 70       	andi	r24, 0x01	; 1
    16f8:	78 2e       	mov	r7, r24
    16fa:	cd cf       	rjmp	.-102    	; 0x1696 <Attractive+0xb4>
					setButtonLed(Player1ButtonX, Player1ButtonY, y%2);
					setButtonLed(Player2ButtonX, Player2ButtonY, (y+1) % 2);
				}
				for(uint8_t y = 1; y < 6; y++){
					for(uint8_t x = 0; x < 6; x++){
						setButtonLed( (y%2)==0 ? x : (5-x) ,y,0);
    16fc:	47 2c       	mov	r4, r7
    16fe:	77 20       	and	r7, r7
    1700:	19 f0       	breq	.+6      	; 0x1708 <Attractive+0x126>
    1702:	8d 2f       	mov	r24, r29
    1704:	81 1b       	sub	r24, r17
    1706:	01 c0       	rjmp	.+2      	; 0x170a <Attractive+0x128>
    1708:	81 2f       	mov	r24, r17
    170a:	4f 2d       	mov	r20, r15
    170c:	6c 2f       	mov	r22, r28
    170e:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
						if( AttractCheckGameStart(600) ){
    1712:	88 e5       	ldi	r24, 0x58	; 88
    1714:	92 e0       	ldi	r25, 0x02	; 2
    1716:	0e 94 02 0a 	call	0x1404	; 0x1404 <AttractCheckGameStart>
    171a:	81 11       	cpse	r24, r1
    171c:	43 c1       	rjmp	.+646    	; 0x19a4 <Attractive+0x3c2>
					}
					setButtonLed(Player1ButtonX, Player1ButtonY, y%2);
					setButtonLed(Player2ButtonX, Player2ButtonY, (y+1) % 2);
				}
				for(uint8_t y = 1; y < 6; y++){
					for(uint8_t x = 0; x < 6; x++){
    171e:	1f 5f       	subi	r17, 0xFF	; 255
    1720:	16 30       	cpi	r17, 0x06	; 6
    1722:	61 f7       	brne	.-40     	; 0x16fc <Attractive+0x11a>
						setButtonLed( (y%2)==0 ? x : (5-x) ,y,0);
						if( AttractCheckGameStart(600) ){
							goto EndAttract;
						}
					}
					setButtonLed(Player1ButtonX, Player1ButtonY, (y+1)%2);
    1724:	a1 01       	movw	r20, r2
    1726:	41 70       	andi	r20, 0x01	; 1
    1728:	50 78       	andi	r21, 0x80	; 128
    172a:	55 23       	and	r21, r21
    172c:	34 f4       	brge	.+12     	; 0x173a <Attractive+0x158>
    172e:	41 50       	subi	r20, 0x01	; 1
    1730:	51 09       	sbc	r21, r1
    1732:	4e 6f       	ori	r20, 0xFE	; 254
    1734:	5f 6f       	ori	r21, 0xFF	; 255
    1736:	4f 5f       	subi	r20, 0xFF	; 255
    1738:	5f 4f       	sbci	r21, 0xFF	; 255
    173a:	6f 2d       	mov	r22, r15
    173c:	83 e0       	ldi	r24, 0x03	; 3
    173e:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
					setButtonLed(Player2ButtonX, Player2ButtonY,(y) % 2);
    1742:	44 2d       	mov	r20, r4
    1744:	6f 2d       	mov	r22, r15
    1746:	82 e0       	ldi	r24, 0x02	; 2
    1748:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
						}
					}
					setButtonLed(Player1ButtonX, Player1ButtonY, y%2);
					setButtonLed(Player2ButtonX, Player2ButtonY, (y+1) % 2);
				}
				for(uint8_t y = 1; y < 6; y++){
    174c:	cf 5f       	subi	r28, 0xFF	; 255
    174e:	8f ef       	ldi	r24, 0xFF	; 255
    1750:	28 1a       	sub	r2, r24
    1752:	38 0a       	sbc	r3, r24
    1754:	c6 30       	cpi	r28, 0x06	; 6
    1756:	31 f4       	brne	.+12     	; 0x1764 <Attractive+0x182>
    1758:	0a c0       	rjmp	.+20     	; 0x176e <Attractive+0x18c>
    175a:	68 94       	set
    175c:	22 24       	eor	r2, r2
    175e:	21 f8       	bld	r2, 1
    1760:	31 2c       	mov	r3, r1
    1762:	c1 e0       	ldi	r28, 0x01	; 1
    1764:	10 e0       	ldi	r17, 0x00	; 0
					for(uint8_t x = 0; x < 6; x++){
						setButtonLed( (y%2)==0 ? x : (5-x) ,y,0);
    1766:	8c 2f       	mov	r24, r28
    1768:	81 70       	andi	r24, 0x01	; 1
    176a:	78 2e       	mov	r7, r24
    176c:	c7 cf       	rjmp	.-114    	; 0x16fc <Attractive+0x11a>
    176e:	6a 94       	dec	r6
	setScore(0, HighScore2P);
	while(1){
		uint8_t blinkyMode = rand() % 4;	// todo make random, ADD DISPLAY BLANKING
		switch(blinkyMode){	// multiple blinky modes (todo randomly pick one)
			case 0:
			for(uint8_t count = 0; count < 2; count++){
    1770:	61 10       	cpse	r6, r1
    1772:	04 c0       	rjmp	.+8      	; 0x177c <Attractive+0x19a>
    1774:	74 cf       	rjmp	.-280    	; 0x165e <Attractive+0x7c>
	setScoreSegment(TIMER100, 18);
	
	setScore(0, HighScore2P);
	while(1){
		uint8_t blinkyMode = rand() % 4;	// todo make random, ADD DISPLAY BLANKING
		switch(blinkyMode){	// multiple blinky modes (todo randomly pick one)
    1776:	68 94       	set
    1778:	66 24       	eor	r6, r6
    177a:	61 f8       	bld	r6, 1
    177c:	02 e0       	ldi	r16, 0x02	; 2
    177e:	10 e0       	ldi	r17, 0x00	; 0
    1780:	c1 e0       	ldi	r28, 0x01	; 1
    1782:	b7 cf       	rjmp	.-146    	; 0x16f2 <Attractive+0x110>
    1784:	00 e0       	ldi	r16, 0x00	; 0
			break;
			
			case 1:
			for(uint8_t count = 0; count < 216; count++){
				
				uint8_t x = rand()%6;
    1786:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <rand>
    178a:	b5 01       	movw	r22, r10
    178c:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <__divmodhi4>
    1790:	88 2e       	mov	r8, r24
				uint8_t y = 1+(rand()%5);
    1792:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <rand>
    1796:	b6 01       	movw	r22, r12
    1798:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <__divmodhi4>
    179c:	11 e0       	ldi	r17, 0x01	; 1
    179e:	18 0f       	add	r17, r24
				setButtonLed(x,y,!getButtonLed(x,y));
    17a0:	61 2f       	mov	r22, r17
    17a2:	88 2d       	mov	r24, r8
    17a4:	0e 94 de 00 	call	0x1bc	; 0x1bc <getButtonLed>
    17a8:	49 2d       	mov	r20, r9
    17aa:	89 2b       	or	r24, r25
    17ac:	09 f0       	breq	.+2      	; 0x17b0 <Attractive+0x1ce>
    17ae:	4f 2d       	mov	r20, r15
    17b0:	61 2f       	mov	r22, r17
    17b2:	88 2d       	mov	r24, r8
    17b4:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
				if( AttractCheckGameStart(260) ){
    17b8:	84 e0       	ldi	r24, 0x04	; 4
    17ba:	91 e0       	ldi	r25, 0x01	; 1
    17bc:	0e 94 02 0a 	call	0x1404	; 0x1404 <AttractCheckGameStart>
    17c0:	81 11       	cpse	r24, r1
    17c2:	f0 c0       	rjmp	.+480    	; 0x19a4 <Attractive+0x3c2>
					goto EndAttract;
				}
				
				if(count % 12 == 0){
    17c4:	0e 9d       	mul	r16, r14
    17c6:	81 2d       	mov	r24, r1
    17c8:	11 24       	eor	r1, r1
    17ca:	86 95       	lsr	r24
    17cc:	86 95       	lsr	r24
    17ce:	86 95       	lsr	r24
    17d0:	98 2f       	mov	r25, r24
    17d2:	99 0f       	add	r25, r25
    17d4:	89 0f       	add	r24, r25
    17d6:	88 0f       	add	r24, r24
    17d8:	88 0f       	add	r24, r24
    17da:	08 13       	cpse	r16, r24
    17dc:	1f c0       	rjmp	.+62     	; 0x181c <Attractive+0x23a>
					setButtonLed(Player1ButtonX, Player1ButtonY, (count/12)%2);
    17de:	0e 9d       	mul	r16, r14
    17e0:	41 2d       	mov	r20, r1
    17e2:	11 24       	eor	r1, r1
    17e4:	14 2f       	mov	r17, r20
    17e6:	16 95       	lsr	r17
    17e8:	16 95       	lsr	r17
    17ea:	16 95       	lsr	r17
    17ec:	41 2f       	mov	r20, r17
    17ee:	41 70       	andi	r20, 0x01	; 1
    17f0:	6f 2d       	mov	r22, r15
    17f2:	83 e0       	ldi	r24, 0x03	; 3
    17f4:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
					setButtonLed(Player2ButtonX, Player2ButtonY,(1+(count/12))%2);
    17f8:	41 2f       	mov	r20, r17
    17fa:	50 e0       	ldi	r21, 0x00	; 0
    17fc:	4f 5f       	subi	r20, 0xFF	; 255
    17fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1800:	41 70       	andi	r20, 0x01	; 1
    1802:	50 78       	andi	r21, 0x80	; 128
    1804:	55 23       	and	r21, r21
    1806:	34 f4       	brge	.+12     	; 0x1814 <Attractive+0x232>
    1808:	41 50       	subi	r20, 0x01	; 1
    180a:	51 09       	sbc	r21, r1
    180c:	4e 6f       	ori	r20, 0xFE	; 254
    180e:	5f 6f       	ori	r21, 0xFF	; 255
    1810:	4f 5f       	subi	r20, 0xFF	; 255
    1812:	5f 4f       	sbci	r21, 0xFF	; 255
    1814:	6f 2d       	mov	r22, r15
    1816:	82 e0       	ldi	r24, 0x02	; 2
    1818:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
				}
			}
			break;
			
			case 1:
			for(uint8_t count = 0; count < 216; count++){
    181c:	0f 5f       	subi	r16, 0xFF	; 255
    181e:	08 3d       	cpi	r16, 0xD8	; 216
    1820:	09 f0       	breq	.+2      	; 0x1824 <Attractive+0x242>
    1822:	b1 cf       	rjmp	.-158    	; 0x1786 <Attractive+0x1a4>
    1824:	1c cf       	rjmp	.-456    	; 0x165e <Attractive+0x7c>
			
			case 2:
			for(uint8_t count = 0; count < 24; count++){
				for(uint8_t y = 1; y < 6; y++){
					for(uint8_t x = 0; x < 6; x++){
						setButtonLed( (y%2)==0 ? x : (5-x) ,y,1);
    1826:	57 2c       	mov	r5, r7
    1828:	77 20       	and	r7, r7
    182a:	19 f0       	breq	.+6      	; 0x1832 <Attractive+0x250>
    182c:	8d 2f       	mov	r24, r29
    182e:	8c 1b       	sub	r24, r28
    1830:	01 c0       	rjmp	.+2      	; 0x1834 <Attractive+0x252>
    1832:	8c 2f       	mov	r24, r28
    1834:	41 e0       	ldi	r20, 0x01	; 1
    1836:	66 2d       	mov	r22, r6
    1838:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
			
			
			case 2:
			for(uint8_t count = 0; count < 24; count++){
				for(uint8_t y = 1; y < 6; y++){
					for(uint8_t x = 0; x < 6; x++){
    183c:	cf 5f       	subi	r28, 0xFF	; 255
    183e:	c6 30       	cpi	r28, 0x06	; 6
    1840:	91 f7       	brne	.-28     	; 0x1826 <Attractive+0x244>
						setButtonLed( (y%2)==0 ? x : (5-x) ,y,1);
						
					}
					setButtonLed(Player1ButtonX, Player1ButtonY, y%2);
    1842:	45 2d       	mov	r20, r5
    1844:	6f 2d       	mov	r22, r15
    1846:	83 e0       	ldi	r24, 0x03	; 3
    1848:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
					setButtonLed(Player2ButtonX, Player2ButtonY, (y+1) % 2);
    184c:	a8 01       	movw	r20, r16
    184e:	41 70       	andi	r20, 0x01	; 1
    1850:	50 78       	andi	r21, 0x80	; 128
    1852:	55 23       	and	r21, r21
    1854:	34 f4       	brge	.+12     	; 0x1862 <Attractive+0x280>
    1856:	41 50       	subi	r20, 0x01	; 1
    1858:	51 09       	sbc	r21, r1
    185a:	4e 6f       	ori	r20, 0xFE	; 254
    185c:	5f 6f       	ori	r21, 0xFF	; 255
    185e:	4f 5f       	subi	r20, 0xFF	; 255
    1860:	5f 4f       	sbci	r21, 0xFF	; 255
    1862:	6f 2d       	mov	r22, r15
    1864:	82 e0       	ldi	r24, 0x02	; 2
    1866:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
			break;
			
			
			case 2:
			for(uint8_t count = 0; count < 24; count++){
				for(uint8_t y = 1; y < 6; y++){
    186a:	63 94       	inc	r6
    186c:	0f 5f       	subi	r16, 0xFF	; 255
    186e:	1f 4f       	sbci	r17, 0xFF	; 255
    1870:	86 e0       	ldi	r24, 0x06	; 6
    1872:	68 16       	cp	r6, r24
    1874:	29 f0       	breq	.+10     	; 0x1880 <Attractive+0x29e>
	setScoreSegment(TIMER100, 18);
	
	setScore(0, HighScore2P);
	while(1){
		uint8_t blinkyMode = rand() % 4;	// todo make random, ADD DISPLAY BLANKING
		switch(blinkyMode){	// multiple blinky modes (todo randomly pick one)
    1876:	c0 e0       	ldi	r28, 0x00	; 0
			
			case 2:
			for(uint8_t count = 0; count < 24; count++){
				for(uint8_t y = 1; y < 6; y++){
					for(uint8_t x = 0; x < 6; x++){
						setButtonLed( (y%2)==0 ? x : (5-x) ,y,1);
    1878:	86 2d       	mov	r24, r6
    187a:	81 70       	andi	r24, 0x01	; 1
    187c:	78 2e       	mov	r7, r24
    187e:	d3 cf       	rjmp	.-90     	; 0x1826 <Attractive+0x244>
						
					}
					setButtonLed(Player1ButtonX, Player1ButtonY, y%2);
					setButtonLed(Player2ButtonX, Player2ButtonY, (y+1) % 2);
				}
				if( AttractCheckGameStart(1000) ){
    1880:	88 ee       	ldi	r24, 0xE8	; 232
    1882:	93 e0       	ldi	r25, 0x03	; 3
    1884:	0e 94 02 0a 	call	0x1404	; 0x1404 <AttractCheckGameStart>
    1888:	81 11       	cpse	r24, r1
    188a:	8c c0       	rjmp	.+280    	; 0x19a4 <Attractive+0x3c2>
    188c:	4a 94       	dec	r4
			}
			break;
			
			
			case 2:
			for(uint8_t count = 0; count < 24; count++){
    188e:	41 10       	cpse	r4, r1
    1890:	05 c0       	rjmp	.+10     	; 0x189c <Attractive+0x2ba>
    1892:	e5 ce       	rjmp	.-566    	; 0x165e <Attractive+0x7c>
	setScoreSegment(TIMER100, 18);
	
	setScore(0, HighScore2P);
	while(1){
		uint8_t blinkyMode = rand() % 4;	// todo make random, ADD DISPLAY BLANKING
		switch(blinkyMode){	// multiple blinky modes (todo randomly pick one)
    1894:	0f 2e       	mov	r0, r31
    1896:	f8 e1       	ldi	r31, 0x18	; 24
    1898:	4f 2e       	mov	r4, r31
    189a:	f0 2d       	mov	r31, r0
    189c:	02 e0       	ldi	r16, 0x02	; 2
    189e:	10 e0       	ldi	r17, 0x00	; 0
    18a0:	66 24       	eor	r6, r6
    18a2:	63 94       	inc	r6
    18a4:	e8 cf       	rjmp	.-48     	; 0x1876 <Attractive+0x294>
			
			case 3:
			for(uint8_t count = 0; count < 2; count++){
				for(uint8_t x = 0; x < 6; x++){
					for(uint8_t y = 1; y < 6; y++){
						setButtonLed( (y%2)==0 ? x : (5-x) ,y,1);
    18a6:	80 fe       	sbrs	r8, 0
    18a8:	02 c0       	rjmp	.+4      	; 0x18ae <Attractive+0x2cc>
    18aa:	85 2d       	mov	r24, r5
    18ac:	01 c0       	rjmp	.+2      	; 0x18b0 <Attractive+0x2ce>
    18ae:	84 2d       	mov	r24, r4
    18b0:	41 e0       	ldi	r20, 0x01	; 1
    18b2:	68 2d       	mov	r22, r8
    18b4:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
						if( AttractCheckGameStart(600) ){
    18b8:	88 e5       	ldi	r24, 0x58	; 88
    18ba:	92 e0       	ldi	r25, 0x02	; 2
    18bc:	0e 94 02 0a 	call	0x1404	; 0x1404 <AttractCheckGameStart>
    18c0:	81 11       	cpse	r24, r1
    18c2:	70 c0       	rjmp	.+224    	; 0x19a4 <Attractive+0x3c2>
			break;
			
			case 3:
			for(uint8_t count = 0; count < 2; count++){
				for(uint8_t x = 0; x < 6; x++){
					for(uint8_t y = 1; y < 6; y++){
    18c4:	83 94       	inc	r8
    18c6:	86 e0       	ldi	r24, 0x06	; 6
    18c8:	88 12       	cpse	r8, r24
    18ca:	ed cf       	rjmp	.-38     	; 0x18a6 <Attractive+0x2c4>
						if( AttractCheckGameStart(600) ){
							
							goto EndAttract;
						}
					}
					setButtonLed(Player1ButtonX, Player1ButtonY, x%2);
    18cc:	47 2d       	mov	r20, r7
    18ce:	41 70       	andi	r20, 0x01	; 1
    18d0:	6f 2d       	mov	r22, r15
    18d2:	83 e0       	ldi	r24, 0x03	; 3
    18d4:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
					setButtonLed(Player2ButtonX, Player2ButtonY, (x+1) % 2);
    18d8:	a8 01       	movw	r20, r16
    18da:	41 70       	andi	r20, 0x01	; 1
    18dc:	50 78       	andi	r21, 0x80	; 128
    18de:	55 23       	and	r21, r21
    18e0:	34 f4       	brge	.+12     	; 0x18ee <Attractive+0x30c>
    18e2:	41 50       	subi	r20, 0x01	; 1
    18e4:	51 09       	sbc	r21, r1
    18e6:	4e 6f       	ori	r20, 0xFE	; 254
    18e8:	5f 6f       	ori	r21, 0xFF	; 255
    18ea:	4f 5f       	subi	r20, 0xFF	; 255
    18ec:	5f 4f       	sbci	r21, 0xFF	; 255
    18ee:	6f 2d       	mov	r22, r15
    18f0:	82 e0       	ldi	r24, 0x02	; 2
    18f2:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
			}
			break;
			
			case 3:
			for(uint8_t count = 0; count < 2; count++){
				for(uint8_t x = 0; x < 6; x++){
    18f6:	73 94       	inc	r7
    18f8:	0f 5f       	subi	r16, 0xFF	; 255
    18fa:	1f 4f       	sbci	r17, 0xFF	; 255
    18fc:	86 e0       	ldi	r24, 0x06	; 6
    18fe:	78 16       	cp	r7, r24
    1900:	a9 f1       	breq	.+106    	; 0x196c <Attractive+0x38a>
	setScoreSegment(TIMER100, 18);
	
	setScore(0, HighScore2P);
	while(1){
		uint8_t blinkyMode = rand() % 4;	// todo make random, ADD DISPLAY BLANKING
		switch(blinkyMode){	// multiple blinky modes (todo randomly pick one)
    1902:	88 24       	eor	r8, r8
    1904:	83 94       	inc	r8
    1906:	47 2c       	mov	r4, r7
			
			case 3:
			for(uint8_t count = 0; count < 2; count++){
				for(uint8_t x = 0; x < 6; x++){
					for(uint8_t y = 1; y < 6; y++){
						setButtonLed( (y%2)==0 ? x : (5-x) ,y,1);
    1908:	5d 2e       	mov	r5, r29
    190a:	57 18       	sub	r5, r7
    190c:	cc cf       	rjmp	.-104    	; 0x18a6 <Attractive+0x2c4>
					setButtonLed(Player1ButtonX, Player1ButtonY, x%2);
					setButtonLed(Player2ButtonX, Player2ButtonY, (x+1) % 2);
				}
				for(uint8_t x = 0; x < 6; x++){
					for(uint8_t y = 1; y < 6; y++){
						setButtonLed( (y%2)==0 ? x : (5-x) ,y,0);
    190e:	80 fe       	sbrs	r8, 0
    1910:	02 c0       	rjmp	.+4      	; 0x1916 <Attractive+0x334>
    1912:	85 2d       	mov	r24, r5
    1914:	01 c0       	rjmp	.+2      	; 0x1918 <Attractive+0x336>
    1916:	84 2d       	mov	r24, r4
    1918:	4f 2d       	mov	r20, r15
    191a:	68 2d       	mov	r22, r8
    191c:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
						if( AttractCheckGameStart(600) ){
    1920:	88 e5       	ldi	r24, 0x58	; 88
    1922:	92 e0       	ldi	r25, 0x02	; 2
    1924:	0e 94 02 0a 	call	0x1404	; 0x1404 <AttractCheckGameStart>
    1928:	81 11       	cpse	r24, r1
    192a:	3c c0       	rjmp	.+120    	; 0x19a4 <Attractive+0x3c2>
					}
					setButtonLed(Player1ButtonX, Player1ButtonY, x%2);
					setButtonLed(Player2ButtonX, Player2ButtonY, (x+1) % 2);
				}
				for(uint8_t x = 0; x < 6; x++){
					for(uint8_t y = 1; y < 6; y++){
    192c:	83 94       	inc	r8
    192e:	86 e0       	ldi	r24, 0x06	; 6
    1930:	88 12       	cpse	r8, r24
    1932:	ed cf       	rjmp	.-38     	; 0x190e <Attractive+0x32c>
						setButtonLed( (y%2)==0 ? x : (5-x) ,y,0);
						if( AttractCheckGameStart(600) ){
							goto EndAttract;
						}
					}
					setButtonLed(Player1ButtonX, Player1ButtonY, (x+1)%2);
    1934:	a8 01       	movw	r20, r16
    1936:	41 70       	andi	r20, 0x01	; 1
    1938:	50 78       	andi	r21, 0x80	; 128
    193a:	55 23       	and	r21, r21
    193c:	34 f4       	brge	.+12     	; 0x194a <Attractive+0x368>
    193e:	41 50       	subi	r20, 0x01	; 1
    1940:	51 09       	sbc	r21, r1
    1942:	4e 6f       	ori	r20, 0xFE	; 254
    1944:	5f 6f       	ori	r21, 0xFF	; 255
    1946:	4f 5f       	subi	r20, 0xFF	; 255
    1948:	5f 4f       	sbci	r21, 0xFF	; 255
    194a:	6f 2d       	mov	r22, r15
    194c:	83 e0       	ldi	r24, 0x03	; 3
    194e:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
					setButtonLed(Player2ButtonX, Player2ButtonY,(x) % 2);
    1952:	47 2d       	mov	r20, r7
    1954:	41 70       	andi	r20, 0x01	; 1
    1956:	6f 2d       	mov	r22, r15
    1958:	82 e0       	ldi	r24, 0x02	; 2
    195a:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
						}
					}
					setButtonLed(Player1ButtonX, Player1ButtonY, x%2);
					setButtonLed(Player2ButtonX, Player2ButtonY, (x+1) % 2);
				}
				for(uint8_t x = 0; x < 6; x++){
    195e:	73 94       	inc	r7
    1960:	0f 5f       	subi	r16, 0xFF	; 255
    1962:	1f 4f       	sbci	r17, 0xFF	; 255
    1964:	86 e0       	ldi	r24, 0x06	; 6
    1966:	78 12       	cpse	r7, r24
    1968:	04 c0       	rjmp	.+8      	; 0x1972 <Attractive+0x390>
    196a:	09 c0       	rjmp	.+18     	; 0x197e <Attractive+0x39c>
    196c:	01 e0       	ldi	r16, 0x01	; 1
    196e:	10 e0       	ldi	r17, 0x00	; 0
    1970:	71 2c       	mov	r7, r1
    1972:	88 24       	eor	r8, r8
    1974:	83 94       	inc	r8
    1976:	47 2c       	mov	r4, r7
					for(uint8_t y = 1; y < 6; y++){
						setButtonLed( (y%2)==0 ? x : (5-x) ,y,0);
    1978:	5d 2e       	mov	r5, r29
    197a:	57 18       	sub	r5, r7
    197c:	c8 cf       	rjmp	.-112    	; 0x190e <Attractive+0x32c>
    197e:	6a 94       	dec	r6
				}
			}
			break;
			
			case 3:
			for(uint8_t count = 0; count < 2; count++){
    1980:	61 10       	cpse	r6, r1
    1982:	04 c0       	rjmp	.+8      	; 0x198c <Attractive+0x3aa>
    1984:	6c ce       	rjmp	.-808    	; 0x165e <Attractive+0x7c>
	setScoreSegment(TIMER100, 18);
	
	setScore(0, HighScore2P);
	while(1){
		uint8_t blinkyMode = rand() % 4;	// todo make random, ADD DISPLAY BLANKING
		switch(blinkyMode){	// multiple blinky modes (todo randomly pick one)
    1986:	68 94       	set
    1988:	66 24       	eor	r6, r6
    198a:	61 f8       	bld	r6, 1
    198c:	01 e0       	ldi	r16, 0x01	; 1
    198e:	10 e0       	ldi	r17, 0x00	; 0
    1990:	71 2c       	mov	r7, r1
    1992:	b7 cf       	rjmp	.-146    	; 0x1902 <Attractive+0x320>
			
		}
	}
	EndAttract:
	for(uint8_t scoredisp = 0; scoredisp < 9; scoredisp++){
		setScoreSegment(scoredisp, 16);	//turn off the displays
    1994:	60 e1       	ldi	r22, 0x10	; 16
    1996:	8c 2f       	mov	r24, r28
    1998:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			break;
			
		}
	}
	EndAttract:
	for(uint8_t scoredisp = 0; scoredisp < 9; scoredisp++){
    199c:	cf 5f       	subi	r28, 0xFF	; 255
    199e:	c9 30       	cpi	r28, 0x09	; 9
    19a0:	c9 f7       	brne	.-14     	; 0x1994 <Attractive+0x3b2>
    19a2:	02 c0       	rjmp	.+4      	; 0x19a8 <Attractive+0x3c6>
	setScoreSegment(TIMER100, 18);
	
	setScore(0, HighScore2P);
	while(1){
		uint8_t blinkyMode = rand() % 4;	// todo make random, ADD DISPLAY BLANKING
		switch(blinkyMode){	// multiple blinky modes (todo randomly pick one)
    19a4:	c0 e0       	ldi	r28, 0x00	; 0
    19a6:	f6 cf       	rjmp	.-20     	; 0x1994 <Attractive+0x3b2>
	for(uint8_t scoredisp = 0; scoredisp < 9; scoredisp++){
		setScoreSegment(scoredisp, 16);	//turn off the displays
	}
	return;		// start the game

}
    19a8:	df 91       	pop	r29
    19aa:	cf 91       	pop	r28
    19ac:	1f 91       	pop	r17
    19ae:	0f 91       	pop	r16
    19b0:	ff 90       	pop	r15
    19b2:	ef 90       	pop	r14
    19b4:	df 90       	pop	r13
    19b6:	cf 90       	pop	r12
    19b8:	bf 90       	pop	r11
    19ba:	af 90       	pop	r10
    19bc:	9f 90       	pop	r9
    19be:	8f 90       	pop	r8
    19c0:	7f 90       	pop	r7
    19c2:	6f 90       	pop	r6
    19c4:	5f 90       	pop	r5
    19c6:	4f 90       	pop	r4
    19c8:	3f 90       	pop	r3
    19ca:	2f 90       	pop	r2
    19cc:	08 95       	ret

000019ce <EEPROM_write>:


void EEPROM_write(uint16_t uiAddress, uint8_t ucData)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
    19ce:	f9 99       	sbic	0x1f, 1	; 31
    19d0:	fe cf       	rjmp	.-4      	; 0x19ce <EEPROM_write>
	;
	/* Set up address and Data Registers */
	EEAR = uiAddress;
    19d2:	92 bd       	out	0x22, r25	; 34
    19d4:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
    19d6:	60 bd       	out	0x20, r22	; 32
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMPE);
    19d8:	fa 9a       	sbi	0x1f, 2	; 31
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEPE);
    19da:	f9 9a       	sbi	0x1f, 1	; 31
    19dc:	08 95       	ret

000019de <debugMode>:
	if(TimeRemaining > 0){
		TimeRemaining--;
	}
}

void debugMode(){
    19de:	3f 92       	push	r3
    19e0:	4f 92       	push	r4
    19e2:	5f 92       	push	r5
    19e4:	6f 92       	push	r6
    19e6:	7f 92       	push	r7
    19e8:	8f 92       	push	r8
    19ea:	9f 92       	push	r9
    19ec:	af 92       	push	r10
    19ee:	bf 92       	push	r11
    19f0:	cf 92       	push	r12
    19f2:	df 92       	push	r13
    19f4:	ef 92       	push	r14
    19f6:	ff 92       	push	r15
    19f8:	0f 93       	push	r16
    19fa:	1f 93       	push	r17
    19fc:	cf 93       	push	r28
    19fe:	df 93       	push	r29
	uint8_t page = 0;
	uint8_t maxpages = 7;
	
	DDRB |= (1<<1);
    1a00:	21 9a       	sbi	0x04, 1	; 4
	ICR1 = notes[0];		// play debug tone
    1a02:	a6 e8       	ldi	r26, 0x86	; 134
    1a04:	b0 e0       	ldi	r27, 0x00	; 0
    1a06:	61 ec       	ldi	r22, 0xC1	; 193
    1a08:	71 e1       	ldi	r23, 0x11	; 17
    1a0a:	11 96       	adiw	r26, 0x01	; 1
    1a0c:	7c 93       	st	X, r23
    1a0e:	6e 93       	st	-X, r22
	OCR1A = notes[0] / 2;
    1a10:	e8 e8       	ldi	r30, 0x88	; 136
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	40 ee       	ldi	r20, 0xE0	; 224
    1a16:	58 e0       	ldi	r21, 0x08	; 8
    1a18:	51 83       	std	Z+1, r21	; 0x01
    1a1a:	40 83       	st	Z, r20
    1a1c:	1f ef       	ldi	r17, 0xFF	; 255
    1a1e:	21 ee       	ldi	r18, 0xE1	; 225
    1a20:	84 e0       	ldi	r24, 0x04	; 4
    1a22:	11 50       	subi	r17, 0x01	; 1
    1a24:	20 40       	sbci	r18, 0x00	; 0
    1a26:	80 40       	sbci	r24, 0x00	; 0
    1a28:	e1 f7       	brne	.-8      	; 0x1a22 <debugMode+0x44>
    1a2a:	00 c0       	rjmp	.+0      	; 0x1a2c <debugMode+0x4e>
    1a2c:	00 00       	nop
	_delay_ms(100);
	ICR1 = notes[1];
    1a2e:	22 ed       	ldi	r18, 0xD2	; 210
    1a30:	3f e0       	ldi	r19, 0x0F	; 15
    1a32:	11 96       	adiw	r26, 0x01	; 1
    1a34:	3c 93       	st	X, r19
    1a36:	2e 93       	st	-X, r18
	OCR1A = notes[1] / 2;
    1a38:	89 ee       	ldi	r24, 0xE9	; 233
    1a3a:	97 e0       	ldi	r25, 0x07	; 7
    1a3c:	91 83       	std	Z+1, r25	; 0x01
    1a3e:	80 83       	st	Z, r24
    1a40:	cf ef       	ldi	r28, 0xFF	; 255
    1a42:	d1 ee       	ldi	r29, 0xE1	; 225
    1a44:	14 e0       	ldi	r17, 0x04	; 4
    1a46:	c1 50       	subi	r28, 0x01	; 1
    1a48:	d0 40       	sbci	r29, 0x00	; 0
    1a4a:	10 40       	sbci	r17, 0x00	; 0
    1a4c:	e1 f7       	brne	.-8      	; 0x1a46 <debugMode+0x68>
    1a4e:	00 c0       	rjmp	.+0      	; 0x1a50 <debugMode+0x72>
    1a50:	00 00       	nop
	_delay_ms(100);
	ICR1 = notes[0];
    1a52:	11 96       	adiw	r26, 0x01	; 1
    1a54:	7c 93       	st	X, r23
    1a56:	6e 93       	st	-X, r22
	OCR1A = notes[0] / 2;
    1a58:	51 83       	std	Z+1, r21	; 0x01
    1a5a:	40 83       	st	Z, r20
    1a5c:	4f ef       	ldi	r20, 0xFF	; 255
    1a5e:	51 ee       	ldi	r21, 0xE1	; 225
    1a60:	64 e0       	ldi	r22, 0x04	; 4
    1a62:	41 50       	subi	r20, 0x01	; 1
    1a64:	50 40       	sbci	r21, 0x00	; 0
    1a66:	60 40       	sbci	r22, 0x00	; 0
    1a68:	e1 f7       	brne	.-8      	; 0x1a62 <debugMode+0x84>
    1a6a:	00 c0       	rjmp	.+0      	; 0x1a6c <debugMode+0x8e>
    1a6c:	00 00       	nop
	_delay_ms(100);
	ICR1 = notes[1];
    1a6e:	11 96       	adiw	r26, 0x01	; 1
    1a70:	3c 93       	st	X, r19
    1a72:	2e 93       	st	-X, r18
	OCR1A = notes[1] / 2;
    1a74:	91 83       	std	Z+1, r25	; 0x01
    1a76:	80 83       	st	Z, r24
    1a78:	8f ef       	ldi	r24, 0xFF	; 255
    1a7a:	91 ee       	ldi	r25, 0xE1	; 225
    1a7c:	c4 e0       	ldi	r28, 0x04	; 4
    1a7e:	81 50       	subi	r24, 0x01	; 1
    1a80:	90 40       	sbci	r25, 0x00	; 0
    1a82:	c0 40       	sbci	r28, 0x00	; 0
    1a84:	e1 f7       	brne	.-8      	; 0x1a7e <debugMode+0xa0>
    1a86:	00 c0       	rjmp	.+0      	; 0x1a88 <debugMode+0xaa>
    1a88:	00 00       	nop
	_delay_ms(100);
	DDRB &= ~(1<<1);
    1a8a:	21 98       	cbi	0x04, 1	; 4
	
	while(isButtonDown(0,1)){
    1a8c:	61 e0       	ldi	r22, 0x01	; 1
    1a8e:	80 e0       	ldi	r24, 0x00	; 0
    1a90:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    1a94:	81 11       	cpse	r24, r1
    1a96:	fa cf       	rjmp	.-12     	; 0x1a8c <debugMode+0xae>
    1a98:	df ef       	ldi	r29, 0xFF	; 255
    1a9a:	e0 e7       	ldi	r30, 0x70	; 112
    1a9c:	f2 e0       	ldi	r31, 0x02	; 2
    1a9e:	d1 50       	subi	r29, 0x01	; 1
    1aa0:	e0 40       	sbci	r30, 0x00	; 0
    1aa2:	f0 40       	sbci	r31, 0x00	; 0
    1aa4:	e1 f7       	brne	.-8      	; 0x1a9e <debugMode+0xc0>
    1aa6:	00 c0       	rjmp	.+0      	; 0x1aa8 <debugMode+0xca>
    1aa8:	00 00       	nop
		TimeRemaining--;
	}
}

void debugMode(){
	uint8_t page = 0;
    1aaa:	31 2c       	mov	r3, r1
						TCNT4 = 6250;
					}
				}
			}
			if(isButtonDown(1,4)){	//DOWN
				TCNT4 = 0;
    1aac:	c4 ea       	ldi	r28, 0xA4	; 164
    1aae:	d0 e0       	ldi	r29, 0x00	; 0
				SoundEnabled = (SoundEnabled + 1) % 2;
				
				DDRB |= (1<<1);	//play tone
				ICR1 = notes[1];
    1ab0:	0f 2e       	mov	r0, r31
    1ab2:	f6 e8       	ldi	r31, 0x86	; 134
    1ab4:	ef 2e       	mov	r14, r31
    1ab6:	f1 2c       	mov	r15, r1
    1ab8:	f0 2d       	mov	r31, r0
    1aba:	0f 2e       	mov	r0, r31
    1abc:	f2 ed       	ldi	r31, 0xD2	; 210
    1abe:	af 2e       	mov	r10, r31
    1ac0:	ff e0       	ldi	r31, 0x0F	; 15
    1ac2:	bf 2e       	mov	r11, r31
    1ac4:	f0 2d       	mov	r31, r0
				OCR1A = notes[1] / 2;
    1ac6:	08 e8       	ldi	r16, 0x88	; 136
    1ac8:	10 e0       	ldi	r17, 0x00	; 0
    1aca:	0f 2e       	mov	r0, r31
    1acc:	f9 ee       	ldi	r31, 0xE9	; 233
    1ace:	cf 2e       	mov	r12, r31
    1ad0:	f7 e0       	ldi	r31, 0x07	; 7
    1ad2:	df 2e       	mov	r13, r31
    1ad4:	f0 2d       	mov	r31, r0
				
				while(isButtonDown(1,4)){
					setScore(LEFT, SoundEnabled);
					if(TCNT4 > 6500){
						SoundEnabled = (SoundEnabled + 1) % 2;
						TCNT4 = 6250;
    1ad6:	0f 2e       	mov	r0, r31
    1ad8:	fa e6       	ldi	r31, 0x6A	; 106
    1ada:	8f 2e       	mov	r8, r31
    1adc:	f8 e1       	ldi	r31, 0x18	; 24
    1ade:	9f 2e       	mov	r9, r31
    1ae0:	f0 2d       	mov	r31, r0
			if(isButtonDown(1,3)){	//UP
				TCNT4 = 0;
				SoundEnabled = (SoundEnabled + 1) % 2;
				
				DDRB |= (1<<1);	//play tone
				ICR1 = notes[2];
    1ae2:	0f 2e       	mov	r0, r31
    1ae4:	fe ee       	ldi	r31, 0xEE	; 238
    1ae6:	4f 2e       	mov	r4, r31
    1ae8:	fe e0       	ldi	r31, 0x0E	; 14
    1aea:	5f 2e       	mov	r5, r31
    1aec:	f0 2d       	mov	r31, r0
					}
				}
			}
			if(isButtonDown(1,4)){	//DOWN
				TCNT4 = 0;
				MultTimeKill = (MultTimeKill + 999) % 1000;
    1aee:	0f 2e       	mov	r0, r31
    1af0:	f8 ee       	ldi	r31, 0xE8	; 232
    1af2:	6f 2e       	mov	r6, r31
    1af4:	f3 e0       	ldi	r31, 0x03	; 3
    1af6:	7f 2e       	mov	r7, r31
    1af8:	f0 2d       	mov	r31, r0
	}
	_delay_ms(50);
	
	while(1){
		
		switch(page){
    1afa:	83 2d       	mov	r24, r3
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	87 30       	cpi	r24, 0x07	; 7
    1b00:	91 05       	cpc	r25, r1
    1b02:	08 f0       	brcs	.+2      	; 0x1b06 <debugMode+0x128>
    1b04:	8a c6       	rjmp	.+3348   	; 0x281a <debugMode+0xe3c>
    1b06:	fc 01       	movw	r30, r24
    1b08:	e6 5a       	subi	r30, 0xA6	; 166
    1b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0c:	0c 94 06 17 	jmp	0x2e0c	; 0x2e0c <__tablejump2__>
			case 0:	//high score 1p
			setScoreSegment(RIGHT100, 19);	//HI-SC1
    1b10:	63 e1       	ldi	r22, 0x13	; 19
    1b12:	88 e0       	ldi	r24, 0x08	; 8
    1b14:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(RIGHT10, 1);
    1b18:	61 e0       	ldi	r22, 0x01	; 1
    1b1a:	87 e0       	ldi	r24, 0x07	; 7
    1b1c:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(RIGHT1, 18);
    1b20:	62 e1       	ldi	r22, 0x12	; 18
    1b22:	86 e0       	ldi	r24, 0x06	; 6
    1b24:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(TIMER100, 5);
    1b28:	65 e0       	ldi	r22, 0x05	; 5
    1b2a:	85 e0       	ldi	r24, 0x05	; 5
    1b2c:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(TIMER10, 0xC);
    1b30:	6c e0       	ldi	r22, 0x0C	; 12
    1b32:	84 e0       	ldi	r24, 0x04	; 4
    1b34:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(TIMER1, 1);
    1b38:	61 e0       	ldi	r22, 0x01	; 1
    1b3a:	83 e0       	ldi	r24, 0x03	; 3
    1b3c:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScore(LEFT, HighScore1P);
    1b40:	60 91 fa 02 	lds	r22, 0x02FA	; 0x8002fa <HighScore1P>
    1b44:	70 91 fb 02 	lds	r23, 0x02FB	; 0x8002fb <HighScore1P+0x1>
    1b48:	80 e0       	ldi	r24, 0x00	; 0
    1b4a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
			
			setButtonLed(2,2,1);		// RESET score led
    1b4e:	41 e0       	ldi	r20, 0x01	; 1
    1b50:	62 e0       	ldi	r22, 0x02	; 2
    1b52:	82 e0       	ldi	r24, 0x02	; 2
    1b54:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
			
			if(isButtonDown(2,2)){
    1b58:	62 e0       	ldi	r22, 0x02	; 2
    1b5a:	82 e0       	ldi	r24, 0x02	; 2
    1b5c:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    1b60:	88 23       	and	r24, r24
    1b62:	21 f1       	breq	.+72     	; 0x1bac <debugMode+0x1ce>
				HighScore1P = 0;
    1b64:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <HighScore1P+0x1>
    1b68:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <HighScore1P>
				setScore(LEFT, HighScore1P);
    1b6c:	60 e0       	ldi	r22, 0x00	; 0
    1b6e:	70 e0       	ldi	r23, 0x00	; 0
    1b70:	80 e0       	ldi	r24, 0x00	; 0
    1b72:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
				DDRB |= (1<<1);	//play reset
    1b76:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[3];
    1b78:	8d e4       	ldi	r24, 0x4D	; 77
    1b7a:	9d e0       	ldi	r25, 0x0D	; 13
    1b7c:	f7 01       	movw	r30, r14
    1b7e:	91 83       	std	Z+1, r25	; 0x01
    1b80:	80 83       	st	Z, r24
				OCR1A = notes[3] / 2;
    1b82:	86 ea       	ldi	r24, 0xA6	; 166
    1b84:	96 e0       	ldi	r25, 0x06	; 6
    1b86:	f8 01       	movw	r30, r16
    1b88:	91 83       	std	Z+1, r25	; 0x01
    1b8a:	80 83       	st	Z, r24
    1b8c:	ff e7       	ldi	r31, 0x7F	; 127
    1b8e:	25 eb       	ldi	r18, 0xB5	; 181
    1b90:	41 e0       	ldi	r20, 0x01	; 1
    1b92:	f1 50       	subi	r31, 0x01	; 1
    1b94:	20 40       	sbci	r18, 0x00	; 0
    1b96:	40 40       	sbci	r20, 0x00	; 0
    1b98:	e1 f7       	brne	.-8      	; 0x1b92 <debugMode+0x1b4>
    1b9a:	00 c0       	rjmp	.+0      	; 0x1b9c <debugMode+0x1be>
    1b9c:	00 00       	nop
				_delay_ms(35);
				DDRB &= ~(1<<1);
    1b9e:	21 98       	cbi	0x04, 1	; 4
				while(isButtonDown(2,2))
    1ba0:	62 e0       	ldi	r22, 0x02	; 2
    1ba2:	82 e0       	ldi	r24, 0x02	; 2
    1ba4:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    1ba8:	81 11       	cpse	r24, r1
    1baa:	fa cf       	rjmp	.-12     	; 0x1ba0 <debugMode+0x1c2>
				{
					//wait for unpush
				}
			}
			
			if(isButtonDown(1,3)){	//UP
    1bac:	63 e0       	ldi	r22, 0x03	; 3
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    1bb4:	88 23       	and	r24, r24
    1bb6:	09 f4       	brne	.+2      	; 0x1bba <debugMode+0x1dc>
    1bb8:	6f c0       	rjmp	.+222    	; 0x1c98 <debugMode+0x2ba>
				TCNT4 = 0;
    1bba:	19 82       	std	Y+1, r1	; 0x01
    1bbc:	18 82       	st	Y, r1
				HighScore1P = (HighScore1P + 1) % 1000;
    1bbe:	40 91 fa 02 	lds	r20, 0x02FA	; 0x8002fa <HighScore1P>
    1bc2:	50 91 fb 02 	lds	r21, 0x02FB	; 0x8002fb <HighScore1P+0x1>
    1bc6:	4f 5f       	subi	r20, 0xFF	; 255
    1bc8:	5f 4f       	sbci	r21, 0xFF	; 255
    1bca:	9a 01       	movw	r18, r20
    1bcc:	36 95       	lsr	r19
    1bce:	27 95       	ror	r18
    1bd0:	36 95       	lsr	r19
    1bd2:	27 95       	ror	r18
    1bd4:	36 95       	lsr	r19
    1bd6:	27 95       	ror	r18
    1bd8:	a5 ec       	ldi	r26, 0xC5	; 197
    1bda:	b0 e2       	ldi	r27, 0x20	; 32
    1bdc:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <__umulhisi3>
    1be0:	92 95       	swap	r25
    1be2:	82 95       	swap	r24
    1be4:	8f 70       	andi	r24, 0x0F	; 15
    1be6:	89 27       	eor	r24, r25
    1be8:	9f 70       	andi	r25, 0x0F	; 15
    1bea:	89 27       	eor	r24, r25
    1bec:	86 9d       	mul	r24, r6
    1bee:	90 01       	movw	r18, r0
    1bf0:	87 9d       	mul	r24, r7
    1bf2:	30 0d       	add	r19, r0
    1bf4:	96 9d       	mul	r25, r6
    1bf6:	30 0d       	add	r19, r0
    1bf8:	11 24       	eor	r1, r1
    1bfa:	42 1b       	sub	r20, r18
    1bfc:	53 0b       	sbc	r21, r19
    1bfe:	50 93 fb 02 	sts	0x02FB, r21	; 0x8002fb <HighScore1P+0x1>
    1c02:	40 93 fa 02 	sts	0x02FA, r20	; 0x8002fa <HighScore1P>
				
				DDRB |= (1<<1);	//play tone
    1c06:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[2];
    1c08:	f7 01       	movw	r30, r14
    1c0a:	51 82       	std	Z+1, r5	; 0x01
    1c0c:	40 82       	st	Z, r4
				OCR1A = notes[2] / 2;
    1c0e:	47 e7       	ldi	r20, 0x77	; 119
    1c10:	57 e0       	ldi	r21, 0x07	; 7
    1c12:	f8 01       	movw	r30, r16
    1c14:	51 83       	std	Z+1, r21	; 0x01
    1c16:	40 83       	st	Z, r20
    1c18:	8f e5       	ldi	r24, 0x5F	; 95
    1c1a:	9a ee       	ldi	r25, 0xEA	; 234
    1c1c:	01 97       	sbiw	r24, 0x01	; 1
    1c1e:	f1 f7       	brne	.-4      	; 0x1c1c <debugMode+0x23e>
    1c20:	00 c0       	rjmp	.+0      	; 0x1c22 <debugMode+0x244>
    1c22:	00 00       	nop
				_delay_ms(15);
				DDRB &= ~(1<<1);
    1c24:	21 98       	cbi	0x04, 1	; 4
				
				while(isButtonDown(1,3)){
    1c26:	32 c0       	rjmp	.+100    	; 0x1c8c <debugMode+0x2ae>
					setScore(LEFT, HighScore1P);
    1c28:	60 91 fa 02 	lds	r22, 0x02FA	; 0x8002fa <HighScore1P>
    1c2c:	70 91 fb 02 	lds	r23, 0x02FB	; 0x8002fb <HighScore1P+0x1>
    1c30:	80 e0       	ldi	r24, 0x00	; 0
    1c32:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
					if(TCNT4 > 6500){
    1c36:	88 81       	ld	r24, Y
    1c38:	99 81       	ldd	r25, Y+1	; 0x01
    1c3a:	85 36       	cpi	r24, 0x65	; 101
    1c3c:	99 41       	sbci	r25, 0x19	; 25
    1c3e:	30 f1       	brcs	.+76     	; 0x1c8c <debugMode+0x2ae>
						HighScore1P = (HighScore1P + 1) % 1000;
    1c40:	40 91 fa 02 	lds	r20, 0x02FA	; 0x8002fa <HighScore1P>
    1c44:	50 91 fb 02 	lds	r21, 0x02FB	; 0x8002fb <HighScore1P+0x1>
    1c48:	4f 5f       	subi	r20, 0xFF	; 255
    1c4a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c4c:	9a 01       	movw	r18, r20
    1c4e:	36 95       	lsr	r19
    1c50:	27 95       	ror	r18
    1c52:	36 95       	lsr	r19
    1c54:	27 95       	ror	r18
    1c56:	36 95       	lsr	r19
    1c58:	27 95       	ror	r18
    1c5a:	a5 ec       	ldi	r26, 0xC5	; 197
    1c5c:	b0 e2       	ldi	r27, 0x20	; 32
    1c5e:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <__umulhisi3>
    1c62:	92 95       	swap	r25
    1c64:	82 95       	swap	r24
    1c66:	8f 70       	andi	r24, 0x0F	; 15
    1c68:	89 27       	eor	r24, r25
    1c6a:	9f 70       	andi	r25, 0x0F	; 15
    1c6c:	89 27       	eor	r24, r25
    1c6e:	86 9d       	mul	r24, r6
    1c70:	90 01       	movw	r18, r0
    1c72:	87 9d       	mul	r24, r7
    1c74:	30 0d       	add	r19, r0
    1c76:	96 9d       	mul	r25, r6
    1c78:	30 0d       	add	r19, r0
    1c7a:	11 24       	eor	r1, r1
    1c7c:	42 1b       	sub	r20, r18
    1c7e:	53 0b       	sbc	r21, r19
    1c80:	50 93 fb 02 	sts	0x02FB, r21	; 0x8002fb <HighScore1P+0x1>
    1c84:	40 93 fa 02 	sts	0x02FA, r20	; 0x8002fa <HighScore1P>
						TCNT4 = 6250;
    1c88:	99 82       	std	Y+1, r9	; 0x01
    1c8a:	88 82       	st	Y, r8
				ICR1 = notes[2];
				OCR1A = notes[2] / 2;
				_delay_ms(15);
				DDRB &= ~(1<<1);
				
				while(isButtonDown(1,3)){
    1c8c:	63 e0       	ldi	r22, 0x03	; 3
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    1c94:	81 11       	cpse	r24, r1
    1c96:	c8 cf       	rjmp	.-112    	; 0x1c28 <debugMode+0x24a>
						HighScore1P = (HighScore1P + 1) % 1000;
						TCNT4 = 6250;
					}
				}	
			}
			if(isButtonDown(1,4)){	//DOWN
    1c98:	64 e0       	ldi	r22, 0x04	; 4
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    1ca0:	88 23       	and	r24, r24
    1ca2:	09 f4       	brne	.+2      	; 0x1ca6 <debugMode+0x2c8>
    1ca4:	ba c5       	rjmp	.+2932   	; 0x281a <debugMode+0xe3c>
				TCNT4 = 0;
    1ca6:	19 82       	std	Y+1, r1	; 0x01
    1ca8:	18 82       	st	Y, r1
				HighScore1P = (HighScore1P + 999) % 1000;
    1caa:	40 91 fa 02 	lds	r20, 0x02FA	; 0x8002fa <HighScore1P>
    1cae:	50 91 fb 02 	lds	r21, 0x02FB	; 0x8002fb <HighScore1P+0x1>
    1cb2:	49 51       	subi	r20, 0x19	; 25
    1cb4:	5c 4f       	sbci	r21, 0xFC	; 252
    1cb6:	9a 01       	movw	r18, r20
    1cb8:	36 95       	lsr	r19
    1cba:	27 95       	ror	r18
    1cbc:	36 95       	lsr	r19
    1cbe:	27 95       	ror	r18
    1cc0:	36 95       	lsr	r19
    1cc2:	27 95       	ror	r18
    1cc4:	a5 ec       	ldi	r26, 0xC5	; 197
    1cc6:	b0 e2       	ldi	r27, 0x20	; 32
    1cc8:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <__umulhisi3>
    1ccc:	92 95       	swap	r25
    1cce:	82 95       	swap	r24
    1cd0:	8f 70       	andi	r24, 0x0F	; 15
    1cd2:	89 27       	eor	r24, r25
    1cd4:	9f 70       	andi	r25, 0x0F	; 15
    1cd6:	89 27       	eor	r24, r25
    1cd8:	86 9d       	mul	r24, r6
    1cda:	90 01       	movw	r18, r0
    1cdc:	87 9d       	mul	r24, r7
    1cde:	30 0d       	add	r19, r0
    1ce0:	96 9d       	mul	r25, r6
    1ce2:	30 0d       	add	r19, r0
    1ce4:	11 24       	eor	r1, r1
    1ce6:	42 1b       	sub	r20, r18
    1ce8:	53 0b       	sbc	r21, r19
    1cea:	50 93 fb 02 	sts	0x02FB, r21	; 0x8002fb <HighScore1P+0x1>
    1cee:	40 93 fa 02 	sts	0x02FA, r20	; 0x8002fa <HighScore1P>
				
				DDRB |= (1<<1);	//play tone
    1cf2:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[1];
    1cf4:	f7 01       	movw	r30, r14
    1cf6:	b1 82       	std	Z+1, r11	; 0x01
    1cf8:	a0 82       	st	Z, r10
				OCR1A = notes[1] / 2;
    1cfa:	f8 01       	movw	r30, r16
    1cfc:	d1 82       	std	Z+1, r13	; 0x01
    1cfe:	c0 82       	st	Z, r12
    1d00:	8f e5       	ldi	r24, 0x5F	; 95
    1d02:	9a ee       	ldi	r25, 0xEA	; 234
    1d04:	01 97       	sbiw	r24, 0x01	; 1
    1d06:	f1 f7       	brne	.-4      	; 0x1d04 <debugMode+0x326>
    1d08:	00 c0       	rjmp	.+0      	; 0x1d0a <debugMode+0x32c>
    1d0a:	00 00       	nop
				_delay_ms(15);
				DDRB &= ~(1<<1);
    1d0c:	21 98       	cbi	0x04, 1	; 4
				
				while(isButtonDown(1,4)){
    1d0e:	32 c0       	rjmp	.+100    	; 0x1d74 <debugMode+0x396>
					setScore(LEFT, HighScore1P);
    1d10:	60 91 fa 02 	lds	r22, 0x02FA	; 0x8002fa <HighScore1P>
    1d14:	70 91 fb 02 	lds	r23, 0x02FB	; 0x8002fb <HighScore1P+0x1>
    1d18:	80 e0       	ldi	r24, 0x00	; 0
    1d1a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
					if(TCNT4 > 6500){
    1d1e:	88 81       	ld	r24, Y
    1d20:	99 81       	ldd	r25, Y+1	; 0x01
    1d22:	85 36       	cpi	r24, 0x65	; 101
    1d24:	99 41       	sbci	r25, 0x19	; 25
    1d26:	30 f1       	brcs	.+76     	; 0x1d74 <debugMode+0x396>
						HighScore1P = (HighScore1P + 999) % 1000;
    1d28:	40 91 fa 02 	lds	r20, 0x02FA	; 0x8002fa <HighScore1P>
    1d2c:	50 91 fb 02 	lds	r21, 0x02FB	; 0x8002fb <HighScore1P+0x1>
    1d30:	49 51       	subi	r20, 0x19	; 25
    1d32:	5c 4f       	sbci	r21, 0xFC	; 252
    1d34:	9a 01       	movw	r18, r20
    1d36:	36 95       	lsr	r19
    1d38:	27 95       	ror	r18
    1d3a:	36 95       	lsr	r19
    1d3c:	27 95       	ror	r18
    1d3e:	36 95       	lsr	r19
    1d40:	27 95       	ror	r18
    1d42:	a5 ec       	ldi	r26, 0xC5	; 197
    1d44:	b0 e2       	ldi	r27, 0x20	; 32
    1d46:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <__umulhisi3>
    1d4a:	92 95       	swap	r25
    1d4c:	82 95       	swap	r24
    1d4e:	8f 70       	andi	r24, 0x0F	; 15
    1d50:	89 27       	eor	r24, r25
    1d52:	9f 70       	andi	r25, 0x0F	; 15
    1d54:	89 27       	eor	r24, r25
    1d56:	86 9d       	mul	r24, r6
    1d58:	90 01       	movw	r18, r0
    1d5a:	87 9d       	mul	r24, r7
    1d5c:	30 0d       	add	r19, r0
    1d5e:	96 9d       	mul	r25, r6
    1d60:	30 0d       	add	r19, r0
    1d62:	11 24       	eor	r1, r1
    1d64:	42 1b       	sub	r20, r18
    1d66:	53 0b       	sbc	r21, r19
    1d68:	50 93 fb 02 	sts	0x02FB, r21	; 0x8002fb <HighScore1P+0x1>
    1d6c:	40 93 fa 02 	sts	0x02FA, r20	; 0x8002fa <HighScore1P>
						TCNT4 = 6250;
    1d70:	99 82       	std	Y+1, r9	; 0x01
    1d72:	88 82       	st	Y, r8
				ICR1 = notes[1];
				OCR1A = notes[1] / 2;
				_delay_ms(15);
				DDRB &= ~(1<<1);
				
				while(isButtonDown(1,4)){
    1d74:	64 e0       	ldi	r22, 0x04	; 4
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    1d7c:	81 11       	cpse	r24, r1
    1d7e:	c8 cf       	rjmp	.-112    	; 0x1d10 <debugMode+0x332>
    1d80:	4c c5       	rjmp	.+2712   	; 0x281a <debugMode+0xe3c>
			
			
			
			
			case 1:	//high score 2p
			setScoreSegment(RIGHT100, 19);	//HI-SC2
    1d82:	63 e1       	ldi	r22, 0x13	; 19
    1d84:	88 e0       	ldi	r24, 0x08	; 8
    1d86:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(RIGHT10, 1);
    1d8a:	61 e0       	ldi	r22, 0x01	; 1
    1d8c:	87 e0       	ldi	r24, 0x07	; 7
    1d8e:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(RIGHT1, 18);
    1d92:	62 e1       	ldi	r22, 0x12	; 18
    1d94:	86 e0       	ldi	r24, 0x06	; 6
    1d96:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(TIMER100, 5);
    1d9a:	65 e0       	ldi	r22, 0x05	; 5
    1d9c:	85 e0       	ldi	r24, 0x05	; 5
    1d9e:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(TIMER10, 0xC);
    1da2:	6c e0       	ldi	r22, 0x0C	; 12
    1da4:	84 e0       	ldi	r24, 0x04	; 4
    1da6:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(TIMER1, 2);
    1daa:	62 e0       	ldi	r22, 0x02	; 2
    1dac:	83 e0       	ldi	r24, 0x03	; 3
    1dae:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScore(LEFT, HighScore2P);
    1db2:	60 91 0e 03 	lds	r22, 0x030E	; 0x80030e <HighScore2P>
    1db6:	70 91 0f 03 	lds	r23, 0x030F	; 0x80030f <HighScore2P+0x1>
    1dba:	80 e0       	ldi	r24, 0x00	; 0
    1dbc:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
			
			setButtonLed(2,2,1);		// RESET score led
    1dc0:	41 e0       	ldi	r20, 0x01	; 1
    1dc2:	62 e0       	ldi	r22, 0x02	; 2
    1dc4:	82 e0       	ldi	r24, 0x02	; 2
    1dc6:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
			
			if(isButtonDown(2,2)){
    1dca:	62 e0       	ldi	r22, 0x02	; 2
    1dcc:	82 e0       	ldi	r24, 0x02	; 2
    1dce:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    1dd2:	88 23       	and	r24, r24
    1dd4:	31 f1       	breq	.+76     	; 0x1e22 <debugMode+0x444>
				HighScore2P = 0;
    1dd6:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <HighScore2P+0x1>
    1dda:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <HighScore2P>
				setScore(LEFT, HighScore1P);
    1dde:	60 91 fa 02 	lds	r22, 0x02FA	; 0x8002fa <HighScore1P>
    1de2:	70 91 fb 02 	lds	r23, 0x02FB	; 0x8002fb <HighScore1P+0x1>
    1de6:	80 e0       	ldi	r24, 0x00	; 0
    1de8:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
				DDRB |= (1<<1);	//play reset
    1dec:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[3];
    1dee:	8d e4       	ldi	r24, 0x4D	; 77
    1df0:	9d e0       	ldi	r25, 0x0D	; 13
    1df2:	f7 01       	movw	r30, r14
    1df4:	91 83       	std	Z+1, r25	; 0x01
    1df6:	80 83       	st	Z, r24
				OCR1A = notes[3] / 2;
    1df8:	86 ea       	ldi	r24, 0xA6	; 166
    1dfa:	96 e0       	ldi	r25, 0x06	; 6
    1dfc:	f8 01       	movw	r30, r16
    1dfe:	91 83       	std	Z+1, r25	; 0x01
    1e00:	80 83       	st	Z, r24
    1e02:	ff e7       	ldi	r31, 0x7F	; 127
    1e04:	25 eb       	ldi	r18, 0xB5	; 181
    1e06:	41 e0       	ldi	r20, 0x01	; 1
    1e08:	f1 50       	subi	r31, 0x01	; 1
    1e0a:	20 40       	sbci	r18, 0x00	; 0
    1e0c:	40 40       	sbci	r20, 0x00	; 0
    1e0e:	e1 f7       	brne	.-8      	; 0x1e08 <debugMode+0x42a>
    1e10:	00 c0       	rjmp	.+0      	; 0x1e12 <debugMode+0x434>
    1e12:	00 00       	nop
				_delay_ms(35);
				DDRB &= ~(1<<1);
    1e14:	21 98       	cbi	0x04, 1	; 4
				while(isButtonDown(2,2))
    1e16:	62 e0       	ldi	r22, 0x02	; 2
    1e18:	82 e0       	ldi	r24, 0x02	; 2
    1e1a:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    1e1e:	81 11       	cpse	r24, r1
    1e20:	fa cf       	rjmp	.-12     	; 0x1e16 <debugMode+0x438>
				{
					//wait for unpush
				}
			}
			
			if(isButtonDown(1,3)){	//UP
    1e22:	63 e0       	ldi	r22, 0x03	; 3
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    1e2a:	88 23       	and	r24, r24
    1e2c:	09 f4       	brne	.+2      	; 0x1e30 <debugMode+0x452>
    1e2e:	6f c0       	rjmp	.+222    	; 0x1f0e <debugMode+0x530>
				TCNT4 = 0;
    1e30:	19 82       	std	Y+1, r1	; 0x01
    1e32:	18 82       	st	Y, r1
				HighScore2P = (HighScore2P + 1) % 1000;
    1e34:	40 91 0e 03 	lds	r20, 0x030E	; 0x80030e <HighScore2P>
    1e38:	50 91 0f 03 	lds	r21, 0x030F	; 0x80030f <HighScore2P+0x1>
    1e3c:	4f 5f       	subi	r20, 0xFF	; 255
    1e3e:	5f 4f       	sbci	r21, 0xFF	; 255
    1e40:	9a 01       	movw	r18, r20
    1e42:	36 95       	lsr	r19
    1e44:	27 95       	ror	r18
    1e46:	36 95       	lsr	r19
    1e48:	27 95       	ror	r18
    1e4a:	36 95       	lsr	r19
    1e4c:	27 95       	ror	r18
    1e4e:	a5 ec       	ldi	r26, 0xC5	; 197
    1e50:	b0 e2       	ldi	r27, 0x20	; 32
    1e52:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <__umulhisi3>
    1e56:	92 95       	swap	r25
    1e58:	82 95       	swap	r24
    1e5a:	8f 70       	andi	r24, 0x0F	; 15
    1e5c:	89 27       	eor	r24, r25
    1e5e:	9f 70       	andi	r25, 0x0F	; 15
    1e60:	89 27       	eor	r24, r25
    1e62:	86 9d       	mul	r24, r6
    1e64:	90 01       	movw	r18, r0
    1e66:	87 9d       	mul	r24, r7
    1e68:	30 0d       	add	r19, r0
    1e6a:	96 9d       	mul	r25, r6
    1e6c:	30 0d       	add	r19, r0
    1e6e:	11 24       	eor	r1, r1
    1e70:	42 1b       	sub	r20, r18
    1e72:	53 0b       	sbc	r21, r19
    1e74:	50 93 0f 03 	sts	0x030F, r21	; 0x80030f <HighScore2P+0x1>
    1e78:	40 93 0e 03 	sts	0x030E, r20	; 0x80030e <HighScore2P>
				
				DDRB |= (1<<1);	//play tone
    1e7c:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[2];
    1e7e:	f7 01       	movw	r30, r14
    1e80:	51 82       	std	Z+1, r5	; 0x01
    1e82:	40 82       	st	Z, r4
				OCR1A = notes[2] / 2;
    1e84:	47 e7       	ldi	r20, 0x77	; 119
    1e86:	57 e0       	ldi	r21, 0x07	; 7
    1e88:	f8 01       	movw	r30, r16
    1e8a:	51 83       	std	Z+1, r21	; 0x01
    1e8c:	40 83       	st	Z, r20
    1e8e:	8f e5       	ldi	r24, 0x5F	; 95
    1e90:	9a ee       	ldi	r25, 0xEA	; 234
    1e92:	01 97       	sbiw	r24, 0x01	; 1
    1e94:	f1 f7       	brne	.-4      	; 0x1e92 <debugMode+0x4b4>
    1e96:	00 c0       	rjmp	.+0      	; 0x1e98 <debugMode+0x4ba>
    1e98:	00 00       	nop
				_delay_ms(15);
				DDRB &= ~(1<<1);
    1e9a:	21 98       	cbi	0x04, 1	; 4
				
				while(isButtonDown(1,3)){
    1e9c:	32 c0       	rjmp	.+100    	; 0x1f02 <debugMode+0x524>
					setScore(LEFT, HighScore2P);
    1e9e:	60 91 0e 03 	lds	r22, 0x030E	; 0x80030e <HighScore2P>
    1ea2:	70 91 0f 03 	lds	r23, 0x030F	; 0x80030f <HighScore2P+0x1>
    1ea6:	80 e0       	ldi	r24, 0x00	; 0
    1ea8:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
					if(TCNT4 > 6500){
    1eac:	88 81       	ld	r24, Y
    1eae:	99 81       	ldd	r25, Y+1	; 0x01
    1eb0:	85 36       	cpi	r24, 0x65	; 101
    1eb2:	99 41       	sbci	r25, 0x19	; 25
    1eb4:	30 f1       	brcs	.+76     	; 0x1f02 <debugMode+0x524>
						HighScore2P = (HighScore2P + 1) % 1000;
    1eb6:	40 91 0e 03 	lds	r20, 0x030E	; 0x80030e <HighScore2P>
    1eba:	50 91 0f 03 	lds	r21, 0x030F	; 0x80030f <HighScore2P+0x1>
    1ebe:	4f 5f       	subi	r20, 0xFF	; 255
    1ec0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ec2:	9a 01       	movw	r18, r20
    1ec4:	36 95       	lsr	r19
    1ec6:	27 95       	ror	r18
    1ec8:	36 95       	lsr	r19
    1eca:	27 95       	ror	r18
    1ecc:	36 95       	lsr	r19
    1ece:	27 95       	ror	r18
    1ed0:	a5 ec       	ldi	r26, 0xC5	; 197
    1ed2:	b0 e2       	ldi	r27, 0x20	; 32
    1ed4:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <__umulhisi3>
    1ed8:	92 95       	swap	r25
    1eda:	82 95       	swap	r24
    1edc:	8f 70       	andi	r24, 0x0F	; 15
    1ede:	89 27       	eor	r24, r25
    1ee0:	9f 70       	andi	r25, 0x0F	; 15
    1ee2:	89 27       	eor	r24, r25
    1ee4:	86 9d       	mul	r24, r6
    1ee6:	90 01       	movw	r18, r0
    1ee8:	87 9d       	mul	r24, r7
    1eea:	30 0d       	add	r19, r0
    1eec:	96 9d       	mul	r25, r6
    1eee:	30 0d       	add	r19, r0
    1ef0:	11 24       	eor	r1, r1
    1ef2:	42 1b       	sub	r20, r18
    1ef4:	53 0b       	sbc	r21, r19
    1ef6:	50 93 0f 03 	sts	0x030F, r21	; 0x80030f <HighScore2P+0x1>
    1efa:	40 93 0e 03 	sts	0x030E, r20	; 0x80030e <HighScore2P>
						TCNT4 = 6250;
    1efe:	99 82       	std	Y+1, r9	; 0x01
    1f00:	88 82       	st	Y, r8
				ICR1 = notes[2];
				OCR1A = notes[2] / 2;
				_delay_ms(15);
				DDRB &= ~(1<<1);
				
				while(isButtonDown(1,3)){
    1f02:	63 e0       	ldi	r22, 0x03	; 3
    1f04:	81 e0       	ldi	r24, 0x01	; 1
    1f06:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    1f0a:	81 11       	cpse	r24, r1
    1f0c:	c8 cf       	rjmp	.-112    	; 0x1e9e <debugMode+0x4c0>
						HighScore2P = (HighScore2P + 1) % 1000;
						TCNT4 = 6250;
					}
				}
			}
			if(isButtonDown(1,4)){	//DOWN
    1f0e:	64 e0       	ldi	r22, 0x04	; 4
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    1f16:	88 23       	and	r24, r24
    1f18:	09 f4       	brne	.+2      	; 0x1f1c <debugMode+0x53e>
    1f1a:	7f c4       	rjmp	.+2302   	; 0x281a <debugMode+0xe3c>
				TCNT4 = 0;
    1f1c:	19 82       	std	Y+1, r1	; 0x01
    1f1e:	18 82       	st	Y, r1
				HighScore2P = (HighScore2P + 999) % 1000;
    1f20:	40 91 0e 03 	lds	r20, 0x030E	; 0x80030e <HighScore2P>
    1f24:	50 91 0f 03 	lds	r21, 0x030F	; 0x80030f <HighScore2P+0x1>
    1f28:	49 51       	subi	r20, 0x19	; 25
    1f2a:	5c 4f       	sbci	r21, 0xFC	; 252
    1f2c:	9a 01       	movw	r18, r20
    1f2e:	36 95       	lsr	r19
    1f30:	27 95       	ror	r18
    1f32:	36 95       	lsr	r19
    1f34:	27 95       	ror	r18
    1f36:	36 95       	lsr	r19
    1f38:	27 95       	ror	r18
    1f3a:	a5 ec       	ldi	r26, 0xC5	; 197
    1f3c:	b0 e2       	ldi	r27, 0x20	; 32
    1f3e:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <__umulhisi3>
    1f42:	92 95       	swap	r25
    1f44:	82 95       	swap	r24
    1f46:	8f 70       	andi	r24, 0x0F	; 15
    1f48:	89 27       	eor	r24, r25
    1f4a:	9f 70       	andi	r25, 0x0F	; 15
    1f4c:	89 27       	eor	r24, r25
    1f4e:	86 9d       	mul	r24, r6
    1f50:	90 01       	movw	r18, r0
    1f52:	87 9d       	mul	r24, r7
    1f54:	30 0d       	add	r19, r0
    1f56:	96 9d       	mul	r25, r6
    1f58:	30 0d       	add	r19, r0
    1f5a:	11 24       	eor	r1, r1
    1f5c:	42 1b       	sub	r20, r18
    1f5e:	53 0b       	sbc	r21, r19
    1f60:	50 93 0f 03 	sts	0x030F, r21	; 0x80030f <HighScore2P+0x1>
    1f64:	40 93 0e 03 	sts	0x030E, r20	; 0x80030e <HighScore2P>
				
				DDRB |= (1<<1);	//play tone
    1f68:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[1];
    1f6a:	f7 01       	movw	r30, r14
    1f6c:	b1 82       	std	Z+1, r11	; 0x01
    1f6e:	a0 82       	st	Z, r10
				OCR1A = notes[1] / 2;
    1f70:	f8 01       	movw	r30, r16
    1f72:	d1 82       	std	Z+1, r13	; 0x01
    1f74:	c0 82       	st	Z, r12
    1f76:	8f e5       	ldi	r24, 0x5F	; 95
    1f78:	9a ee       	ldi	r25, 0xEA	; 234
    1f7a:	01 97       	sbiw	r24, 0x01	; 1
    1f7c:	f1 f7       	brne	.-4      	; 0x1f7a <debugMode+0x59c>
    1f7e:	00 c0       	rjmp	.+0      	; 0x1f80 <debugMode+0x5a2>
    1f80:	00 00       	nop
				_delay_ms(15);
				DDRB &= ~(1<<1);
    1f82:	21 98       	cbi	0x04, 1	; 4
				
				while(isButtonDown(1,4)){
    1f84:	32 c0       	rjmp	.+100    	; 0x1fea <debugMode+0x60c>
					setScore(LEFT, HighScore2P);
    1f86:	60 91 0e 03 	lds	r22, 0x030E	; 0x80030e <HighScore2P>
    1f8a:	70 91 0f 03 	lds	r23, 0x030F	; 0x80030f <HighScore2P+0x1>
    1f8e:	80 e0       	ldi	r24, 0x00	; 0
    1f90:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
					if(TCNT4 > 6500){
    1f94:	88 81       	ld	r24, Y
    1f96:	99 81       	ldd	r25, Y+1	; 0x01
    1f98:	85 36       	cpi	r24, 0x65	; 101
    1f9a:	99 41       	sbci	r25, 0x19	; 25
    1f9c:	30 f1       	brcs	.+76     	; 0x1fea <debugMode+0x60c>
						HighScore2P = (HighScore2P + 999) % 1000;
    1f9e:	40 91 0e 03 	lds	r20, 0x030E	; 0x80030e <HighScore2P>
    1fa2:	50 91 0f 03 	lds	r21, 0x030F	; 0x80030f <HighScore2P+0x1>
    1fa6:	49 51       	subi	r20, 0x19	; 25
    1fa8:	5c 4f       	sbci	r21, 0xFC	; 252
    1faa:	9a 01       	movw	r18, r20
    1fac:	36 95       	lsr	r19
    1fae:	27 95       	ror	r18
    1fb0:	36 95       	lsr	r19
    1fb2:	27 95       	ror	r18
    1fb4:	36 95       	lsr	r19
    1fb6:	27 95       	ror	r18
    1fb8:	a5 ec       	ldi	r26, 0xC5	; 197
    1fba:	b0 e2       	ldi	r27, 0x20	; 32
    1fbc:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <__umulhisi3>
    1fc0:	92 95       	swap	r25
    1fc2:	82 95       	swap	r24
    1fc4:	8f 70       	andi	r24, 0x0F	; 15
    1fc6:	89 27       	eor	r24, r25
    1fc8:	9f 70       	andi	r25, 0x0F	; 15
    1fca:	89 27       	eor	r24, r25
    1fcc:	86 9d       	mul	r24, r6
    1fce:	90 01       	movw	r18, r0
    1fd0:	87 9d       	mul	r24, r7
    1fd2:	30 0d       	add	r19, r0
    1fd4:	96 9d       	mul	r25, r6
    1fd6:	30 0d       	add	r19, r0
    1fd8:	11 24       	eor	r1, r1
    1fda:	42 1b       	sub	r20, r18
    1fdc:	53 0b       	sbc	r21, r19
    1fde:	50 93 0f 03 	sts	0x030F, r21	; 0x80030f <HighScore2P+0x1>
    1fe2:	40 93 0e 03 	sts	0x030E, r20	; 0x80030e <HighScore2P>
						TCNT4 = 6250;
    1fe6:	99 82       	std	Y+1, r9	; 0x01
    1fe8:	88 82       	st	Y, r8
				ICR1 = notes[1];
				OCR1A = notes[1] / 2;
				_delay_ms(15);
				DDRB &= ~(1<<1);
				
				while(isButtonDown(1,4)){
    1fea:	64 e0       	ldi	r22, 0x04	; 4
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    1ff2:	81 11       	cpse	r24, r1
    1ff4:	c8 cf       	rjmp	.-112    	; 0x1f86 <debugMode+0x5a8>
    1ff6:	11 c4       	rjmp	.+2082   	; 0x281a <debugMode+0xe3c>
			break;		//*************END HIGH SCORE 2p
			
			
			
			case 2:	//round time
			setScoreSegment(RIGHT100, 20);	//rnd tn
    1ff8:	64 e1       	ldi	r22, 0x14	; 20
    1ffa:	88 e0       	ldi	r24, 0x08	; 8
    1ffc:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(RIGHT10, 21);
    2000:	65 e1       	ldi	r22, 0x15	; 21
    2002:	87 e0       	ldi	r24, 0x07	; 7
    2004:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(RIGHT1, 0xd);
    2008:	6d e0       	ldi	r22, 0x0D	; 13
    200a:	86 e0       	ldi	r24, 0x06	; 6
    200c:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(TIMER100, 16);
    2010:	60 e1       	ldi	r22, 0x10	; 16
    2012:	85 e0       	ldi	r24, 0x05	; 5
    2014:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(TIMER10, 22);
    2018:	66 e1       	ldi	r22, 0x16	; 22
    201a:	84 e0       	ldi	r24, 0x04	; 4
    201c:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(TIMER1, 21);
    2020:	65 e1       	ldi	r22, 0x15	; 21
    2022:	83 e0       	ldi	r24, 0x03	; 3
    2024:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScore(LEFT, RoundTime);
    2028:	60 91 0a 03 	lds	r22, 0x030A	; 0x80030a <RoundTime>
    202c:	70 e0       	ldi	r23, 0x00	; 0
    202e:	80 e0       	ldi	r24, 0x00	; 0
    2030:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
			
			setButtonLed(2,2,1);		// RESET score led
    2034:	41 e0       	ldi	r20, 0x01	; 1
    2036:	62 e0       	ldi	r22, 0x02	; 2
    2038:	82 e0       	ldi	r24, 0x02	; 2
    203a:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
			
			if(isButtonDown(2,2)){
    203e:	62 e0       	ldi	r22, 0x02	; 2
    2040:	82 e0       	ldi	r24, 0x02	; 2
    2042:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    2046:	88 23       	and	r24, r24
    2048:	19 f1       	breq	.+70     	; 0x2090 <debugMode+0x6b2>
				RoundTime = 40;
    204a:	88 e2       	ldi	r24, 0x28	; 40
    204c:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <RoundTime>
				setScore(LEFT, RoundTime);
    2050:	68 e2       	ldi	r22, 0x28	; 40
    2052:	70 e0       	ldi	r23, 0x00	; 0
    2054:	80 e0       	ldi	r24, 0x00	; 0
    2056:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
				DDRB |= (1<<1);	//play reset
    205a:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[3];
    205c:	8d e4       	ldi	r24, 0x4D	; 77
    205e:	9d e0       	ldi	r25, 0x0D	; 13
    2060:	f7 01       	movw	r30, r14
    2062:	91 83       	std	Z+1, r25	; 0x01
    2064:	80 83       	st	Z, r24
				OCR1A = notes[3] / 2;
    2066:	86 ea       	ldi	r24, 0xA6	; 166
    2068:	96 e0       	ldi	r25, 0x06	; 6
    206a:	f8 01       	movw	r30, r16
    206c:	91 83       	std	Z+1, r25	; 0x01
    206e:	80 83       	st	Z, r24
    2070:	ff e7       	ldi	r31, 0x7F	; 127
    2072:	25 eb       	ldi	r18, 0xB5	; 181
    2074:	41 e0       	ldi	r20, 0x01	; 1
    2076:	f1 50       	subi	r31, 0x01	; 1
    2078:	20 40       	sbci	r18, 0x00	; 0
    207a:	40 40       	sbci	r20, 0x00	; 0
    207c:	e1 f7       	brne	.-8      	; 0x2076 <debugMode+0x698>
    207e:	00 c0       	rjmp	.+0      	; 0x2080 <debugMode+0x6a2>
    2080:	00 00       	nop
				_delay_ms(35);
				DDRB &= ~(1<<1);
    2082:	21 98       	cbi	0x04, 1	; 4
				while(isButtonDown(2,2))
    2084:	62 e0       	ldi	r22, 0x02	; 2
    2086:	82 e0       	ldi	r24, 0x02	; 2
    2088:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    208c:	81 11       	cpse	r24, r1
    208e:	fa cf       	rjmp	.-12     	; 0x2084 <debugMode+0x6a6>
				{
					//wait for unpush
				}
			}
			
			if(isButtonDown(1,3)){	//UP
    2090:	63 e0       	ldi	r22, 0x03	; 3
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    2098:	88 23       	and	r24, r24
    209a:	81 f1       	breq	.+96     	; 0x20fc <debugMode+0x71e>
				TCNT4 = 0;
    209c:	19 82       	std	Y+1, r1	; 0x01
    209e:	18 82       	st	Y, r1
				RoundTime = (RoundTime + 1);
    20a0:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <RoundTime>
    20a4:	8f 5f       	subi	r24, 0xFF	; 255
    20a6:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <RoundTime>
				
				DDRB |= (1<<1);	//play tone
    20aa:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[2];
    20ac:	f7 01       	movw	r30, r14
    20ae:	51 82       	std	Z+1, r5	; 0x01
    20b0:	40 82       	st	Z, r4
				OCR1A = notes[2] / 2;
    20b2:	47 e7       	ldi	r20, 0x77	; 119
    20b4:	57 e0       	ldi	r21, 0x07	; 7
    20b6:	f8 01       	movw	r30, r16
    20b8:	51 83       	std	Z+1, r21	; 0x01
    20ba:	40 83       	st	Z, r20
    20bc:	8f e5       	ldi	r24, 0x5F	; 95
    20be:	9a ee       	ldi	r25, 0xEA	; 234
    20c0:	01 97       	sbiw	r24, 0x01	; 1
    20c2:	f1 f7       	brne	.-4      	; 0x20c0 <debugMode+0x6e2>
    20c4:	00 c0       	rjmp	.+0      	; 0x20c6 <debugMode+0x6e8>
    20c6:	00 00       	nop
				_delay_ms(15);
				DDRB &= ~(1<<1);
    20c8:	21 98       	cbi	0x04, 1	; 4
				
				while(isButtonDown(1,3)){
    20ca:	12 c0       	rjmp	.+36     	; 0x20f0 <debugMode+0x712>
					setScore(LEFT, RoundTime);
    20cc:	60 91 0a 03 	lds	r22, 0x030A	; 0x80030a <RoundTime>
    20d0:	70 e0       	ldi	r23, 0x00	; 0
    20d2:	80 e0       	ldi	r24, 0x00	; 0
    20d4:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
					if(TCNT4 > 6500){
    20d8:	88 81       	ld	r24, Y
    20da:	99 81       	ldd	r25, Y+1	; 0x01
    20dc:	85 36       	cpi	r24, 0x65	; 101
    20de:	99 41       	sbci	r25, 0x19	; 25
    20e0:	38 f0       	brcs	.+14     	; 0x20f0 <debugMode+0x712>
						RoundTime = (RoundTime + 1);
    20e2:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <RoundTime>
    20e6:	8f 5f       	subi	r24, 0xFF	; 255
    20e8:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <RoundTime>
						TCNT4 = 6250;
    20ec:	99 82       	std	Y+1, r9	; 0x01
    20ee:	88 82       	st	Y, r8
				ICR1 = notes[2];
				OCR1A = notes[2] / 2;
				_delay_ms(15);
				DDRB &= ~(1<<1);
				
				while(isButtonDown(1,3)){
    20f0:	63 e0       	ldi	r22, 0x03	; 3
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    20f8:	81 11       	cpse	r24, r1
    20fa:	e8 cf       	rjmp	.-48     	; 0x20cc <debugMode+0x6ee>
						RoundTime = (RoundTime + 1);
						TCNT4 = 6250;
					}
				}
			}
			if(isButtonDown(1,4)){	//DOWN
    20fc:	64 e0       	ldi	r22, 0x04	; 4
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    2104:	88 23       	and	r24, r24
    2106:	09 f4       	brne	.+2      	; 0x210a <debugMode+0x72c>
    2108:	88 c3       	rjmp	.+1808   	; 0x281a <debugMode+0xe3c>
				TCNT4 = 0;
    210a:	19 82       	std	Y+1, r1	; 0x01
    210c:	18 82       	st	Y, r1
				RoundTime = (RoundTime + 255);
    210e:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <RoundTime>
    2112:	81 50       	subi	r24, 0x01	; 1
    2114:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <RoundTime>
				
				DDRB |= (1<<1);	//play tone
    2118:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[1];
    211a:	f7 01       	movw	r30, r14
    211c:	b1 82       	std	Z+1, r11	; 0x01
    211e:	a0 82       	st	Z, r10
				OCR1A = notes[1] / 2;
    2120:	f8 01       	movw	r30, r16
    2122:	d1 82       	std	Z+1, r13	; 0x01
    2124:	c0 82       	st	Z, r12
    2126:	8f e5       	ldi	r24, 0x5F	; 95
    2128:	9a ee       	ldi	r25, 0xEA	; 234
    212a:	01 97       	sbiw	r24, 0x01	; 1
    212c:	f1 f7       	brne	.-4      	; 0x212a <debugMode+0x74c>
    212e:	00 c0       	rjmp	.+0      	; 0x2130 <debugMode+0x752>
    2130:	00 00       	nop
				_delay_ms(15);
				DDRB &= ~(1<<1);
    2132:	21 98       	cbi	0x04, 1	; 4
				
				while(isButtonDown(1,4)){
    2134:	12 c0       	rjmp	.+36     	; 0x215a <debugMode+0x77c>
					setScore(LEFT, RoundTime);
    2136:	60 91 0a 03 	lds	r22, 0x030A	; 0x80030a <RoundTime>
    213a:	70 e0       	ldi	r23, 0x00	; 0
    213c:	80 e0       	ldi	r24, 0x00	; 0
    213e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
					if(TCNT4 > 6500){
    2142:	88 81       	ld	r24, Y
    2144:	99 81       	ldd	r25, Y+1	; 0x01
    2146:	85 36       	cpi	r24, 0x65	; 101
    2148:	99 41       	sbci	r25, 0x19	; 25
    214a:	38 f0       	brcs	.+14     	; 0x215a <debugMode+0x77c>
						RoundTime = (RoundTime + 255);
    214c:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <RoundTime>
    2150:	81 50       	subi	r24, 0x01	; 1
    2152:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <RoundTime>
						TCNT4 = 6250;
    2156:	99 82       	std	Y+1, r9	; 0x01
    2158:	88 82       	st	Y, r8
				ICR1 = notes[1];
				OCR1A = notes[1] / 2;
				_delay_ms(15);
				DDRB &= ~(1<<1);
				
				while(isButtonDown(1,4)){
    215a:	64 e0       	ldi	r22, 0x04	; 4
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    2162:	81 11       	cpse	r24, r1
    2164:	e8 cf       	rjmp	.-48     	; 0x2136 <debugMode+0x758>
    2166:	59 c3       	rjmp	.+1714   	; 0x281a <debugMode+0xe3c>
			
			
			
			
			case 3:	//bonus time
			setScoreSegment(RIGHT100, 0xb);	//rnd tn
    2168:	6b e0       	ldi	r22, 0x0B	; 11
    216a:	88 e0       	ldi	r24, 0x08	; 8
    216c:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(RIGHT10, 21);
    2170:	65 e1       	ldi	r22, 0x15	; 21
    2172:	87 e0       	ldi	r24, 0x07	; 7
    2174:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(RIGHT1, 5);
    2178:	65 e0       	ldi	r22, 0x05	; 5
    217a:	86 e0       	ldi	r24, 0x06	; 6
    217c:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(TIMER100, 16);
    2180:	60 e1       	ldi	r22, 0x10	; 16
    2182:	85 e0       	ldi	r24, 0x05	; 5
    2184:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(TIMER10, 22);
    2188:	66 e1       	ldi	r22, 0x16	; 22
    218a:	84 e0       	ldi	r24, 0x04	; 4
    218c:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(TIMER1, 21);
    2190:	65 e1       	ldi	r22, 0x15	; 21
    2192:	83 e0       	ldi	r24, 0x03	; 3
    2194:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScore(LEFT, BonusTime);
    2198:	60 91 ed 02 	lds	r22, 0x02ED	; 0x8002ed <BonusTime>
    219c:	70 e0       	ldi	r23, 0x00	; 0
    219e:	80 e0       	ldi	r24, 0x00	; 0
    21a0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
			
			setButtonLed(2,2,1);		// RESET score led
    21a4:	41 e0       	ldi	r20, 0x01	; 1
    21a6:	62 e0       	ldi	r22, 0x02	; 2
    21a8:	82 e0       	ldi	r24, 0x02	; 2
    21aa:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
			
			if(isButtonDown(2,2)){
    21ae:	62 e0       	ldi	r22, 0x02	; 2
    21b0:	82 e0       	ldi	r24, 0x02	; 2
    21b2:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    21b6:	88 23       	and	r24, r24
    21b8:	19 f1       	breq	.+70     	; 0x2200 <debugMode+0x822>
				BonusTime = 3;
    21ba:	83 e0       	ldi	r24, 0x03	; 3
    21bc:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <BonusTime>
				setScore(LEFT, BonusTime);
    21c0:	63 e0       	ldi	r22, 0x03	; 3
    21c2:	70 e0       	ldi	r23, 0x00	; 0
    21c4:	80 e0       	ldi	r24, 0x00	; 0
    21c6:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
				DDRB |= (1<<1);	//play reset
    21ca:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[3];
    21cc:	8d e4       	ldi	r24, 0x4D	; 77
    21ce:	9d e0       	ldi	r25, 0x0D	; 13
    21d0:	f7 01       	movw	r30, r14
    21d2:	91 83       	std	Z+1, r25	; 0x01
    21d4:	80 83       	st	Z, r24
				OCR1A = notes[3] / 2;
    21d6:	86 ea       	ldi	r24, 0xA6	; 166
    21d8:	96 e0       	ldi	r25, 0x06	; 6
    21da:	f8 01       	movw	r30, r16
    21dc:	91 83       	std	Z+1, r25	; 0x01
    21de:	80 83       	st	Z, r24
    21e0:	ff e7       	ldi	r31, 0x7F	; 127
    21e2:	25 eb       	ldi	r18, 0xB5	; 181
    21e4:	41 e0       	ldi	r20, 0x01	; 1
    21e6:	f1 50       	subi	r31, 0x01	; 1
    21e8:	20 40       	sbci	r18, 0x00	; 0
    21ea:	40 40       	sbci	r20, 0x00	; 0
    21ec:	e1 f7       	brne	.-8      	; 0x21e6 <debugMode+0x808>
    21ee:	00 c0       	rjmp	.+0      	; 0x21f0 <debugMode+0x812>
    21f0:	00 00       	nop
				_delay_ms(35);
				DDRB &= ~(1<<1);
    21f2:	21 98       	cbi	0x04, 1	; 4
				while(isButtonDown(2,2))
    21f4:	62 e0       	ldi	r22, 0x02	; 2
    21f6:	82 e0       	ldi	r24, 0x02	; 2
    21f8:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    21fc:	81 11       	cpse	r24, r1
    21fe:	fa cf       	rjmp	.-12     	; 0x21f4 <debugMode+0x816>
				{
					//wait for unpush
				}
			}
			
			if(isButtonDown(1,3)){	//UP
    2200:	63 e0       	ldi	r22, 0x03	; 3
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    2208:	88 23       	and	r24, r24
    220a:	81 f1       	breq	.+96     	; 0x226c <debugMode+0x88e>
				TCNT4 = 0;
    220c:	19 82       	std	Y+1, r1	; 0x01
    220e:	18 82       	st	Y, r1
				BonusTime = (BonusTime + 1);
    2210:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <BonusTime>
    2214:	8f 5f       	subi	r24, 0xFF	; 255
    2216:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <BonusTime>
				
				DDRB |= (1<<1);	//play tone
    221a:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[2];
    221c:	f7 01       	movw	r30, r14
    221e:	51 82       	std	Z+1, r5	; 0x01
    2220:	40 82       	st	Z, r4
				OCR1A = notes[2] / 2;
    2222:	47 e7       	ldi	r20, 0x77	; 119
    2224:	57 e0       	ldi	r21, 0x07	; 7
    2226:	f8 01       	movw	r30, r16
    2228:	51 83       	std	Z+1, r21	; 0x01
    222a:	40 83       	st	Z, r20
    222c:	8f e5       	ldi	r24, 0x5F	; 95
    222e:	9a ee       	ldi	r25, 0xEA	; 234
    2230:	01 97       	sbiw	r24, 0x01	; 1
    2232:	f1 f7       	brne	.-4      	; 0x2230 <debugMode+0x852>
    2234:	00 c0       	rjmp	.+0      	; 0x2236 <debugMode+0x858>
    2236:	00 00       	nop
				_delay_ms(15);
				DDRB &= ~(1<<1);
    2238:	21 98       	cbi	0x04, 1	; 4
				
				while(isButtonDown(1,3)){
    223a:	12 c0       	rjmp	.+36     	; 0x2260 <debugMode+0x882>
					setScore(LEFT, BonusTime);
    223c:	60 91 ed 02 	lds	r22, 0x02ED	; 0x8002ed <BonusTime>
    2240:	70 e0       	ldi	r23, 0x00	; 0
    2242:	80 e0       	ldi	r24, 0x00	; 0
    2244:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
					if(TCNT4 > 6500){
    2248:	88 81       	ld	r24, Y
    224a:	99 81       	ldd	r25, Y+1	; 0x01
    224c:	85 36       	cpi	r24, 0x65	; 101
    224e:	99 41       	sbci	r25, 0x19	; 25
    2250:	38 f0       	brcs	.+14     	; 0x2260 <debugMode+0x882>
						BonusTime = (BonusTime + 1);
    2252:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <BonusTime>
    2256:	8f 5f       	subi	r24, 0xFF	; 255
    2258:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <BonusTime>
						TCNT4 = 6250;
    225c:	99 82       	std	Y+1, r9	; 0x01
    225e:	88 82       	st	Y, r8
				ICR1 = notes[2];
				OCR1A = notes[2] / 2;
				_delay_ms(15);
				DDRB &= ~(1<<1);
				
				while(isButtonDown(1,3)){
    2260:	63 e0       	ldi	r22, 0x03	; 3
    2262:	81 e0       	ldi	r24, 0x01	; 1
    2264:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    2268:	81 11       	cpse	r24, r1
    226a:	e8 cf       	rjmp	.-48     	; 0x223c <debugMode+0x85e>
						BonusTime = (BonusTime + 1);
						TCNT4 = 6250;
					}
				}
			}
			if(isButtonDown(1,4)){	//DOWN
    226c:	64 e0       	ldi	r22, 0x04	; 4
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    2274:	88 23       	and	r24, r24
    2276:	09 f4       	brne	.+2      	; 0x227a <debugMode+0x89c>
    2278:	d0 c2       	rjmp	.+1440   	; 0x281a <debugMode+0xe3c>
				TCNT4 = 0;
    227a:	19 82       	std	Y+1, r1	; 0x01
    227c:	18 82       	st	Y, r1
				BonusTime = (BonusTime + 255);
    227e:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <BonusTime>
    2282:	81 50       	subi	r24, 0x01	; 1
    2284:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <BonusTime>
				
				DDRB |= (1<<1);	//play tone
    2288:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[1];
    228a:	f7 01       	movw	r30, r14
    228c:	b1 82       	std	Z+1, r11	; 0x01
    228e:	a0 82       	st	Z, r10
				OCR1A = notes[1] / 2;
    2290:	f8 01       	movw	r30, r16
    2292:	d1 82       	std	Z+1, r13	; 0x01
    2294:	c0 82       	st	Z, r12
    2296:	8f e5       	ldi	r24, 0x5F	; 95
    2298:	9a ee       	ldi	r25, 0xEA	; 234
    229a:	01 97       	sbiw	r24, 0x01	; 1
    229c:	f1 f7       	brne	.-4      	; 0x229a <debugMode+0x8bc>
    229e:	00 c0       	rjmp	.+0      	; 0x22a0 <debugMode+0x8c2>
    22a0:	00 00       	nop
				_delay_ms(15);
				DDRB &= ~(1<<1);
    22a2:	21 98       	cbi	0x04, 1	; 4
				
				while(isButtonDown(1,4)){
    22a4:	12 c0       	rjmp	.+36     	; 0x22ca <debugMode+0x8ec>
					setScore(LEFT, BonusTime);
    22a6:	60 91 ed 02 	lds	r22, 0x02ED	; 0x8002ed <BonusTime>
    22aa:	70 e0       	ldi	r23, 0x00	; 0
    22ac:	80 e0       	ldi	r24, 0x00	; 0
    22ae:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
					if(TCNT4 > 6500){
    22b2:	88 81       	ld	r24, Y
    22b4:	99 81       	ldd	r25, Y+1	; 0x01
    22b6:	85 36       	cpi	r24, 0x65	; 101
    22b8:	99 41       	sbci	r25, 0x19	; 25
    22ba:	38 f0       	brcs	.+14     	; 0x22ca <debugMode+0x8ec>
						BonusTime = (BonusTime + 255);
    22bc:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <BonusTime>
    22c0:	81 50       	subi	r24, 0x01	; 1
    22c2:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <BonusTime>
						TCNT4 = 6250;
    22c6:	99 82       	std	Y+1, r9	; 0x01
    22c8:	88 82       	st	Y, r8
				ICR1 = notes[1];
				OCR1A = notes[1] / 2;
				_delay_ms(15);
				DDRB &= ~(1<<1);
				
				while(isButtonDown(1,4)){
    22ca:	64 e0       	ldi	r22, 0x04	; 4
    22cc:	81 e0       	ldi	r24, 0x01	; 1
    22ce:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    22d2:	81 11       	cpse	r24, r1
    22d4:	e8 cf       	rjmp	.-48     	; 0x22a6 <debugMode+0x8c8>
    22d6:	a1 c2       	rjmp	.+1346   	; 0x281a <debugMode+0xe3c>
			
			
			
			
			case 4:	//multiplier ticks
			setScoreSegment(RIGHT100, 0xE);	//3ul tck
    22d8:	6e e0       	ldi	r22, 0x0E	; 14
    22da:	88 e0       	ldi	r24, 0x08	; 8
    22dc:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(RIGHT10, 23);
    22e0:	67 e1       	ldi	r22, 0x17	; 23
    22e2:	87 e0       	ldi	r24, 0x07	; 7
    22e4:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(RIGHT1, 1);
    22e8:	61 e0       	ldi	r22, 0x01	; 1
    22ea:	86 e0       	ldi	r24, 0x06	; 6
    22ec:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(TIMER100, 22);
    22f0:	66 e1       	ldi	r22, 0x16	; 22
    22f2:	85 e0       	ldi	r24, 0x05	; 5
    22f4:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(TIMER10, 0xc);
    22f8:	6c e0       	ldi	r22, 0x0C	; 12
    22fa:	84 e0       	ldi	r24, 0x04	; 4
    22fc:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(TIMER1, 0xc);
    2300:	6c e0       	ldi	r22, 0x0C	; 12
    2302:	83 e0       	ldi	r24, 0x03	; 3
    2304:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScore(LEFT, MultTimeKill);
    2308:	60 91 0c 03 	lds	r22, 0x030C	; 0x80030c <MultTimeKill>
    230c:	70 91 0d 03 	lds	r23, 0x030D	; 0x80030d <MultTimeKill+0x1>
    2310:	80 e0       	ldi	r24, 0x00	; 0
    2312:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
			
			setButtonLed(2,2,1);		// RESET score led
    2316:	41 e0       	ldi	r20, 0x01	; 1
    2318:	62 e0       	ldi	r22, 0x02	; 2
    231a:	82 e0       	ldi	r24, 0x02	; 2
    231c:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
			
			if(isButtonDown(2,2)){
    2320:	62 e0       	ldi	r22, 0x02	; 2
    2322:	82 e0       	ldi	r24, 0x02	; 2
    2324:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    2328:	88 23       	and	r24, r24
    232a:	31 f1       	breq	.+76     	; 0x2378 <debugMode+0x99a>
				MultTimeKill = 999;
    232c:	87 ee       	ldi	r24, 0xE7	; 231
    232e:	93 e0       	ldi	r25, 0x03	; 3
    2330:	90 93 0d 03 	sts	0x030D, r25	; 0x80030d <MultTimeKill+0x1>
    2334:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <MultTimeKill>
				setScore(LEFT, MultTimeKill);
    2338:	67 ee       	ldi	r22, 0xE7	; 231
    233a:	73 e0       	ldi	r23, 0x03	; 3
    233c:	80 e0       	ldi	r24, 0x00	; 0
    233e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
				DDRB |= (1<<1);	//play reset
    2342:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[3];
    2344:	8d e4       	ldi	r24, 0x4D	; 77
    2346:	9d e0       	ldi	r25, 0x0D	; 13
    2348:	f7 01       	movw	r30, r14
    234a:	91 83       	std	Z+1, r25	; 0x01
    234c:	80 83       	st	Z, r24
				OCR1A = notes[3] / 2;
    234e:	86 ea       	ldi	r24, 0xA6	; 166
    2350:	96 e0       	ldi	r25, 0x06	; 6
    2352:	f8 01       	movw	r30, r16
    2354:	91 83       	std	Z+1, r25	; 0x01
    2356:	80 83       	st	Z, r24
    2358:	ff e7       	ldi	r31, 0x7F	; 127
    235a:	25 eb       	ldi	r18, 0xB5	; 181
    235c:	41 e0       	ldi	r20, 0x01	; 1
    235e:	f1 50       	subi	r31, 0x01	; 1
    2360:	20 40       	sbci	r18, 0x00	; 0
    2362:	40 40       	sbci	r20, 0x00	; 0
    2364:	e1 f7       	brne	.-8      	; 0x235e <debugMode+0x980>
    2366:	00 c0       	rjmp	.+0      	; 0x2368 <debugMode+0x98a>
    2368:	00 00       	nop
				_delay_ms(35);
				DDRB &= ~(1<<1);
    236a:	21 98       	cbi	0x04, 1	; 4
				while(isButtonDown(2,2))
    236c:	62 e0       	ldi	r22, 0x02	; 2
    236e:	82 e0       	ldi	r24, 0x02	; 2
    2370:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    2374:	81 11       	cpse	r24, r1
    2376:	fa cf       	rjmp	.-12     	; 0x236c <debugMode+0x98e>
				{
					//wait for unpush
				}
			}
			
			if(isButtonDown(1,3)){	//UP
    2378:	63 e0       	ldi	r22, 0x03	; 3
    237a:	81 e0       	ldi	r24, 0x01	; 1
    237c:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    2380:	88 23       	and	r24, r24
    2382:	09 f4       	brne	.+2      	; 0x2386 <debugMode+0x9a8>
    2384:	6f c0       	rjmp	.+222    	; 0x2464 <debugMode+0xa86>
				TCNT4 = 0;
    2386:	19 82       	std	Y+1, r1	; 0x01
    2388:	18 82       	st	Y, r1
				MultTimeKill = (MultTimeKill + 1) % 1000;
    238a:	40 91 0c 03 	lds	r20, 0x030C	; 0x80030c <MultTimeKill>
    238e:	50 91 0d 03 	lds	r21, 0x030D	; 0x80030d <MultTimeKill+0x1>
    2392:	4f 5f       	subi	r20, 0xFF	; 255
    2394:	5f 4f       	sbci	r21, 0xFF	; 255
    2396:	9a 01       	movw	r18, r20
    2398:	36 95       	lsr	r19
    239a:	27 95       	ror	r18
    239c:	36 95       	lsr	r19
    239e:	27 95       	ror	r18
    23a0:	36 95       	lsr	r19
    23a2:	27 95       	ror	r18
    23a4:	a5 ec       	ldi	r26, 0xC5	; 197
    23a6:	b0 e2       	ldi	r27, 0x20	; 32
    23a8:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <__umulhisi3>
    23ac:	92 95       	swap	r25
    23ae:	82 95       	swap	r24
    23b0:	8f 70       	andi	r24, 0x0F	; 15
    23b2:	89 27       	eor	r24, r25
    23b4:	9f 70       	andi	r25, 0x0F	; 15
    23b6:	89 27       	eor	r24, r25
    23b8:	86 9d       	mul	r24, r6
    23ba:	90 01       	movw	r18, r0
    23bc:	87 9d       	mul	r24, r7
    23be:	30 0d       	add	r19, r0
    23c0:	96 9d       	mul	r25, r6
    23c2:	30 0d       	add	r19, r0
    23c4:	11 24       	eor	r1, r1
    23c6:	42 1b       	sub	r20, r18
    23c8:	53 0b       	sbc	r21, r19
    23ca:	50 93 0d 03 	sts	0x030D, r21	; 0x80030d <MultTimeKill+0x1>
    23ce:	40 93 0c 03 	sts	0x030C, r20	; 0x80030c <MultTimeKill>
				
				DDRB |= (1<<1);	//play tone
    23d2:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[2];
    23d4:	f7 01       	movw	r30, r14
    23d6:	51 82       	std	Z+1, r5	; 0x01
    23d8:	40 82       	st	Z, r4
				OCR1A = notes[2] / 2;
    23da:	47 e7       	ldi	r20, 0x77	; 119
    23dc:	57 e0       	ldi	r21, 0x07	; 7
    23de:	f8 01       	movw	r30, r16
    23e0:	51 83       	std	Z+1, r21	; 0x01
    23e2:	40 83       	st	Z, r20
    23e4:	8f e5       	ldi	r24, 0x5F	; 95
    23e6:	9a ee       	ldi	r25, 0xEA	; 234
    23e8:	01 97       	sbiw	r24, 0x01	; 1
    23ea:	f1 f7       	brne	.-4      	; 0x23e8 <debugMode+0xa0a>
    23ec:	00 c0       	rjmp	.+0      	; 0x23ee <debugMode+0xa10>
    23ee:	00 00       	nop
				_delay_ms(15);
				DDRB &= ~(1<<1);
    23f0:	21 98       	cbi	0x04, 1	; 4
				
				while(isButtonDown(1,3)){
    23f2:	32 c0       	rjmp	.+100    	; 0x2458 <debugMode+0xa7a>
					setScore(LEFT, MultTimeKill);
    23f4:	60 91 0c 03 	lds	r22, 0x030C	; 0x80030c <MultTimeKill>
    23f8:	70 91 0d 03 	lds	r23, 0x030D	; 0x80030d <MultTimeKill+0x1>
    23fc:	80 e0       	ldi	r24, 0x00	; 0
    23fe:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
					if(TCNT4 > 6500){
    2402:	88 81       	ld	r24, Y
    2404:	99 81       	ldd	r25, Y+1	; 0x01
    2406:	85 36       	cpi	r24, 0x65	; 101
    2408:	99 41       	sbci	r25, 0x19	; 25
    240a:	30 f1       	brcs	.+76     	; 0x2458 <debugMode+0xa7a>
						MultTimeKill = (MultTimeKill + 1) % 1000;
    240c:	40 91 0c 03 	lds	r20, 0x030C	; 0x80030c <MultTimeKill>
    2410:	50 91 0d 03 	lds	r21, 0x030D	; 0x80030d <MultTimeKill+0x1>
    2414:	4f 5f       	subi	r20, 0xFF	; 255
    2416:	5f 4f       	sbci	r21, 0xFF	; 255
    2418:	9a 01       	movw	r18, r20
    241a:	36 95       	lsr	r19
    241c:	27 95       	ror	r18
    241e:	36 95       	lsr	r19
    2420:	27 95       	ror	r18
    2422:	36 95       	lsr	r19
    2424:	27 95       	ror	r18
    2426:	a5 ec       	ldi	r26, 0xC5	; 197
    2428:	b0 e2       	ldi	r27, 0x20	; 32
    242a:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <__umulhisi3>
    242e:	92 95       	swap	r25
    2430:	82 95       	swap	r24
    2432:	8f 70       	andi	r24, 0x0F	; 15
    2434:	89 27       	eor	r24, r25
    2436:	9f 70       	andi	r25, 0x0F	; 15
    2438:	89 27       	eor	r24, r25
    243a:	86 9d       	mul	r24, r6
    243c:	90 01       	movw	r18, r0
    243e:	87 9d       	mul	r24, r7
    2440:	30 0d       	add	r19, r0
    2442:	96 9d       	mul	r25, r6
    2444:	30 0d       	add	r19, r0
    2446:	11 24       	eor	r1, r1
    2448:	42 1b       	sub	r20, r18
    244a:	53 0b       	sbc	r21, r19
    244c:	50 93 0d 03 	sts	0x030D, r21	; 0x80030d <MultTimeKill+0x1>
    2450:	40 93 0c 03 	sts	0x030C, r20	; 0x80030c <MultTimeKill>
						TCNT4 = 6250;
    2454:	99 82       	std	Y+1, r9	; 0x01
    2456:	88 82       	st	Y, r8
				ICR1 = notes[2];
				OCR1A = notes[2] / 2;
				_delay_ms(15);
				DDRB &= ~(1<<1);
				
				while(isButtonDown(1,3)){
    2458:	63 e0       	ldi	r22, 0x03	; 3
    245a:	81 e0       	ldi	r24, 0x01	; 1
    245c:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    2460:	81 11       	cpse	r24, r1
    2462:	c8 cf       	rjmp	.-112    	; 0x23f4 <debugMode+0xa16>
						MultTimeKill = (MultTimeKill + 1) % 1000;
						TCNT4 = 6250;
					}
				}
			}
			if(isButtonDown(1,4)){	//DOWN
    2464:	64 e0       	ldi	r22, 0x04	; 4
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    246c:	88 23       	and	r24, r24
    246e:	09 f4       	brne	.+2      	; 0x2472 <debugMode+0xa94>
    2470:	d4 c1       	rjmp	.+936    	; 0x281a <debugMode+0xe3c>
				TCNT4 = 0;
    2472:	19 82       	std	Y+1, r1	; 0x01
    2474:	18 82       	st	Y, r1
				MultTimeKill = (MultTimeKill + 999) % 1000;
    2476:	40 91 0c 03 	lds	r20, 0x030C	; 0x80030c <MultTimeKill>
    247a:	50 91 0d 03 	lds	r21, 0x030D	; 0x80030d <MultTimeKill+0x1>
    247e:	49 51       	subi	r20, 0x19	; 25
    2480:	5c 4f       	sbci	r21, 0xFC	; 252
    2482:	9a 01       	movw	r18, r20
    2484:	36 95       	lsr	r19
    2486:	27 95       	ror	r18
    2488:	36 95       	lsr	r19
    248a:	27 95       	ror	r18
    248c:	36 95       	lsr	r19
    248e:	27 95       	ror	r18
    2490:	a5 ec       	ldi	r26, 0xC5	; 197
    2492:	b0 e2       	ldi	r27, 0x20	; 32
    2494:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <__umulhisi3>
    2498:	92 95       	swap	r25
    249a:	82 95       	swap	r24
    249c:	8f 70       	andi	r24, 0x0F	; 15
    249e:	89 27       	eor	r24, r25
    24a0:	9f 70       	andi	r25, 0x0F	; 15
    24a2:	89 27       	eor	r24, r25
    24a4:	86 9d       	mul	r24, r6
    24a6:	90 01       	movw	r18, r0
    24a8:	87 9d       	mul	r24, r7
    24aa:	30 0d       	add	r19, r0
    24ac:	96 9d       	mul	r25, r6
    24ae:	30 0d       	add	r19, r0
    24b0:	11 24       	eor	r1, r1
    24b2:	42 1b       	sub	r20, r18
    24b4:	53 0b       	sbc	r21, r19
    24b6:	50 93 0d 03 	sts	0x030D, r21	; 0x80030d <MultTimeKill+0x1>
    24ba:	40 93 0c 03 	sts	0x030C, r20	; 0x80030c <MultTimeKill>
				
				DDRB |= (1<<1);	//play tone
    24be:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[1];
    24c0:	f7 01       	movw	r30, r14
    24c2:	b1 82       	std	Z+1, r11	; 0x01
    24c4:	a0 82       	st	Z, r10
				OCR1A = notes[1] / 2;
    24c6:	f8 01       	movw	r30, r16
    24c8:	d1 82       	std	Z+1, r13	; 0x01
    24ca:	c0 82       	st	Z, r12
    24cc:	8f e5       	ldi	r24, 0x5F	; 95
    24ce:	9a ee       	ldi	r25, 0xEA	; 234
    24d0:	01 97       	sbiw	r24, 0x01	; 1
    24d2:	f1 f7       	brne	.-4      	; 0x24d0 <debugMode+0xaf2>
    24d4:	00 c0       	rjmp	.+0      	; 0x24d6 <debugMode+0xaf8>
    24d6:	00 00       	nop
				_delay_ms(15);
				DDRB &= ~(1<<1);
    24d8:	21 98       	cbi	0x04, 1	; 4
				
				while(isButtonDown(1,4)){
    24da:	32 c0       	rjmp	.+100    	; 0x2540 <debugMode+0xb62>
					setScore(LEFT, MultTimeKill);
    24dc:	60 91 0c 03 	lds	r22, 0x030C	; 0x80030c <MultTimeKill>
    24e0:	70 91 0d 03 	lds	r23, 0x030D	; 0x80030d <MultTimeKill+0x1>
    24e4:	80 e0       	ldi	r24, 0x00	; 0
    24e6:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
					if(TCNT4 > 6500){
    24ea:	88 81       	ld	r24, Y
    24ec:	99 81       	ldd	r25, Y+1	; 0x01
    24ee:	85 36       	cpi	r24, 0x65	; 101
    24f0:	99 41       	sbci	r25, 0x19	; 25
    24f2:	30 f1       	brcs	.+76     	; 0x2540 <debugMode+0xb62>
						MultTimeKill = (MultTimeKill + 999) % 1000;
    24f4:	40 91 0c 03 	lds	r20, 0x030C	; 0x80030c <MultTimeKill>
    24f8:	50 91 0d 03 	lds	r21, 0x030D	; 0x80030d <MultTimeKill+0x1>
    24fc:	49 51       	subi	r20, 0x19	; 25
    24fe:	5c 4f       	sbci	r21, 0xFC	; 252
    2500:	9a 01       	movw	r18, r20
    2502:	36 95       	lsr	r19
    2504:	27 95       	ror	r18
    2506:	36 95       	lsr	r19
    2508:	27 95       	ror	r18
    250a:	36 95       	lsr	r19
    250c:	27 95       	ror	r18
    250e:	a5 ec       	ldi	r26, 0xC5	; 197
    2510:	b0 e2       	ldi	r27, 0x20	; 32
    2512:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <__umulhisi3>
    2516:	92 95       	swap	r25
    2518:	82 95       	swap	r24
    251a:	8f 70       	andi	r24, 0x0F	; 15
    251c:	89 27       	eor	r24, r25
    251e:	9f 70       	andi	r25, 0x0F	; 15
    2520:	89 27       	eor	r24, r25
    2522:	86 9d       	mul	r24, r6
    2524:	90 01       	movw	r18, r0
    2526:	87 9d       	mul	r24, r7
    2528:	30 0d       	add	r19, r0
    252a:	96 9d       	mul	r25, r6
    252c:	30 0d       	add	r19, r0
    252e:	11 24       	eor	r1, r1
    2530:	42 1b       	sub	r20, r18
    2532:	53 0b       	sbc	r21, r19
    2534:	50 93 0d 03 	sts	0x030D, r21	; 0x80030d <MultTimeKill+0x1>
    2538:	40 93 0c 03 	sts	0x030C, r20	; 0x80030c <MultTimeKill>
						TCNT4 = 6250;
    253c:	99 82       	std	Y+1, r9	; 0x01
    253e:	88 82       	st	Y, r8
				ICR1 = notes[1];
				OCR1A = notes[1] / 2;
				_delay_ms(15);
				DDRB &= ~(1<<1);
				
				while(isButtonDown(1,4)){
    2540:	64 e0       	ldi	r22, 0x04	; 4
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    2548:	81 11       	cpse	r24, r1
    254a:	c8 cf       	rjmp	.-112    	; 0x24dc <debugMode+0xafe>
    254c:	66 c1       	rjmp	.+716    	; 0x281a <debugMode+0xe3c>
			
			
			
			
			case 5:	//bonus round points
			setScoreSegment(RIGHT100, 0xb);	//3ul tck
    254e:	6b e0       	ldi	r22, 0x0B	; 11
    2550:	88 e0       	ldi	r24, 0x08	; 8
    2552:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(RIGHT10, 21);
    2556:	65 e1       	ldi	r22, 0x15	; 21
    2558:	87 e0       	ldi	r24, 0x07	; 7
    255a:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(RIGHT1, 5);
    255e:	65 e0       	ldi	r22, 0x05	; 5
    2560:	86 e0       	ldi	r24, 0x06	; 6
    2562:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(TIMER100, 24);
    2566:	68 e1       	ldi	r22, 0x18	; 24
    2568:	85 e0       	ldi	r24, 0x05	; 5
    256a:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(TIMER10, 22);
    256e:	66 e1       	ldi	r22, 0x16	; 22
    2570:	84 e0       	ldi	r24, 0x04	; 4
    2572:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(TIMER1, 5);
    2576:	65 e0       	ldi	r22, 0x05	; 5
    2578:	83 e0       	ldi	r24, 0x03	; 3
    257a:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScore(LEFT, BonusPointCount);
    257e:	60 91 10 03 	lds	r22, 0x0310	; 0x800310 <BonusPointCount>
    2582:	70 e0       	ldi	r23, 0x00	; 0
    2584:	80 e0       	ldi	r24, 0x00	; 0
    2586:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
			
			setButtonLed(2,2,1);		// RESET score led
    258a:	41 e0       	ldi	r20, 0x01	; 1
    258c:	62 e0       	ldi	r22, 0x02	; 2
    258e:	82 e0       	ldi	r24, 0x02	; 2
    2590:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
			
			if(isButtonDown(2,2)){
    2594:	62 e0       	ldi	r22, 0x02	; 2
    2596:	82 e0       	ldi	r24, 0x02	; 2
    2598:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    259c:	88 23       	and	r24, r24
    259e:	19 f1       	breq	.+70     	; 0x25e6 <debugMode+0xc08>
				BonusPointCount = 2;
    25a0:	82 e0       	ldi	r24, 0x02	; 2
    25a2:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <BonusPointCount>
				setScore(LEFT, BonusPointCount);
    25a6:	62 e0       	ldi	r22, 0x02	; 2
    25a8:	70 e0       	ldi	r23, 0x00	; 0
    25aa:	80 e0       	ldi	r24, 0x00	; 0
    25ac:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
				DDRB |= (1<<1);	//play reset
    25b0:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[3];
    25b2:	8d e4       	ldi	r24, 0x4D	; 77
    25b4:	9d e0       	ldi	r25, 0x0D	; 13
    25b6:	f7 01       	movw	r30, r14
    25b8:	91 83       	std	Z+1, r25	; 0x01
    25ba:	80 83       	st	Z, r24
				OCR1A = notes[3] / 2;
    25bc:	86 ea       	ldi	r24, 0xA6	; 166
    25be:	96 e0       	ldi	r25, 0x06	; 6
    25c0:	f8 01       	movw	r30, r16
    25c2:	91 83       	std	Z+1, r25	; 0x01
    25c4:	80 83       	st	Z, r24
    25c6:	ff e7       	ldi	r31, 0x7F	; 127
    25c8:	25 eb       	ldi	r18, 0xB5	; 181
    25ca:	41 e0       	ldi	r20, 0x01	; 1
    25cc:	f1 50       	subi	r31, 0x01	; 1
    25ce:	20 40       	sbci	r18, 0x00	; 0
    25d0:	40 40       	sbci	r20, 0x00	; 0
    25d2:	e1 f7       	brne	.-8      	; 0x25cc <debugMode+0xbee>
    25d4:	00 c0       	rjmp	.+0      	; 0x25d6 <debugMode+0xbf8>
    25d6:	00 00       	nop
				_delay_ms(35);
				DDRB &= ~(1<<1);
    25d8:	21 98       	cbi	0x04, 1	; 4
				while(isButtonDown(2,2))
    25da:	62 e0       	ldi	r22, 0x02	; 2
    25dc:	82 e0       	ldi	r24, 0x02	; 2
    25de:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    25e2:	81 11       	cpse	r24, r1
    25e4:	fa cf       	rjmp	.-12     	; 0x25da <debugMode+0xbfc>
				{
					//wait for unpush
				}
			}
			
			if(isButtonDown(1,3)){	//UP
    25e6:	63 e0       	ldi	r22, 0x03	; 3
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    25ee:	88 23       	and	r24, r24
    25f0:	81 f1       	breq	.+96     	; 0x2652 <debugMode+0xc74>
				TCNT4 = 0;
    25f2:	19 82       	std	Y+1, r1	; 0x01
    25f4:	18 82       	st	Y, r1
				BonusPointCount = (BonusPointCount + 1);
    25f6:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <BonusPointCount>
    25fa:	8f 5f       	subi	r24, 0xFF	; 255
    25fc:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <BonusPointCount>
				
				DDRB |= (1<<1);	//play tone
    2600:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[2];
    2602:	f7 01       	movw	r30, r14
    2604:	51 82       	std	Z+1, r5	; 0x01
    2606:	40 82       	st	Z, r4
				OCR1A = notes[2] / 2;
    2608:	47 e7       	ldi	r20, 0x77	; 119
    260a:	57 e0       	ldi	r21, 0x07	; 7
    260c:	f8 01       	movw	r30, r16
    260e:	51 83       	std	Z+1, r21	; 0x01
    2610:	40 83       	st	Z, r20
    2612:	8f e5       	ldi	r24, 0x5F	; 95
    2614:	9a ee       	ldi	r25, 0xEA	; 234
    2616:	01 97       	sbiw	r24, 0x01	; 1
    2618:	f1 f7       	brne	.-4      	; 0x2616 <debugMode+0xc38>
    261a:	00 c0       	rjmp	.+0      	; 0x261c <debugMode+0xc3e>
    261c:	00 00       	nop
				_delay_ms(15);
				DDRB &= ~(1<<1);
    261e:	21 98       	cbi	0x04, 1	; 4
				
				while(isButtonDown(1,3)){
    2620:	12 c0       	rjmp	.+36     	; 0x2646 <debugMode+0xc68>
					setScore(LEFT, BonusPointCount);
    2622:	60 91 10 03 	lds	r22, 0x0310	; 0x800310 <BonusPointCount>
    2626:	70 e0       	ldi	r23, 0x00	; 0
    2628:	80 e0       	ldi	r24, 0x00	; 0
    262a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
					if(TCNT4 > 6500){
    262e:	88 81       	ld	r24, Y
    2630:	99 81       	ldd	r25, Y+1	; 0x01
    2632:	85 36       	cpi	r24, 0x65	; 101
    2634:	99 41       	sbci	r25, 0x19	; 25
    2636:	38 f0       	brcs	.+14     	; 0x2646 <debugMode+0xc68>
						BonusPointCount = (BonusPointCount + 1);
    2638:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <BonusPointCount>
    263c:	8f 5f       	subi	r24, 0xFF	; 255
    263e:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <BonusPointCount>
						TCNT4 = 6250;
    2642:	99 82       	std	Y+1, r9	; 0x01
    2644:	88 82       	st	Y, r8
				ICR1 = notes[2];
				OCR1A = notes[2] / 2;
				_delay_ms(15);
				DDRB &= ~(1<<1);
				
				while(isButtonDown(1,3)){
    2646:	63 e0       	ldi	r22, 0x03	; 3
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    264e:	81 11       	cpse	r24, r1
    2650:	e8 cf       	rjmp	.-48     	; 0x2622 <debugMode+0xc44>
						BonusPointCount = (BonusPointCount + 1);
						TCNT4 = 6250;
					}
				}
			}
			if(isButtonDown(1,4)){	//DOWN
    2652:	64 e0       	ldi	r22, 0x04	; 4
    2654:	81 e0       	ldi	r24, 0x01	; 1
    2656:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    265a:	88 23       	and	r24, r24
    265c:	09 f4       	brne	.+2      	; 0x2660 <debugMode+0xc82>
    265e:	dd c0       	rjmp	.+442    	; 0x281a <debugMode+0xe3c>
				TCNT4 = 0;
    2660:	19 82       	std	Y+1, r1	; 0x01
    2662:	18 82       	st	Y, r1
				BonusPointCount = (BonusPointCount + 255);
    2664:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <BonusPointCount>
    2668:	81 50       	subi	r24, 0x01	; 1
    266a:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <BonusPointCount>
				
				DDRB |= (1<<1);	//play tone
    266e:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[1];
    2670:	f7 01       	movw	r30, r14
    2672:	b1 82       	std	Z+1, r11	; 0x01
    2674:	a0 82       	st	Z, r10
				OCR1A = notes[1] / 2;
    2676:	f8 01       	movw	r30, r16
    2678:	d1 82       	std	Z+1, r13	; 0x01
    267a:	c0 82       	st	Z, r12
    267c:	8f e5       	ldi	r24, 0x5F	; 95
    267e:	9a ee       	ldi	r25, 0xEA	; 234
    2680:	01 97       	sbiw	r24, 0x01	; 1
    2682:	f1 f7       	brne	.-4      	; 0x2680 <debugMode+0xca2>
    2684:	00 c0       	rjmp	.+0      	; 0x2686 <debugMode+0xca8>
    2686:	00 00       	nop
				_delay_ms(15);
				DDRB &= ~(1<<1);
    2688:	21 98       	cbi	0x04, 1	; 4
				
				while(isButtonDown(1,4)){
    268a:	12 c0       	rjmp	.+36     	; 0x26b0 <debugMode+0xcd2>
					setScore(LEFT, BonusPointCount);
    268c:	60 91 10 03 	lds	r22, 0x0310	; 0x800310 <BonusPointCount>
    2690:	70 e0       	ldi	r23, 0x00	; 0
    2692:	80 e0       	ldi	r24, 0x00	; 0
    2694:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
					if(TCNT4 > 6500){
    2698:	88 81       	ld	r24, Y
    269a:	99 81       	ldd	r25, Y+1	; 0x01
    269c:	85 36       	cpi	r24, 0x65	; 101
    269e:	99 41       	sbci	r25, 0x19	; 25
    26a0:	38 f0       	brcs	.+14     	; 0x26b0 <debugMode+0xcd2>
						BonusPointCount = (BonusPointCount + 255);
    26a2:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <BonusPointCount>
    26a6:	81 50       	subi	r24, 0x01	; 1
    26a8:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <BonusPointCount>
						TCNT4 = 6250;
    26ac:	99 82       	std	Y+1, r9	; 0x01
    26ae:	88 82       	st	Y, r8
				ICR1 = notes[1];
				OCR1A = notes[1] / 2;
				_delay_ms(15);
				DDRB &= ~(1<<1);
				
				while(isButtonDown(1,4)){
    26b0:	64 e0       	ldi	r22, 0x04	; 4
    26b2:	81 e0       	ldi	r24, 0x01	; 1
    26b4:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    26b8:	81 11       	cpse	r24, r1
    26ba:	e8 cf       	rjmp	.-48     	; 0x268c <debugMode+0xcae>
    26bc:	ae c0       	rjmp	.+348    	; 0x281a <debugMode+0xe3c>
			
			
			
			
			case 6:	//sound on
			setScoreSegment(RIGHT100, 5);
    26be:	65 e0       	ldi	r22, 0x05	; 5
    26c0:	88 e0       	ldi	r24, 0x08	; 8
    26c2:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(RIGHT10, 21);
    26c6:	65 e1       	ldi	r22, 0x15	; 21
    26c8:	87 e0       	ldi	r24, 0x07	; 7
    26ca:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(RIGHT1, 0xd);
    26ce:	6d e0       	ldi	r22, 0x0D	; 13
    26d0:	86 e0       	ldi	r24, 0x06	; 6
    26d2:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(TIMER100, 16);
    26d6:	60 e1       	ldi	r22, 0x10	; 16
    26d8:	85 e0       	ldi	r24, 0x05	; 5
    26da:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(TIMER10, 16);
    26de:	60 e1       	ldi	r22, 0x10	; 16
    26e0:	84 e0       	ldi	r24, 0x04	; 4
    26e2:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			setScoreSegment(TIMER1, 16);
    26e6:	60 e1       	ldi	r22, 0x10	; 16
    26e8:	83 e0       	ldi	r24, 0x03	; 3
    26ea:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
			
			setScore(LEFT, SoundEnabled);
    26ee:	60 91 07 03 	lds	r22, 0x0307	; 0x800307 <SoundEnabled>
    26f2:	70 e0       	ldi	r23, 0x00	; 0
    26f4:	80 e0       	ldi	r24, 0x00	; 0
    26f6:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>

			if(isButtonDown(1,3)){	//UP
    26fa:	63 e0       	ldi	r22, 0x03	; 3
    26fc:	81 e0       	ldi	r24, 0x01	; 1
    26fe:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    2702:	88 23       	and	r24, r24
    2704:	09 f4       	brne	.+2      	; 0x2708 <debugMode+0xd2a>
    2706:	42 c0       	rjmp	.+132    	; 0x278c <debugMode+0xdae>
				TCNT4 = 0;
    2708:	19 82       	std	Y+1, r1	; 0x01
    270a:	18 82       	st	Y, r1
				SoundEnabled = (SoundEnabled + 1) % 2;
    270c:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <SoundEnabled>
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	01 96       	adiw	r24, 0x01	; 1
    2714:	81 70       	andi	r24, 0x01	; 1
    2716:	90 78       	andi	r25, 0x80	; 128
    2718:	99 23       	and	r25, r25
    271a:	24 f4       	brge	.+8      	; 0x2724 <debugMode+0xd46>
    271c:	01 97       	sbiw	r24, 0x01	; 1
    271e:	8e 6f       	ori	r24, 0xFE	; 254
    2720:	9f 6f       	ori	r25, 0xFF	; 255
    2722:	01 96       	adiw	r24, 0x01	; 1
    2724:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <SoundEnabled>
				
				DDRB |= (1<<1);	//play tone
    2728:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[2];
    272a:	f7 01       	movw	r30, r14
    272c:	51 82       	std	Z+1, r5	; 0x01
    272e:	40 82       	st	Z, r4
				OCR1A = notes[2] / 2;
    2730:	47 e7       	ldi	r20, 0x77	; 119
    2732:	57 e0       	ldi	r21, 0x07	; 7
    2734:	f8 01       	movw	r30, r16
    2736:	51 83       	std	Z+1, r21	; 0x01
    2738:	40 83       	st	Z, r20
    273a:	8f e5       	ldi	r24, 0x5F	; 95
    273c:	9a ee       	ldi	r25, 0xEA	; 234
    273e:	01 97       	sbiw	r24, 0x01	; 1
    2740:	f1 f7       	brne	.-4      	; 0x273e <debugMode+0xd60>
    2742:	00 c0       	rjmp	.+0      	; 0x2744 <debugMode+0xd66>
    2744:	00 00       	nop
				_delay_ms(15);
				DDRB &= ~(1<<1);
    2746:	21 98       	cbi	0x04, 1	; 4
				
				while(isButtonDown(1,3)){
    2748:	1b c0       	rjmp	.+54     	; 0x2780 <debugMode+0xda2>
					setScore(LEFT, SoundEnabled);
    274a:	60 91 07 03 	lds	r22, 0x0307	; 0x800307 <SoundEnabled>
    274e:	70 e0       	ldi	r23, 0x00	; 0
    2750:	80 e0       	ldi	r24, 0x00	; 0
    2752:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
					if(TCNT4 > 6500){
    2756:	88 81       	ld	r24, Y
    2758:	99 81       	ldd	r25, Y+1	; 0x01
    275a:	85 36       	cpi	r24, 0x65	; 101
    275c:	99 41       	sbci	r25, 0x19	; 25
    275e:	80 f0       	brcs	.+32     	; 0x2780 <debugMode+0xda2>
						SoundEnabled = (SoundEnabled + 1) % 2;
    2760:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <SoundEnabled>
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	01 96       	adiw	r24, 0x01	; 1
    2768:	81 70       	andi	r24, 0x01	; 1
    276a:	90 78       	andi	r25, 0x80	; 128
    276c:	99 23       	and	r25, r25
    276e:	24 f4       	brge	.+8      	; 0x2778 <debugMode+0xd9a>
    2770:	01 97       	sbiw	r24, 0x01	; 1
    2772:	8e 6f       	ori	r24, 0xFE	; 254
    2774:	9f 6f       	ori	r25, 0xFF	; 255
    2776:	01 96       	adiw	r24, 0x01	; 1
    2778:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <SoundEnabled>
						TCNT4 = 6250;
    277c:	99 82       	std	Y+1, r9	; 0x01
    277e:	88 82       	st	Y, r8
				ICR1 = notes[2];
				OCR1A = notes[2] / 2;
				_delay_ms(15);
				DDRB &= ~(1<<1);
				
				while(isButtonDown(1,3)){
    2780:	63 e0       	ldi	r22, 0x03	; 3
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    2788:	81 11       	cpse	r24, r1
    278a:	df cf       	rjmp	.-66     	; 0x274a <debugMode+0xd6c>
						SoundEnabled = (SoundEnabled + 1) % 2;
						TCNT4 = 6250;
					}
				}
			}
			if(isButtonDown(1,4)){	//DOWN
    278c:	64 e0       	ldi	r22, 0x04	; 4
    278e:	81 e0       	ldi	r24, 0x01	; 1
    2790:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    2794:	88 23       	and	r24, r24
    2796:	09 f4       	brne	.+2      	; 0x279a <debugMode+0xdbc>
    2798:	40 c0       	rjmp	.+128    	; 0x281a <debugMode+0xe3c>
				TCNT4 = 0;
    279a:	19 82       	std	Y+1, r1	; 0x01
    279c:	18 82       	st	Y, r1
				SoundEnabled = (SoundEnabled + 1) % 2;
    279e:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <SoundEnabled>
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	01 96       	adiw	r24, 0x01	; 1
    27a6:	81 70       	andi	r24, 0x01	; 1
    27a8:	90 78       	andi	r25, 0x80	; 128
    27aa:	99 23       	and	r25, r25
    27ac:	24 f4       	brge	.+8      	; 0x27b6 <debugMode+0xdd8>
    27ae:	01 97       	sbiw	r24, 0x01	; 1
    27b0:	8e 6f       	ori	r24, 0xFE	; 254
    27b2:	9f 6f       	ori	r25, 0xFF	; 255
    27b4:	01 96       	adiw	r24, 0x01	; 1
    27b6:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <SoundEnabled>
				
				DDRB |= (1<<1);	//play tone
    27ba:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[1];
    27bc:	f7 01       	movw	r30, r14
    27be:	b1 82       	std	Z+1, r11	; 0x01
    27c0:	a0 82       	st	Z, r10
				OCR1A = notes[1] / 2;
    27c2:	f8 01       	movw	r30, r16
    27c4:	d1 82       	std	Z+1, r13	; 0x01
    27c6:	c0 82       	st	Z, r12
    27c8:	8f e5       	ldi	r24, 0x5F	; 95
    27ca:	9a ee       	ldi	r25, 0xEA	; 234
    27cc:	01 97       	sbiw	r24, 0x01	; 1
    27ce:	f1 f7       	brne	.-4      	; 0x27cc <debugMode+0xdee>
    27d0:	00 c0       	rjmp	.+0      	; 0x27d2 <debugMode+0xdf4>
    27d2:	00 00       	nop
				_delay_ms(15);
				DDRB &= ~(1<<1);
    27d4:	21 98       	cbi	0x04, 1	; 4
				
				while(isButtonDown(1,4)){
    27d6:	1b c0       	rjmp	.+54     	; 0x280e <debugMode+0xe30>
					setScore(LEFT, SoundEnabled);
    27d8:	60 91 07 03 	lds	r22, 0x0307	; 0x800307 <SoundEnabled>
    27dc:	70 e0       	ldi	r23, 0x00	; 0
    27de:	80 e0       	ldi	r24, 0x00	; 0
    27e0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setScore>
					if(TCNT4 > 6500){
    27e4:	88 81       	ld	r24, Y
    27e6:	99 81       	ldd	r25, Y+1	; 0x01
    27e8:	85 36       	cpi	r24, 0x65	; 101
    27ea:	99 41       	sbci	r25, 0x19	; 25
    27ec:	80 f0       	brcs	.+32     	; 0x280e <debugMode+0xe30>
						SoundEnabled = (SoundEnabled + 1) % 2;
    27ee:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <SoundEnabled>
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	01 96       	adiw	r24, 0x01	; 1
    27f6:	81 70       	andi	r24, 0x01	; 1
    27f8:	90 78       	andi	r25, 0x80	; 128
    27fa:	99 23       	and	r25, r25
    27fc:	24 f4       	brge	.+8      	; 0x2806 <debugMode+0xe28>
    27fe:	01 97       	sbiw	r24, 0x01	; 1
    2800:	8e 6f       	ori	r24, 0xFE	; 254
    2802:	9f 6f       	ori	r25, 0xFF	; 255
    2804:	01 96       	adiw	r24, 0x01	; 1
    2806:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <SoundEnabled>
						TCNT4 = 6250;
    280a:	99 82       	std	Y+1, r9	; 0x01
    280c:	88 82       	st	Y, r8
				ICR1 = notes[1];
				OCR1A = notes[1] / 2;
				_delay_ms(15);
				DDRB &= ~(1<<1);
				
				while(isButtonDown(1,4)){
    280e:	64 e0       	ldi	r22, 0x04	; 4
    2810:	81 e0       	ldi	r24, 0x01	; 1
    2812:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    2816:	81 11       	cpse	r24, r1
    2818:	df cf       	rjmp	.-66     	; 0x27d8 <debugMode+0xdfa>





		setButtonLed(0,4,1);	//NEXT button
    281a:	41 e0       	ldi	r20, 0x01	; 1
    281c:	64 e0       	ldi	r22, 0x04	; 4
    281e:	80 e0       	ldi	r24, 0x00	; 0
    2820:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
		setButtonLed(2,4,1);	//PREV button
    2824:	41 e0       	ldi	r20, 0x01	; 1
    2826:	64 e0       	ldi	r22, 0x04	; 4
    2828:	82 e0       	ldi	r24, 0x02	; 2
    282a:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
		setButtonLed(1,3,1);	//UP button
    282e:	41 e0       	ldi	r20, 0x01	; 1
    2830:	63 e0       	ldi	r22, 0x03	; 3
    2832:	81 e0       	ldi	r24, 0x01	; 1
    2834:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
		setButtonLed(1,4,1);	//DOWN button
    2838:	41 e0       	ldi	r20, 0x01	; 1
    283a:	64 e0       	ldi	r22, 0x04	; 4
    283c:	81 e0       	ldi	r24, 0x01	; 1
    283e:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
		setButtonLed(0,1,1);	//CLOSE button
    2842:	41 e0       	ldi	r20, 0x01	; 1
    2844:	61 e0       	ldi	r22, 0x01	; 1
    2846:	80 e0       	ldi	r24, 0x00	; 0
    2848:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
		
		if(isButtonDown(0,4)){	// goto next page
    284c:	64 e0       	ldi	r22, 0x04	; 4
    284e:	80 e0       	ldi	r24, 0x00	; 0
    2850:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    2854:	88 23       	and	r24, r24
    2856:	b1 f1       	breq	.+108    	; 0x28c4 <debugMode+0xee6>
			page = (page+1) % maxpages;
    2858:	83 2d       	mov	r24, r3
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	01 96       	adiw	r24, 0x01	; 1
    285e:	67 e0       	ldi	r22, 0x07	; 7
    2860:	70 e0       	ldi	r23, 0x00	; 0
    2862:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <__divmodhi4>
    2866:	38 2e       	mov	r3, r24
			
			DDRB |= (1<<1);	//play page tone
    2868:	21 9a       	sbi	0x04, 1	; 4
			ICR1 = notes[0];
    286a:	81 ec       	ldi	r24, 0xC1	; 193
    286c:	91 e1       	ldi	r25, 0x11	; 17
    286e:	f7 01       	movw	r30, r14
    2870:	91 83       	std	Z+1, r25	; 0x01
    2872:	80 83       	st	Z, r24
			OCR1A = notes[0] / 2;
    2874:	80 ee       	ldi	r24, 0xE0	; 224
    2876:	98 e0       	ldi	r25, 0x08	; 8
    2878:	f8 01       	movw	r30, r16
    287a:	91 83       	std	Z+1, r25	; 0x01
    287c:	80 83       	st	Z, r24
    287e:	ff e7       	ldi	r31, 0x7F	; 127
    2880:	25 eb       	ldi	r18, 0xB5	; 181
    2882:	41 e0       	ldi	r20, 0x01	; 1
    2884:	f1 50       	subi	r31, 0x01	; 1
    2886:	20 40       	sbci	r18, 0x00	; 0
    2888:	40 40       	sbci	r20, 0x00	; 0
    288a:	e1 f7       	brne	.-8      	; 0x2884 <debugMode+0xea6>
    288c:	00 c0       	rjmp	.+0      	; 0x288e <debugMode+0xeb0>
    288e:	00 00       	nop
			_delay_ms(35);
			DDRB &= ~(1<<1);
    2890:	21 98       	cbi	0x04, 1	; 4
			
			while(isButtonDown(0,4)){
    2892:	64 e0       	ldi	r22, 0x04	; 4
    2894:	80 e0       	ldi	r24, 0x00	; 0
    2896:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    289a:	81 11       	cpse	r24, r1
    289c:	fa cf       	rjmp	.-12     	; 0x2892 <debugMode+0xeb4>
				;				//wait until button release
			}
			DDRB |= (1<<1);	//play page tone
    289e:	21 9a       	sbi	0x04, 1	; 4
			ICR1 = notes[1];
    28a0:	f7 01       	movw	r30, r14
    28a2:	b1 82       	std	Z+1, r11	; 0x01
    28a4:	a0 82       	st	Z, r10
			OCR1A = notes[1] / 2;
    28a6:	f8 01       	movw	r30, r16
    28a8:	d1 82       	std	Z+1, r13	; 0x01
    28aa:	c0 82       	st	Z, r12
    28ac:	ff e7       	ldi	r31, 0x7F	; 127
    28ae:	25 eb       	ldi	r18, 0xB5	; 181
    28b0:	41 e0       	ldi	r20, 0x01	; 1
    28b2:	f1 50       	subi	r31, 0x01	; 1
    28b4:	20 40       	sbci	r18, 0x00	; 0
    28b6:	40 40       	sbci	r20, 0x00	; 0
    28b8:	e1 f7       	brne	.-8      	; 0x28b2 <debugMode+0xed4>
    28ba:	00 c0       	rjmp	.+0      	; 0x28bc <debugMode+0xede>
    28bc:	00 00       	nop
			_delay_ms(35);
			DDRB &= ~(1<<1);
    28be:	21 98       	cbi	0x04, 1	; 4
			
			clearLeds(0);
    28c0:	0e 94 63 01 	call	0x2c6	; 0x2c6 <clearLeds>
			
		}
		if(isButtonDown(2,4)){	// goto next page
    28c4:	64 e0       	ldi	r22, 0x04	; 4
    28c6:	82 e0       	ldi	r24, 0x02	; 2
    28c8:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    28cc:	88 23       	and	r24, r24
    28ce:	b1 f1       	breq	.+108    	; 0x293c <debugMode+0xf5e>
			page = (page + maxpages - 1) % maxpages;
    28d0:	83 2d       	mov	r24, r3
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	06 96       	adiw	r24, 0x06	; 6
    28d6:	67 e0       	ldi	r22, 0x07	; 7
    28d8:	70 e0       	ldi	r23, 0x00	; 0
    28da:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <__divmodhi4>
    28de:	38 2e       	mov	r3, r24
			
			DDRB |= (1<<1);	//play page tone
    28e0:	21 9a       	sbi	0x04, 1	; 4
			ICR1 = notes[0];
    28e2:	81 ec       	ldi	r24, 0xC1	; 193
    28e4:	91 e1       	ldi	r25, 0x11	; 17
    28e6:	f7 01       	movw	r30, r14
    28e8:	91 83       	std	Z+1, r25	; 0x01
    28ea:	80 83       	st	Z, r24
			OCR1A = notes[0] / 2;
    28ec:	80 ee       	ldi	r24, 0xE0	; 224
    28ee:	98 e0       	ldi	r25, 0x08	; 8
    28f0:	f8 01       	movw	r30, r16
    28f2:	91 83       	std	Z+1, r25	; 0x01
    28f4:	80 83       	st	Z, r24
    28f6:	ff e7       	ldi	r31, 0x7F	; 127
    28f8:	25 eb       	ldi	r18, 0xB5	; 181
    28fa:	41 e0       	ldi	r20, 0x01	; 1
    28fc:	f1 50       	subi	r31, 0x01	; 1
    28fe:	20 40       	sbci	r18, 0x00	; 0
    2900:	40 40       	sbci	r20, 0x00	; 0
    2902:	e1 f7       	brne	.-8      	; 0x28fc <debugMode+0xf1e>
    2904:	00 c0       	rjmp	.+0      	; 0x2906 <debugMode+0xf28>
    2906:	00 00       	nop
			_delay_ms(35);
			DDRB &= ~(1<<1);
    2908:	21 98       	cbi	0x04, 1	; 4
			
			while(isButtonDown(2,4)){
    290a:	64 e0       	ldi	r22, 0x04	; 4
    290c:	82 e0       	ldi	r24, 0x02	; 2
    290e:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    2912:	81 11       	cpse	r24, r1
    2914:	fa cf       	rjmp	.-12     	; 0x290a <debugMode+0xf2c>
				;				//wait until button release
			}
			DDRB |= (1<<1);	//play page tone
    2916:	21 9a       	sbi	0x04, 1	; 4
			ICR1 = notes[1];
    2918:	f7 01       	movw	r30, r14
    291a:	b1 82       	std	Z+1, r11	; 0x01
    291c:	a0 82       	st	Z, r10
			OCR1A = notes[1] / 2;
    291e:	f8 01       	movw	r30, r16
    2920:	d1 82       	std	Z+1, r13	; 0x01
    2922:	c0 82       	st	Z, r12
    2924:	ff e7       	ldi	r31, 0x7F	; 127
    2926:	25 eb       	ldi	r18, 0xB5	; 181
    2928:	41 e0       	ldi	r20, 0x01	; 1
    292a:	f1 50       	subi	r31, 0x01	; 1
    292c:	20 40       	sbci	r18, 0x00	; 0
    292e:	40 40       	sbci	r20, 0x00	; 0
    2930:	e1 f7       	brne	.-8      	; 0x292a <debugMode+0xf4c>
    2932:	00 c0       	rjmp	.+0      	; 0x2934 <debugMode+0xf56>
    2934:	00 00       	nop
			_delay_ms(35);
			DDRB &= ~(1<<1);
    2936:	21 98       	cbi	0x04, 1	; 4
			
			clearLeds(0);
    2938:	0e 94 63 01 	call	0x2c6	; 0x2c6 <clearLeds>
		}
		if(isButtonDown(0,1)){	//CLOSE debug
    293c:	61 e0       	ldi	r22, 0x01	; 1
    293e:	80 e0       	ldi	r24, 0x00	; 0
    2940:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    2944:	88 23       	and	r24, r24
    2946:	09 f4       	brne	.+2      	; 0x294a <debugMode+0xf6c>
    2948:	d8 c8       	rjmp	.-3664   	; 0x1afa <debugMode+0x11c>
			//first SAVE all values
			DDRB |= (1<<1);	//play page tone
    294a:	21 9a       	sbi	0x04, 1	; 4
			ICR1 = notes[3];
    294c:	a6 e8       	ldi	r26, 0x86	; 134
    294e:	b0 e0       	ldi	r27, 0x00	; 0
    2950:	2d e4       	ldi	r18, 0x4D	; 77
    2952:	3d e0       	ldi	r19, 0x0D	; 13
    2954:	11 96       	adiw	r26, 0x01	; 1
    2956:	3c 93       	st	X, r19
    2958:	2e 93       	st	-X, r18
			OCR1A = notes[3] / 2;
    295a:	e8 e8       	ldi	r30, 0x88	; 136
    295c:	f0 e0       	ldi	r31, 0x00	; 0
    295e:	86 ea       	ldi	r24, 0xA6	; 166
    2960:	96 e0       	ldi	r25, 0x06	; 6
    2962:	91 83       	std	Z+1, r25	; 0x01
    2964:	80 83       	st	Z, r24
    2966:	5f e7       	ldi	r21, 0x7F	; 127
    2968:	65 eb       	ldi	r22, 0xB5	; 181
    296a:	c1 e0       	ldi	r28, 0x01	; 1
    296c:	51 50       	subi	r21, 0x01	; 1
    296e:	60 40       	sbci	r22, 0x00	; 0
    2970:	c0 40       	sbci	r28, 0x00	; 0
    2972:	e1 f7       	brne	.-8      	; 0x296c <debugMode+0xf8e>
    2974:	00 c0       	rjmp	.+0      	; 0x2976 <debugMode+0xf98>
    2976:	00 00       	nop
			_delay_ms(35);
			DDRB &= ~(1<<1);
    2978:	21 98       	cbi	0x04, 1	; 4
    297a:	df e7       	ldi	r29, 0x7F	; 127
    297c:	15 eb       	ldi	r17, 0xB5	; 181
    297e:	41 e0       	ldi	r20, 0x01	; 1
    2980:	d1 50       	subi	r29, 0x01	; 1
    2982:	10 40       	sbci	r17, 0x00	; 0
    2984:	40 40       	sbci	r20, 0x00	; 0
    2986:	e1 f7       	brne	.-8      	; 0x2980 <debugMode+0xfa2>
    2988:	00 c0       	rjmp	.+0      	; 0x298a <debugMode+0xfac>
    298a:	00 00       	nop
			_delay_ms(35);
			DDRB |= (1<<1);	//play page tone
    298c:	21 9a       	sbi	0x04, 1	; 4
			ICR1 = notes[3];
    298e:	11 96       	adiw	r26, 0x01	; 1
    2990:	3c 93       	st	X, r19
    2992:	2e 93       	st	-X, r18
			OCR1A = notes[3] / 2;
    2994:	91 83       	std	Z+1, r25	; 0x01
    2996:	80 83       	st	Z, r24
    2998:	5f e7       	ldi	r21, 0x7F	; 127
    299a:	65 eb       	ldi	r22, 0xB5	; 181
    299c:	81 e0       	ldi	r24, 0x01	; 1
    299e:	51 50       	subi	r21, 0x01	; 1
    29a0:	60 40       	sbci	r22, 0x00	; 0
    29a2:	80 40       	sbci	r24, 0x00	; 0
    29a4:	e1 f7       	brne	.-8      	; 0x299e <debugMode+0xfc0>
    29a6:	00 c0       	rjmp	.+0      	; 0x29a8 <debugMode+0xfca>
    29a8:	00 00       	nop
			_delay_ms(35);
			DDRB &= ~(1<<1);
    29aa:	21 98       	cbi	0x04, 1	; 4
			
			EEPROM_write(EEP_ADDR_HighScore1P_H, HighScore1P >> 8);
    29ac:	60 91 fb 02 	lds	r22, 0x02FB	; 0x8002fb <HighScore1P+0x1>
    29b0:	80 e0       	ldi	r24, 0x00	; 0
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <EEPROM_write>
			EEPROM_write(EEP_ADDR_HighScore1P_L, HighScore1P & 0xFF);
    29b8:	60 91 fa 02 	lds	r22, 0x02FA	; 0x8002fa <HighScore1P>
    29bc:	81 e0       	ldi	r24, 0x01	; 1
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <EEPROM_write>
			EEPROM_write(EEP_ADDR_HighScore2P_H, HighScore2P >> 8);
    29c4:	60 91 0f 03 	lds	r22, 0x030F	; 0x80030f <HighScore2P+0x1>
    29c8:	82 e0       	ldi	r24, 0x02	; 2
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <EEPROM_write>
			EEPROM_write(EEP_ADDR_HighScore2P_L, HighScore2P & 0xFF);
    29d0:	60 91 0e 03 	lds	r22, 0x030E	; 0x80030e <HighScore2P>
    29d4:	83 e0       	ldi	r24, 0x03	; 3
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <EEPROM_write>
			EEPROM_write(EEP_ADDR_RoundTime, RoundTime);
    29dc:	60 91 0a 03 	lds	r22, 0x030A	; 0x80030a <RoundTime>
    29e0:	80 e1       	ldi	r24, 0x10	; 16
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <EEPROM_write>
			EEPROM_write(EEP_ADDR_BonusTime, BonusTime);
    29e8:	60 91 ed 02 	lds	r22, 0x02ED	; 0x8002ed <BonusTime>
    29ec:	80 e2       	ldi	r24, 0x20	; 32
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <EEPROM_write>
			EEPROM_write(EEP_ADDR_MultTimeKill_H, MultTimeKill >> 8);
    29f4:	60 91 0d 03 	lds	r22, 0x030D	; 0x80030d <MultTimeKill+0x1>
    29f8:	80 e8       	ldi	r24, 0x80	; 128
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <EEPROM_write>
			EEPROM_write(EEP_ADDR_MultTimeKill_L, MultTimeKill & 0xFF);
    2a00:	60 91 0c 03 	lds	r22, 0x030C	; 0x80030c <MultTimeKill>
    2a04:	81 e8       	ldi	r24, 0x81	; 129
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <EEPROM_write>
			EEPROM_write(EEP_ADDR_SoundEnabled, SoundEnabled);
    2a0c:	60 91 07 03 	lds	r22, 0x0307	; 0x800307 <SoundEnabled>
    2a10:	80 e7       	ldi	r24, 0x70	; 112
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <EEPROM_write>
			EEPROM_write(EEP_ADDR_BonusPtCount, BonusPointCount);
    2a18:	60 91 10 03 	lds	r22, 0x0310	; 0x800310 <BonusPointCount>
    2a1c:	80 e6       	ldi	r24, 0x60	; 96
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
    2a20:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <EEPROM_write>
			
			return;
		}
	}
}
    2a24:	df 91       	pop	r29
    2a26:	cf 91       	pop	r28
    2a28:	1f 91       	pop	r17
    2a2a:	0f 91       	pop	r16
    2a2c:	ff 90       	pop	r15
    2a2e:	ef 90       	pop	r14
    2a30:	df 90       	pop	r13
    2a32:	cf 90       	pop	r12
    2a34:	bf 90       	pop	r11
    2a36:	af 90       	pop	r10
    2a38:	9f 90       	pop	r9
    2a3a:	8f 90       	pop	r8
    2a3c:	7f 90       	pop	r7
    2a3e:	6f 90       	pop	r6
    2a40:	5f 90       	pop	r5
    2a42:	4f 90       	pop	r4
    2a44:	3f 90       	pop	r3
    2a46:	08 95       	ret

00002a48 <EEPROM_read>:
}

uint8_t EEPROM_read(uint16_t uiAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
    2a48:	f9 99       	sbic	0x1f, 1	; 31
    2a4a:	fe cf       	rjmp	.-4      	; 0x2a48 <EEPROM_read>
	;
	/* Set up address register */
	EEAR = uiAddress;
    2a4c:	92 bd       	out	0x22, r25	; 34
    2a4e:	81 bd       	out	0x21, r24	; 33
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
    2a50:	f8 9a       	sbi	0x1f, 0	; 31
	/* Return data from Data Register */
	return EEDR;
    2a52:	80 b5       	in	r24, 0x20	; 32
}
    2a54:	08 95       	ret

00002a56 <main>:
	UBRR0L = 51;
}

int main(void)
{
	usbQcInit();
    2a56:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <usbQcInit>
	QCset12V();
    2a5a:	0e 94 ed 16 	call	0x2dda	; 0x2dda <QCset12V>
	
	buttonsInit();
    2a5e:	0e 94 9f 00 	call	0x13e	; 0x13e <buttonsInit>
	init_uart();
    2a62:	0e 94 af 02 	call	0x55e	; 0x55e <init_uart>
	stdout = &mystdout;
    2a66:	89 e1       	ldi	r24, 0x19	; 25
    2a68:	91 e0       	ldi	r25, 0x01	; 1
    2a6a:	90 93 14 03 	sts	0x0314, r25	; 0x800314 <__iob+0x3>
    2a6e:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <__iob+0x2>
	printf("\n\nWelcome to bartending robot OS ver 4.7B\n");
    2a72:	86 e8       	ldi	r24, 0x86	; 134
    2a74:	91 e0       	ldi	r25, 0x01	; 1
    2a76:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <puts>
	
	sei();
    2a7a:	78 94       	sei
	setScoreSegment(6, 0x11);
	_delay_ms(100);
	}*/
	
	// initialize timer0 for audio circuit
	DDRB |= (1 << DDB1) | (1 << DDB5); // output speaker pin B1
    2a7c:	84 b1       	in	r24, 0x04	; 4
    2a7e:	82 62       	ori	r24, 0x22	; 34
    2a80:	84 b9       	out	0x04, r24	; 4
	ICR1 = 0;	// TOP of counter, start OFF
    2a82:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    2a86:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	OCR1A = 0; //0x1FFF;	// OFF at
    2a8a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    2a8e:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TCCR1A |= (1 << COM1A1) | (1 << WGM11); //|(0 << COM1B1);
    2a92:	e0 e8       	ldi	r30, 0x80	; 128
    2a94:	f0 e0       	ldi	r31, 0x00	; 0
    2a96:	80 81       	ld	r24, Z
    2a98:	82 68       	ori	r24, 0x82	; 130
    2a9a:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12 ) | (1 << WGM13) | (1 << CS41);
    2a9c:	e1 e8       	ldi	r30, 0x81	; 129
    2a9e:	f0 e0       	ldi	r31, 0x00	; 0
    2aa0:	80 81       	ld	r24, Z
    2aa2:	8a 61       	ori	r24, 0x1A	; 26
    2aa4:	80 83       	st	Z, r24
	PORTB &= ~(1 << 1);
    2aa6:	29 98       	cbi	0x05, 1	; 5
	
	TCCR0A = (1 << WGM01);	// enable CTC mode timer 0
    2aa8:	82 e0       	ldi	r24, 0x02	; 2
    2aaa:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0;		//disable clock for timer0, as it will be enabled when "beeped"
    2aac:	15 bc       	out	0x25, r1	; 37
	OCR0A = 125;
    2aae:	9d e7       	ldi	r25, 0x7D	; 125
    2ab0:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = ( 1 << OCIE0A );
    2ab2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	
	printf("AUDIO TIMERS & PORT SET\n");
    2ab6:	80 eb       	ldi	r24, 0xB0	; 176
    2ab8:	91 e0       	ldi	r25, 0x01	; 1
    2aba:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <puts>

	//load values from eeprom
	
	

	HighScore1P = (EEPROM_read(EEP_ADDR_HighScore1P_H) << 8) | (EEPROM_read(EEP_ADDR_HighScore1P_L));
    2abe:	80 e0       	ldi	r24, 0x00	; 0
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	0e 94 24 15 	call	0x2a48	; 0x2a48 <EEPROM_read>
    2ac6:	c8 2f       	mov	r28, r24
    2ac8:	81 e0       	ldi	r24, 0x01	; 1
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	0e 94 24 15 	call	0x2a48	; 0x2a48 <EEPROM_read>
    2ad0:	2c 2f       	mov	r18, r28
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	32 2f       	mov	r19, r18
    2ad6:	22 27       	eor	r18, r18
    2ad8:	28 2b       	or	r18, r24
    2ada:	30 93 fb 02 	sts	0x02FB, r19	; 0x8002fb <HighScore1P+0x1>
    2ade:	20 93 fa 02 	sts	0x02FA, r18	; 0x8002fa <HighScore1P>
	HighScore2P = (EEPROM_read(EEP_ADDR_HighScore2P_H) << 8) | (EEPROM_read(EEP_ADDR_HighScore2P_L));
    2ae2:	82 e0       	ldi	r24, 0x02	; 2
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	0e 94 24 15 	call	0x2a48	; 0x2a48 <EEPROM_read>
    2aea:	c8 2f       	mov	r28, r24
    2aec:	83 e0       	ldi	r24, 0x03	; 3
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	0e 94 24 15 	call	0x2a48	; 0x2a48 <EEPROM_read>
    2af4:	2c 2f       	mov	r18, r28
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	32 2f       	mov	r19, r18
    2afa:	22 27       	eor	r18, r18
    2afc:	28 2b       	or	r18, r24
    2afe:	30 93 0f 03 	sts	0x030F, r19	; 0x80030f <HighScore2P+0x1>
    2b02:	20 93 0e 03 	sts	0x030E, r18	; 0x80030e <HighScore2P>
	RoundTime = EEPROM_read(EEP_ADDR_RoundTime);
    2b06:	80 e1       	ldi	r24, 0x10	; 16
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	0e 94 24 15 	call	0x2a48	; 0x2a48 <EEPROM_read>
    2b0e:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <RoundTime>
	BonusTime = EEPROM_read(EEP_ADDR_BonusTime);
    2b12:	80 e2       	ldi	r24, 0x20	; 32
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	0e 94 24 15 	call	0x2a48	; 0x2a48 <EEPROM_read>
    2b1a:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <BonusTime>
	MultiplierMax = EEPROM_read(EEP_ADDR_MultMax);
    2b1e:	80 e5       	ldi	r24, 0x50	; 80
    2b20:	90 e0       	ldi	r25, 0x00	; 0
    2b22:	0e 94 24 15 	call	0x2a48	; 0x2a48 <EEPROM_read>
    2b26:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <MultiplierMax>
	BonusPointCount = EEPROM_read(EEP_ADDR_BonusPtCount);
    2b2a:	80 e6       	ldi	r24, 0x60	; 96
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	0e 94 24 15 	call	0x2a48	; 0x2a48 <EEPROM_read>
    2b32:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <BonusPointCount>
	SoundEnabled = EEPROM_read(EEP_ADDR_SoundEnabled);
    2b36:	80 e7       	ldi	r24, 0x70	; 112
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	0e 94 24 15 	call	0x2a48	; 0x2a48 <EEPROM_read>
    2b3e:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <SoundEnabled>
	MultTimeKill = (EEPROM_read(EEP_ADDR_MultTimeKill_H) << 8) | (EEPROM_read(EEP_ADDR_MultTimeKill_L));
    2b42:	80 e8       	ldi	r24, 0x80	; 128
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	0e 94 24 15 	call	0x2a48	; 0x2a48 <EEPROM_read>
    2b4a:	c8 2f       	mov	r28, r24
    2b4c:	81 e8       	ldi	r24, 0x81	; 129
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	0e 94 24 15 	call	0x2a48	; 0x2a48 <EEPROM_read>
    2b54:	2c 2f       	mov	r18, r28
    2b56:	30 e0       	ldi	r19, 0x00	; 0
    2b58:	32 2f       	mov	r19, r18
    2b5a:	22 27       	eor	r18, r18
    2b5c:	28 2b       	or	r18, r24
    2b5e:	30 93 0d 03 	sts	0x030D, r19	; 0x80030d <MultTimeKill+0x1>
    2b62:	20 93 0c 03 	sts	0x030C, r18	; 0x80030c <MultTimeKill>
	
	// load random value from eeprom as seed and write new random value
	srand((EEPROM_read(EEP_ADDR_RandomSeed_H) << 8) | EEPROM_read(EEP_ADDR_RandomSeed_L));
    2b66:	80 e4       	ldi	r24, 0x40	; 64
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	0e 94 24 15 	call	0x2a48	; 0x2a48 <EEPROM_read>
    2b6e:	c8 2f       	mov	r28, r24
    2b70:	81 e4       	ldi	r24, 0x41	; 65
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	0e 94 24 15 	call	0x2a48	; 0x2a48 <EEPROM_read>
    2b78:	2c 2f       	mov	r18, r28
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	32 2f       	mov	r19, r18
    2b7e:	22 27       	eor	r18, r18
    2b80:	a9 01       	movw	r20, r18
    2b82:	48 2b       	or	r20, r24
    2b84:	ca 01       	movw	r24, r20
    2b86:	0e 94 80 17 	call	0x2f00	; 0x2f00 <srand>
	EEPROM_write(EEP_ADDR_RandomSeed_H, rand()%256 );
    2b8a:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <rand>
    2b8e:	90 78       	andi	r25, 0x80	; 128
    2b90:	99 23       	and	r25, r25
    2b92:	1c f4       	brge	.+6      	; 0x2b9a <main+0x144>
    2b94:	01 97       	sbiw	r24, 0x01	; 1
    2b96:	9f 6f       	ori	r25, 0xFF	; 255
    2b98:	01 96       	adiw	r24, 0x01	; 1
    2b9a:	68 2f       	mov	r22, r24
    2b9c:	80 e4       	ldi	r24, 0x40	; 64
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <EEPROM_write>
	EEPROM_write(EEP_ADDR_RandomSeed_L, rand()%256 );
    2ba4:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <rand>
    2ba8:	90 78       	andi	r25, 0x80	; 128
    2baa:	99 23       	and	r25, r25
    2bac:	1c f4       	brge	.+6      	; 0x2bb4 <main+0x15e>
    2bae:	01 97       	sbiw	r24, 0x01	; 1
    2bb0:	9f 6f       	ori	r25, 0xFF	; 255
    2bb2:	01 96       	adiw	r24, 0x01	; 1
    2bb4:	68 2f       	mov	r22, r24
    2bb6:	81 e4       	ldi	r24, 0x41	; 65
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <EEPROM_write>
	
	printf("EEPROM VALUES SET:\n");
    2bbe:	88 ec       	ldi	r24, 0xC8	; 200
    2bc0:	91 e0       	ldi	r25, 0x01	; 1
    2bc2:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <puts>
	printf("HS1P: %d \t HS2P: %d \t RT: %d \t BT: %d \t MMAX: %d \t BPC: %d \t SND: %d \t MulTck: %d \n",HighScore1P, HighScore2P, RoundTime, BonusTime, MultiplierMax, BonusPointCount, SoundEnabled, MultTimeKill);
    2bc6:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <MultTimeKill+0x1>
    2bca:	8f 93       	push	r24
    2bcc:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <MultTimeKill>
    2bd0:	8f 93       	push	r24
    2bd2:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <SoundEnabled>
    2bd6:	1f 92       	push	r1
    2bd8:	8f 93       	push	r24
    2bda:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <BonusPointCount>
    2bde:	1f 92       	push	r1
    2be0:	8f 93       	push	r24
    2be2:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <MultiplierMax>
    2be6:	1f 92       	push	r1
    2be8:	8f 93       	push	r24
    2bea:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <BonusTime>
    2bee:	1f 92       	push	r1
    2bf0:	8f 93       	push	r24
    2bf2:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <RoundTime>
    2bf6:	1f 92       	push	r1
    2bf8:	8f 93       	push	r24
    2bfa:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <HighScore2P+0x1>
    2bfe:	8f 93       	push	r24
    2c00:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <HighScore2P>
    2c04:	8f 93       	push	r24
    2c06:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <HighScore1P+0x1>
    2c0a:	8f 93       	push	r24
    2c0c:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <HighScore1P>
    2c10:	8f 93       	push	r24
    2c12:	8b ed       	ldi	r24, 0xDB	; 219
    2c14:	91 e0       	ldi	r25, 0x01	; 1
    2c16:	9f 93       	push	r25
    2c18:	8f 93       	push	r24
    2c1a:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <printf>
	printf("RANDOMSEED: 0x%X%X\n\n", EEPROM_read(EEP_ADDR_RandomSeed_H), EEPROM_read(EEP_ADDR_RandomSeed_L));
    2c1e:	81 e4       	ldi	r24, 0x41	; 65
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	0e 94 24 15 	call	0x2a48	; 0x2a48 <EEPROM_read>
    2c26:	c8 2f       	mov	r28, r24
    2c28:	80 e4       	ldi	r24, 0x40	; 64
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	0e 94 24 15 	call	0x2a48	; 0x2a48 <EEPROM_read>
    2c30:	1f 92       	push	r1
    2c32:	cf 93       	push	r28
    2c34:	1f 92       	push	r1
    2c36:	8f 93       	push	r24
    2c38:	8f e2       	ldi	r24, 0x2F	; 47
    2c3a:	92 e0       	ldi	r25, 0x02	; 2
    2c3c:	9f 93       	push	r25
    2c3e:	8f 93       	push	r24
    2c40:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <printf>
	
	
	
	
	// set up timer4 for game timer
	TCCR4B = (1 << WGM42)|(0b101 << CS40);	// enable timer 0 (game timer)
    2c44:	8d e0       	ldi	r24, 0x0D	; 13
    2c46:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
	TIMSK4 = (1 << OCIE4A);
    2c4a:	82 e0       	ldi	r24, 0x02	; 2
    2c4c:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7e0072>
	OCR4A = 15625;			// set up for 1s
    2c50:	89 e0       	ldi	r24, 0x09	; 9
    2c52:	9d e3       	ldi	r25, 0x3D	; 61
    2c54:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    2c58:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>

	sei();
    2c5c:	78 94       	sei
    2c5e:	8d b7       	in	r24, 0x3d	; 61
    2c60:	9e b7       	in	r25, 0x3e	; 62
    2c62:	48 96       	adiw	r24, 0x18	; 24
    2c64:	0f b6       	in	r0, 0x3f	; 63
    2c66:	f8 94       	cli
    2c68:	9e bf       	out	0x3e, r25	; 62
    2c6a:	0f be       	out	0x3f, r0	; 63
    2c6c:	8d bf       	out	0x3d, r24	; 61
	
	}
	}
	}*/
	
	for(uint8_t dispindex = 0; dispindex < 9; dispindex++){
    2c6e:	c0 e0       	ldi	r28, 0x00	; 0
		setScoreSegment(dispindex, 18);
    2c70:	62 e1       	ldi	r22, 0x12	; 18
    2c72:	8c 2f       	mov	r24, r28
    2c74:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setScoreSegment>
	
	}
	}
	}*/
	
	for(uint8_t dispindex = 0; dispindex < 9; dispindex++){
    2c78:	cf 5f       	subi	r28, 0xFF	; 255
    2c7a:	c9 30       	cpi	r28, 0x09	; 9
    2c7c:	c9 f7       	brne	.-14     	; 0x2c70 <main+0x21a>
		setScoreSegment(dispindex, 18);
	}
	if(isButtonDown(DebugButtonX, DebugButtonY)){
    2c7e:	61 e0       	ldi	r22, 0x01	; 1
    2c80:	80 e0       	ldi	r24, 0x00	; 0
    2c82:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    2c86:	81 11       	cpse	r24, r1
		debugMode();
    2c88:	0e 94 ef 0c 	call	0x19de	; 0x19de <debugMode>
			}
			}else{
			if((P1Score > HighScore2P) || (P2Score > HighScore2P)){
				HighScore2P = (P1Score > P2Score ? P1Score : P2Score);
				EEPROM_write(EEP_ADDR_HighScore2P_H, HighScore2P >> 8);
				EEPROM_write(EEP_ADDR_HighScore2P_L, HighScore2P & 0xFF);
    2c8c:	ce e0       	ldi	r28, 0x0E	; 14
    2c8e:	d3 e0       	ldi	r29, 0x03	; 3
		Bonus();
		
		if(GameMode == 0){
			if(P1Score > HighScore1P){
				HighScore1P = P1Score;
				printf("new high score %d", HighScore1P);
    2c90:	0b e6       	ldi	r16, 0x6B	; 107
    2c92:	12 e0       	ldi	r17, 0x02	; 2
				EEPROM_write(EEP_ADDR_HighScore1P_H, HighScore1P >> 8);
				EEPROM_write(EEP_ADDR_HighScore1P_L, HighScore1P & 0xFF);
    2c94:	0f 2e       	mov	r0, r31
    2c96:	fa ef       	ldi	r31, 0xFA	; 250
    2c98:	ef 2e       	mov	r14, r31
    2c9a:	f2 e0       	ldi	r31, 0x02	; 2
    2c9c:	ff 2e       	mov	r15, r31
    2c9e:	f0 2d       	mov	r31, r0
		debugMode();
	}

	while (1)
	{
		printf("\n\n\nSTARTING ATTRACT MODE\n");
    2ca0:	84 e4       	ldi	r24, 0x44	; 68
    2ca2:	92 e0       	ldi	r25, 0x02	; 2
    2ca4:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <puts>
		Attractive();		// loop thru patterns until game start is pressed (TODO IMPLEMENT DEBUG PATTERN)
    2ca8:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <Attractive>
		printf("STARTING GAME\n");
    2cac:	8d e5       	ldi	r24, 0x5D	; 93
    2cae:	92 e0       	ldi	r25, 0x02	; 2
    2cb0:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <puts>
		Game();
    2cb4:	0e 94 3e 07 	call	0xe7c	; 0xe7c <Game>
    2cb8:	9f ef       	ldi	r25, 0xFF	; 255
    2cba:	ee e9       	ldi	r30, 0x9E	; 158
    2cbc:	f4 e2       	ldi	r31, 0x24	; 36
    2cbe:	91 50       	subi	r25, 0x01	; 1
    2cc0:	e0 40       	sbci	r30, 0x00	; 0
    2cc2:	f0 40       	sbci	r31, 0x00	; 0
    2cc4:	e1 f7       	brne	.-8      	; 0x2cbe <main+0x268>
    2cc6:	00 c0       	rjmp	.+0      	; 0x2cc8 <main+0x272>
    2cc8:	00 00       	nop
		_delay_ms(750);
		Bonus();
    2cca:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <Bonus>
		
		if(GameMode == 0){
    2cce:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <GameMode>
    2cd2:	81 11       	cpse	r24, r1
    2cd4:	29 c0       	rjmp	.+82     	; 0x2d28 <main+0x2d2>
			if(P1Score > HighScore1P){
    2cd6:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <P1Score>
    2cda:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <P1Score+0x1>
    2cde:	20 91 fa 02 	lds	r18, 0x02FA	; 0x8002fa <HighScore1P>
    2ce2:	30 91 fb 02 	lds	r19, 0x02FB	; 0x8002fb <HighScore1P+0x1>
    2ce6:	28 17       	cp	r18, r24
    2ce8:	39 07       	cpc	r19, r25
    2cea:	08 f0       	brcs	.+2      	; 0x2cee <main+0x298>
    2cec:	47 c0       	rjmp	.+142    	; 0x2d7c <main+0x326>
				HighScore1P = P1Score;
    2cee:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <HighScore1P+0x1>
    2cf2:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <HighScore1P>
				printf("new high score %d", HighScore1P);
    2cf6:	9f 93       	push	r25
    2cf8:	8f 93       	push	r24
    2cfa:	1f 93       	push	r17
    2cfc:	0f 93       	push	r16
    2cfe:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <printf>
				EEPROM_write(EEP_ADDR_HighScore1P_H, HighScore1P >> 8);
    2d02:	60 91 fb 02 	lds	r22, 0x02FB	; 0x8002fb <HighScore1P+0x1>
    2d06:	80 e0       	ldi	r24, 0x00	; 0
    2d08:	90 e0       	ldi	r25, 0x00	; 0
    2d0a:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <EEPROM_write>
				EEPROM_write(EEP_ADDR_HighScore1P_L, HighScore1P & 0xFF);
    2d0e:	f7 01       	movw	r30, r14
    2d10:	60 81       	ld	r22, Z
    2d12:	81 e0       	ldi	r24, 0x01	; 1
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <EEPROM_write>
				
				ShowWinner();			//if new high score, flash screen
    2d1a:	0e 94 78 03 	call	0x6f0	; 0x6f0 <ShowWinner>
    2d1e:	0f 90       	pop	r0
    2d20:	0f 90       	pop	r0
    2d22:	0f 90       	pop	r0
    2d24:	0f 90       	pop	r0
    2d26:	2a c0       	rjmp	.+84     	; 0x2d7c <main+0x326>
			}
			}else{
			if((P1Score > HighScore2P) || (P2Score > HighScore2P)){
    2d28:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <P1Score>
    2d2c:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <P1Score+0x1>
    2d30:	20 91 0e 03 	lds	r18, 0x030E	; 0x80030e <HighScore2P>
    2d34:	30 91 0f 03 	lds	r19, 0x030F	; 0x80030f <HighScore2P+0x1>
    2d38:	28 17       	cp	r18, r24
    2d3a:	39 07       	cpc	r19, r25
    2d3c:	38 f0       	brcs	.+14     	; 0x2d4c <main+0x2f6>
    2d3e:	40 91 fe 02 	lds	r20, 0x02FE	; 0x8002fe <P2Score>
    2d42:	50 91 ff 02 	lds	r21, 0x02FF	; 0x8002ff <P2Score+0x1>
    2d46:	24 17       	cp	r18, r20
    2d48:	35 07       	cpc	r19, r21
    2d4a:	b0 f4       	brcc	.+44     	; 0x2d78 <main+0x322>
				HighScore2P = (P1Score > P2Score ? P1Score : P2Score);
    2d4c:	20 91 fe 02 	lds	r18, 0x02FE	; 0x8002fe <P2Score>
    2d50:	30 91 ff 02 	lds	r19, 0x02FF	; 0x8002ff <P2Score+0x1>
    2d54:	28 17       	cp	r18, r24
    2d56:	39 07       	cpc	r19, r25
    2d58:	08 f4       	brcc	.+2      	; 0x2d5c <main+0x306>
    2d5a:	9c 01       	movw	r18, r24
    2d5c:	30 93 0f 03 	sts	0x030F, r19	; 0x80030f <HighScore2P+0x1>
    2d60:	20 93 0e 03 	sts	0x030E, r18	; 0x80030e <HighScore2P>
				EEPROM_write(EEP_ADDR_HighScore2P_H, HighScore2P >> 8);
    2d64:	63 2f       	mov	r22, r19
    2d66:	82 e0       	ldi	r24, 0x02	; 2
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <EEPROM_write>
				EEPROM_write(EEP_ADDR_HighScore2P_L, HighScore2P & 0xFF);
    2d6e:	68 81       	ld	r22, Y
    2d70:	83 e0       	ldi	r24, 0x03	; 3
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <EEPROM_write>
			}
			ShowWinner();				//if 2 player mode show winner anyway
    2d78:	0e 94 78 03 	call	0x6f0	; 0x6f0 <ShowWinner>
    2d7c:	ff ef       	ldi	r31, 0xFF	; 255
    2d7e:	2e e9       	ldi	r18, 0x9E	; 158
    2d80:	44 e2       	ldi	r20, 0x24	; 36
    2d82:	f1 50       	subi	r31, 0x01	; 1
    2d84:	20 40       	sbci	r18, 0x00	; 0
    2d86:	40 40       	sbci	r20, 0x00	; 0
    2d88:	e1 f7       	brne	.-8      	; 0x2d82 <main+0x32c>
    2d8a:	00 c0       	rjmp	.+0      	; 0x2d8c <main+0x336>
    2d8c:	00 00       	nop
    2d8e:	88 cf       	rjmp	.-240    	; 0x2ca0 <main+0x24a>

00002d90 <_dm0V>:
	_dp600mV();
	_dm600mV();
}

void _dm0V(){
	QC_PORT &= ~(1 << QC_DM);
    2d90:	70 98       	cbi	0x0e, 0	; 14
	QC_DDR |= 1 << QC_DM;
    2d92:	68 9a       	sbi	0x0d, 0	; 13
    2d94:	08 95       	ret

00002d96 <_dp600mV>:
}

void _dp600mV(){
	QC_DDR &= ~(1 << QC_DP);
    2d96:	69 98       	cbi	0x0d, 1	; 13
    2d98:	08 95       	ret

00002d9a <QCset5V>:
	_delay_ms(2);
	
}

void QCset5V(){
	_dp600mV();
    2d9a:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <_dp600mV>
	_dm0V();
    2d9e:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <_dm0V>
    2da2:	08 95       	ret

00002da4 <_dm600mV>:
void _dp600mV(){
	QC_DDR &= ~(1 << QC_DP);
}

void _dm600mV(){
	QC_DDR &= ~(1 << QC_DM);
    2da4:	68 98       	cbi	0x0d, 0	; 13
    2da6:	08 95       	ret

00002da8 <_handshake>:
	_handshake();
	QCset5V();
}

void _handshake(){
	_dm600mV();
    2da8:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <_dm600mV>
    2dac:	2f ef       	ldi	r18, 0xFF	; 255
    2dae:	8d e3       	ldi	r24, 0x3D	; 61
    2db0:	99 e4       	ldi	r25, 0x49	; 73
    2db2:	21 50       	subi	r18, 0x01	; 1
    2db4:	80 40       	sbci	r24, 0x00	; 0
    2db6:	90 40       	sbci	r25, 0x00	; 0
    2db8:	e1 f7       	brne	.-8      	; 0x2db2 <_handshake+0xa>
    2dba:	00 c0       	rjmp	.+0      	; 0x2dbc <_handshake+0x14>
    2dbc:	00 00       	nop
	_delay_ms(1500);
	_dm0V();
    2dbe:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <_dm0V>
    2dc2:	8f e3       	ldi	r24, 0x3F	; 63
    2dc4:	9f e1       	ldi	r25, 0x1F	; 31
    2dc6:	01 97       	sbiw	r24, 0x01	; 1
    2dc8:	f1 f7       	brne	.-4      	; 0x2dc6 <_handshake+0x1e>
    2dca:	00 c0       	rjmp	.+0      	; 0x2dcc <_handshake+0x24>
    2dcc:	00 00       	nop
    2dce:	08 95       	ret

00002dd0 <usbQcInit>:
#include "usbQc.h"
#define F_CPU 16000000UL
#include <util/delay.h>

void usbQcInit(){
	_handshake();
    2dd0:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <_handshake>
	QCset5V();
    2dd4:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <QCset5V>
    2dd8:	08 95       	ret

00002dda <QCset12V>:
	_dm600mV();
	
}

void QCset12V(){
	_dp600mV();
    2dda:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <_dp600mV>
	_dm600mV();
    2dde:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <_dm600mV>
    2de2:	08 95       	ret

00002de4 <__divmodhi4>:
    2de4:	97 fb       	bst	r25, 7
    2de6:	07 2e       	mov	r0, r23
    2de8:	16 f4       	brtc	.+4      	; 0x2dee <__divmodhi4+0xa>
    2dea:	00 94       	com	r0
    2dec:	07 d0       	rcall	.+14     	; 0x2dfc <__divmodhi4_neg1>
    2dee:	77 fd       	sbrc	r23, 7
    2df0:	09 d0       	rcall	.+18     	; 0x2e04 <__divmodhi4_neg2>
    2df2:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <__udivmodhi4>
    2df6:	07 fc       	sbrc	r0, 7
    2df8:	05 d0       	rcall	.+10     	; 0x2e04 <__divmodhi4_neg2>
    2dfa:	3e f4       	brtc	.+14     	; 0x2e0a <__divmodhi4_exit>

00002dfc <__divmodhi4_neg1>:
    2dfc:	90 95       	com	r25
    2dfe:	81 95       	neg	r24
    2e00:	9f 4f       	sbci	r25, 0xFF	; 255
    2e02:	08 95       	ret

00002e04 <__divmodhi4_neg2>:
    2e04:	70 95       	com	r23
    2e06:	61 95       	neg	r22
    2e08:	7f 4f       	sbci	r23, 0xFF	; 255

00002e0a <__divmodhi4_exit>:
    2e0a:	08 95       	ret

00002e0c <__tablejump2__>:
    2e0c:	ee 0f       	add	r30, r30
    2e0e:	ff 1f       	adc	r31, r31
    2e10:	05 90       	lpm	r0, Z+
    2e12:	f4 91       	lpm	r31, Z
    2e14:	e0 2d       	mov	r30, r0
    2e16:	09 94       	ijmp

00002e18 <__umulhisi3>:
    2e18:	a2 9f       	mul	r26, r18
    2e1a:	b0 01       	movw	r22, r0
    2e1c:	b3 9f       	mul	r27, r19
    2e1e:	c0 01       	movw	r24, r0
    2e20:	a3 9f       	mul	r26, r19
    2e22:	70 0d       	add	r23, r0
    2e24:	81 1d       	adc	r24, r1
    2e26:	11 24       	eor	r1, r1
    2e28:	91 1d       	adc	r25, r1
    2e2a:	b2 9f       	mul	r27, r18
    2e2c:	70 0d       	add	r23, r0
    2e2e:	81 1d       	adc	r24, r1
    2e30:	11 24       	eor	r1, r1
    2e32:	91 1d       	adc	r25, r1
    2e34:	08 95       	ret

00002e36 <__udivmodhi4>:
    2e36:	aa 1b       	sub	r26, r26
    2e38:	bb 1b       	sub	r27, r27
    2e3a:	51 e1       	ldi	r21, 0x11	; 17
    2e3c:	07 c0       	rjmp	.+14     	; 0x2e4c <__udivmodhi4_ep>

00002e3e <__udivmodhi4_loop>:
    2e3e:	aa 1f       	adc	r26, r26
    2e40:	bb 1f       	adc	r27, r27
    2e42:	a6 17       	cp	r26, r22
    2e44:	b7 07       	cpc	r27, r23
    2e46:	10 f0       	brcs	.+4      	; 0x2e4c <__udivmodhi4_ep>
    2e48:	a6 1b       	sub	r26, r22
    2e4a:	b7 0b       	sbc	r27, r23

00002e4c <__udivmodhi4_ep>:
    2e4c:	88 1f       	adc	r24, r24
    2e4e:	99 1f       	adc	r25, r25
    2e50:	5a 95       	dec	r21
    2e52:	a9 f7       	brne	.-22     	; 0x2e3e <__udivmodhi4_loop>
    2e54:	80 95       	com	r24
    2e56:	90 95       	com	r25
    2e58:	bc 01       	movw	r22, r24
    2e5a:	cd 01       	movw	r24, r26
    2e5c:	08 95       	ret

00002e5e <do_rand>:
    2e5e:	8f 92       	push	r8
    2e60:	9f 92       	push	r9
    2e62:	af 92       	push	r10
    2e64:	bf 92       	push	r11
    2e66:	cf 92       	push	r12
    2e68:	df 92       	push	r13
    2e6a:	ef 92       	push	r14
    2e6c:	ff 92       	push	r15
    2e6e:	cf 93       	push	r28
    2e70:	df 93       	push	r29
    2e72:	ec 01       	movw	r28, r24
    2e74:	68 81       	ld	r22, Y
    2e76:	79 81       	ldd	r23, Y+1	; 0x01
    2e78:	8a 81       	ldd	r24, Y+2	; 0x02
    2e7a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e7c:	61 15       	cp	r22, r1
    2e7e:	71 05       	cpc	r23, r1
    2e80:	81 05       	cpc	r24, r1
    2e82:	91 05       	cpc	r25, r1
    2e84:	21 f4       	brne	.+8      	; 0x2e8e <do_rand+0x30>
    2e86:	64 e2       	ldi	r22, 0x24	; 36
    2e88:	79 ed       	ldi	r23, 0xD9	; 217
    2e8a:	8b e5       	ldi	r24, 0x5B	; 91
    2e8c:	97 e0       	ldi	r25, 0x07	; 7
    2e8e:	2d e1       	ldi	r18, 0x1D	; 29
    2e90:	33 ef       	ldi	r19, 0xF3	; 243
    2e92:	41 e0       	ldi	r20, 0x01	; 1
    2e94:	50 e0       	ldi	r21, 0x00	; 0
    2e96:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <__divmodsi4>
    2e9a:	49 01       	movw	r8, r18
    2e9c:	5a 01       	movw	r10, r20
    2e9e:	9b 01       	movw	r18, r22
    2ea0:	ac 01       	movw	r20, r24
    2ea2:	a7 ea       	ldi	r26, 0xA7	; 167
    2ea4:	b1 e4       	ldi	r27, 0x41	; 65
    2ea6:	0e 94 81 1a 	call	0x3502	; 0x3502 <__muluhisi3>
    2eaa:	6b 01       	movw	r12, r22
    2eac:	7c 01       	movw	r14, r24
    2eae:	ac ee       	ldi	r26, 0xEC	; 236
    2eb0:	b4 ef       	ldi	r27, 0xF4	; 244
    2eb2:	a5 01       	movw	r20, r10
    2eb4:	94 01       	movw	r18, r8
    2eb6:	0e 94 8f 1a 	call	0x351e	; 0x351e <__mulohisi3>
    2eba:	dc 01       	movw	r26, r24
    2ebc:	cb 01       	movw	r24, r22
    2ebe:	8c 0d       	add	r24, r12
    2ec0:	9d 1d       	adc	r25, r13
    2ec2:	ae 1d       	adc	r26, r14
    2ec4:	bf 1d       	adc	r27, r15
    2ec6:	b7 ff       	sbrs	r27, 7
    2ec8:	03 c0       	rjmp	.+6      	; 0x2ed0 <do_rand+0x72>
    2eca:	01 97       	sbiw	r24, 0x01	; 1
    2ecc:	a1 09       	sbc	r26, r1
    2ece:	b0 48       	sbci	r27, 0x80	; 128
    2ed0:	88 83       	st	Y, r24
    2ed2:	99 83       	std	Y+1, r25	; 0x01
    2ed4:	aa 83       	std	Y+2, r26	; 0x02
    2ed6:	bb 83       	std	Y+3, r27	; 0x03
    2ed8:	9f 77       	andi	r25, 0x7F	; 127
    2eda:	df 91       	pop	r29
    2edc:	cf 91       	pop	r28
    2ede:	ff 90       	pop	r15
    2ee0:	ef 90       	pop	r14
    2ee2:	df 90       	pop	r13
    2ee4:	cf 90       	pop	r12
    2ee6:	bf 90       	pop	r11
    2ee8:	af 90       	pop	r10
    2eea:	9f 90       	pop	r9
    2eec:	8f 90       	pop	r8
    2eee:	08 95       	ret

00002ef0 <rand_r>:
    2ef0:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <do_rand>
    2ef4:	08 95       	ret

00002ef6 <rand>:
    2ef6:	80 e0       	ldi	r24, 0x00	; 0
    2ef8:	91 e0       	ldi	r25, 0x01	; 1
    2efa:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <do_rand>
    2efe:	08 95       	ret

00002f00 <srand>:
    2f00:	a0 e0       	ldi	r26, 0x00	; 0
    2f02:	b0 e0       	ldi	r27, 0x00	; 0
    2f04:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    2f08:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    2f0c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    2f10:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    2f14:	08 95       	ret

00002f16 <printf>:
    2f16:	a0 e0       	ldi	r26, 0x00	; 0
    2f18:	b0 e0       	ldi	r27, 0x00	; 0
    2f1a:	e1 e9       	ldi	r30, 0x91	; 145
    2f1c:	f7 e1       	ldi	r31, 0x17	; 23
    2f1e:	0c 94 a4 1a 	jmp	0x3548	; 0x3548 <__prologue_saves__+0x20>
    2f22:	ae 01       	movw	r20, r28
    2f24:	4b 5f       	subi	r20, 0xFB	; 251
    2f26:	5f 4f       	sbci	r21, 0xFF	; 255
    2f28:	fa 01       	movw	r30, r20
    2f2a:	61 91       	ld	r22, Z+
    2f2c:	71 91       	ld	r23, Z+
    2f2e:	af 01       	movw	r20, r30
    2f30:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <__iob+0x2>
    2f34:	90 91 14 03 	lds	r25, 0x0314	; 0x800314 <__iob+0x3>
    2f38:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <vfprintf>
    2f3c:	e2 e0       	ldi	r30, 0x02	; 2
    2f3e:	0c 94 c0 1a 	jmp	0x3580	; 0x3580 <__epilogue_restores__+0x20>

00002f42 <puts>:
    2f42:	0f 93       	push	r16
    2f44:	1f 93       	push	r17
    2f46:	cf 93       	push	r28
    2f48:	df 93       	push	r29
    2f4a:	e0 91 13 03 	lds	r30, 0x0313	; 0x800313 <__iob+0x2>
    2f4e:	f0 91 14 03 	lds	r31, 0x0314	; 0x800314 <__iob+0x3>
    2f52:	23 81       	ldd	r18, Z+3	; 0x03
    2f54:	21 ff       	sbrs	r18, 1
    2f56:	1b c0       	rjmp	.+54     	; 0x2f8e <puts+0x4c>
    2f58:	8c 01       	movw	r16, r24
    2f5a:	d0 e0       	ldi	r29, 0x00	; 0
    2f5c:	c0 e0       	ldi	r28, 0x00	; 0
    2f5e:	f8 01       	movw	r30, r16
    2f60:	81 91       	ld	r24, Z+
    2f62:	8f 01       	movw	r16, r30
    2f64:	60 91 13 03 	lds	r22, 0x0313	; 0x800313 <__iob+0x2>
    2f68:	70 91 14 03 	lds	r23, 0x0314	; 0x800314 <__iob+0x3>
    2f6c:	db 01       	movw	r26, r22
    2f6e:	18 96       	adiw	r26, 0x08	; 8
    2f70:	ed 91       	ld	r30, X+
    2f72:	fc 91       	ld	r31, X
    2f74:	19 97       	sbiw	r26, 0x09	; 9
    2f76:	88 23       	and	r24, r24
    2f78:	31 f0       	breq	.+12     	; 0x2f86 <puts+0x44>
    2f7a:	09 95       	icall
    2f7c:	89 2b       	or	r24, r25
    2f7e:	79 f3       	breq	.-34     	; 0x2f5e <puts+0x1c>
    2f80:	df ef       	ldi	r29, 0xFF	; 255
    2f82:	cf ef       	ldi	r28, 0xFF	; 255
    2f84:	ec cf       	rjmp	.-40     	; 0x2f5e <puts+0x1c>
    2f86:	8a e0       	ldi	r24, 0x0A	; 10
    2f88:	09 95       	icall
    2f8a:	89 2b       	or	r24, r25
    2f8c:	19 f0       	breq	.+6      	; 0x2f94 <puts+0x52>
    2f8e:	8f ef       	ldi	r24, 0xFF	; 255
    2f90:	9f ef       	ldi	r25, 0xFF	; 255
    2f92:	02 c0       	rjmp	.+4      	; 0x2f98 <puts+0x56>
    2f94:	8d 2f       	mov	r24, r29
    2f96:	9c 2f       	mov	r25, r28
    2f98:	df 91       	pop	r29
    2f9a:	cf 91       	pop	r28
    2f9c:	1f 91       	pop	r17
    2f9e:	0f 91       	pop	r16
    2fa0:	08 95       	ret

00002fa2 <vfprintf>:
    2fa2:	ab e0       	ldi	r26, 0x0B	; 11
    2fa4:	b0 e0       	ldi	r27, 0x00	; 0
    2fa6:	e7 ed       	ldi	r30, 0xD7	; 215
    2fa8:	f7 e1       	ldi	r31, 0x17	; 23
    2faa:	0c 94 94 1a 	jmp	0x3528	; 0x3528 <__prologue_saves__>
    2fae:	6c 01       	movw	r12, r24
    2fb0:	7b 01       	movw	r14, r22
    2fb2:	8a 01       	movw	r16, r20
    2fb4:	fc 01       	movw	r30, r24
    2fb6:	17 82       	std	Z+7, r1	; 0x07
    2fb8:	16 82       	std	Z+6, r1	; 0x06
    2fba:	83 81       	ldd	r24, Z+3	; 0x03
    2fbc:	81 ff       	sbrs	r24, 1
    2fbe:	cc c1       	rjmp	.+920    	; 0x3358 <vfprintf+0x3b6>
    2fc0:	ce 01       	movw	r24, r28
    2fc2:	01 96       	adiw	r24, 0x01	; 1
    2fc4:	3c 01       	movw	r6, r24
    2fc6:	f6 01       	movw	r30, r12
    2fc8:	93 81       	ldd	r25, Z+3	; 0x03
    2fca:	f7 01       	movw	r30, r14
    2fcc:	93 fd       	sbrc	r25, 3
    2fce:	85 91       	lpm	r24, Z+
    2fd0:	93 ff       	sbrs	r25, 3
    2fd2:	81 91       	ld	r24, Z+
    2fd4:	7f 01       	movw	r14, r30
    2fd6:	88 23       	and	r24, r24
    2fd8:	09 f4       	brne	.+2      	; 0x2fdc <vfprintf+0x3a>
    2fda:	ba c1       	rjmp	.+884    	; 0x3350 <vfprintf+0x3ae>
    2fdc:	85 32       	cpi	r24, 0x25	; 37
    2fde:	39 f4       	brne	.+14     	; 0x2fee <vfprintf+0x4c>
    2fe0:	93 fd       	sbrc	r25, 3
    2fe2:	85 91       	lpm	r24, Z+
    2fe4:	93 ff       	sbrs	r25, 3
    2fe6:	81 91       	ld	r24, Z+
    2fe8:	7f 01       	movw	r14, r30
    2fea:	85 32       	cpi	r24, 0x25	; 37
    2fec:	29 f4       	brne	.+10     	; 0x2ff8 <vfprintf+0x56>
    2fee:	b6 01       	movw	r22, r12
    2ff0:	90 e0       	ldi	r25, 0x00	; 0
    2ff2:	0e 94 c8 19 	call	0x3390	; 0x3390 <fputc>
    2ff6:	e7 cf       	rjmp	.-50     	; 0x2fc6 <vfprintf+0x24>
    2ff8:	91 2c       	mov	r9, r1
    2ffa:	21 2c       	mov	r2, r1
    2ffc:	31 2c       	mov	r3, r1
    2ffe:	ff e1       	ldi	r31, 0x1F	; 31
    3000:	f3 15       	cp	r31, r3
    3002:	d8 f0       	brcs	.+54     	; 0x303a <vfprintf+0x98>
    3004:	8b 32       	cpi	r24, 0x2B	; 43
    3006:	79 f0       	breq	.+30     	; 0x3026 <vfprintf+0x84>
    3008:	38 f4       	brcc	.+14     	; 0x3018 <vfprintf+0x76>
    300a:	80 32       	cpi	r24, 0x20	; 32
    300c:	79 f0       	breq	.+30     	; 0x302c <vfprintf+0x8a>
    300e:	83 32       	cpi	r24, 0x23	; 35
    3010:	a1 f4       	brne	.+40     	; 0x303a <vfprintf+0x98>
    3012:	23 2d       	mov	r18, r3
    3014:	20 61       	ori	r18, 0x10	; 16
    3016:	1d c0       	rjmp	.+58     	; 0x3052 <vfprintf+0xb0>
    3018:	8d 32       	cpi	r24, 0x2D	; 45
    301a:	61 f0       	breq	.+24     	; 0x3034 <vfprintf+0x92>
    301c:	80 33       	cpi	r24, 0x30	; 48
    301e:	69 f4       	brne	.+26     	; 0x303a <vfprintf+0x98>
    3020:	23 2d       	mov	r18, r3
    3022:	21 60       	ori	r18, 0x01	; 1
    3024:	16 c0       	rjmp	.+44     	; 0x3052 <vfprintf+0xb0>
    3026:	83 2d       	mov	r24, r3
    3028:	82 60       	ori	r24, 0x02	; 2
    302a:	38 2e       	mov	r3, r24
    302c:	e3 2d       	mov	r30, r3
    302e:	e4 60       	ori	r30, 0x04	; 4
    3030:	3e 2e       	mov	r3, r30
    3032:	2a c0       	rjmp	.+84     	; 0x3088 <vfprintf+0xe6>
    3034:	f3 2d       	mov	r31, r3
    3036:	f8 60       	ori	r31, 0x08	; 8
    3038:	1d c0       	rjmp	.+58     	; 0x3074 <vfprintf+0xd2>
    303a:	37 fc       	sbrc	r3, 7
    303c:	2d c0       	rjmp	.+90     	; 0x3098 <vfprintf+0xf6>
    303e:	20 ed       	ldi	r18, 0xD0	; 208
    3040:	28 0f       	add	r18, r24
    3042:	2a 30       	cpi	r18, 0x0A	; 10
    3044:	40 f0       	brcs	.+16     	; 0x3056 <vfprintf+0xb4>
    3046:	8e 32       	cpi	r24, 0x2E	; 46
    3048:	b9 f4       	brne	.+46     	; 0x3078 <vfprintf+0xd6>
    304a:	36 fc       	sbrc	r3, 6
    304c:	81 c1       	rjmp	.+770    	; 0x3350 <vfprintf+0x3ae>
    304e:	23 2d       	mov	r18, r3
    3050:	20 64       	ori	r18, 0x40	; 64
    3052:	32 2e       	mov	r3, r18
    3054:	19 c0       	rjmp	.+50     	; 0x3088 <vfprintf+0xe6>
    3056:	36 fe       	sbrs	r3, 6
    3058:	06 c0       	rjmp	.+12     	; 0x3066 <vfprintf+0xc4>
    305a:	8a e0       	ldi	r24, 0x0A	; 10
    305c:	98 9e       	mul	r9, r24
    305e:	20 0d       	add	r18, r0
    3060:	11 24       	eor	r1, r1
    3062:	92 2e       	mov	r9, r18
    3064:	11 c0       	rjmp	.+34     	; 0x3088 <vfprintf+0xe6>
    3066:	ea e0       	ldi	r30, 0x0A	; 10
    3068:	2e 9e       	mul	r2, r30
    306a:	20 0d       	add	r18, r0
    306c:	11 24       	eor	r1, r1
    306e:	22 2e       	mov	r2, r18
    3070:	f3 2d       	mov	r31, r3
    3072:	f0 62       	ori	r31, 0x20	; 32
    3074:	3f 2e       	mov	r3, r31
    3076:	08 c0       	rjmp	.+16     	; 0x3088 <vfprintf+0xe6>
    3078:	8c 36       	cpi	r24, 0x6C	; 108
    307a:	21 f4       	brne	.+8      	; 0x3084 <vfprintf+0xe2>
    307c:	83 2d       	mov	r24, r3
    307e:	80 68       	ori	r24, 0x80	; 128
    3080:	38 2e       	mov	r3, r24
    3082:	02 c0       	rjmp	.+4      	; 0x3088 <vfprintf+0xe6>
    3084:	88 36       	cpi	r24, 0x68	; 104
    3086:	41 f4       	brne	.+16     	; 0x3098 <vfprintf+0xf6>
    3088:	f7 01       	movw	r30, r14
    308a:	93 fd       	sbrc	r25, 3
    308c:	85 91       	lpm	r24, Z+
    308e:	93 ff       	sbrs	r25, 3
    3090:	81 91       	ld	r24, Z+
    3092:	7f 01       	movw	r14, r30
    3094:	81 11       	cpse	r24, r1
    3096:	b3 cf       	rjmp	.-154    	; 0x2ffe <vfprintf+0x5c>
    3098:	98 2f       	mov	r25, r24
    309a:	9f 7d       	andi	r25, 0xDF	; 223
    309c:	95 54       	subi	r25, 0x45	; 69
    309e:	93 30       	cpi	r25, 0x03	; 3
    30a0:	28 f4       	brcc	.+10     	; 0x30ac <vfprintf+0x10a>
    30a2:	0c 5f       	subi	r16, 0xFC	; 252
    30a4:	1f 4f       	sbci	r17, 0xFF	; 255
    30a6:	9f e3       	ldi	r25, 0x3F	; 63
    30a8:	99 83       	std	Y+1, r25	; 0x01
    30aa:	0d c0       	rjmp	.+26     	; 0x30c6 <vfprintf+0x124>
    30ac:	83 36       	cpi	r24, 0x63	; 99
    30ae:	31 f0       	breq	.+12     	; 0x30bc <vfprintf+0x11a>
    30b0:	83 37       	cpi	r24, 0x73	; 115
    30b2:	71 f0       	breq	.+28     	; 0x30d0 <vfprintf+0x12e>
    30b4:	83 35       	cpi	r24, 0x53	; 83
    30b6:	09 f0       	breq	.+2      	; 0x30ba <vfprintf+0x118>
    30b8:	59 c0       	rjmp	.+178    	; 0x316c <vfprintf+0x1ca>
    30ba:	21 c0       	rjmp	.+66     	; 0x30fe <vfprintf+0x15c>
    30bc:	f8 01       	movw	r30, r16
    30be:	80 81       	ld	r24, Z
    30c0:	89 83       	std	Y+1, r24	; 0x01
    30c2:	0e 5f       	subi	r16, 0xFE	; 254
    30c4:	1f 4f       	sbci	r17, 0xFF	; 255
    30c6:	88 24       	eor	r8, r8
    30c8:	83 94       	inc	r8
    30ca:	91 2c       	mov	r9, r1
    30cc:	53 01       	movw	r10, r6
    30ce:	13 c0       	rjmp	.+38     	; 0x30f6 <vfprintf+0x154>
    30d0:	28 01       	movw	r4, r16
    30d2:	f2 e0       	ldi	r31, 0x02	; 2
    30d4:	4f 0e       	add	r4, r31
    30d6:	51 1c       	adc	r5, r1
    30d8:	f8 01       	movw	r30, r16
    30da:	a0 80       	ld	r10, Z
    30dc:	b1 80       	ldd	r11, Z+1	; 0x01
    30de:	36 fe       	sbrs	r3, 6
    30e0:	03 c0       	rjmp	.+6      	; 0x30e8 <vfprintf+0x146>
    30e2:	69 2d       	mov	r22, r9
    30e4:	70 e0       	ldi	r23, 0x00	; 0
    30e6:	02 c0       	rjmp	.+4      	; 0x30ec <vfprintf+0x14a>
    30e8:	6f ef       	ldi	r22, 0xFF	; 255
    30ea:	7f ef       	ldi	r23, 0xFF	; 255
    30ec:	c5 01       	movw	r24, r10
    30ee:	0e 94 bd 19 	call	0x337a	; 0x337a <strnlen>
    30f2:	4c 01       	movw	r8, r24
    30f4:	82 01       	movw	r16, r4
    30f6:	f3 2d       	mov	r31, r3
    30f8:	ff 77       	andi	r31, 0x7F	; 127
    30fa:	3f 2e       	mov	r3, r31
    30fc:	16 c0       	rjmp	.+44     	; 0x312a <vfprintf+0x188>
    30fe:	28 01       	movw	r4, r16
    3100:	22 e0       	ldi	r18, 0x02	; 2
    3102:	42 0e       	add	r4, r18
    3104:	51 1c       	adc	r5, r1
    3106:	f8 01       	movw	r30, r16
    3108:	a0 80       	ld	r10, Z
    310a:	b1 80       	ldd	r11, Z+1	; 0x01
    310c:	36 fe       	sbrs	r3, 6
    310e:	03 c0       	rjmp	.+6      	; 0x3116 <vfprintf+0x174>
    3110:	69 2d       	mov	r22, r9
    3112:	70 e0       	ldi	r23, 0x00	; 0
    3114:	02 c0       	rjmp	.+4      	; 0x311a <vfprintf+0x178>
    3116:	6f ef       	ldi	r22, 0xFF	; 255
    3118:	7f ef       	ldi	r23, 0xFF	; 255
    311a:	c5 01       	movw	r24, r10
    311c:	0e 94 b2 19 	call	0x3364	; 0x3364 <strnlen_P>
    3120:	4c 01       	movw	r8, r24
    3122:	f3 2d       	mov	r31, r3
    3124:	f0 68       	ori	r31, 0x80	; 128
    3126:	3f 2e       	mov	r3, r31
    3128:	82 01       	movw	r16, r4
    312a:	33 fc       	sbrc	r3, 3
    312c:	1b c0       	rjmp	.+54     	; 0x3164 <vfprintf+0x1c2>
    312e:	82 2d       	mov	r24, r2
    3130:	90 e0       	ldi	r25, 0x00	; 0
    3132:	88 16       	cp	r8, r24
    3134:	99 06       	cpc	r9, r25
    3136:	b0 f4       	brcc	.+44     	; 0x3164 <vfprintf+0x1c2>
    3138:	b6 01       	movw	r22, r12
    313a:	80 e2       	ldi	r24, 0x20	; 32
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	0e 94 c8 19 	call	0x3390	; 0x3390 <fputc>
    3142:	2a 94       	dec	r2
    3144:	f4 cf       	rjmp	.-24     	; 0x312e <vfprintf+0x18c>
    3146:	f5 01       	movw	r30, r10
    3148:	37 fc       	sbrc	r3, 7
    314a:	85 91       	lpm	r24, Z+
    314c:	37 fe       	sbrs	r3, 7
    314e:	81 91       	ld	r24, Z+
    3150:	5f 01       	movw	r10, r30
    3152:	b6 01       	movw	r22, r12
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	0e 94 c8 19 	call	0x3390	; 0x3390 <fputc>
    315a:	21 10       	cpse	r2, r1
    315c:	2a 94       	dec	r2
    315e:	21 e0       	ldi	r18, 0x01	; 1
    3160:	82 1a       	sub	r8, r18
    3162:	91 08       	sbc	r9, r1
    3164:	81 14       	cp	r8, r1
    3166:	91 04       	cpc	r9, r1
    3168:	71 f7       	brne	.-36     	; 0x3146 <vfprintf+0x1a4>
    316a:	e8 c0       	rjmp	.+464    	; 0x333c <vfprintf+0x39a>
    316c:	84 36       	cpi	r24, 0x64	; 100
    316e:	11 f0       	breq	.+4      	; 0x3174 <vfprintf+0x1d2>
    3170:	89 36       	cpi	r24, 0x69	; 105
    3172:	41 f5       	brne	.+80     	; 0x31c4 <vfprintf+0x222>
    3174:	f8 01       	movw	r30, r16
    3176:	37 fe       	sbrs	r3, 7
    3178:	07 c0       	rjmp	.+14     	; 0x3188 <vfprintf+0x1e6>
    317a:	60 81       	ld	r22, Z
    317c:	71 81       	ldd	r23, Z+1	; 0x01
    317e:	82 81       	ldd	r24, Z+2	; 0x02
    3180:	93 81       	ldd	r25, Z+3	; 0x03
    3182:	0c 5f       	subi	r16, 0xFC	; 252
    3184:	1f 4f       	sbci	r17, 0xFF	; 255
    3186:	08 c0       	rjmp	.+16     	; 0x3198 <vfprintf+0x1f6>
    3188:	60 81       	ld	r22, Z
    318a:	71 81       	ldd	r23, Z+1	; 0x01
    318c:	07 2e       	mov	r0, r23
    318e:	00 0c       	add	r0, r0
    3190:	88 0b       	sbc	r24, r24
    3192:	99 0b       	sbc	r25, r25
    3194:	0e 5f       	subi	r16, 0xFE	; 254
    3196:	1f 4f       	sbci	r17, 0xFF	; 255
    3198:	f3 2d       	mov	r31, r3
    319a:	ff 76       	andi	r31, 0x6F	; 111
    319c:	3f 2e       	mov	r3, r31
    319e:	97 ff       	sbrs	r25, 7
    31a0:	09 c0       	rjmp	.+18     	; 0x31b4 <vfprintf+0x212>
    31a2:	90 95       	com	r25
    31a4:	80 95       	com	r24
    31a6:	70 95       	com	r23
    31a8:	61 95       	neg	r22
    31aa:	7f 4f       	sbci	r23, 0xFF	; 255
    31ac:	8f 4f       	sbci	r24, 0xFF	; 255
    31ae:	9f 4f       	sbci	r25, 0xFF	; 255
    31b0:	f0 68       	ori	r31, 0x80	; 128
    31b2:	3f 2e       	mov	r3, r31
    31b4:	2a e0       	ldi	r18, 0x0A	; 10
    31b6:	30 e0       	ldi	r19, 0x00	; 0
    31b8:	a3 01       	movw	r20, r6
    31ba:	0e 94 04 1a 	call	0x3408	; 0x3408 <__ultoa_invert>
    31be:	88 2e       	mov	r8, r24
    31c0:	86 18       	sub	r8, r6
    31c2:	45 c0       	rjmp	.+138    	; 0x324e <vfprintf+0x2ac>
    31c4:	85 37       	cpi	r24, 0x75	; 117
    31c6:	31 f4       	brne	.+12     	; 0x31d4 <vfprintf+0x232>
    31c8:	23 2d       	mov	r18, r3
    31ca:	2f 7e       	andi	r18, 0xEF	; 239
    31cc:	b2 2e       	mov	r11, r18
    31ce:	2a e0       	ldi	r18, 0x0A	; 10
    31d0:	30 e0       	ldi	r19, 0x00	; 0
    31d2:	25 c0       	rjmp	.+74     	; 0x321e <vfprintf+0x27c>
    31d4:	93 2d       	mov	r25, r3
    31d6:	99 7f       	andi	r25, 0xF9	; 249
    31d8:	b9 2e       	mov	r11, r25
    31da:	8f 36       	cpi	r24, 0x6F	; 111
    31dc:	c1 f0       	breq	.+48     	; 0x320e <vfprintf+0x26c>
    31de:	18 f4       	brcc	.+6      	; 0x31e6 <vfprintf+0x244>
    31e0:	88 35       	cpi	r24, 0x58	; 88
    31e2:	79 f0       	breq	.+30     	; 0x3202 <vfprintf+0x260>
    31e4:	b5 c0       	rjmp	.+362    	; 0x3350 <vfprintf+0x3ae>
    31e6:	80 37       	cpi	r24, 0x70	; 112
    31e8:	19 f0       	breq	.+6      	; 0x31f0 <vfprintf+0x24e>
    31ea:	88 37       	cpi	r24, 0x78	; 120
    31ec:	21 f0       	breq	.+8      	; 0x31f6 <vfprintf+0x254>
    31ee:	b0 c0       	rjmp	.+352    	; 0x3350 <vfprintf+0x3ae>
    31f0:	e9 2f       	mov	r30, r25
    31f2:	e0 61       	ori	r30, 0x10	; 16
    31f4:	be 2e       	mov	r11, r30
    31f6:	b4 fe       	sbrs	r11, 4
    31f8:	0d c0       	rjmp	.+26     	; 0x3214 <vfprintf+0x272>
    31fa:	fb 2d       	mov	r31, r11
    31fc:	f4 60       	ori	r31, 0x04	; 4
    31fe:	bf 2e       	mov	r11, r31
    3200:	09 c0       	rjmp	.+18     	; 0x3214 <vfprintf+0x272>
    3202:	34 fe       	sbrs	r3, 4
    3204:	0a c0       	rjmp	.+20     	; 0x321a <vfprintf+0x278>
    3206:	29 2f       	mov	r18, r25
    3208:	26 60       	ori	r18, 0x06	; 6
    320a:	b2 2e       	mov	r11, r18
    320c:	06 c0       	rjmp	.+12     	; 0x321a <vfprintf+0x278>
    320e:	28 e0       	ldi	r18, 0x08	; 8
    3210:	30 e0       	ldi	r19, 0x00	; 0
    3212:	05 c0       	rjmp	.+10     	; 0x321e <vfprintf+0x27c>
    3214:	20 e1       	ldi	r18, 0x10	; 16
    3216:	30 e0       	ldi	r19, 0x00	; 0
    3218:	02 c0       	rjmp	.+4      	; 0x321e <vfprintf+0x27c>
    321a:	20 e1       	ldi	r18, 0x10	; 16
    321c:	32 e0       	ldi	r19, 0x02	; 2
    321e:	f8 01       	movw	r30, r16
    3220:	b7 fe       	sbrs	r11, 7
    3222:	07 c0       	rjmp	.+14     	; 0x3232 <vfprintf+0x290>
    3224:	60 81       	ld	r22, Z
    3226:	71 81       	ldd	r23, Z+1	; 0x01
    3228:	82 81       	ldd	r24, Z+2	; 0x02
    322a:	93 81       	ldd	r25, Z+3	; 0x03
    322c:	0c 5f       	subi	r16, 0xFC	; 252
    322e:	1f 4f       	sbci	r17, 0xFF	; 255
    3230:	06 c0       	rjmp	.+12     	; 0x323e <vfprintf+0x29c>
    3232:	60 81       	ld	r22, Z
    3234:	71 81       	ldd	r23, Z+1	; 0x01
    3236:	80 e0       	ldi	r24, 0x00	; 0
    3238:	90 e0       	ldi	r25, 0x00	; 0
    323a:	0e 5f       	subi	r16, 0xFE	; 254
    323c:	1f 4f       	sbci	r17, 0xFF	; 255
    323e:	a3 01       	movw	r20, r6
    3240:	0e 94 04 1a 	call	0x3408	; 0x3408 <__ultoa_invert>
    3244:	88 2e       	mov	r8, r24
    3246:	86 18       	sub	r8, r6
    3248:	fb 2d       	mov	r31, r11
    324a:	ff 77       	andi	r31, 0x7F	; 127
    324c:	3f 2e       	mov	r3, r31
    324e:	36 fe       	sbrs	r3, 6
    3250:	0d c0       	rjmp	.+26     	; 0x326c <vfprintf+0x2ca>
    3252:	23 2d       	mov	r18, r3
    3254:	2e 7f       	andi	r18, 0xFE	; 254
    3256:	a2 2e       	mov	r10, r18
    3258:	89 14       	cp	r8, r9
    325a:	58 f4       	brcc	.+22     	; 0x3272 <vfprintf+0x2d0>
    325c:	34 fe       	sbrs	r3, 4
    325e:	0b c0       	rjmp	.+22     	; 0x3276 <vfprintf+0x2d4>
    3260:	32 fc       	sbrc	r3, 2
    3262:	09 c0       	rjmp	.+18     	; 0x3276 <vfprintf+0x2d4>
    3264:	83 2d       	mov	r24, r3
    3266:	8e 7e       	andi	r24, 0xEE	; 238
    3268:	a8 2e       	mov	r10, r24
    326a:	05 c0       	rjmp	.+10     	; 0x3276 <vfprintf+0x2d4>
    326c:	b8 2c       	mov	r11, r8
    326e:	a3 2c       	mov	r10, r3
    3270:	03 c0       	rjmp	.+6      	; 0x3278 <vfprintf+0x2d6>
    3272:	b8 2c       	mov	r11, r8
    3274:	01 c0       	rjmp	.+2      	; 0x3278 <vfprintf+0x2d6>
    3276:	b9 2c       	mov	r11, r9
    3278:	a4 fe       	sbrs	r10, 4
    327a:	0f c0       	rjmp	.+30     	; 0x329a <vfprintf+0x2f8>
    327c:	fe 01       	movw	r30, r28
    327e:	e8 0d       	add	r30, r8
    3280:	f1 1d       	adc	r31, r1
    3282:	80 81       	ld	r24, Z
    3284:	80 33       	cpi	r24, 0x30	; 48
    3286:	21 f4       	brne	.+8      	; 0x3290 <vfprintf+0x2ee>
    3288:	9a 2d       	mov	r25, r10
    328a:	99 7e       	andi	r25, 0xE9	; 233
    328c:	a9 2e       	mov	r10, r25
    328e:	09 c0       	rjmp	.+18     	; 0x32a2 <vfprintf+0x300>
    3290:	a2 fe       	sbrs	r10, 2
    3292:	06 c0       	rjmp	.+12     	; 0x32a0 <vfprintf+0x2fe>
    3294:	b3 94       	inc	r11
    3296:	b3 94       	inc	r11
    3298:	04 c0       	rjmp	.+8      	; 0x32a2 <vfprintf+0x300>
    329a:	8a 2d       	mov	r24, r10
    329c:	86 78       	andi	r24, 0x86	; 134
    329e:	09 f0       	breq	.+2      	; 0x32a2 <vfprintf+0x300>
    32a0:	b3 94       	inc	r11
    32a2:	a3 fc       	sbrc	r10, 3
    32a4:	11 c0       	rjmp	.+34     	; 0x32c8 <vfprintf+0x326>
    32a6:	a0 fe       	sbrs	r10, 0
    32a8:	06 c0       	rjmp	.+12     	; 0x32b6 <vfprintf+0x314>
    32aa:	b2 14       	cp	r11, r2
    32ac:	88 f4       	brcc	.+34     	; 0x32d0 <vfprintf+0x32e>
    32ae:	28 0c       	add	r2, r8
    32b0:	92 2c       	mov	r9, r2
    32b2:	9b 18       	sub	r9, r11
    32b4:	0e c0       	rjmp	.+28     	; 0x32d2 <vfprintf+0x330>
    32b6:	b2 14       	cp	r11, r2
    32b8:	60 f4       	brcc	.+24     	; 0x32d2 <vfprintf+0x330>
    32ba:	b6 01       	movw	r22, r12
    32bc:	80 e2       	ldi	r24, 0x20	; 32
    32be:	90 e0       	ldi	r25, 0x00	; 0
    32c0:	0e 94 c8 19 	call	0x3390	; 0x3390 <fputc>
    32c4:	b3 94       	inc	r11
    32c6:	f7 cf       	rjmp	.-18     	; 0x32b6 <vfprintf+0x314>
    32c8:	b2 14       	cp	r11, r2
    32ca:	18 f4       	brcc	.+6      	; 0x32d2 <vfprintf+0x330>
    32cc:	2b 18       	sub	r2, r11
    32ce:	02 c0       	rjmp	.+4      	; 0x32d4 <vfprintf+0x332>
    32d0:	98 2c       	mov	r9, r8
    32d2:	21 2c       	mov	r2, r1
    32d4:	a4 fe       	sbrs	r10, 4
    32d6:	10 c0       	rjmp	.+32     	; 0x32f8 <vfprintf+0x356>
    32d8:	b6 01       	movw	r22, r12
    32da:	80 e3       	ldi	r24, 0x30	; 48
    32dc:	90 e0       	ldi	r25, 0x00	; 0
    32de:	0e 94 c8 19 	call	0x3390	; 0x3390 <fputc>
    32e2:	a2 fe       	sbrs	r10, 2
    32e4:	17 c0       	rjmp	.+46     	; 0x3314 <vfprintf+0x372>
    32e6:	a1 fc       	sbrc	r10, 1
    32e8:	03 c0       	rjmp	.+6      	; 0x32f0 <vfprintf+0x34e>
    32ea:	88 e7       	ldi	r24, 0x78	; 120
    32ec:	90 e0       	ldi	r25, 0x00	; 0
    32ee:	02 c0       	rjmp	.+4      	; 0x32f4 <vfprintf+0x352>
    32f0:	88 e5       	ldi	r24, 0x58	; 88
    32f2:	90 e0       	ldi	r25, 0x00	; 0
    32f4:	b6 01       	movw	r22, r12
    32f6:	0c c0       	rjmp	.+24     	; 0x3310 <vfprintf+0x36e>
    32f8:	8a 2d       	mov	r24, r10
    32fa:	86 78       	andi	r24, 0x86	; 134
    32fc:	59 f0       	breq	.+22     	; 0x3314 <vfprintf+0x372>
    32fe:	a1 fe       	sbrs	r10, 1
    3300:	02 c0       	rjmp	.+4      	; 0x3306 <vfprintf+0x364>
    3302:	8b e2       	ldi	r24, 0x2B	; 43
    3304:	01 c0       	rjmp	.+2      	; 0x3308 <vfprintf+0x366>
    3306:	80 e2       	ldi	r24, 0x20	; 32
    3308:	a7 fc       	sbrc	r10, 7
    330a:	8d e2       	ldi	r24, 0x2D	; 45
    330c:	b6 01       	movw	r22, r12
    330e:	90 e0       	ldi	r25, 0x00	; 0
    3310:	0e 94 c8 19 	call	0x3390	; 0x3390 <fputc>
    3314:	89 14       	cp	r8, r9
    3316:	38 f4       	brcc	.+14     	; 0x3326 <vfprintf+0x384>
    3318:	b6 01       	movw	r22, r12
    331a:	80 e3       	ldi	r24, 0x30	; 48
    331c:	90 e0       	ldi	r25, 0x00	; 0
    331e:	0e 94 c8 19 	call	0x3390	; 0x3390 <fputc>
    3322:	9a 94       	dec	r9
    3324:	f7 cf       	rjmp	.-18     	; 0x3314 <vfprintf+0x372>
    3326:	8a 94       	dec	r8
    3328:	f3 01       	movw	r30, r6
    332a:	e8 0d       	add	r30, r8
    332c:	f1 1d       	adc	r31, r1
    332e:	80 81       	ld	r24, Z
    3330:	b6 01       	movw	r22, r12
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	0e 94 c8 19 	call	0x3390	; 0x3390 <fputc>
    3338:	81 10       	cpse	r8, r1
    333a:	f5 cf       	rjmp	.-22     	; 0x3326 <vfprintf+0x384>
    333c:	22 20       	and	r2, r2
    333e:	09 f4       	brne	.+2      	; 0x3342 <vfprintf+0x3a0>
    3340:	42 ce       	rjmp	.-892    	; 0x2fc6 <vfprintf+0x24>
    3342:	b6 01       	movw	r22, r12
    3344:	80 e2       	ldi	r24, 0x20	; 32
    3346:	90 e0       	ldi	r25, 0x00	; 0
    3348:	0e 94 c8 19 	call	0x3390	; 0x3390 <fputc>
    334c:	2a 94       	dec	r2
    334e:	f6 cf       	rjmp	.-20     	; 0x333c <vfprintf+0x39a>
    3350:	f6 01       	movw	r30, r12
    3352:	86 81       	ldd	r24, Z+6	; 0x06
    3354:	97 81       	ldd	r25, Z+7	; 0x07
    3356:	02 c0       	rjmp	.+4      	; 0x335c <vfprintf+0x3ba>
    3358:	8f ef       	ldi	r24, 0xFF	; 255
    335a:	9f ef       	ldi	r25, 0xFF	; 255
    335c:	2b 96       	adiw	r28, 0x0b	; 11
    335e:	e2 e1       	ldi	r30, 0x12	; 18
    3360:	0c 94 b0 1a 	jmp	0x3560	; 0x3560 <__epilogue_restores__>

00003364 <strnlen_P>:
    3364:	fc 01       	movw	r30, r24
    3366:	05 90       	lpm	r0, Z+
    3368:	61 50       	subi	r22, 0x01	; 1
    336a:	70 40       	sbci	r23, 0x00	; 0
    336c:	01 10       	cpse	r0, r1
    336e:	d8 f7       	brcc	.-10     	; 0x3366 <strnlen_P+0x2>
    3370:	80 95       	com	r24
    3372:	90 95       	com	r25
    3374:	8e 0f       	add	r24, r30
    3376:	9f 1f       	adc	r25, r31
    3378:	08 95       	ret

0000337a <strnlen>:
    337a:	fc 01       	movw	r30, r24
    337c:	61 50       	subi	r22, 0x01	; 1
    337e:	70 40       	sbci	r23, 0x00	; 0
    3380:	01 90       	ld	r0, Z+
    3382:	01 10       	cpse	r0, r1
    3384:	d8 f7       	brcc	.-10     	; 0x337c <strnlen+0x2>
    3386:	80 95       	com	r24
    3388:	90 95       	com	r25
    338a:	8e 0f       	add	r24, r30
    338c:	9f 1f       	adc	r25, r31
    338e:	08 95       	ret

00003390 <fputc>:
    3390:	0f 93       	push	r16
    3392:	1f 93       	push	r17
    3394:	cf 93       	push	r28
    3396:	df 93       	push	r29
    3398:	fb 01       	movw	r30, r22
    339a:	23 81       	ldd	r18, Z+3	; 0x03
    339c:	21 fd       	sbrc	r18, 1
    339e:	03 c0       	rjmp	.+6      	; 0x33a6 <fputc+0x16>
    33a0:	8f ef       	ldi	r24, 0xFF	; 255
    33a2:	9f ef       	ldi	r25, 0xFF	; 255
    33a4:	2c c0       	rjmp	.+88     	; 0x33fe <fputc+0x6e>
    33a6:	22 ff       	sbrs	r18, 2
    33a8:	16 c0       	rjmp	.+44     	; 0x33d6 <fputc+0x46>
    33aa:	46 81       	ldd	r20, Z+6	; 0x06
    33ac:	57 81       	ldd	r21, Z+7	; 0x07
    33ae:	24 81       	ldd	r18, Z+4	; 0x04
    33b0:	35 81       	ldd	r19, Z+5	; 0x05
    33b2:	42 17       	cp	r20, r18
    33b4:	53 07       	cpc	r21, r19
    33b6:	44 f4       	brge	.+16     	; 0x33c8 <fputc+0x38>
    33b8:	a0 81       	ld	r26, Z
    33ba:	b1 81       	ldd	r27, Z+1	; 0x01
    33bc:	9d 01       	movw	r18, r26
    33be:	2f 5f       	subi	r18, 0xFF	; 255
    33c0:	3f 4f       	sbci	r19, 0xFF	; 255
    33c2:	31 83       	std	Z+1, r19	; 0x01
    33c4:	20 83       	st	Z, r18
    33c6:	8c 93       	st	X, r24
    33c8:	26 81       	ldd	r18, Z+6	; 0x06
    33ca:	37 81       	ldd	r19, Z+7	; 0x07
    33cc:	2f 5f       	subi	r18, 0xFF	; 255
    33ce:	3f 4f       	sbci	r19, 0xFF	; 255
    33d0:	37 83       	std	Z+7, r19	; 0x07
    33d2:	26 83       	std	Z+6, r18	; 0x06
    33d4:	14 c0       	rjmp	.+40     	; 0x33fe <fputc+0x6e>
    33d6:	8b 01       	movw	r16, r22
    33d8:	ec 01       	movw	r28, r24
    33da:	fb 01       	movw	r30, r22
    33dc:	00 84       	ldd	r0, Z+8	; 0x08
    33de:	f1 85       	ldd	r31, Z+9	; 0x09
    33e0:	e0 2d       	mov	r30, r0
    33e2:	09 95       	icall
    33e4:	89 2b       	or	r24, r25
    33e6:	e1 f6       	brne	.-72     	; 0x33a0 <fputc+0x10>
    33e8:	d8 01       	movw	r26, r16
    33ea:	16 96       	adiw	r26, 0x06	; 6
    33ec:	8d 91       	ld	r24, X+
    33ee:	9c 91       	ld	r25, X
    33f0:	17 97       	sbiw	r26, 0x07	; 7
    33f2:	01 96       	adiw	r24, 0x01	; 1
    33f4:	17 96       	adiw	r26, 0x07	; 7
    33f6:	9c 93       	st	X, r25
    33f8:	8e 93       	st	-X, r24
    33fa:	16 97       	sbiw	r26, 0x06	; 6
    33fc:	ce 01       	movw	r24, r28
    33fe:	df 91       	pop	r29
    3400:	cf 91       	pop	r28
    3402:	1f 91       	pop	r17
    3404:	0f 91       	pop	r16
    3406:	08 95       	ret

00003408 <__ultoa_invert>:
    3408:	fa 01       	movw	r30, r20
    340a:	aa 27       	eor	r26, r26
    340c:	28 30       	cpi	r18, 0x08	; 8
    340e:	51 f1       	breq	.+84     	; 0x3464 <__ultoa_invert+0x5c>
    3410:	20 31       	cpi	r18, 0x10	; 16
    3412:	81 f1       	breq	.+96     	; 0x3474 <__ultoa_invert+0x6c>
    3414:	e8 94       	clt
    3416:	6f 93       	push	r22
    3418:	6e 7f       	andi	r22, 0xFE	; 254
    341a:	6e 5f       	subi	r22, 0xFE	; 254
    341c:	7f 4f       	sbci	r23, 0xFF	; 255
    341e:	8f 4f       	sbci	r24, 0xFF	; 255
    3420:	9f 4f       	sbci	r25, 0xFF	; 255
    3422:	af 4f       	sbci	r26, 0xFF	; 255
    3424:	b1 e0       	ldi	r27, 0x01	; 1
    3426:	3e d0       	rcall	.+124    	; 0x34a4 <__ultoa_invert+0x9c>
    3428:	b4 e0       	ldi	r27, 0x04	; 4
    342a:	3c d0       	rcall	.+120    	; 0x34a4 <__ultoa_invert+0x9c>
    342c:	67 0f       	add	r22, r23
    342e:	78 1f       	adc	r23, r24
    3430:	89 1f       	adc	r24, r25
    3432:	9a 1f       	adc	r25, r26
    3434:	a1 1d       	adc	r26, r1
    3436:	68 0f       	add	r22, r24
    3438:	79 1f       	adc	r23, r25
    343a:	8a 1f       	adc	r24, r26
    343c:	91 1d       	adc	r25, r1
    343e:	a1 1d       	adc	r26, r1
    3440:	6a 0f       	add	r22, r26
    3442:	71 1d       	adc	r23, r1
    3444:	81 1d       	adc	r24, r1
    3446:	91 1d       	adc	r25, r1
    3448:	a1 1d       	adc	r26, r1
    344a:	20 d0       	rcall	.+64     	; 0x348c <__ultoa_invert+0x84>
    344c:	09 f4       	brne	.+2      	; 0x3450 <__ultoa_invert+0x48>
    344e:	68 94       	set
    3450:	3f 91       	pop	r19
    3452:	2a e0       	ldi	r18, 0x0A	; 10
    3454:	26 9f       	mul	r18, r22
    3456:	11 24       	eor	r1, r1
    3458:	30 19       	sub	r19, r0
    345a:	30 5d       	subi	r19, 0xD0	; 208
    345c:	31 93       	st	Z+, r19
    345e:	de f6       	brtc	.-74     	; 0x3416 <__ultoa_invert+0xe>
    3460:	cf 01       	movw	r24, r30
    3462:	08 95       	ret
    3464:	46 2f       	mov	r20, r22
    3466:	47 70       	andi	r20, 0x07	; 7
    3468:	40 5d       	subi	r20, 0xD0	; 208
    346a:	41 93       	st	Z+, r20
    346c:	b3 e0       	ldi	r27, 0x03	; 3
    346e:	0f d0       	rcall	.+30     	; 0x348e <__ultoa_invert+0x86>
    3470:	c9 f7       	brne	.-14     	; 0x3464 <__ultoa_invert+0x5c>
    3472:	f6 cf       	rjmp	.-20     	; 0x3460 <__ultoa_invert+0x58>
    3474:	46 2f       	mov	r20, r22
    3476:	4f 70       	andi	r20, 0x0F	; 15
    3478:	40 5d       	subi	r20, 0xD0	; 208
    347a:	4a 33       	cpi	r20, 0x3A	; 58
    347c:	18 f0       	brcs	.+6      	; 0x3484 <__ultoa_invert+0x7c>
    347e:	49 5d       	subi	r20, 0xD9	; 217
    3480:	31 fd       	sbrc	r19, 1
    3482:	40 52       	subi	r20, 0x20	; 32
    3484:	41 93       	st	Z+, r20
    3486:	02 d0       	rcall	.+4      	; 0x348c <__ultoa_invert+0x84>
    3488:	a9 f7       	brne	.-22     	; 0x3474 <__ultoa_invert+0x6c>
    348a:	ea cf       	rjmp	.-44     	; 0x3460 <__ultoa_invert+0x58>
    348c:	b4 e0       	ldi	r27, 0x04	; 4
    348e:	a6 95       	lsr	r26
    3490:	97 95       	ror	r25
    3492:	87 95       	ror	r24
    3494:	77 95       	ror	r23
    3496:	67 95       	ror	r22
    3498:	ba 95       	dec	r27
    349a:	c9 f7       	brne	.-14     	; 0x348e <__ultoa_invert+0x86>
    349c:	00 97       	sbiw	r24, 0x00	; 0
    349e:	61 05       	cpc	r22, r1
    34a0:	71 05       	cpc	r23, r1
    34a2:	08 95       	ret
    34a4:	9b 01       	movw	r18, r22
    34a6:	ac 01       	movw	r20, r24
    34a8:	0a 2e       	mov	r0, r26
    34aa:	06 94       	lsr	r0
    34ac:	57 95       	ror	r21
    34ae:	47 95       	ror	r20
    34b0:	37 95       	ror	r19
    34b2:	27 95       	ror	r18
    34b4:	ba 95       	dec	r27
    34b6:	c9 f7       	brne	.-14     	; 0x34aa <__ultoa_invert+0xa2>
    34b8:	62 0f       	add	r22, r18
    34ba:	73 1f       	adc	r23, r19
    34bc:	84 1f       	adc	r24, r20
    34be:	95 1f       	adc	r25, r21
    34c0:	a0 1d       	adc	r26, r0
    34c2:	08 95       	ret

000034c4 <__divmodsi4>:
    34c4:	05 2e       	mov	r0, r21
    34c6:	97 fb       	bst	r25, 7
    34c8:	1e f4       	brtc	.+6      	; 0x34d0 <__divmodsi4+0xc>
    34ca:	00 94       	com	r0
    34cc:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <__negsi2>
    34d0:	57 fd       	sbrc	r21, 7
    34d2:	07 d0       	rcall	.+14     	; 0x34e2 <__divmodsi4_neg2>
    34d4:	0e 94 cb 1a 	call	0x3596	; 0x3596 <__udivmodsi4>
    34d8:	07 fc       	sbrc	r0, 7
    34da:	03 d0       	rcall	.+6      	; 0x34e2 <__divmodsi4_neg2>
    34dc:	4e f4       	brtc	.+18     	; 0x34f0 <__divmodsi4_exit>
    34de:	0c 94 79 1a 	jmp	0x34f2	; 0x34f2 <__negsi2>

000034e2 <__divmodsi4_neg2>:
    34e2:	50 95       	com	r21
    34e4:	40 95       	com	r20
    34e6:	30 95       	com	r19
    34e8:	21 95       	neg	r18
    34ea:	3f 4f       	sbci	r19, 0xFF	; 255
    34ec:	4f 4f       	sbci	r20, 0xFF	; 255
    34ee:	5f 4f       	sbci	r21, 0xFF	; 255

000034f0 <__divmodsi4_exit>:
    34f0:	08 95       	ret

000034f2 <__negsi2>:
    34f2:	90 95       	com	r25
    34f4:	80 95       	com	r24
    34f6:	70 95       	com	r23
    34f8:	61 95       	neg	r22
    34fa:	7f 4f       	sbci	r23, 0xFF	; 255
    34fc:	8f 4f       	sbci	r24, 0xFF	; 255
    34fe:	9f 4f       	sbci	r25, 0xFF	; 255
    3500:	08 95       	ret

00003502 <__muluhisi3>:
    3502:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <__umulhisi3>
    3506:	a5 9f       	mul	r26, r21
    3508:	90 0d       	add	r25, r0
    350a:	b4 9f       	mul	r27, r20
    350c:	90 0d       	add	r25, r0
    350e:	a4 9f       	mul	r26, r20
    3510:	80 0d       	add	r24, r0
    3512:	91 1d       	adc	r25, r1
    3514:	11 24       	eor	r1, r1
    3516:	08 95       	ret

00003518 <__mulshisi3>:
    3518:	b7 ff       	sbrs	r27, 7
    351a:	0c 94 81 1a 	jmp	0x3502	; 0x3502 <__muluhisi3>

0000351e <__mulohisi3>:
    351e:	0e 94 81 1a 	call	0x3502	; 0x3502 <__muluhisi3>
    3522:	82 1b       	sub	r24, r18
    3524:	93 0b       	sbc	r25, r19
    3526:	08 95       	ret

00003528 <__prologue_saves__>:
    3528:	2f 92       	push	r2
    352a:	3f 92       	push	r3
    352c:	4f 92       	push	r4
    352e:	5f 92       	push	r5
    3530:	6f 92       	push	r6
    3532:	7f 92       	push	r7
    3534:	8f 92       	push	r8
    3536:	9f 92       	push	r9
    3538:	af 92       	push	r10
    353a:	bf 92       	push	r11
    353c:	cf 92       	push	r12
    353e:	df 92       	push	r13
    3540:	ef 92       	push	r14
    3542:	ff 92       	push	r15
    3544:	0f 93       	push	r16
    3546:	1f 93       	push	r17
    3548:	cf 93       	push	r28
    354a:	df 93       	push	r29
    354c:	cd b7       	in	r28, 0x3d	; 61
    354e:	de b7       	in	r29, 0x3e	; 62
    3550:	ca 1b       	sub	r28, r26
    3552:	db 0b       	sbc	r29, r27
    3554:	0f b6       	in	r0, 0x3f	; 63
    3556:	f8 94       	cli
    3558:	de bf       	out	0x3e, r29	; 62
    355a:	0f be       	out	0x3f, r0	; 63
    355c:	cd bf       	out	0x3d, r28	; 61
    355e:	09 94       	ijmp

00003560 <__epilogue_restores__>:
    3560:	2a 88       	ldd	r2, Y+18	; 0x12
    3562:	39 88       	ldd	r3, Y+17	; 0x11
    3564:	48 88       	ldd	r4, Y+16	; 0x10
    3566:	5f 84       	ldd	r5, Y+15	; 0x0f
    3568:	6e 84       	ldd	r6, Y+14	; 0x0e
    356a:	7d 84       	ldd	r7, Y+13	; 0x0d
    356c:	8c 84       	ldd	r8, Y+12	; 0x0c
    356e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3570:	aa 84       	ldd	r10, Y+10	; 0x0a
    3572:	b9 84       	ldd	r11, Y+9	; 0x09
    3574:	c8 84       	ldd	r12, Y+8	; 0x08
    3576:	df 80       	ldd	r13, Y+7	; 0x07
    3578:	ee 80       	ldd	r14, Y+6	; 0x06
    357a:	fd 80       	ldd	r15, Y+5	; 0x05
    357c:	0c 81       	ldd	r16, Y+4	; 0x04
    357e:	1b 81       	ldd	r17, Y+3	; 0x03
    3580:	aa 81       	ldd	r26, Y+2	; 0x02
    3582:	b9 81       	ldd	r27, Y+1	; 0x01
    3584:	ce 0f       	add	r28, r30
    3586:	d1 1d       	adc	r29, r1
    3588:	0f b6       	in	r0, 0x3f	; 63
    358a:	f8 94       	cli
    358c:	de bf       	out	0x3e, r29	; 62
    358e:	0f be       	out	0x3f, r0	; 63
    3590:	cd bf       	out	0x3d, r28	; 61
    3592:	ed 01       	movw	r28, r26
    3594:	08 95       	ret

00003596 <__udivmodsi4>:
    3596:	a1 e2       	ldi	r26, 0x21	; 33
    3598:	1a 2e       	mov	r1, r26
    359a:	aa 1b       	sub	r26, r26
    359c:	bb 1b       	sub	r27, r27
    359e:	fd 01       	movw	r30, r26
    35a0:	0d c0       	rjmp	.+26     	; 0x35bc <__udivmodsi4_ep>

000035a2 <__udivmodsi4_loop>:
    35a2:	aa 1f       	adc	r26, r26
    35a4:	bb 1f       	adc	r27, r27
    35a6:	ee 1f       	adc	r30, r30
    35a8:	ff 1f       	adc	r31, r31
    35aa:	a2 17       	cp	r26, r18
    35ac:	b3 07       	cpc	r27, r19
    35ae:	e4 07       	cpc	r30, r20
    35b0:	f5 07       	cpc	r31, r21
    35b2:	20 f0       	brcs	.+8      	; 0x35bc <__udivmodsi4_ep>
    35b4:	a2 1b       	sub	r26, r18
    35b6:	b3 0b       	sbc	r27, r19
    35b8:	e4 0b       	sbc	r30, r20
    35ba:	f5 0b       	sbc	r31, r21

000035bc <__udivmodsi4_ep>:
    35bc:	66 1f       	adc	r22, r22
    35be:	77 1f       	adc	r23, r23
    35c0:	88 1f       	adc	r24, r24
    35c2:	99 1f       	adc	r25, r25
    35c4:	1a 94       	dec	r1
    35c6:	69 f7       	brne	.-38     	; 0x35a2 <__udivmodsi4_loop>
    35c8:	60 95       	com	r22
    35ca:	70 95       	com	r23
    35cc:	80 95       	com	r24
    35ce:	90 95       	com	r25
    35d0:	9b 01       	movw	r18, r22
    35d2:	ac 01       	movw	r20, r24
    35d4:	bd 01       	movw	r22, r26
    35d6:	cf 01       	movw	r24, r30
    35d8:	08 95       	ret

000035da <_exit>:
    35da:	f8 94       	cli

000035dc <__stop_program>:
    35dc:	ff cf       	rjmp	.-2      	; 0x35dc <__stop_program>
