
speedOfLight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  0000054e  000005e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000054e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002f  0080013e  0080013e  00000620  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000620  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000650  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ada  00000000  00000000  00000770  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c0c  00000000  00000000  0000224a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c81  00000000  00000000  00002e56  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000344  00000000  00000000  00003ad8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000078a  00000000  00000000  00003e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000dea  00000000  00000000  000045a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  00005390  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__vector_14>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 a0 01 	jmp	0x340	; 0x340 <__vector_17>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__vector_33>
  88:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__vector_34>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__vector_42>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ee e4       	ldi	r30, 0x4E	; 78
  c8:	f5 e0       	ldi	r31, 0x05	; 5
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	ae 33       	cpi	r26, 0x3E	; 62
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	ae e3       	ldi	r26, 0x3E	; 62
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	ad 36       	cpi	r26, 0x6D	; 109
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 c1 01 	call	0x382	; 0x382 <main>
  ea:	0c 94 a5 02 	jmp	0x54a	; 0x54a <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <spiSetup>:
	}
	ledMemory[9 + y] &= ~(1 << x);
	
}

void setScore(uint8_t display, uint16_t value){
  f2:	84 b1       	in	r24, 0x04	; 4
  f4:	88 62       	ori	r24, 0x28	; 40
  f6:	84 b9       	out	0x04, r24	; 4
  f8:	81 ed       	ldi	r24, 0xD1	; 209
  fa:	8c bd       	out	0x2c, r24	; 44
  fc:	08 95       	ret

000000fe <tmrSetup>:
  fe:	8a e0       	ldi	r24, 0x0A	; 10
 100:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
 104:	84 e7       	ldi	r24, 0x74	; 116
 106:	9e e0       	ldi	r25, 0x0E	; 14
 108:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 10c:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 110:	8a e3       	ldi	r24, 0x3A	; 58
 112:	97 e0       	ldi	r25, 0x07	; 7
 114:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 118:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
 11c:	e1 e7       	ldi	r30, 0x71	; 113
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	86 60       	ori	r24, 0x06	; 6
 124:	80 83       	st	Z, r24
 126:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 12a:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
 12e:	08 95       	ret

00000130 <buttonsInit>:
 130:	8f e3       	ldi	r24, 0x3F	; 63
 132:	87 b9       	out	0x07, r24	; 7
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	8b b9       	out	0x0b, r24	; 11
 138:	20 9a       	sbi	0x04, 0	; 4
 13a:	6b 9a       	sbi	0x0d, 3	; 13
 13c:	6a 9a       	sbi	0x0d, 2	; 13
 13e:	73 9a       	sbi	0x0e, 3	; 14
 140:	38 9a       	sbi	0x07, 0	; 7
 142:	40 9a       	sbi	0x08, 0	; 8
 144:	0e 94 79 00 	call	0xf2	; 0xf2 <spiSetup>
 148:	0e 94 7f 00 	call	0xfe	; 0xfe <tmrSetup>
 14c:	08 95       	ret

0000014e <__vector_33>:
	
}


ISR(TIMER3_COMPA_vect){
 14e:	1f 92       	push	r1
 150:	0f 92       	push	r0
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	0f 92       	push	r0
 156:	11 24       	eor	r1, r1
 158:	2f 93       	push	r18
 15a:	3f 93       	push	r19
 15c:	4f 93       	push	r20
 15e:	5f 93       	push	r21
 160:	6f 93       	push	r22
 162:	7f 93       	push	r23
 164:	8f 93       	push	r24
 166:	9f 93       	push	r25
 168:	af 93       	push	r26
 16a:	bf 93       	push	r27
 16c:	ef 93       	push	r30
 16e:	ff 93       	push	r31
	// row 3, 4, 5 are on LED 4 and 5
	// the row is in the lower nibble and column data is in the upper nibble
	// for each row the two registers need to be set and the other two need to be cleared
	
	
	PINC |= 1 << 0;
 170:	30 9a       	sbi	0x06, 0	; 6
	
	if(muxCounter < 3){
 172:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <muxCounter>
 176:	83 30       	cpi	r24, 0x03	; 3
 178:	90 f5       	brcc	.+100    	; 0x1de <__vector_33+0x90>
		ledData[0] = (1 << muxCounter) | ((ledMemory[9 + muxCounter] >> 4) << 4);
 17a:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <muxCounter>
 17e:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <muxCounter>
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	e1 5f       	subi	r30, 0xF1	; 241
 186:	fe 4f       	sbci	r31, 0xFE	; 254
 188:	80 81       	ld	r24, Z
 18a:	48 2f       	mov	r20, r24
 18c:	40 7f       	andi	r20, 0xF0	; 240
 18e:	21 e0       	ldi	r18, 0x01	; 1
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	b9 01       	movw	r22, r18
 194:	02 c0       	rjmp	.+4      	; 0x19a <__vector_33+0x4c>
 196:	66 0f       	add	r22, r22
 198:	77 1f       	adc	r23, r23
 19a:	9a 95       	dec	r25
 19c:	e2 f7       	brpl	.-8      	; 0x196 <__vector_33+0x48>
 19e:	cb 01       	movw	r24, r22
 1a0:	84 2b       	or	r24, r20
 1a2:	a0 e0       	ldi	r26, 0x00	; 0
 1a4:	b1 e0       	ldi	r27, 0x01	; 1
 1a6:	8c 93       	st	X, r24
		ledData[1] = (1 << muxCounter) | ((ledMemory[9 + muxCounter] & 0x0F) << 4);
 1a8:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <muxCounter>
 1ac:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <muxCounter>
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	e1 5f       	subi	r30, 0xF1	; 241
 1b4:	fe 4f       	sbci	r31, 0xFE	; 254
 1b6:	90 81       	ld	r25, Z
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <__vector_33+0x70>
 1ba:	22 0f       	add	r18, r18
 1bc:	33 1f       	adc	r19, r19
 1be:	8a 95       	dec	r24
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <__vector_33+0x6c>
 1c2:	70 e1       	ldi	r23, 0x10	; 16
 1c4:	97 9f       	mul	r25, r23
 1c6:	c0 01       	movw	r24, r0
 1c8:	11 24       	eor	r1, r1
 1ca:	82 2b       	or	r24, r18
 1cc:	11 96       	adiw	r26, 0x01	; 1
 1ce:	8c 93       	st	X, r24
 1d0:	11 97       	sbiw	r26, 0x01	; 1
		ledData[2] = 0;
 1d2:	12 96       	adiw	r26, 0x02	; 2
 1d4:	1c 92       	st	X, r1
 1d6:	12 97       	sbiw	r26, 0x02	; 2
		ledData[3] = 0;
 1d8:	13 96       	adiw	r26, 0x03	; 3
 1da:	1c 92       	st	X, r1
 1dc:	33 c0       	rjmp	.+102    	; 0x244 <__vector_33+0xf6>
	}
	else{
		ledData[2] = (1 << (muxCounter - 3)) | ((ledMemory[9 + muxCounter] >> 4) << 4);
 1de:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <muxCounter>
 1e2:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <muxCounter>
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	e1 5f       	subi	r30, 0xF1	; 241
 1ea:	fe 4f       	sbci	r31, 0xFE	; 254
 1ec:	40 81       	ld	r20, Z
 1ee:	83 50       	subi	r24, 0x03	; 3
 1f0:	21 e0       	ldi	r18, 0x01	; 1
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	b9 01       	movw	r22, r18
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <__vector_33+0xae>
 1f8:	66 0f       	add	r22, r22
 1fa:	77 1f       	adc	r23, r23
 1fc:	8a 95       	dec	r24
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <__vector_33+0xaa>
 200:	cb 01       	movw	r24, r22
 202:	94 2f       	mov	r25, r20
 204:	90 7f       	andi	r25, 0xF0	; 240
 206:	89 2b       	or	r24, r25
 208:	a0 e0       	ldi	r26, 0x00	; 0
 20a:	b1 e0       	ldi	r27, 0x01	; 1
 20c:	12 96       	adiw	r26, 0x02	; 2
 20e:	8c 93       	st	X, r24
 210:	12 97       	sbiw	r26, 0x02	; 2
		ledData[3] = (1 << (muxCounter - 3)) | ((ledMemory[9 + muxCounter] & 0x0F) << 4);
 212:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <muxCounter>
 216:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <muxCounter>
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	e1 5f       	subi	r30, 0xF1	; 241
 21e:	fe 4f       	sbci	r31, 0xFE	; 254
 220:	90 81       	ld	r25, Z
 222:	83 50       	subi	r24, 0x03	; 3
 224:	02 c0       	rjmp	.+4      	; 0x22a <__vector_33+0xdc>
 226:	22 0f       	add	r18, r18
 228:	33 1f       	adc	r19, r19
 22a:	8a 95       	dec	r24
 22c:	e2 f7       	brpl	.-8      	; 0x226 <__vector_33+0xd8>
 22e:	70 e1       	ldi	r23, 0x10	; 16
 230:	97 9f       	mul	r25, r23
 232:	c0 01       	movw	r24, r0
 234:	11 24       	eor	r1, r1
 236:	82 2b       	or	r24, r18
 238:	13 96       	adiw	r26, 0x03	; 3
 23a:	8c 93       	st	X, r24
 23c:	13 97       	sbiw	r26, 0x03	; 3
		ledData[0] = 0;
 23e:	1c 92       	st	X, r1
		ledData[1] = 0;
 240:	11 96       	adiw	r26, 0x01	; 1
 242:	1c 92       	st	X, r1
	}
	
	muxCounter = (muxCounter + 1) % 6;
 244:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <muxCounter>
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	01 96       	adiw	r24, 0x01	; 1
 24c:	66 e0       	ldi	r22, 0x06	; 6
 24e:	70 e0       	ldi	r23, 0x00	; 0
 250:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__divmodhi4>
 254:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <muxCounter>
	
	// calculate data for score display
	
	ledData[5] = sevenSegmentDecode[ledMemory[scoreDigitCounter]];
 258:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <scoreDigitCounter>
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	ea 5f       	subi	r30, 0xFA	; 250
 260:	fe 4f       	sbci	r31, 0xFE	; 254
 262:	e0 81       	ld	r30, Z
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	eb 5e       	subi	r30, 0xEB	; 235
 268:	fe 4f       	sbci	r31, 0xFE	; 254
 26a:	80 81       	ld	r24, Z
 26c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__data_start+0x5>
	if (scoreDigitCounter == 0){
 270:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <scoreDigitCounter>
 274:	81 11       	cpse	r24, r1
 276:	07 c0       	rjmp	.+14     	; 0x286 <__vector_33+0x138>
		ledData[5] |= 1 << 7; // set MSB for D0
 278:	e0 e0       	ldi	r30, 0x00	; 0
 27a:	f1 e0       	ldi	r31, 0x01	; 1
 27c:	85 81       	ldd	r24, Z+5	; 0x05
 27e:	80 68       	ori	r24, 0x80	; 128
 280:	85 83       	std	Z+5, r24	; 0x05
		ledData[4] = 0;
 282:	14 82       	std	Z+4, r1	; 0x04
 284:	0c c0       	rjmp	.+24     	; 0x29e <__vector_33+0x150>
	}
	else{
		ledData[4] = 1 << (scoreDigitCounter - 1);
 286:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <scoreDigitCounter>
 28a:	21 50       	subi	r18, 0x01	; 1
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	02 c0       	rjmp	.+4      	; 0x296 <__vector_33+0x148>
 292:	88 0f       	add	r24, r24
 294:	99 1f       	adc	r25, r25
 296:	2a 95       	dec	r18
 298:	e2 f7       	brpl	.-8      	; 0x292 <__vector_33+0x144>
 29a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_start+0x4>
	}

	scoreDigitCounter = (scoreDigitCounter + 1) % 9;
 29e:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <scoreDigitCounter>
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	01 96       	adiw	r24, 0x01	; 1
 2a6:	69 e0       	ldi	r22, 0x09	; 9
 2a8:	70 e0       	ldi	r23, 0x00	; 0
 2aa:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__divmodhi4>
 2ae:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <scoreDigitCounter>

	// clear contents of shift register and latch
	//PORTB &= ~(1 << LED_L); // set led latch low
	//PORTE &= ~(1 << LED_B); // blank leds
	//PORTB |= (1 << LED_L); // set led latch high
	PORTE |= (1 << LED_B); // unblank leds
 2b2:	73 9a       	sbi	0x0e, 3	; 14
	PORTB &= ~(1 << LED_L); // set led latch low
 2b4:	28 98       	cbi	0x05, 0	; 5
	spiByteCounter = 0;
 2b6:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__data_end>
	SPDR0 = ledData[spiByteCounter++];
 2ba:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <__data_end>
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	8e 0f       	add	r24, r30
 2c2:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	e0 50       	subi	r30, 0x00	; 0
 2ca:	ff 4f       	sbci	r31, 0xFF	; 255
 2cc:	80 81       	ld	r24, Z
 2ce:	8e bd       	out	0x2e, r24	; 46
}
 2d0:	ff 91       	pop	r31
 2d2:	ef 91       	pop	r30
 2d4:	bf 91       	pop	r27
 2d6:	af 91       	pop	r26
 2d8:	9f 91       	pop	r25
 2da:	8f 91       	pop	r24
 2dc:	7f 91       	pop	r23
 2de:	6f 91       	pop	r22
 2e0:	5f 91       	pop	r21
 2e2:	4f 91       	pop	r20
 2e4:	3f 91       	pop	r19
 2e6:	2f 91       	pop	r18
 2e8:	0f 90       	pop	r0
 2ea:	0f be       	out	0x3f, r0	; 63
 2ec:	0f 90       	pop	r0
 2ee:	1f 90       	pop	r1
 2f0:	18 95       	reti

000002f2 <__vector_34>:

ISR(TIMER3_COMPB_vect){
 2f2:	1f 92       	push	r1
 2f4:	0f 92       	push	r0
 2f6:	0f b6       	in	r0, 0x3f	; 63
 2f8:	0f 92       	push	r0
 2fa:	11 24       	eor	r1, r1
 2fc:	2f 93       	push	r18
 2fe:	8f 93       	push	r24
 300:	9f 93       	push	r25
 302:	ef 93       	push	r30
 304:	ff 93       	push	r31
	// Read in Buttons
	PORTC = ~(1 << muxCounter);// set 1 bit to a 0
 306:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <muxCounter>
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	02 c0       	rjmp	.+4      	; 0x314 <__vector_34+0x22>
 310:	88 0f       	add	r24, r24
 312:	99 1f       	adc	r25, r25
 314:	2a 95       	dec	r18
 316:	e2 f7       	brpl	.-8      	; 0x310 <__vector_34+0x1e>
 318:	80 95       	com	r24
 31a:	88 b9       	out	0x08, r24	; 8
	buttonMemory[muxCounter] = ~PIND;
 31c:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <muxCounter>
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	89 b1       	in	r24, 0x09	; 9
 324:	80 95       	com	r24
 326:	eb 5b       	subi	r30, 0xBB	; 187
 328:	fe 4f       	sbci	r31, 0xFE	; 254
 32a:	80 83       	st	Z, r24
	
}
 32c:	ff 91       	pop	r31
 32e:	ef 91       	pop	r30
 330:	9f 91       	pop	r25
 332:	8f 91       	pop	r24
 334:	2f 91       	pop	r18
 336:	0f 90       	pop	r0
 338:	0f be       	out	0x3f, r0	; 63
 33a:	0f 90       	pop	r0
 33c:	1f 90       	pop	r1
 33e:	18 95       	reti

00000340 <__vector_17>:

ISR(SPI0_STC_vect){
 340:	1f 92       	push	r1
 342:	0f 92       	push	r0
 344:	0f b6       	in	r0, 0x3f	; 63
 346:	0f 92       	push	r0
 348:	11 24       	eor	r1, r1
 34a:	8f 93       	push	r24
 34c:	ef 93       	push	r30
 34e:	ff 93       	push	r31
	if (spiByteCounter >= 6){
 350:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
 354:	86 30       	cpi	r24, 0x06	; 6
 356:	10 f0       	brcs	.+4      	; 0x35c <__vector_17+0x1c>
		PORTB |= 1 << LED_L; // set led latch high
 358:	28 9a       	sbi	0x05, 0	; 5
		return;
 35a:	0b c0       	rjmp	.+22     	; 0x372 <__vector_17+0x32>
	}
	SPDR0 = ledData[spiByteCounter++];
 35c:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <__data_end>
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	8e 0f       	add	r24, r30
 364:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	e0 50       	subi	r30, 0x00	; 0
 36c:	ff 4f       	sbci	r31, 0xFF	; 255
 36e:	80 81       	ld	r24, Z
 370:	8e bd       	out	0x2e, r24	; 46
}
 372:	ff 91       	pop	r31
 374:	ef 91       	pop	r30
 376:	8f 91       	pop	r24
 378:	0f 90       	pop	r0
 37a:	0f be       	out	0x3f, r0	; 63
 37c:	0f 90       	pop	r0
 37e:	1f 90       	pop	r1
 380:	18 95       	reti

00000382 <main>:
{

	//usbQcInit();
	//QCset12V();
	
	buttonsInit();
 382:	0e 94 98 00 	call	0x130	; 0x130 <buttonsInit>
	
	sei();
 386:	78 94       	sei
 388:	ff cf       	rjmp	.-2      	; 0x388 <main+0x6>

0000038a <__vector_14>:

	}
}

ISR(TIMER0_COMPA_vect)		// audio interrupt
{
 38a:	1f 92       	push	r1
 38c:	0f 92       	push	r0
 38e:	0f b6       	in	r0, 0x3f	; 63
 390:	0f 92       	push	r0
 392:	11 24       	eor	r1, r1
 394:	8f 93       	push	r24
 396:	9f 93       	push	r25
 398:	ef 93       	push	r30
 39a:	ff 93       	push	r31
	switch(note_index)
 39c:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <note_index>
 3a0:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <note_index+0x1>
 3a4:	86 30       	cpi	r24, 0x06	; 6
 3a6:	91 05       	cpc	r25, r1
 3a8:	09 f4       	brne	.+2      	; 0x3ac <__vector_14+0x22>
 3aa:	4e c0       	rjmp	.+156    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 3ac:	30 f4       	brcc	.+12     	; 0x3ba <__vector_14+0x30>
 3ae:	81 30       	cpi	r24, 0x01	; 1
 3b0:	91 05       	cpc	r25, r1
 3b2:	61 f0       	breq	.+24     	; 0x3cc <__vector_14+0x42>
 3b4:	03 97       	sbiw	r24, 0x03	; 3
 3b6:	49 f1       	breq	.+82     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3b8:	79 c0       	rjmp	.+242    	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 3ba:	8e 30       	cpi	r24, 0x0E	; 14
 3bc:	91 05       	cpc	r25, r1
 3be:	09 f4       	brne	.+2      	; 0x3c2 <__vector_14+0x38>
 3c0:	62 c0       	rjmp	.+196    	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 3c2:	80 34       	cpi	r24, 0x40	; 64
 3c4:	91 05       	cpc	r25, r1
 3c6:	09 f4       	brne	.+2      	; 0x3ca <__vector_14+0x40>
 3c8:	63 c0       	rjmp	.+198    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 3ca:	70 c0       	rjmp	.+224    	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
	{	//every 8ms
		case 0+1:	//0ms, 8ms on
		ICR1 = notes[beep_index];	//1st note
 3cc:	e0 91 43 01 	lds	r30, 0x0143	; 0x800143 <beep_index>
 3d0:	f0 91 44 01 	lds	r31, 0x0144	; 0x800144 <beep_index+0x1>
 3d4:	ee 0f       	add	r30, r30
 3d6:	ff 1f       	adc	r31, r31
 3d8:	ea 5d       	subi	r30, 0xDA	; 218
 3da:	fe 4f       	sbci	r31, 0xFE	; 254
 3dc:	80 81       	ld	r24, Z
 3de:	91 81       	ldd	r25, Z+1	; 0x01
 3e0:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 3e4:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		OCR1A = notes[beep_index]/2;
 3e8:	e0 91 43 01 	lds	r30, 0x0143	; 0x800143 <beep_index>
 3ec:	f0 91 44 01 	lds	r31, 0x0144	; 0x800144 <beep_index+0x1>
 3f0:	ee 0f       	add	r30, r30
 3f2:	ff 1f       	adc	r31, r31
 3f4:	ea 5d       	subi	r30, 0xDA	; 218
 3f6:	fe 4f       	sbci	r31, 0xFE	; 254
 3f8:	80 81       	ld	r24, Z
 3fa:	91 81       	ldd	r25, Z+1	; 0x01
 3fc:	96 95       	lsr	r25
 3fe:	87 95       	ror	r24
 400:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 404:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		break;
 408:	51 c0       	rjmp	.+162    	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
		case 2+1:	// 16ms, 24, 32 on
		ICR1 = notes[beep_index+1];	//2nd note
 40a:	e0 91 43 01 	lds	r30, 0x0143	; 0x800143 <beep_index>
 40e:	f0 91 44 01 	lds	r31, 0x0144	; 0x800144 <beep_index+0x1>
 412:	ee 0f       	add	r30, r30
 414:	ff 1f       	adc	r31, r31
 416:	e8 5d       	subi	r30, 0xD8	; 216
 418:	fe 4f       	sbci	r31, 0xFE	; 254
 41a:	80 81       	ld	r24, Z
 41c:	91 81       	ldd	r25, Z+1	; 0x01
 41e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 422:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		OCR1A = notes[beep_index]/2;
 426:	e0 91 43 01 	lds	r30, 0x0143	; 0x800143 <beep_index>
 42a:	f0 91 44 01 	lds	r31, 0x0144	; 0x800144 <beep_index+0x1>
 42e:	ee 0f       	add	r30, r30
 430:	ff 1f       	adc	r31, r31
 432:	ea 5d       	subi	r30, 0xDA	; 218
 434:	fe 4f       	sbci	r31, 0xFE	; 254
 436:	80 81       	ld	r24, Z
 438:	91 81       	ldd	r25, Z+1	; 0x01
 43a:	96 95       	lsr	r25
 43c:	87 95       	ror	r24
 43e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 442:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		break;
 446:	32 c0       	rjmp	.+100    	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
		case 5+1:	// 40ms, 48, 56, 64, 72, 80, 88, 96, on
		ICR1 = notes[beep_index+2];	// 3rd note
 448:	e0 91 43 01 	lds	r30, 0x0143	; 0x800143 <beep_index>
 44c:	f0 91 44 01 	lds	r31, 0x0144	; 0x800144 <beep_index+0x1>
 450:	ee 0f       	add	r30, r30
 452:	ff 1f       	adc	r31, r31
 454:	e6 5d       	subi	r30, 0xD6	; 214
 456:	fe 4f       	sbci	r31, 0xFE	; 254
 458:	80 81       	ld	r24, Z
 45a:	91 81       	ldd	r25, Z+1	; 0x01
 45c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 460:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		OCR1A = notes[beep_index]/2;
 464:	e0 91 43 01 	lds	r30, 0x0143	; 0x800143 <beep_index>
 468:	f0 91 44 01 	lds	r31, 0x0144	; 0x800144 <beep_index+0x1>
 46c:	ee 0f       	add	r30, r30
 46e:	ff 1f       	adc	r31, r31
 470:	ea 5d       	subi	r30, 0xDA	; 218
 472:	fe 4f       	sbci	r31, 0xFE	; 254
 474:	80 81       	ld	r24, Z
 476:	91 81       	ldd	r25, Z+1	; 0x01
 478:	96 95       	lsr	r25
 47a:	87 95       	ror	r24
 47c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 480:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		break;
 484:	13 c0       	rjmp	.+38     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
		case 13+1:
		//ICR1 = 0;					//off
		OCR1A = 0;
 486:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 48a:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		break;
 48e:	0e c0       	rjmp	.+28     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
		
		case 63+1:
		beep_index = 0;
 490:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <beep_index+0x1>
 494:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <beep_index>
		note_index = -1;
 498:	8f ef       	ldi	r24, 0xFF	; 255
 49a:	9f ef       	ldi	r25, 0xFF	; 255
 49c:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <note_index+0x1>
 4a0:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <note_index>
		TCCR0B &= ~(0b101 << CS00);
 4a4:	85 b5       	in	r24, 0x25	; 37
 4a6:	8a 7f       	andi	r24, 0xFA	; 250
 4a8:	85 bd       	out	0x25, r24	; 37
		TCNT0 = 0;
 4aa:	16 bc       	out	0x26, r1	; 38
		break;
	}
	note_index += 1;
 4ac:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <note_index>
 4b0:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <note_index+0x1>
 4b4:	01 96       	adiw	r24, 0x01	; 1
 4b6:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <note_index+0x1>
 4ba:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <note_index>
}
 4be:	ff 91       	pop	r31
 4c0:	ef 91       	pop	r30
 4c2:	9f 91       	pop	r25
 4c4:	8f 91       	pop	r24
 4c6:	0f 90       	pop	r0
 4c8:	0f be       	out	0x3f, r0	; 63
 4ca:	0f 90       	pop	r0
 4cc:	1f 90       	pop	r1
 4ce:	18 95       	reti

000004d0 <__vector_42>:

ISR(TIMER4_COMPA_vect){		// use timer 4 for decreasing game time every 1s
 4d0:	1f 92       	push	r1
 4d2:	0f 92       	push	r0
 4d4:	0f b6       	in	r0, 0x3f	; 63
 4d6:	0f 92       	push	r0
 4d8:	11 24       	eor	r1, r1
 4da:	8f 93       	push	r24
	if(TimeRemaining > 0){
 4dc:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <TimeRemaining>
 4e0:	88 23       	and	r24, r24
 4e2:	29 f0       	breq	.+10     	; 0x4ee <__vector_42+0x1e>
		TimeRemaining--;
 4e4:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <TimeRemaining>
 4e8:	81 50       	subi	r24, 0x01	; 1
 4ea:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <TimeRemaining>
	}
}
 4ee:	8f 91       	pop	r24
 4f0:	0f 90       	pop	r0
 4f2:	0f be       	out	0x3f, r0	; 63
 4f4:	0f 90       	pop	r0
 4f6:	1f 90       	pop	r1
 4f8:	18 95       	reti

000004fa <__divmodhi4>:
 4fa:	97 fb       	bst	r25, 7
 4fc:	07 2e       	mov	r0, r23
 4fe:	16 f4       	brtc	.+4      	; 0x504 <__divmodhi4+0xa>
 500:	00 94       	com	r0
 502:	07 d0       	rcall	.+14     	; 0x512 <__divmodhi4_neg1>
 504:	77 fd       	sbrc	r23, 7
 506:	09 d0       	rcall	.+18     	; 0x51a <__divmodhi4_neg2>
 508:	0e 94 91 02 	call	0x522	; 0x522 <__udivmodhi4>
 50c:	07 fc       	sbrc	r0, 7
 50e:	05 d0       	rcall	.+10     	; 0x51a <__divmodhi4_neg2>
 510:	3e f4       	brtc	.+14     	; 0x520 <__divmodhi4_exit>

00000512 <__divmodhi4_neg1>:
 512:	90 95       	com	r25
 514:	81 95       	neg	r24
 516:	9f 4f       	sbci	r25, 0xFF	; 255
 518:	08 95       	ret

0000051a <__divmodhi4_neg2>:
 51a:	70 95       	com	r23
 51c:	61 95       	neg	r22
 51e:	7f 4f       	sbci	r23, 0xFF	; 255

00000520 <__divmodhi4_exit>:
 520:	08 95       	ret

00000522 <__udivmodhi4>:
 522:	aa 1b       	sub	r26, r26
 524:	bb 1b       	sub	r27, r27
 526:	51 e1       	ldi	r21, 0x11	; 17
 528:	07 c0       	rjmp	.+14     	; 0x538 <__udivmodhi4_ep>

0000052a <__udivmodhi4_loop>:
 52a:	aa 1f       	adc	r26, r26
 52c:	bb 1f       	adc	r27, r27
 52e:	a6 17       	cp	r26, r22
 530:	b7 07       	cpc	r27, r23
 532:	10 f0       	brcs	.+4      	; 0x538 <__udivmodhi4_ep>
 534:	a6 1b       	sub	r26, r22
 536:	b7 0b       	sbc	r27, r23

00000538 <__udivmodhi4_ep>:
 538:	88 1f       	adc	r24, r24
 53a:	99 1f       	adc	r25, r25
 53c:	5a 95       	dec	r21
 53e:	a9 f7       	brne	.-22     	; 0x52a <__udivmodhi4_loop>
 540:	80 95       	com	r24
 542:	90 95       	com	r25
 544:	bc 01       	movw	r22, r24
 546:	cd 01       	movw	r24, r26
 548:	08 95       	ret

0000054a <_exit>:
 54a:	f8 94       	cli

0000054c <__stop_program>:
 54c:	ff cf       	rjmp	.-2      	; 0x54c <__stop_program>
