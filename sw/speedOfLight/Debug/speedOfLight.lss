
speedOfLight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001e0  00800100  00003380  00003414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003380  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003f  008002e0  008002e0  000035f4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000035f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003650  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00003690  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003af2  00000000  00000000  00003808  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ea2  00000000  00000000  000072fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ef0  00000000  00000000  0000819c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000618  00000000  00000000  0000a08c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009ac  00000000  00000000  0000a6a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000022b3  00000000  00000000  0000b050  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003e8  00000000  00000000  0000d303  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
       4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
       8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
       c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      10:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      14:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      18:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      1c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      20:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      24:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      28:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      2c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      30:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      34:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      38:	0c 94 a9 02 	jmp	0x552	; 0x552 <__vector_14>
      3c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      40:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      44:	0c 94 6c 02 	jmp	0x4d8	; 0x4d8 <__vector_17>
      48:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      4c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      50:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      54:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      58:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      5c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      68:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      6c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      70:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      74:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      78:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      7c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      80:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      84:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__vector_33>
      88:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__vector_34>
      8c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      90:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      94:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      98:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      9c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      a0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      a4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      a8:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__vector_42>
      ac:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      b0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      b4:	59 0c       	add	r5, r9
      b6:	92 0d       	add	r25, r2
      b8:	cd 0e       	add	r12, r29
      ba:	85 0f       	add	r24, r21
      bc:	3d 10       	cpse	r3, r13
      be:	78 11       	cpse	r23, r8
      c0:	30 12       	cpse	r3, r16

000000c2 <__ctors_end>:
      c2:	11 24       	eor	r1, r1
      c4:	1f be       	out	0x3f, r1	; 63
      c6:	cf ef       	ldi	r28, 0xFF	; 255
      c8:	d8 e0       	ldi	r29, 0x08	; 8
      ca:	de bf       	out	0x3e, r29	; 62
      cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_copy_data>:
      ce:	12 e0       	ldi	r17, 0x02	; 2
      d0:	a0 e0       	ldi	r26, 0x00	; 0
      d2:	b1 e0       	ldi	r27, 0x01	; 1
      d4:	e0 e8       	ldi	r30, 0x80	; 128
      d6:	f3 e3       	ldi	r31, 0x33	; 51
      d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x10>
      da:	05 90       	lpm	r0, Z+
      dc:	0d 92       	st	X+, r0
      de:	a0 3e       	cpi	r26, 0xE0	; 224
      e0:	b1 07       	cpc	r27, r17
      e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0xc>

000000e4 <__do_clear_bss>:
      e4:	23 e0       	ldi	r18, 0x03	; 3
      e6:	a0 ee       	ldi	r26, 0xE0	; 224
      e8:	b2 e0       	ldi	r27, 0x02	; 2
      ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
      ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
      ee:	af 31       	cpi	r26, 0x1F	; 31
      f0:	b2 07       	cpc	r27, r18
      f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>
      f4:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <main>
      f8:	0c 94 be 19 	jmp	0x337c	; 0x337c <_exit>

000000fc <__bad_interrupt>:
      fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000100 <spiSetup>:
}

int getButtonLed(uint8_t x, uint8_t y){
		return (ledMemory[9 + y] >> x) & 0x01;
	
}
     100:	84 b1       	in	r24, 0x04	; 4
     102:	88 62       	ori	r24, 0x28	; 40
     104:	84 b9       	out	0x04, r24	; 4
     106:	81 ed       	ldi	r24, 0xD1	; 209
     108:	8c bd       	out	0x2c, r24	; 44
     10a:	08 95       	ret

0000010c <tmrSetup>:
     10c:	8a e0       	ldi	r24, 0x0A	; 10
     10e:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
     112:	88 eb       	ldi	r24, 0xB8	; 184
     114:	9b e0       	ldi	r25, 0x0B	; 11
     116:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     11a:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
     11e:	8a e3       	ldi	r24, 0x3A	; 58
     120:	97 e0       	ldi	r25, 0x07	; 7
     122:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     126:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
     12a:	e1 e7       	ldi	r30, 0x71	; 113
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	80 81       	ld	r24, Z
     130:	86 60       	ori	r24, 0x06	; 6
     132:	80 83       	st	Z, r24
     134:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     138:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
     13c:	08 95       	ret

0000013e <buttonsInit>:
     13e:	8f ef       	ldi	r24, 0xFF	; 255
     140:	8a b9       	out	0x0a, r24	; 10
     142:	88 b9       	out	0x08, r24	; 8
     144:	20 9a       	sbi	0x04, 0	; 4
     146:	6b 9a       	sbi	0x0d, 3	; 13
     148:	6a 9a       	sbi	0x0d, 2	; 13
     14a:	73 9a       	sbi	0x0e, 3	; 14
     14c:	0e 94 80 00 	call	0x100	; 0x100 <spiSetup>
     150:	0e 94 86 00 	call	0x10c	; 0x10c <tmrSetup>
     154:	08 95       	ret

00000156 <isButtonDown>:
     156:	e8 2f       	mov	r30, r24
     158:	f0 e0       	ldi	r31, 0x00	; 0
     15a:	e3 51       	subi	r30, 0x13	; 19
     15c:	fd 4f       	sbci	r31, 0xFD	; 253
     15e:	20 81       	ld	r18, Z
     160:	81 e0       	ldi	r24, 0x01	; 1
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	02 c0       	rjmp	.+4      	; 0x16a <isButtonDown+0x14>
     166:	88 0f       	add	r24, r24
     168:	99 1f       	adc	r25, r25
     16a:	6a 95       	dec	r22
     16c:	e2 f7       	brpl	.-8      	; 0x166 <isButtonDown+0x10>
     16e:	82 23       	and	r24, r18
     170:	08 95       	ret

00000172 <setButtonLed>:
     172:	44 23       	and	r20, r20
     174:	89 f0       	breq	.+34     	; 0x198 <setButtonLed+0x26>
     176:	e6 2f       	mov	r30, r22
     178:	f0 e0       	ldi	r31, 0x00	; 0
     17a:	ed 5e       	subi	r30, 0xED	; 237
     17c:	fe 4f       	sbci	r31, 0xFE	; 254
     17e:	40 81       	ld	r20, Z
     180:	21 e0       	ldi	r18, 0x01	; 1
     182:	30 e0       	ldi	r19, 0x00	; 0
     184:	b9 01       	movw	r22, r18
     186:	02 c0       	rjmp	.+4      	; 0x18c <setButtonLed+0x1a>
     188:	66 0f       	add	r22, r22
     18a:	77 1f       	adc	r23, r23
     18c:	8a 95       	dec	r24
     18e:	e2 f7       	brpl	.-8      	; 0x188 <setButtonLed+0x16>
     190:	cb 01       	movw	r24, r22
     192:	84 2b       	or	r24, r20
     194:	80 83       	st	Z, r24
     196:	08 95       	ret
     198:	e6 2f       	mov	r30, r22
     19a:	f0 e0       	ldi	r31, 0x00	; 0
     19c:	ed 5e       	subi	r30, 0xED	; 237
     19e:	fe 4f       	sbci	r31, 0xFE	; 254
     1a0:	40 81       	ld	r20, Z
     1a2:	21 e0       	ldi	r18, 0x01	; 1
     1a4:	30 e0       	ldi	r19, 0x00	; 0
     1a6:	b9 01       	movw	r22, r18
     1a8:	02 c0       	rjmp	.+4      	; 0x1ae <setButtonLed+0x3c>
     1aa:	66 0f       	add	r22, r22
     1ac:	77 1f       	adc	r23, r23
     1ae:	8a 95       	dec	r24
     1b0:	e2 f7       	brpl	.-8      	; 0x1aa <setButtonLed+0x38>
     1b2:	cb 01       	movw	r24, r22
     1b4:	80 95       	com	r24
     1b6:	84 23       	and	r24, r20
     1b8:	80 83       	st	Z, r24
     1ba:	08 95       	ret

000001bc <setScore>:

void setScore(uint8_t display, uint16_t value){
     1bc:	cf 93       	push	r28
     1be:	df 93       	push	r29
     1c0:	eb 01       	movw	r28, r22
	ledMemory[3*display] = value % 10;
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	ac 01       	movw	r20, r24
     1c6:	44 0f       	add	r20, r20
     1c8:	55 1f       	adc	r21, r21
     1ca:	48 0f       	add	r20, r24
     1cc:	59 1f       	adc	r21, r25
     1ce:	9b 01       	movw	r18, r22
     1d0:	ad ec       	ldi	r26, 0xCD	; 205
     1d2:	bc ec       	ldi	r27, 0xCC	; 204
     1d4:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <__umulhisi3>
     1d8:	fc 01       	movw	r30, r24
     1da:	f6 95       	lsr	r31
     1dc:	e7 95       	ror	r30
     1de:	f6 95       	lsr	r31
     1e0:	e7 95       	ror	r30
     1e2:	f6 95       	lsr	r31
     1e4:	e7 95       	ror	r30
     1e6:	9f 01       	movw	r18, r30
     1e8:	22 0f       	add	r18, r18
     1ea:	33 1f       	adc	r19, r19
     1ec:	cf 01       	movw	r24, r30
     1ee:	88 0f       	add	r24, r24
     1f0:	99 1f       	adc	r25, r25
     1f2:	88 0f       	add	r24, r24
     1f4:	99 1f       	adc	r25, r25
     1f6:	88 0f       	add	r24, r24
     1f8:	99 1f       	adc	r25, r25
     1fa:	82 0f       	add	r24, r18
     1fc:	93 1f       	adc	r25, r19
     1fe:	9e 01       	movw	r18, r28
     200:	28 1b       	sub	r18, r24
     202:	39 0b       	sbc	r19, r25
     204:	da 01       	movw	r26, r20
     206:	a6 5f       	subi	r26, 0xF6	; 246
     208:	be 4f       	sbci	r27, 0xFE	; 254
     20a:	2c 93       	st	X, r18
	ledMemory[3*display+1] = (value / 10) % 10;
     20c:	9f 01       	movw	r18, r30
     20e:	ad ec       	ldi	r26, 0xCD	; 205
     210:	bc ec       	ldi	r27, 0xCC	; 204
     212:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <__umulhisi3>
     216:	96 95       	lsr	r25
     218:	87 95       	ror	r24
     21a:	96 95       	lsr	r25
     21c:	87 95       	ror	r24
     21e:	96 95       	lsr	r25
     220:	87 95       	ror	r24
     222:	9c 01       	movw	r18, r24
     224:	22 0f       	add	r18, r18
     226:	33 1f       	adc	r19, r19
     228:	88 0f       	add	r24, r24
     22a:	99 1f       	adc	r25, r25
     22c:	88 0f       	add	r24, r24
     22e:	99 1f       	adc	r25, r25
     230:	88 0f       	add	r24, r24
     232:	99 1f       	adc	r25, r25
     234:	82 0f       	add	r24, r18
     236:	93 1f       	adc	r25, r19
     238:	e8 1b       	sub	r30, r24
     23a:	f9 0b       	sbc	r31, r25
     23c:	da 01       	movw	r26, r20
     23e:	a5 5f       	subi	r26, 0xF5	; 245
     240:	be 4f       	sbci	r27, 0xFE	; 254
     242:	ec 93       	st	X, r30
	ledMemory[3*display+2] = (value / 100) % 10;
     244:	9e 01       	movw	r18, r28
     246:	36 95       	lsr	r19
     248:	27 95       	ror	r18
     24a:	36 95       	lsr	r19
     24c:	27 95       	ror	r18
     24e:	ab e7       	ldi	r26, 0x7B	; 123
     250:	b4 e1       	ldi	r27, 0x14	; 20
     252:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <__umulhisi3>
     256:	fc 01       	movw	r30, r24
     258:	f6 95       	lsr	r31
     25a:	e7 95       	ror	r30
     25c:	9f 01       	movw	r18, r30
     25e:	ad ec       	ldi	r26, 0xCD	; 205
     260:	bc ec       	ldi	r27, 0xCC	; 204
     262:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <__umulhisi3>
     266:	96 95       	lsr	r25
     268:	87 95       	ror	r24
     26a:	96 95       	lsr	r25
     26c:	87 95       	ror	r24
     26e:	96 95       	lsr	r25
     270:	87 95       	ror	r24
     272:	9c 01       	movw	r18, r24
     274:	22 0f       	add	r18, r18
     276:	33 1f       	adc	r19, r19
     278:	88 0f       	add	r24, r24
     27a:	99 1f       	adc	r25, r25
     27c:	88 0f       	add	r24, r24
     27e:	99 1f       	adc	r25, r25
     280:	88 0f       	add	r24, r24
     282:	99 1f       	adc	r25, r25
     284:	82 0f       	add	r24, r18
     286:	93 1f       	adc	r25, r19
     288:	e8 1b       	sub	r30, r24
     28a:	f9 0b       	sbc	r31, r25
     28c:	da 01       	movw	r26, r20
     28e:	a4 5f       	subi	r26, 0xF4	; 244
     290:	be 4f       	sbci	r27, 0xFE	; 254
     292:	ec 93       	st	X, r30
	
}
     294:	df 91       	pop	r29
     296:	cf 91       	pop	r28
     298:	08 95       	ret

0000029a <setScoreSegment>:

void setScoreSegment(uint8_t segment, uint8_t val){
	ledMemory[segment] = val;
     29a:	e8 2f       	mov	r30, r24
     29c:	f0 e0       	ldi	r31, 0x00	; 0
     29e:	e6 5f       	subi	r30, 0xF6	; 246
     2a0:	fe 4f       	sbci	r31, 0xFE	; 254
     2a2:	60 83       	st	Z, r22
     2a4:	08 95       	ret

000002a6 <clearLeds>:
}
	

void clearLeds(uint8_t mode){
     2a6:	1f 93       	push	r17
     2a8:	cf 93       	push	r28
     2aa:	df 93       	push	r29
     2ac:	18 2f       	mov	r17, r24
	for(uint8_t ledx = 0; ledx < 6; ledx++){
     2ae:	d0 e0       	ldi	r29, 0x00	; 0
     2b0:	0b c0       	rjmp	.+22     	; 0x2c8 <clearLeds+0x22>
		for(uint8_t ledy = 0; ledy < 6; ledy++){
			setButtonLed(ledx, ledy, mode);
     2b2:	41 2f       	mov	r20, r17
     2b4:	6c 2f       	mov	r22, r28
     2b6:	8d 2f       	mov	r24, r29
     2b8:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
}
	

void clearLeds(uint8_t mode){
	for(uint8_t ledx = 0; ledx < 6; ledx++){
		for(uint8_t ledy = 0; ledy < 6; ledy++){
     2bc:	cf 5f       	subi	r28, 0xFF	; 255
     2be:	c6 30       	cpi	r28, 0x06	; 6
     2c0:	c1 f7       	brne	.-16     	; 0x2b2 <clearLeds+0xc>
	ledMemory[segment] = val;
}
	

void clearLeds(uint8_t mode){
	for(uint8_t ledx = 0; ledx < 6; ledx++){
     2c2:	df 5f       	subi	r29, 0xFF	; 255
     2c4:	d6 30       	cpi	r29, 0x06	; 6
     2c6:	11 f0       	breq	.+4      	; 0x2cc <clearLeds+0x26>
void setScoreSegment(uint8_t segment, uint8_t val){
	ledMemory[segment] = val;
}
	

void clearLeds(uint8_t mode){
     2c8:	c0 e0       	ldi	r28, 0x00	; 0
     2ca:	f3 cf       	rjmp	.-26     	; 0x2b2 <clearLeds+0xc>
	for(uint8_t ledx = 0; ledx < 6; ledx++){
		for(uint8_t ledy = 0; ledy < 6; ledy++){
			setButtonLed(ledx, ledy, mode);
		}	
	}
}
     2cc:	df 91       	pop	r29
     2ce:	cf 91       	pop	r28
     2d0:	1f 91       	pop	r17
     2d2:	08 95       	ret

000002d4 <__vector_33>:



ISR(TIMER3_COMPA_vect){
     2d4:	1f 92       	push	r1
     2d6:	0f 92       	push	r0
     2d8:	0f b6       	in	r0, 0x3f	; 63
     2da:	0f 92       	push	r0
     2dc:	11 24       	eor	r1, r1
     2de:	2f 93       	push	r18
     2e0:	3f 93       	push	r19
     2e2:	4f 93       	push	r20
     2e4:	5f 93       	push	r21
     2e6:	6f 93       	push	r22
     2e8:	7f 93       	push	r23
     2ea:	8f 93       	push	r24
     2ec:	9f 93       	push	r25
     2ee:	af 93       	push	r26
     2f0:	bf 93       	push	r27
     2f2:	ef 93       	push	r30
     2f4:	ff 93       	push	r31
	// the row is in the lower nibble and column data is in the upper nibble
	// for each row the two registers need to be set and the other two need to be cleared
	
	// ledData for the matrices are stored as a byte array of the column data
	
	if (muxCounter < 3)
     2f6:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <muxCounter>
     2fa:	83 30       	cpi	r24, 0x03	; 3
     2fc:	90 f5       	brcc	.+100    	; 0x362 <__vector_33+0x8e>
	{
		ledData[3] = ((1 << muxCounter)) | ((ledMemory[9 + muxCounter] & 0b00000111)<<4);
     2fe:	40 91 e1 02 	lds	r20, 0x02E1	; 0x8002e1 <muxCounter>
     302:	e0 91 e1 02 	lds	r30, 0x02E1	; 0x8002e1 <muxCounter>
     306:	f0 e0       	ldi	r31, 0x00	; 0
     308:	ed 5e       	subi	r30, 0xED	; 237
     30a:	fe 4f       	sbci	r31, 0xFE	; 254
     30c:	20 81       	ld	r18, Z
     30e:	27 70       	andi	r18, 0x07	; 7
     310:	60 e1       	ldi	r22, 0x10	; 16
     312:	26 9f       	mul	r18, r22
     314:	90 01       	movw	r18, r0
     316:	11 24       	eor	r1, r1
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	bc 01       	movw	r22, r24
     31e:	02 c0       	rjmp	.+4      	; 0x324 <__vector_33+0x50>
     320:	66 0f       	add	r22, r22
     322:	77 1f       	adc	r23, r23
     324:	4a 95       	dec	r20
     326:	e2 f7       	brpl	.-8      	; 0x320 <__vector_33+0x4c>
     328:	26 2b       	or	r18, r22
     32a:	a4 e0       	ldi	r26, 0x04	; 4
     32c:	b1 e0       	ldi	r27, 0x01	; 1
     32e:	13 96       	adiw	r26, 0x03	; 3
     330:	2c 93       	st	X, r18
     332:	13 97       	sbiw	r26, 0x03	; 3
		ledData[0] = 0;
     334:	1c 92       	st	X, r1
		ledData[1] = 0;
     336:	11 96       	adiw	r26, 0x01	; 1
     338:	1c 92       	st	X, r1
     33a:	11 97       	sbiw	r26, 0x01	; 1
		ledData[2] = ((1 << muxCounter)) | ((ledMemory[9 + muxCounter] & 0b00111000)<<1);
     33c:	30 91 e1 02 	lds	r19, 0x02E1	; 0x8002e1 <muxCounter>
     340:	e0 91 e1 02 	lds	r30, 0x02E1	; 0x8002e1 <muxCounter>
     344:	f0 e0       	ldi	r31, 0x00	; 0
     346:	ed 5e       	subi	r30, 0xED	; 237
     348:	fe 4f       	sbci	r31, 0xFE	; 254
     34a:	20 81       	ld	r18, Z
     34c:	28 73       	andi	r18, 0x38	; 56
     34e:	22 0f       	add	r18, r18
     350:	02 c0       	rjmp	.+4      	; 0x356 <__vector_33+0x82>
     352:	88 0f       	add	r24, r24
     354:	99 1f       	adc	r25, r25
     356:	3a 95       	dec	r19
     358:	e2 f7       	brpl	.-8      	; 0x352 <__vector_33+0x7e>
     35a:	82 2b       	or	r24, r18
     35c:	12 96       	adiw	r26, 0x02	; 2
     35e:	8c 93       	st	X, r24
     360:	33 c0       	rjmp	.+102    	; 0x3c8 <__vector_33+0xf4>
	}
	else{
		ledData[3] = 0;
     362:	a4 e0       	ldi	r26, 0x04	; 4
     364:	b1 e0       	ldi	r27, 0x01	; 1
     366:	13 96       	adiw	r26, 0x03	; 3
     368:	1c 92       	st	X, r1
     36a:	13 97       	sbiw	r26, 0x03	; 3
		ledData[0] = ((1 << (muxCounter-3))) | ((ledMemory[9 + muxCounter] & 0b00000111)<<4);
     36c:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <muxCounter>
     370:	e0 91 e1 02 	lds	r30, 0x02E1	; 0x8002e1 <muxCounter>
     374:	f0 e0       	ldi	r31, 0x00	; 0
     376:	ed 5e       	subi	r30, 0xED	; 237
     378:	fe 4f       	sbci	r31, 0xFE	; 254
     37a:	90 81       	ld	r25, Z
     37c:	83 50       	subi	r24, 0x03	; 3
     37e:	21 e0       	ldi	r18, 0x01	; 1
     380:	30 e0       	ldi	r19, 0x00	; 0
     382:	a9 01       	movw	r20, r18
     384:	02 c0       	rjmp	.+4      	; 0x38a <__vector_33+0xb6>
     386:	44 0f       	add	r20, r20
     388:	55 1f       	adc	r21, r21
     38a:	8a 95       	dec	r24
     38c:	e2 f7       	brpl	.-8      	; 0x386 <__vector_33+0xb2>
     38e:	97 70       	andi	r25, 0x07	; 7
     390:	70 e1       	ldi	r23, 0x10	; 16
     392:	97 9f       	mul	r25, r23
     394:	c0 01       	movw	r24, r0
     396:	11 24       	eor	r1, r1
     398:	84 2b       	or	r24, r20
     39a:	8c 93       	st	X, r24
		ledData[1] = ((1 << (muxCounter-3))) | ((ledMemory[9 + muxCounter] & 0b00111000)<<1);
     39c:	90 91 e1 02 	lds	r25, 0x02E1	; 0x8002e1 <muxCounter>
     3a0:	e0 91 e1 02 	lds	r30, 0x02E1	; 0x8002e1 <muxCounter>
     3a4:	f0 e0       	ldi	r31, 0x00	; 0
     3a6:	ed 5e       	subi	r30, 0xED	; 237
     3a8:	fe 4f       	sbci	r31, 0xFE	; 254
     3aa:	80 81       	ld	r24, Z
     3ac:	93 50       	subi	r25, 0x03	; 3
     3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <__vector_33+0xe0>
     3b0:	22 0f       	add	r18, r18
     3b2:	33 1f       	adc	r19, r19
     3b4:	9a 95       	dec	r25
     3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <__vector_33+0xdc>
     3b8:	88 73       	andi	r24, 0x38	; 56
     3ba:	88 0f       	add	r24, r24
     3bc:	28 2b       	or	r18, r24
     3be:	11 96       	adiw	r26, 0x01	; 1
     3c0:	2c 93       	st	X, r18
     3c2:	11 97       	sbiw	r26, 0x01	; 1
		ledData[2] = 0;
     3c4:	12 96       	adiw	r26, 0x02	; 2
     3c6:	1c 92       	st	X, r1
	}
	
	muxCounter = (muxCounter + 1) % 6;
     3c8:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <muxCounter>
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	01 96       	adiw	r24, 0x01	; 1
     3d0:	66 e0       	ldi	r22, 0x06	; 6
     3d2:	70 e0       	ldi	r23, 0x00	; 0
     3d4:	0e 94 d7 15 	call	0x2bae	; 0x2bae <__divmodhi4>
     3d8:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <muxCounter>
	
	// calculate data for score display
	
	ledData[5] = sevenSegmentDecode[ledMemory[scoreDigitCounter]];
     3dc:	e0 91 e2 02 	lds	r30, 0x02E2	; 0x8002e2 <scoreDigitCounter>
     3e0:	f0 e0       	ldi	r31, 0x00	; 0
     3e2:	e6 5f       	subi	r30, 0xF6	; 246
     3e4:	fe 4f       	sbci	r31, 0xFE	; 254
     3e6:	e0 81       	ld	r30, Z
     3e8:	f0 e0       	ldi	r31, 0x00	; 0
     3ea:	e9 5d       	subi	r30, 0xD9	; 217
     3ec:	fe 4f       	sbci	r31, 0xFE	; 254
     3ee:	80 81       	ld	r24, Z
     3f0:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <ledData+0x5>
	if (scoreDigitCounter == 0){
     3f4:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <scoreDigitCounter>
     3f8:	81 11       	cpse	r24, r1
     3fa:	07 c0       	rjmp	.+14     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
		ledData[5] |= 1 << 7; // set MSB for D0
     3fc:	e4 e0       	ldi	r30, 0x04	; 4
     3fe:	f1 e0       	ldi	r31, 0x01	; 1
     400:	85 81       	ldd	r24, Z+5	; 0x05
     402:	80 68       	ori	r24, 0x80	; 128
     404:	85 83       	std	Z+5, r24	; 0x05
		ledData[4] = 0;
     406:	14 82       	std	Z+4, r1	; 0x04
     408:	0c c0       	rjmp	.+24     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
	}
	else{
		ledData[4] = 1 << (scoreDigitCounter - 1);
     40a:	20 91 e2 02 	lds	r18, 0x02E2	; 0x8002e2 <scoreDigitCounter>
     40e:	21 50       	subi	r18, 0x01	; 1
     410:	81 e0       	ldi	r24, 0x01	; 1
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	02 c0       	rjmp	.+4      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     416:	88 0f       	add	r24, r24
     418:	99 1f       	adc	r25, r25
     41a:	2a 95       	dec	r18
     41c:	e2 f7       	brpl	.-8      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     41e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <ledData+0x4>
	}

	scoreDigitCounter = (scoreDigitCounter + 1) % 9;
     422:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <scoreDigitCounter>
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	01 96       	adiw	r24, 0x01	; 1
     42a:	69 e0       	ldi	r22, 0x09	; 9
     42c:	70 e0       	ldi	r23, 0x00	; 0
     42e:	0e 94 d7 15 	call	0x2bae	; 0x2bae <__divmodhi4>
     432:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <scoreDigitCounter>
	

	// clear contents of shift register and latch
	PORTB &= ~(1 << LED_L); // set led latch low
     436:	28 98       	cbi	0x05, 0	; 5
	PORTE &= ~(1 << LED_B); // blank leds
     438:	73 98       	cbi	0x0e, 3	; 14
	PORTB |= (1 << LED_L); // set led latch high
     43a:	28 9a       	sbi	0x05, 0	; 5
	PORTE |= (1 << LED_B); // unblank leds
     43c:	73 9a       	sbi	0x0e, 3	; 14
	PORTB &= ~(1 << LED_L); // set led latch low
     43e:	28 98       	cbi	0x05, 0	; 5
	spiByteCounter = 0;
     440:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <__data_end>
	SPDR0 = ledData[spiByteCounter++];
     444:	e0 91 e0 02 	lds	r30, 0x02E0	; 0x8002e0 <__data_end>
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	8e 0f       	add	r24, r30
     44c:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <__data_end>
     450:	f0 e0       	ldi	r31, 0x00	; 0
     452:	ec 5f       	subi	r30, 0xFC	; 252
     454:	fe 4f       	sbci	r31, 0xFE	; 254
     456:	80 81       	ld	r24, Z
     458:	8e bd       	out	0x2e, r24	; 46
}
     45a:	ff 91       	pop	r31
     45c:	ef 91       	pop	r30
     45e:	bf 91       	pop	r27
     460:	af 91       	pop	r26
     462:	9f 91       	pop	r25
     464:	8f 91       	pop	r24
     466:	7f 91       	pop	r23
     468:	6f 91       	pop	r22
     46a:	5f 91       	pop	r21
     46c:	4f 91       	pop	r20
     46e:	3f 91       	pop	r19
     470:	2f 91       	pop	r18
     472:	0f 90       	pop	r0
     474:	0f be       	out	0x3f, r0	; 63
     476:	0f 90       	pop	r0
     478:	1f 90       	pop	r1
     47a:	18 95       	reti

0000047c <__vector_34>:
	PORTD = 0xFF; 
	buttonMemory[muxCounter] = ~PINC;
	
}*/

ISR(TIMER3_COMPB_vect){
     47c:	1f 92       	push	r1
     47e:	0f 92       	push	r0
     480:	0f b6       	in	r0, 0x3f	; 63
     482:	0f 92       	push	r0
     484:	11 24       	eor	r1, r1
     486:	2f 93       	push	r18
     488:	3f 93       	push	r19
     48a:	8f 93       	push	r24
     48c:	9f 93       	push	r25
     48e:	ef 93       	push	r30
     490:	ff 93       	push	r31
	DDRD &= ~(1<<(muxCounter+2));
	buttonMemory[muxCounter] = ~PINC; 
	DDRD = 0xFF; 
	*/
	
	DDRD = 0xFF;
     492:	3f ef       	ldi	r19, 0xFF	; 255
     494:	3a b9       	out	0x0a, r19	; 10
	DDRC = 0x00;
     496:	17 b8       	out	0x07, r1	; 7
	
	PORTD = ~(1<<(muxCounter+2));
     498:	20 91 e1 02 	lds	r18, 0x02E1	; 0x8002e1 <muxCounter>
     49c:	2e 5f       	subi	r18, 0xFE	; 254
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <__vector_34+0x2c>
     4a4:	88 0f       	add	r24, r24
     4a6:	99 1f       	adc	r25, r25
     4a8:	2a 95       	dec	r18
     4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <__vector_34+0x28>
     4ac:	80 95       	com	r24
     4ae:	8b b9       	out	0x0b, r24	; 11
	buttonMemory[muxCounter] = ~PINC;
     4b0:	e0 91 e1 02 	lds	r30, 0x02E1	; 0x8002e1 <muxCounter>
     4b4:	f0 e0       	ldi	r31, 0x00	; 0
     4b6:	86 b1       	in	r24, 0x06	; 6
     4b8:	80 95       	com	r24
     4ba:	e3 51       	subi	r30, 0x13	; 19
     4bc:	fd 4f       	sbci	r31, 0xFD	; 253
     4be:	80 83       	st	Z, r24
	PORTD = 0xFF;
     4c0:	3b b9       	out	0x0b, r19	; 11
}
     4c2:	ff 91       	pop	r31
     4c4:	ef 91       	pop	r30
     4c6:	9f 91       	pop	r25
     4c8:	8f 91       	pop	r24
     4ca:	3f 91       	pop	r19
     4cc:	2f 91       	pop	r18
     4ce:	0f 90       	pop	r0
     4d0:	0f be       	out	0x3f, r0	; 63
     4d2:	0f 90       	pop	r0
     4d4:	1f 90       	pop	r1
     4d6:	18 95       	reti

000004d8 <__vector_17>:

ISR(SPI0_STC_vect){
     4d8:	1f 92       	push	r1
     4da:	0f 92       	push	r0
     4dc:	0f b6       	in	r0, 0x3f	; 63
     4de:	0f 92       	push	r0
     4e0:	11 24       	eor	r1, r1
     4e2:	8f 93       	push	r24
     4e4:	ef 93       	push	r30
     4e6:	ff 93       	push	r31
	if (spiByteCounter >= 6){
     4e8:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <__data_end>
     4ec:	86 30       	cpi	r24, 0x06	; 6
     4ee:	10 f0       	brcs	.+4      	; 0x4f4 <__vector_17+0x1c>
		PORTB |= 1 << LED_L; // set led latch high
     4f0:	28 9a       	sbi	0x05, 0	; 5
		return;
     4f2:	0b c0       	rjmp	.+22     	; 0x50a <__vector_17+0x32>
	}
	SPDR0 = ledData[spiByteCounter++];
     4f4:	e0 91 e0 02 	lds	r30, 0x02E0	; 0x8002e0 <__data_end>
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	8e 0f       	add	r24, r30
     4fc:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <__data_end>
     500:	f0 e0       	ldi	r31, 0x00	; 0
     502:	ec 5f       	subi	r30, 0xFC	; 252
     504:	fe 4f       	sbci	r31, 0xFE	; 254
     506:	80 81       	ld	r24, Z
     508:	8e bd       	out	0x2e, r24	; 46
}
     50a:	ff 91       	pop	r31
     50c:	ef 91       	pop	r30
     50e:	8f 91       	pop	r24
     510:	0f 90       	pop	r0
     512:	0f be       	out	0x3f, r0	; 63
     514:	0f 90       	pop	r0
     516:	1f 90       	pop	r1
     518:	18 95       	reti

0000051a <uart_putchar>:

static int uart_putchar(char c, FILE *stream);
static FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);

static int uart_putchar(char c, FILE *stream)
{
     51a:	cf 93       	push	r28
     51c:	c8 2f       	mov	r28, r24
	if (c == '\n')
     51e:	8a 30       	cpi	r24, 0x0A	; 10
     520:	19 f4       	brne	.+6      	; 0x528 <uart_putchar+0xe>
	uart_putchar('\r', stream);
     522:	8d e0       	ldi	r24, 0x0D	; 13
     524:	0e 94 8d 02 	call	0x51a	; 0x51a <uart_putchar>
	while(!(UCSR0A &( 1 << UDRE0)));
     528:	e0 ec       	ldi	r30, 0xC0	; 192
     52a:	f0 e0       	ldi	r31, 0x00	; 0
     52c:	80 81       	ld	r24, Z
     52e:	85 ff       	sbrs	r24, 5
     530:	fd cf       	rjmp	.-6      	; 0x52c <uart_putchar+0x12>
	UDR0 = c;
     532:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	return 0;
}
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	cf 91       	pop	r28
     53c:	08 95       	ret

0000053e <init_uart>:

void init_uart(){
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     53e:	88 e1       	ldi	r24, 0x18	; 24
     540:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (3<<UCSZ00);
     544:	86 e0       	ldi	r24, 0x06	; 6
     546:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0L = 51;
     54a:	83 e3       	ldi	r24, 0x33	; 51
     54c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     550:	08 95       	ret

00000552 <__vector_14>:

	}
}

ISR(TIMER0_COMPA_vect)		// audio interrupt
{
     552:	1f 92       	push	r1
     554:	0f 92       	push	r0
     556:	0f b6       	in	r0, 0x3f	; 63
     558:	0f 92       	push	r0
     55a:	11 24       	eor	r1, r1
     55c:	8f 93       	push	r24
     55e:	9f 93       	push	r25
     560:	ef 93       	push	r30
     562:	ff 93       	push	r31
	DDRB |= (1<<1);
     564:	21 9a       	sbi	0x04, 1	; 4
	soundPlaying = 1;
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <soundPlaying>
	switch(note_index)
     56c:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <note_index>
     570:	90 91 ea 02 	lds	r25, 0x02EA	; 0x8002ea <note_index+0x1>
     574:	86 30       	cpi	r24, 0x06	; 6
     576:	91 05       	cpc	r25, r1
     578:	09 f4       	brne	.+2      	; 0x57c <__vector_14+0x2a>
     57a:	4e c0       	rjmp	.+156    	; 0x618 <__vector_14+0xc6>
     57c:	30 f4       	brcc	.+12     	; 0x58a <__vector_14+0x38>
     57e:	81 30       	cpi	r24, 0x01	; 1
     580:	91 05       	cpc	r25, r1
     582:	61 f0       	breq	.+24     	; 0x59c <__vector_14+0x4a>
     584:	03 97       	sbiw	r24, 0x03	; 3
     586:	49 f1       	breq	.+82     	; 0x5da <__vector_14+0x88>
     588:	7c c0       	rjmp	.+248    	; 0x682 <__vector_14+0x130>
     58a:	8e 30       	cpi	r24, 0x0E	; 14
     58c:	91 05       	cpc	r25, r1
     58e:	09 f4       	brne	.+2      	; 0x592 <__vector_14+0x40>
     590:	62 c0       	rjmp	.+196    	; 0x656 <__vector_14+0x104>
     592:	80 34       	cpi	r24, 0x40	; 64
     594:	91 05       	cpc	r25, r1
     596:	09 f4       	brne	.+2      	; 0x59a <__vector_14+0x48>
     598:	63 c0       	rjmp	.+198    	; 0x660 <__vector_14+0x10e>
     59a:	73 c0       	rjmp	.+230    	; 0x682 <__vector_14+0x130>
	{	//every 8ms
		
		case 0+1:	//0ms, 8ms on
		ICR1 = notes[beep_index];	//1st note
     59c:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <beep_index>
     5a0:	f0 91 ec 02 	lds	r31, 0x02EC	; 0x8002ec <beep_index+0x1>
     5a4:	ee 0f       	add	r30, r30
     5a6:	ff 1f       	adc	r31, r31
     5a8:	e8 53       	subi	r30, 0x38	; 56
     5aa:	fd 4f       	sbci	r31, 0xFD	; 253
     5ac:	80 81       	ld	r24, Z
     5ae:	91 81       	ldd	r25, Z+1	; 0x01
     5b0:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     5b4:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		OCR1A = notes[beep_index]/2;
     5b8:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <beep_index>
     5bc:	f0 91 ec 02 	lds	r31, 0x02EC	; 0x8002ec <beep_index+0x1>
     5c0:	ee 0f       	add	r30, r30
     5c2:	ff 1f       	adc	r31, r31
     5c4:	e8 53       	subi	r30, 0x38	; 56
     5c6:	fd 4f       	sbci	r31, 0xFD	; 253
     5c8:	80 81       	ld	r24, Z
     5ca:	91 81       	ldd	r25, Z+1	; 0x01
     5cc:	96 95       	lsr	r25
     5ce:	87 95       	ror	r24
     5d0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     5d4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		break;
     5d8:	54 c0       	rjmp	.+168    	; 0x682 <__vector_14+0x130>
		case 2+1:	// 16ms, 24, 32 on
		ICR1 = notes[beep_index+1];	//2nd note
     5da:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <beep_index>
     5de:	f0 91 ec 02 	lds	r31, 0x02EC	; 0x8002ec <beep_index+0x1>
     5e2:	ee 0f       	add	r30, r30
     5e4:	ff 1f       	adc	r31, r31
     5e6:	e6 53       	subi	r30, 0x36	; 54
     5e8:	fd 4f       	sbci	r31, 0xFD	; 253
     5ea:	80 81       	ld	r24, Z
     5ec:	91 81       	ldd	r25, Z+1	; 0x01
     5ee:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     5f2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		OCR1A = notes[beep_index]/2;
     5f6:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <beep_index>
     5fa:	f0 91 ec 02 	lds	r31, 0x02EC	; 0x8002ec <beep_index+0x1>
     5fe:	ee 0f       	add	r30, r30
     600:	ff 1f       	adc	r31, r31
     602:	e8 53       	subi	r30, 0x38	; 56
     604:	fd 4f       	sbci	r31, 0xFD	; 253
     606:	80 81       	ld	r24, Z
     608:	91 81       	ldd	r25, Z+1	; 0x01
     60a:	96 95       	lsr	r25
     60c:	87 95       	ror	r24
     60e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     612:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		break;
     616:	35 c0       	rjmp	.+106    	; 0x682 <__vector_14+0x130>
		case 5+1:	// 40ms, 48, 56, 64, 72, 80, 88, 96, on
		ICR1 = notes[beep_index+2];	// 3rd note
     618:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <beep_index>
     61c:	f0 91 ec 02 	lds	r31, 0x02EC	; 0x8002ec <beep_index+0x1>
     620:	ee 0f       	add	r30, r30
     622:	ff 1f       	adc	r31, r31
     624:	e4 53       	subi	r30, 0x34	; 52
     626:	fd 4f       	sbci	r31, 0xFD	; 253
     628:	80 81       	ld	r24, Z
     62a:	91 81       	ldd	r25, Z+1	; 0x01
     62c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     630:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		OCR1A = notes[beep_index]/2;
     634:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <beep_index>
     638:	f0 91 ec 02 	lds	r31, 0x02EC	; 0x8002ec <beep_index+0x1>
     63c:	ee 0f       	add	r30, r30
     63e:	ff 1f       	adc	r31, r31
     640:	e8 53       	subi	r30, 0x38	; 56
     642:	fd 4f       	sbci	r31, 0xFD	; 253
     644:	80 81       	ld	r24, Z
     646:	91 81       	ldd	r25, Z+1	; 0x01
     648:	96 95       	lsr	r25
     64a:	87 95       	ror	r24
     64c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     650:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		break;
     654:	16 c0       	rjmp	.+44     	; 0x682 <__vector_14+0x130>
		case 13+1:
		//ICR1 = 0;					//off
		OCR1A = 0;
     656:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     65a:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		break;
     65e:	11 c0       	rjmp	.+34     	; 0x682 <__vector_14+0x130>
		
		case 63+1:
		beep_index = 0;
     660:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <beep_index+0x1>
     664:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <beep_index>
		note_index = -1;
     668:	8f ef       	ldi	r24, 0xFF	; 255
     66a:	9f ef       	ldi	r25, 0xFF	; 255
     66c:	90 93 ea 02 	sts	0x02EA, r25	; 0x8002ea <note_index+0x1>
     670:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <note_index>
		TCCR0B &= ~(0b101 << CS00);
     674:	85 b5       	in	r24, 0x25	; 37
     676:	8a 7f       	andi	r24, 0xFA	; 250
     678:	85 bd       	out	0x25, r24	; 37
		TCNT0 = 0;
     67a:	16 bc       	out	0x26, r1	; 38
		DDRB &= ~(1<<1);
     67c:	21 98       	cbi	0x04, 1	; 4
		soundPlaying = 0;
     67e:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <soundPlaying>
		break;
	}
	note_index += 1;
     682:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <note_index>
     686:	90 91 ea 02 	lds	r25, 0x02EA	; 0x8002ea <note_index+0x1>
     68a:	01 96       	adiw	r24, 0x01	; 1
     68c:	90 93 ea 02 	sts	0x02EA, r25	; 0x8002ea <note_index+0x1>
     690:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <note_index>
}
     694:	ff 91       	pop	r31
     696:	ef 91       	pop	r30
     698:	9f 91       	pop	r25
     69a:	8f 91       	pop	r24
     69c:	0f 90       	pop	r0
     69e:	0f be       	out	0x3f, r0	; 63
     6a0:	0f 90       	pop	r0
     6a2:	1f 90       	pop	r1
     6a4:	18 95       	reti

000006a6 <__vector_42>:

ISR(TIMER4_COMPA_vect){		// use timer 4 for decreasing game time every 1s
     6a6:	1f 92       	push	r1
     6a8:	0f 92       	push	r0
     6aa:	0f b6       	in	r0, 0x3f	; 63
     6ac:	0f 92       	push	r0
     6ae:	11 24       	eor	r1, r1
     6b0:	8f 93       	push	r24
	if(TimeRemaining > 0){
     6b2:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <TimeRemaining>
     6b6:	88 23       	and	r24, r24
     6b8:	29 f0       	breq	.+10     	; 0x6c4 <__vector_42+0x1e>
		TimeRemaining--;
     6ba:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <TimeRemaining>
     6be:	81 50       	subi	r24, 0x01	; 1
     6c0:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <TimeRemaining>
	}
}
     6c4:	8f 91       	pop	r24
     6c6:	0f 90       	pop	r0
     6c8:	0f be       	out	0x3f, r0	; 63
     6ca:	0f 90       	pop	r0
     6cc:	1f 90       	pop	r1
     6ce:	18 95       	reti

000006d0 <ShowWinner>:
	}
	return;		// start the game

}

void ShowWinner(){
     6d0:	2f 92       	push	r2
     6d2:	3f 92       	push	r3
     6d4:	4f 92       	push	r4
     6d6:	5f 92       	push	r5
     6d8:	6f 92       	push	r6
     6da:	7f 92       	push	r7
     6dc:	8f 92       	push	r8
     6de:	af 92       	push	r10
     6e0:	bf 92       	push	r11
     6e2:	cf 92       	push	r12
     6e4:	df 92       	push	r13
     6e6:	ef 92       	push	r14
     6e8:	ff 92       	push	r15
     6ea:	1f 93       	push	r17
     6ec:	cf 93       	push	r28
     6ee:	df 93       	push	r29
	clearLeds(0);
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <clearLeds>
	if(GameMode && (P1Score == P2Score)){
     6f6:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <GameMode>
     6fa:	88 23       	and	r24, r24
     6fc:	09 f4       	brne	.+2      	; 0x700 <ShowWinner+0x30>
     6fe:	ed c0       	rjmp	.+474    	; 0x8da <ShowWinner+0x20a>
     700:	20 91 04 03 	lds	r18, 0x0304	; 0x800304 <P1Score>
     704:	30 91 05 03 	lds	r19, 0x0305	; 0x800305 <P1Score+0x1>
     708:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <P2Score>
     70c:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <P2Score+0x1>
     710:	28 17       	cp	r18, r24
     712:	39 07       	cpc	r19, r25
     714:	09 f0       	breq	.+2      	; 0x718 <ShowWinner+0x48>
     716:	dc c0       	rjmp	.+440    	; 0x8d0 <ShowWinner+0x200>
		GameMode = 0;		// if there's a tie, just show 1p winning screen	
     718:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <GameMode>
     71c:	de c0       	rjmp	.+444    	; 0x8da <ShowWinner+0x20a>
     71e:	74 2c       	mov	r7, r4
	}
	if(GameMode == 0){
		
		for(uint8_t count = 0; count < 12; count++){			// flash whole screen
			
			setScore(RIGHT, HighScore1P);
     720:	60 91 02 03 	lds	r22, 0x0302	; 0x800302 <HighScore1P>
     724:	70 91 03 03 	lds	r23, 0x0303	; 0x800303 <HighScore1P+0x1>
     728:	82 e0       	ldi	r24, 0x02	; 2
     72a:	0e 94 de 00 	call	0x1bc	; 0x1bc <setScore>
			setScore(LEFT, HighScore1P);
     72e:	60 91 02 03 	lds	r22, 0x0302	; 0x800302 <HighScore1P>
     732:	70 91 03 03 	lds	r23, 0x0303	; 0x800303 <HighScore1P+0x1>
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	0e 94 de 00 	call	0x1bc	; 0x1bc <setScore>
     73c:	e2 01       	movw	r28, r4
			
			for(uint8_t ledx = 0; ledx < 6; ledx++){
     73e:	81 2c       	mov	r8, r1
     740:	1a c0       	rjmp	.+52     	; 0x776 <ShowWinner+0xa6>
				for(uint8_t ledy = 0; ledy < 6; ledy++){
					setButtonLed(ledx, ledy, (ledx+ledy+count)%2 );
     742:	a5 01       	movw	r20, r10
     744:	41 70       	andi	r20, 0x01	; 1
     746:	50 78       	andi	r21, 0x80	; 128
     748:	55 23       	and	r21, r21
     74a:	34 f4       	brge	.+12     	; 0x758 <ShowWinner+0x88>
     74c:	41 50       	subi	r20, 0x01	; 1
     74e:	51 09       	sbc	r21, r1
     750:	4e 6f       	ori	r20, 0xFE	; 254
     752:	5f 6f       	ori	r21, 0xFF	; 255
     754:	4f 5f       	subi	r20, 0xFF	; 255
     756:	5f 4f       	sbci	r21, 0xFF	; 255
     758:	61 2f       	mov	r22, r17
     75a:	88 2d       	mov	r24, r8
     75c:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
			
			setScore(RIGHT, HighScore1P);
			setScore(LEFT, HighScore1P);
			
			for(uint8_t ledx = 0; ledx < 6; ledx++){
				for(uint8_t ledy = 0; ledy < 6; ledy++){
     760:	1f 5f       	subi	r17, 0xFF	; 255
     762:	2f ef       	ldi	r18, 0xFF	; 255
     764:	a2 1a       	sub	r10, r18
     766:	b2 0a       	sbc	r11, r18
     768:	16 30       	cpi	r17, 0x06	; 6
     76a:	59 f7       	brne	.-42     	; 0x742 <ShowWinner+0x72>
		for(uint8_t count = 0; count < 12; count++){			// flash whole screen
			
			setScore(RIGHT, HighScore1P);
			setScore(LEFT, HighScore1P);
			
			for(uint8_t ledx = 0; ledx < 6; ledx++){
     76c:	83 94       	inc	r8
     76e:	21 96       	adiw	r28, 0x01	; 1
     770:	86 e0       	ldi	r24, 0x06	; 6
     772:	88 16       	cp	r8, r24
     774:	19 f0       	breq	.+6      	; 0x77c <ShowWinner+0xac>
	}
	return;		// start the game

}

void ShowWinner(){
     776:	5e 01       	movw	r10, r28
     778:	10 e0       	ldi	r17, 0x00	; 0
     77a:	e3 cf       	rjmp	.-58     	; 0x742 <ShowWinner+0x72>
			for(uint8_t ledx = 0; ledx < 6; ledx++){
				for(uint8_t ledy = 0; ledy < 6; ledy++){
					setButtonLed(ledx, ledy, (ledx+ledy+count)%2 );
				}
			}
			if(SoundEnabled){
     77c:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <SoundEnabled>
     780:	88 23       	and	r24, r24
     782:	91 f0       	breq	.+36     	; 0x7a8 <ShowWinner+0xd8>
				DDRB |= (1<<1);	//play tone
     784:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[5+(count%4)];
     786:	e7 2d       	mov	r30, r7
     788:	e3 70       	andi	r30, 0x03	; 3
     78a:	f0 e0       	ldi	r31, 0x00	; 0
     78c:	ee 0f       	add	r30, r30
     78e:	ff 1f       	adc	r31, r31
     790:	ee 52       	subi	r30, 0x2E	; 46
     792:	fd 4f       	sbci	r31, 0xFD	; 253
     794:	80 81       	ld	r24, Z
     796:	91 81       	ldd	r25, Z+1	; 0x01
     798:	f6 01       	movw	r30, r12
     79a:	91 83       	std	Z+1, r25	; 0x01
     79c:	80 83       	st	Z, r24
				OCR1A = notes[5+(count%4)] / 2;
     79e:	96 95       	lsr	r25
     7a0:	87 95       	ror	r24
     7a2:	f7 01       	movw	r30, r14
     7a4:	91 83       	std	Z+1, r25	; 0x01
     7a6:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7a8:	ff ef       	ldi	r31, 0xFF	; 255
     7aa:	21 ee       	ldi	r18, 0xE1	; 225
     7ac:	84 e0       	ldi	r24, 0x04	; 4
     7ae:	f1 50       	subi	r31, 0x01	; 1
     7b0:	20 40       	sbci	r18, 0x00	; 0
     7b2:	80 40       	sbci	r24, 0x00	; 0
     7b4:	e1 f7       	brne	.-8      	; 0x7ae <ShowWinner+0xde>
     7b6:	00 c0       	rjmp	.+0      	; 0x7b8 <ShowWinner+0xe8>
     7b8:	00 00       	nop
     7ba:	9f ef       	ldi	r25, 0xFF	; 255
     7bc:	49 1a       	sub	r4, r25
     7be:	59 0a       	sbc	r5, r25
	if(GameMode && (P1Score == P2Score)){
		GameMode = 0;		// if there's a tie, just show 1p winning screen	
	}
	if(GameMode == 0){
		
		for(uint8_t count = 0; count < 12; count++){			// flash whole screen
     7c0:	ec e0       	ldi	r30, 0x0C	; 12
     7c2:	4e 16       	cp	r4, r30
     7c4:	51 04       	cpc	r5, r1
     7c6:	09 f0       	breq	.+2      	; 0x7ca <ShowWinner+0xfa>
     7c8:	aa cf       	rjmp	.-172    	; 0x71e <ShowWinner+0x4e>
				ICR1 = notes[5+(count%4)];
				OCR1A = notes[5+(count%4)] / 2;
			}
			_delay_ms(100);
		}
		DDRB &= ~(1<<1);
     7ca:	21 98       	cbi	0x04, 1	; 4
     7cc:	96 c0       	rjmp	.+300    	; 0x8fa <ShowWinner+0x22a>
		}else{										//2p mode, show winner every time
		uint8_t winnerhalf = P1Score > P2Score ? 0 : 3; //index half based on winner
     7ce:	0f 2e       	mov	r0, r31
     7d0:	f3 e0       	ldi	r31, 0x03	; 3
     7d2:	6f 2e       	mov	r6, r31
     7d4:	f0 2d       	mov	r31, r0
     7d6:	01 c0       	rjmp	.+2      	; 0x7da <ShowWinner+0x10a>
     7d8:	61 2c       	mov	r6, r1
		
		clearLeds(0);
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	0e 94 53 01 	call	0x2a6	; 0x2a6 <clearLeds>
     7e0:	21 2c       	mov	r2, r1
     7e2:	31 2c       	mov	r3, r1
     7e4:	0f 2e       	mov	r0, r31
     7e6:	f3 e0       	ldi	r31, 0x03	; 3
     7e8:	7f 2e       	mov	r7, r31
     7ea:	f0 2d       	mov	r31, r0
     7ec:	76 0c       	add	r7, r6
					setButtonLed(winnerhalf+ledx, ledy, (ledx+ledy+count)%2 );
				}
			}
			if(SoundEnabled){
				DDRB |= (1<<1);	//play tone
				ICR1 = notes[5+(count%4)];
     7ee:	0f 2e       	mov	r0, r31
     7f0:	f6 e8       	ldi	r31, 0x86	; 134
     7f2:	cf 2e       	mov	r12, r31
     7f4:	d1 2c       	mov	r13, r1
     7f6:	f0 2d       	mov	r31, r0
				OCR1A = notes[5+(count%4)] / 2;
     7f8:	0f 2e       	mov	r0, r31
     7fa:	f8 e8       	ldi	r31, 0x88	; 136
     7fc:	ef 2e       	mov	r14, r31
     7fe:	f1 2c       	mov	r15, r1
     800:	f0 2d       	mov	r31, r0
     802:	52 2c       	mov	r5, r2
		uint8_t winnerhalf = P1Score > P2Score ? 0 : 3; //index half based on winner
		
		clearLeds(0);
		for(uint8_t count = 0; count < 12; count++){			// flash whole screen
			
			if(P1Score > P2Score){
     804:	60 91 06 03 	lds	r22, 0x0306	; 0x800306 <P2Score>
     808:	70 91 07 03 	lds	r23, 0x0307	; 0x800307 <P2Score+0x1>
     80c:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <P1Score>
     810:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <P1Score+0x1>
     814:	68 17       	cp	r22, r24
     816:	79 07       	cpc	r23, r25
     818:	68 f4       	brcc	.+26     	; 0x834 <ShowWinner+0x164>
				setScore(RIGHT, 16);
     81a:	60 e1       	ldi	r22, 0x10	; 16
     81c:	70 e0       	ldi	r23, 0x00	; 0
     81e:	82 e0       	ldi	r24, 0x02	; 2
     820:	0e 94 de 00 	call	0x1bc	; 0x1bc <setScore>
				setScore(LEFT, P1Score);
     824:	60 91 04 03 	lds	r22, 0x0304	; 0x800304 <P1Score>
     828:	70 91 05 03 	lds	r23, 0x0305	; 0x800305 <P1Score+0x1>
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	0e 94 de 00 	call	0x1bc	; 0x1bc <setScore>
     832:	60 c0       	rjmp	.+192    	; 0x8f4 <ShowWinner+0x224>
			}else{
				setScore(RIGHT, P2Score);
     834:	82 e0       	ldi	r24, 0x02	; 2
     836:	0e 94 de 00 	call	0x1bc	; 0x1bc <setScore>
				setScore(LEFT, 16);
     83a:	60 e1       	ldi	r22, 0x10	; 16
     83c:	70 e0       	ldi	r23, 0x00	; 0
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	0e 94 de 00 	call	0x1bc	; 0x1bc <setScore>
     844:	57 c0       	rjmp	.+174    	; 0x8f4 <ShowWinner+0x224>
			}
			
			
			for(uint8_t ledx = 0; ledx < 3; ledx++){
				for(uint8_t ledy = 0; ledy < 6; ledy++){
					setButtonLed(winnerhalf+ledx, ledy, (ledx+ledy+count)%2 );
     846:	a5 01       	movw	r20, r10
     848:	41 70       	andi	r20, 0x01	; 1
     84a:	50 78       	andi	r21, 0x80	; 128
     84c:	55 23       	and	r21, r21
     84e:	34 f4       	brge	.+12     	; 0x85c <ShowWinner+0x18c>
     850:	41 50       	subi	r20, 0x01	; 1
     852:	51 09       	sbc	r21, r1
     854:	4e 6f       	ori	r20, 0xFE	; 254
     856:	5f 6f       	ori	r21, 0xFF	; 255
     858:	4f 5f       	subi	r20, 0xFF	; 255
     85a:	5f 4f       	sbci	r21, 0xFF	; 255
     85c:	61 2f       	mov	r22, r17
     85e:	88 2d       	mov	r24, r8
     860:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
				setScore(LEFT, 16);
			}
			
			
			for(uint8_t ledx = 0; ledx < 3; ledx++){
				for(uint8_t ledy = 0; ledy < 6; ledy++){
     864:	1f 5f       	subi	r17, 0xFF	; 255
     866:	ff ef       	ldi	r31, 0xFF	; 255
     868:	af 1a       	sub	r10, r31
     86a:	bf 0a       	sbc	r11, r31
     86c:	16 30       	cpi	r17, 0x06	; 6
     86e:	59 f7       	brne	.-42     	; 0x846 <ShowWinner+0x176>
     870:	21 96       	adiw	r28, 0x01	; 1
     872:	83 94       	inc	r8
				setScore(RIGHT, P2Score);
				setScore(LEFT, 16);
			}
			
			
			for(uint8_t ledx = 0; ledx < 3; ledx++){
     874:	78 14       	cp	r7, r8
     876:	19 f0       	breq	.+6      	; 0x87e <ShowWinner+0x1ae>
		}
		DDRB &= ~(1<<1);
		}else{										//2p mode, show winner every time
		uint8_t winnerhalf = P1Score > P2Score ? 0 : 3; //index half based on winner
		
		clearLeds(0);
     878:	5e 01       	movw	r10, r28
     87a:	10 e0       	ldi	r17, 0x00	; 0
     87c:	e4 cf       	rjmp	.-56     	; 0x846 <ShowWinner+0x176>
			for(uint8_t ledx = 0; ledx < 3; ledx++){
				for(uint8_t ledy = 0; ledy < 6; ledy++){
					setButtonLed(winnerhalf+ledx, ledy, (ledx+ledy+count)%2 );
				}
			}
			if(SoundEnabled){
     87e:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <SoundEnabled>
     882:	88 23       	and	r24, r24
     884:	91 f0       	breq	.+36     	; 0x8aa <ShowWinner+0x1da>
				DDRB |= (1<<1);	//play tone
     886:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[5+(count%4)];
     888:	e5 2d       	mov	r30, r5
     88a:	e3 70       	andi	r30, 0x03	; 3
     88c:	f0 e0       	ldi	r31, 0x00	; 0
     88e:	ee 0f       	add	r30, r30
     890:	ff 1f       	adc	r31, r31
     892:	ee 52       	subi	r30, 0x2E	; 46
     894:	fd 4f       	sbci	r31, 0xFD	; 253
     896:	80 81       	ld	r24, Z
     898:	91 81       	ldd	r25, Z+1	; 0x01
     89a:	f6 01       	movw	r30, r12
     89c:	91 83       	std	Z+1, r25	; 0x01
     89e:	80 83       	st	Z, r24
				OCR1A = notes[5+(count%4)] / 2;
     8a0:	96 95       	lsr	r25
     8a2:	87 95       	ror	r24
     8a4:	f7 01       	movw	r30, r14
     8a6:	91 83       	std	Z+1, r25	; 0x01
     8a8:	80 83       	st	Z, r24
     8aa:	ff ef       	ldi	r31, 0xFF	; 255
     8ac:	21 ee       	ldi	r18, 0xE1	; 225
     8ae:	84 e0       	ldi	r24, 0x04	; 4
     8b0:	f1 50       	subi	r31, 0x01	; 1
     8b2:	20 40       	sbci	r18, 0x00	; 0
     8b4:	80 40       	sbci	r24, 0x00	; 0
     8b6:	e1 f7       	brne	.-8      	; 0x8b0 <ShowWinner+0x1e0>
     8b8:	00 c0       	rjmp	.+0      	; 0x8ba <ShowWinner+0x1ea>
     8ba:	00 00       	nop
     8bc:	9f ef       	ldi	r25, 0xFF	; 255
     8be:	29 1a       	sub	r2, r25
     8c0:	39 0a       	sbc	r3, r25
		DDRB &= ~(1<<1);
		}else{										//2p mode, show winner every time
		uint8_t winnerhalf = P1Score > P2Score ? 0 : 3; //index half based on winner
		
		clearLeds(0);
		for(uint8_t count = 0; count < 12; count++){			// flash whole screen
     8c2:	ec e0       	ldi	r30, 0x0C	; 12
     8c4:	2e 16       	cp	r2, r30
     8c6:	31 04       	cpc	r3, r1
     8c8:	09 f0       	breq	.+2      	; 0x8cc <ShowWinner+0x1fc>
     8ca:	9b cf       	rjmp	.-202    	; 0x802 <ShowWinner+0x132>
				ICR1 = notes[5+(count%4)];
				OCR1A = notes[5+(count%4)] / 2;
			}
			_delay_ms(100);
		}
		DDRB &= ~(1<<1);
     8cc:	21 98       	cbi	0x04, 1	; 4
	}
}
     8ce:	15 c0       	rjmp	.+42     	; 0x8fa <ShowWinner+0x22a>
			}
			_delay_ms(100);
		}
		DDRB &= ~(1<<1);
		}else{										//2p mode, show winner every time
		uint8_t winnerhalf = P1Score > P2Score ? 0 : 3; //index half based on winner
     8d0:	82 17       	cp	r24, r18
     8d2:	93 07       	cpc	r25, r19
     8d4:	08 f4       	brcc	.+2      	; 0x8d8 <ShowWinner+0x208>
     8d6:	80 cf       	rjmp	.-256    	; 0x7d8 <ShowWinner+0x108>
     8d8:	7a cf       	rjmp	.-268    	; 0x7ce <ShowWinner+0xfe>
	}
	return;		// start the game

}

void ShowWinner(){
     8da:	41 2c       	mov	r4, r1
     8dc:	51 2c       	mov	r5, r1
					setButtonLed(ledx, ledy, (ledx+ledy+count)%2 );
				}
			}
			if(SoundEnabled){
				DDRB |= (1<<1);	//play tone
				ICR1 = notes[5+(count%4)];
     8de:	0f 2e       	mov	r0, r31
     8e0:	f6 e8       	ldi	r31, 0x86	; 134
     8e2:	cf 2e       	mov	r12, r31
     8e4:	d1 2c       	mov	r13, r1
     8e6:	f0 2d       	mov	r31, r0
				OCR1A = notes[5+(count%4)] / 2;
     8e8:	0f 2e       	mov	r0, r31
     8ea:	f8 e8       	ldi	r31, 0x88	; 136
     8ec:	ef 2e       	mov	r14, r31
     8ee:	f1 2c       	mov	r15, r1
     8f0:	f0 2d       	mov	r31, r0
     8f2:	15 cf       	rjmp	.-470    	; 0x71e <ShowWinner+0x4e>
		}
		DDRB &= ~(1<<1);
		}else{										//2p mode, show winner every time
		uint8_t winnerhalf = P1Score > P2Score ? 0 : 3; //index half based on winner
		
		clearLeds(0);
     8f4:	86 2c       	mov	r8, r6
     8f6:	e1 01       	movw	r28, r2
     8f8:	bf cf       	rjmp	.-130    	; 0x878 <ShowWinner+0x1a8>
			}
			_delay_ms(100);
		}
		DDRB &= ~(1<<1);
	}
}
     8fa:	df 91       	pop	r29
     8fc:	cf 91       	pop	r28
     8fe:	1f 91       	pop	r17
     900:	ff 90       	pop	r15
     902:	ef 90       	pop	r14
     904:	df 90       	pop	r13
     906:	cf 90       	pop	r12
     908:	bf 90       	pop	r11
     90a:	af 90       	pop	r10
     90c:	8f 90       	pop	r8
     90e:	7f 90       	pop	r7
     910:	6f 90       	pop	r6
     912:	5f 90       	pop	r5
     914:	4f 90       	pop	r4
     916:	3f 90       	pop	r3
     918:	2f 90       	pop	r2
     91a:	08 95       	ret

0000091c <IncrementScore>:

void IncrementScore(uint8_t Player, uint16_t value){
	if(Player == 0){
     91c:	81 11       	cpse	r24, r1
     91e:	11 c0       	rjmp	.+34     	; 0x942 <IncrementScore+0x26>
		P1Score += value;
		P1Score = P1Score > 999 ? 999 : P1Score;
     920:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <P1Score>
     924:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <P1Score+0x1>
     928:	68 0f       	add	r22, r24
     92a:	79 1f       	adc	r23, r25
     92c:	68 3e       	cpi	r22, 0xE8	; 232
     92e:	83 e0       	ldi	r24, 0x03	; 3
     930:	78 07       	cpc	r23, r24
     932:	10 f0       	brcs	.+4      	; 0x938 <IncrementScore+0x1c>
     934:	67 ee       	ldi	r22, 0xE7	; 231
     936:	73 e0       	ldi	r23, 0x03	; 3
     938:	70 93 05 03 	sts	0x0305, r23	; 0x800305 <P1Score+0x1>
     93c:	60 93 04 03 	sts	0x0304, r22	; 0x800304 <P1Score>
     940:	08 95       	ret
		}else if(Player == 1){
     942:	81 30       	cpi	r24, 0x01	; 1
     944:	81 f4       	brne	.+32     	; 0x966 <IncrementScore+0x4a>
		P2Score += value;
		P2Score = P2Score > 999 ? 999 : P2Score;
     946:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <P2Score>
     94a:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <P2Score+0x1>
     94e:	68 0f       	add	r22, r24
     950:	79 1f       	adc	r23, r25
     952:	68 3e       	cpi	r22, 0xE8	; 232
     954:	83 e0       	ldi	r24, 0x03	; 3
     956:	78 07       	cpc	r23, r24
     958:	10 f0       	brcs	.+4      	; 0x95e <IncrementScore+0x42>
     95a:	67 ee       	ldi	r22, 0xE7	; 231
     95c:	73 e0       	ldi	r23, 0x03	; 3
     95e:	70 93 07 03 	sts	0x0307, r23	; 0x800307 <P2Score+0x1>
     962:	60 93 06 03 	sts	0x0306, r22	; 0x800306 <P2Score>
     966:	08 95       	ret

00000968 <playChirp>:
		_delay_ms(1000);
	}
}

void playChirp(uint8_t tone){
	if(!SoundEnabled){
     968:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <SoundEnabled>
     96c:	99 23       	and	r25, r25
     96e:	59 f0       	breq	.+22     	; 0x986 <playChirp+0x1e>
		return;
	}
	beep_index = tone;
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <beep_index+0x1>
     976:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <beep_index>
	note_index = 0;
     97a:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <note_index+0x1>
     97e:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <note_index>
	TCCR0B = (0b101 << CS00);	//turn on clock for speaker
     982:	85 e0       	ldi	r24, 0x05	; 5
     984:	85 bd       	out	0x25, r24	; 37
     986:	08 95       	ret

00000988 <Bonus>:
	printf("GAMa ovar\n");
	// game is over, stop timer
	
}

void Bonus(){
     988:	2f 92       	push	r2
     98a:	3f 92       	push	r3
     98c:	4f 92       	push	r4
     98e:	5f 92       	push	r5
     990:	6f 92       	push	r6
     992:	7f 92       	push	r7
     994:	8f 92       	push	r8
     996:	9f 92       	push	r9
     998:	af 92       	push	r10
     99a:	bf 92       	push	r11
     99c:	cf 92       	push	r12
     99e:	df 92       	push	r13
     9a0:	ef 92       	push	r14
     9a2:	ff 92       	push	r15
     9a4:	0f 93       	push	r16
     9a6:	1f 93       	push	r17
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
     9ac:	cd b7       	in	r28, 0x3d	; 61
     9ae:	de b7       	in	r29, 0x3e	; 62
     9b0:	2b 97       	sbiw	r28, 0x0b	; 11
     9b2:	0f b6       	in	r0, 0x3f	; 63
     9b4:	f8 94       	cli
     9b6:	de bf       	out	0x3e, r29	; 62
     9b8:	0f be       	out	0x3f, r0	; 63
     9ba:	cd bf       	out	0x3d, r28	; 61

	// blink leds to indicate bonus round start

	for(uint8_t blinkIndex = 0; blinkIndex < 6; blinkIndex++){
     9bc:	10 e0       	ldi	r17, 0x00	; 0
		clearLeds(blinkIndex % 2);
		if(SoundEnabled){
			DDRB |= (1<<1);	//play page tone
			ICR1 = notes[blinkIndex % 2];
     9be:	0f 2e       	mov	r0, r31
     9c0:	f6 e8       	ldi	r31, 0x86	; 134
     9c2:	cf 2e       	mov	r12, r31
     9c4:	d1 2c       	mov	r13, r1
     9c6:	f0 2d       	mov	r31, r0
			OCR1A = notes[blinkIndex % 2] / 2;
     9c8:	0f 2e       	mov	r0, r31
     9ca:	f8 e8       	ldi	r31, 0x88	; 136
     9cc:	ef 2e       	mov	r14, r31
     9ce:	f1 2c       	mov	r15, r1
     9d0:	f0 2d       	mov	r31, r0
void Bonus(){

	// blink leds to indicate bonus round start

	for(uint8_t blinkIndex = 0; blinkIndex < 6; blinkIndex++){
		clearLeds(blinkIndex % 2);
     9d2:	01 2f       	mov	r16, r17
     9d4:	01 70       	andi	r16, 0x01	; 1
     9d6:	80 2f       	mov	r24, r16
     9d8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <clearLeds>
		if(SoundEnabled){
     9dc:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <SoundEnabled>
     9e0:	88 23       	and	r24, r24
     9e2:	e1 f0       	breq	.+56     	; 0xa1c <Bonus+0x94>
			DDRB |= (1<<1);	//play page tone
     9e4:	21 9a       	sbi	0x04, 1	; 4
			ICR1 = notes[blinkIndex % 2];
     9e6:	e0 2f       	mov	r30, r16
     9e8:	f0 e0       	ldi	r31, 0x00	; 0
     9ea:	ee 0f       	add	r30, r30
     9ec:	ff 1f       	adc	r31, r31
     9ee:	e8 53       	subi	r30, 0x38	; 56
     9f0:	fd 4f       	sbci	r31, 0xFD	; 253
     9f2:	80 81       	ld	r24, Z
     9f4:	91 81       	ldd	r25, Z+1	; 0x01
     9f6:	d6 01       	movw	r26, r12
     9f8:	11 96       	adiw	r26, 0x01	; 1
     9fa:	9c 93       	st	X, r25
     9fc:	8e 93       	st	-X, r24
			OCR1A = notes[blinkIndex % 2] / 2;
     9fe:	96 95       	lsr	r25
     a00:	87 95       	ror	r24
     a02:	f7 01       	movw	r30, r14
     a04:	91 83       	std	Z+1, r25	; 0x01
     a06:	80 83       	st	Z, r24
     a08:	ff e7       	ldi	r31, 0x7F	; 127
     a0a:	2a e1       	ldi	r18, 0x1A	; 26
     a0c:	56 e0       	ldi	r21, 0x06	; 6
     a0e:	f1 50       	subi	r31, 0x01	; 1
     a10:	20 40       	sbci	r18, 0x00	; 0
     a12:	50 40       	sbci	r21, 0x00	; 0
     a14:	e1 f7       	brne	.-8      	; 0xa0e <Bonus+0x86>
     a16:	00 c0       	rjmp	.+0      	; 0xa18 <Bonus+0x90>
     a18:	00 00       	nop
			_delay_ms(125);
			DDRB &= ~(1<<1);
     a1a:	21 98       	cbi	0x04, 1	; 4

void Bonus(){

	// blink leds to indicate bonus round start

	for(uint8_t blinkIndex = 0; blinkIndex < 6; blinkIndex++){
     a1c:	1f 5f       	subi	r17, 0xFF	; 255
     a1e:	16 30       	cpi	r17, 0x06	; 6
     a20:	c1 f6       	brne	.-80     	; 0x9d2 <Bonus+0x4a>
     a22:	8f ef       	ldi	r24, 0xFF	; 255
     a24:	94 e3       	ldi	r25, 0x34	; 52
     a26:	ac e0       	ldi	r26, 0x0C	; 12
     a28:	81 50       	subi	r24, 0x01	; 1
     a2a:	90 40       	sbci	r25, 0x00	; 0
     a2c:	a0 40       	sbci	r26, 0x00	; 0
     a2e:	e1 f7       	brne	.-8      	; 0xa28 <Bonus+0xa0>
     a30:	00 c0       	rjmp	.+0      	; 0xa32 <Bonus+0xaa>
     a32:	00 00       	nop
		}
		
	}
	_delay_ms(250);

	TimeRemaining = BonusTime;
     a34:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <BonusTime>
     a38:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <TimeRemaining>
	
	printf("STARTING BONUS\n");
     a3c:	80 e4       	ldi	r24, 0x40	; 64
     a3e:	91 e0       	ldi	r25, 0x01	; 1
     a40:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <puts>
	
	setScore(0, GameMode == 0 ? HighScore1P : HighScore2P);
     a44:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <GameMode>
     a48:	81 11       	cpse	r24, r1
     a4a:	05 c0       	rjmp	.+10     	; 0xa56 <Bonus+0xce>
     a4c:	60 91 02 03 	lds	r22, 0x0302	; 0x800302 <HighScore1P>
     a50:	70 91 03 03 	lds	r23, 0x0303	; 0x800303 <HighScore1P+0x1>
     a54:	04 c0       	rjmp	.+8      	; 0xa5e <Bonus+0xd6>
     a56:	60 91 16 03 	lds	r22, 0x0316	; 0x800316 <HighScore2P>
     a5a:	70 91 17 03 	lds	r23, 0x0317	; 0x800317 <HighScore2P+0x1>
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	0e 94 de 00 	call	0x1bc	; 0x1bc <setScore>
	uint8_t pressed[] = {0,0,0,0,0,0};
     a64:	fe 01       	movw	r30, r28
     a66:	31 96       	adiw	r30, 0x01	; 1
     a68:	86 e0       	ldi	r24, 0x06	; 6
     a6a:	df 01       	movw	r26, r30
     a6c:	1d 92       	st	X+, r1
     a6e:	8a 95       	dec	r24
     a70:	e9 f7       	brne	.-6      	; 0xa6c <Bonus+0xe4>
	TCNT4 = 0;
     a72:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7e00a5>
     a76:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7e00a4>
	uint8_t lastTime = TimeRemaining;
     a7a:	b0 91 01 03 	lds	r27, 0x0301	; 0x800301 <TimeRemaining>
     a7e:	bf 83       	std	Y+7, r27	; 0x07
	while(TimeRemaining > 0){
		
		if(SoundEnabled & (lastTime != TimeRemaining) & (soundPlaying == 0)){
     a80:	88 24       	eor	r8, r8
     a82:	83 94       	inc	r8
     a84:	91 2c       	mov	r9, r1
		}

		for(uint8_t x = 0; x < 6; x++){
			for(uint8_t y = 1; y < 6; y++){
				uint8_t isavail = (pressed[x] & (1 << y)) == 0 ? 1 : 0;
				setButtonLed(x,y,isavail);
     a86:	44 24       	eor	r4, r4
     a88:	43 94       	inc	r4
     a8a:	21 2c       	mov	r2, r1
	
	setScore(0, GameMode == 0 ? HighScore1P : HighScore2P);
	uint8_t pressed[] = {0,0,0,0,0,0};
	TCNT4 = 0;
	uint8_t lastTime = TimeRemaining;
	while(TimeRemaining > 0){
     a8c:	ca c0       	rjmp	.+404    	; 0xc22 <Bonus+0x29a>
		
		if(SoundEnabled & (lastTime != TimeRemaining) & (soundPlaying == 0)){
     a8e:	40 91 01 03 	lds	r20, 0x0301	; 0x800301 <TimeRemaining>
     a92:	50 91 13 03 	lds	r21, 0x0313	; 0x800313 <soundPlaying>
     a96:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <SoundEnabled>
     a9a:	28 2f       	mov	r18, r24
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	c4 01       	movw	r24, r8
     aa0:	55 23       	and	r21, r21
     aa2:	11 f0       	breq	.+4      	; 0xaa8 <Bonus+0x120>
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	82 23       	and	r24, r18
     aaa:	93 23       	and	r25, r19
     aac:	94 01       	movw	r18, r8
     aae:	ef 81       	ldd	r30, Y+7	; 0x07
     ab0:	e4 13       	cpse	r30, r20
     ab2:	02 c0       	rjmp	.+4      	; 0xab8 <Bonus+0x130>
     ab4:	20 e0       	ldi	r18, 0x00	; 0
     ab6:	30 e0       	ldi	r19, 0x00	; 0
     ab8:	82 23       	and	r24, r18
     aba:	93 23       	and	r25, r19
     abc:	89 2b       	or	r24, r25
     abe:	91 f1       	breq	.+100    	; 0xb24 <Bonus+0x19c>
			lastTime = TimeRemaining;
     ac0:	f0 91 01 03 	lds	r31, 0x0301	; 0x800301 <TimeRemaining>
     ac4:	ff 83       	std	Y+7, r31	; 0x07
			DDRB |= (1<<1);	//make ticking noise
     ac6:	21 9a       	sbi	0x04, 1	; 4
			ICR1 = notes[4 + (TimeRemaining%2)];
     ac8:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <TimeRemaining>
     acc:	81 70       	andi	r24, 0x01	; 1
     ace:	88 87       	std	Y+8, r24	; 0x08
     ad0:	19 86       	std	Y+9, r1	; 0x09
     ad2:	e8 85       	ldd	r30, Y+8	; 0x08
     ad4:	f9 85       	ldd	r31, Y+9	; 0x09
     ad6:	34 96       	adiw	r30, 0x04	; 4
     ad8:	ee 0f       	add	r30, r30
     ada:	ff 1f       	adc	r31, r31
     adc:	e8 53       	subi	r30, 0x38	; 56
     ade:	fd 4f       	sbci	r31, 0xFD	; 253
     ae0:	80 81       	ld	r24, Z
     ae2:	91 81       	ldd	r25, Z+1	; 0x01
     ae4:	a6 e8       	ldi	r26, 0x86	; 134
     ae6:	b0 e0       	ldi	r27, 0x00	; 0
     ae8:	11 96       	adiw	r26, 0x01	; 1
     aea:	9c 93       	st	X, r25
     aec:	8e 93       	st	-X, r24
			OCR1A = notes[4 + (TimeRemaining%2)] / 2;
     aee:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <TimeRemaining>
     af2:	81 70       	andi	r24, 0x01	; 1
     af4:	8a 87       	std	Y+10, r24	; 0x0a
     af6:	1b 86       	std	Y+11, r1	; 0x0b
     af8:	ea 85       	ldd	r30, Y+10	; 0x0a
     afa:	fb 85       	ldd	r31, Y+11	; 0x0b
     afc:	34 96       	adiw	r30, 0x04	; 4
     afe:	ee 0f       	add	r30, r30
     b00:	ff 1f       	adc	r31, r31
     b02:	e8 53       	subi	r30, 0x38	; 56
     b04:	fd 4f       	sbci	r31, 0xFD	; 253
     b06:	80 81       	ld	r24, Z
     b08:	91 81       	ldd	r25, Z+1	; 0x01
     b0a:	96 95       	lsr	r25
     b0c:	87 95       	ror	r24
     b0e:	e8 e8       	ldi	r30, 0x88	; 136
     b10:	f0 e0       	ldi	r31, 0x00	; 0
     b12:	91 83       	std	Z+1, r25	; 0x01
     b14:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b16:	8f ea       	ldi	r24, 0xAF	; 175
     b18:	96 e3       	ldi	r25, 0x36	; 54
     b1a:	01 97       	sbiw	r24, 0x01	; 1
     b1c:	f1 f7       	brne	.-4      	; 0xb1a <Bonus+0x192>
     b1e:	00 c0       	rjmp	.+0      	; 0xb20 <Bonus+0x198>
     b20:	00 00       	nop
			_delay_us(3500);
			DDRB &= ~(1<<1);
     b22:	21 98       	cbi	0x04, 1	; 4
		}
		
		setScore(1, TimeRemaining);
     b24:	60 91 01 03 	lds	r22, 0x0301	; 0x800301 <TimeRemaining>
     b28:	70 e0       	ldi	r23, 0x00	; 0
     b2a:	81 e0       	ldi	r24, 0x01	; 1
     b2c:	0e 94 de 00 	call	0x1bc	; 0x1bc <setScore>
		if(GameMode){
     b30:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <GameMode>
     b34:	88 23       	and	r24, r24
     b36:	79 f0       	breq	.+30     	; 0xb56 <Bonus+0x1ce>
			setScore(0, P1Score);	// if 2p mode, show left p1 and right p2 scores
     b38:	60 91 04 03 	lds	r22, 0x0304	; 0x800304 <P1Score>
     b3c:	70 91 05 03 	lds	r23, 0x0305	; 0x800305 <P1Score+0x1>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	0e 94 de 00 	call	0x1bc	; 0x1bc <setScore>
			setScore(2, P2Score);
     b46:	60 91 06 03 	lds	r22, 0x0306	; 0x800306 <P2Score>
     b4a:	70 91 07 03 	lds	r23, 0x0307	; 0x800307 <P2Score+0x1>
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	0e 94 de 00 	call	0x1bc	; 0x1bc <setScore>
     b54:	77 c0       	rjmp	.+238    	; 0xc44 <Bonus+0x2bc>
			}else{
			setScore(2, P1Score);	// otherwise show p1 score and high score
     b56:	60 91 04 03 	lds	r22, 0x0304	; 0x800304 <P1Score>
     b5a:	70 91 05 03 	lds	r23, 0x0305	; 0x800305 <P1Score+0x1>
     b5e:	82 e0       	ldi	r24, 0x02	; 2
     b60:	0e 94 de 00 	call	0x1bc	; 0x1bc <setScore>
     b64:	6f c0       	rjmp	.+222    	; 0xc44 <Bonus+0x2bc>
     b66:	b0 2e       	mov	r11, r16
		}

		for(uint8_t x = 0; x < 6; x++){
			for(uint8_t y = 1; y < 6; y++){
				uint8_t isavail = (pressed[x] & (1 << y)) == 0 ? 1 : 0;
     b68:	d7 01       	movw	r26, r14
     b6a:	5c 90       	ld	r5, X
     b6c:	30 2e       	mov	r3, r16
     b6e:	85 2d       	mov	r24, r5
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	00 2e       	mov	r0, r16
     b74:	02 c0       	rjmp	.+4      	; 0xb7a <Bonus+0x1f2>
     b76:	95 95       	asr	r25
     b78:	87 95       	ror	r24
     b7a:	0a 94       	dec	r0
     b7c:	e2 f7       	brpl	.-8      	; 0xb76 <Bonus+0x1ee>
				setButtonLed(x,y,isavail);
     b7e:	44 2d       	mov	r20, r4
     b80:	3c 01       	movw	r6, r24
     b82:	b1 e0       	ldi	r27, 0x01	; 1
     b84:	6b 22       	and	r6, r27
     b86:	77 24       	eor	r7, r7
     b88:	80 fd       	sbrc	r24, 0
     b8a:	42 2d       	mov	r20, r2
     b8c:	6b 2d       	mov	r22, r11
     b8e:	8a 2d       	mov	r24, r10
     b90:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
				
				if(isButtonDown(x,y) && isavail){
     b94:	6b 2d       	mov	r22, r11
     b96:	8a 2d       	mov	r24, r10
     b98:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
     b9c:	88 23       	and	r24, r24
     b9e:	71 f1       	breq	.+92     	; 0xbfc <Bonus+0x274>
     ba0:	67 28       	or	r6, r7
     ba2:	61 f5       	brne	.+88     	; 0xbfc <Bonus+0x274>
					playChirp(1);
     ba4:	84 2d       	mov	r24, r4
     ba6:	0e 94 b4 04 	call	0x968	; 0x968 <playChirp>
					pressed[x] |= (1 << y);
     baa:	c4 01       	movw	r24, r8
     bac:	02 c0       	rjmp	.+4      	; 0xbb2 <Bonus+0x22a>
     bae:	88 0f       	add	r24, r24
     bb0:	99 1f       	adc	r25, r25
     bb2:	3a 94       	dec	r3
     bb4:	e2 f7       	brpl	.-8      	; 0xbae <Bonus+0x226>
     bb6:	58 2a       	or	r5, r24
     bb8:	f6 01       	movw	r30, r12
     bba:	50 82       	st	Z, r5
					if((x >= 3) && (GameMode)){	//player 2 bonus
     bbc:	f2 e0       	ldi	r31, 0x02	; 2
     bbe:	fa 15       	cp	r31, r10
     bc0:	88 f4       	brcc	.+34     	; 0xbe4 <Bonus+0x25c>
     bc2:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <GameMode>
     bc6:	88 23       	and	r24, r24
     bc8:	69 f0       	breq	.+26     	; 0xbe4 <Bonus+0x25c>
						P2Score += BonusPointCount;
     bca:	20 91 18 03 	lds	r18, 0x0318	; 0x800318 <BonusPointCount>
     bce:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <P2Score>
     bd2:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <P2Score+0x1>
     bd6:	82 0f       	add	r24, r18
     bd8:	91 1d       	adc	r25, r1
     bda:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <P2Score+0x1>
     bde:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <P2Score>
     be2:	0c c0       	rjmp	.+24     	; 0xbfc <Bonus+0x274>
						}else{
						P1Score += BonusPointCount;
     be4:	20 91 18 03 	lds	r18, 0x0318	; 0x800318 <BonusPointCount>
     be8:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <P1Score>
     bec:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <P1Score+0x1>
     bf0:	82 0f       	add	r24, r18
     bf2:	91 1d       	adc	r25, r1
     bf4:	90 93 05 03 	sts	0x0305, r25	; 0x800305 <P1Score+0x1>
     bf8:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <P1Score>
     bfc:	0f 5f       	subi	r16, 0xFF	; 255
     bfe:	1f 4f       	sbci	r17, 0xFF	; 255
			}else{
			setScore(2, P1Score);	// otherwise show p1 score and high score
		}

		for(uint8_t x = 0; x < 6; x++){
			for(uint8_t y = 1; y < 6; y++){
     c00:	06 30       	cpi	r16, 0x06	; 6
     c02:	11 05       	cpc	r17, r1
     c04:	09 f0       	breq	.+2      	; 0xc08 <Bonus+0x280>
     c06:	af cf       	rjmp	.-162    	; 0xb66 <Bonus+0x1de>
     c08:	6a 2c       	mov	r6, r10
			setScore(2, P2Score);
			}else{
			setScore(2, P1Score);	// otherwise show p1 score and high score
		}

		for(uint8_t x = 0; x < 6; x++){
     c0a:	63 94       	inc	r6
     c0c:	2f ef       	ldi	r18, 0xFF	; 255
     c0e:	e2 1a       	sub	r14, r18
     c10:	f2 0a       	sbc	r15, r18
     c12:	56 e0       	ldi	r21, 0x06	; 6
     c14:	65 16       	cp	r6, r21
     c16:	29 f0       	breq	.+10     	; 0xc22 <Bonus+0x29a>

void Bonus(){

	// blink leds to indicate bonus round start

	for(uint8_t blinkIndex = 0; blinkIndex < 6; blinkIndex++){
     c18:	01 e0       	ldi	r16, 0x01	; 1
     c1a:	10 e0       	ldi	r17, 0x00	; 0
     c1c:	67 01       	movw	r12, r14
     c1e:	a6 2c       	mov	r10, r6
     c20:	a2 cf       	rjmp	.-188    	; 0xb66 <Bonus+0x1de>
	
	setScore(0, GameMode == 0 ? HighScore1P : HighScore2P);
	uint8_t pressed[] = {0,0,0,0,0,0};
	TCNT4 = 0;
	uint8_t lastTime = TimeRemaining;
	while(TimeRemaining > 0){
     c22:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <TimeRemaining>
     c26:	81 11       	cpse	r24, r1
     c28:	32 cf       	rjmp	.-412    	; 0xa8e <Bonus+0x106>
			}
		}
		
	}
	
	setScoreSegment(TIMER1, 18); // 18 is the dash
     c2a:	62 e1       	ldi	r22, 0x12	; 18
     c2c:	83 e0       	ldi	r24, 0x03	; 3
     c2e:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
	setScoreSegment(TIMER10, 18);
     c32:	62 e1       	ldi	r22, 0x12	; 18
     c34:	84 e0       	ldi	r24, 0x04	; 4
     c36:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
	setScoreSegment(TIMER100, 18);
     c3a:	62 e1       	ldi	r22, 0x12	; 18
     c3c:	85 e0       	ldi	r24, 0x05	; 5
     c3e:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>

}
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <Bonus+0x2c6>
     c44:	ce 01       	movw	r24, r28
     c46:	01 96       	adiw	r24, 0x01	; 1
     c48:	7c 01       	movw	r14, r24

void Bonus(){

	// blink leds to indicate bonus round start

	for(uint8_t blinkIndex = 0; blinkIndex < 6; blinkIndex++){
     c4a:	61 2c       	mov	r6, r1
     c4c:	e5 cf       	rjmp	.-54     	; 0xc18 <Bonus+0x290>
	
	setScoreSegment(TIMER1, 18); // 18 is the dash
	setScoreSegment(TIMER10, 18);
	setScoreSegment(TIMER100, 18);

}
     c4e:	2b 96       	adiw	r28, 0x0b	; 11
     c50:	0f b6       	in	r0, 0x3f	; 63
     c52:	f8 94       	cli
     c54:	de bf       	out	0x3e, r29	; 62
     c56:	0f be       	out	0x3f, r0	; 63
     c58:	cd bf       	out	0x3d, r28	; 61
     c5a:	df 91       	pop	r29
     c5c:	cf 91       	pop	r28
     c5e:	1f 91       	pop	r17
     c60:	0f 91       	pop	r16
     c62:	ff 90       	pop	r15
     c64:	ef 90       	pop	r14
     c66:	df 90       	pop	r13
     c68:	cf 90       	pop	r12
     c6a:	bf 90       	pop	r11
     c6c:	af 90       	pop	r10
     c6e:	9f 90       	pop	r9
     c70:	8f 90       	pop	r8
     c72:	7f 90       	pop	r7
     c74:	6f 90       	pop	r6
     c76:	5f 90       	pop	r5
     c78:	4f 90       	pop	r4
     c7a:	3f 90       	pop	r3
     c7c:	2f 90       	pop	r2
     c7e:	08 95       	ret

00000c80 <Display321>:
2, 3, 2, 2, 2, 3, 2, 1, 0, 0, 0};
const uint8_t onledsY[33] = {1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5,
	1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5,
1, 2, 2, 3, 4, 5, 5, 5, 0, 0, 0};

void Display321(){
     c80:	7f 92       	push	r7
     c82:	8f 92       	push	r8
     c84:	9f 92       	push	r9
     c86:	af 92       	push	r10
     c88:	bf 92       	push	r11
     c8a:	cf 92       	push	r12
     c8c:	df 92       	push	r13
     c8e:	ef 92       	push	r14
     c90:	ff 92       	push	r15
     c92:	0f 93       	push	r16
     c94:	1f 93       	push	r17
     c96:	cf 93       	push	r28
     c98:	df 93       	push	r29
	
	clearLeds(0);
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <clearLeds>
	
	if(GameMode){	//light up 2p button
     ca0:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <GameMode>
     ca4:	88 23       	and	r24, r24
     ca6:	b1 f1       	breq	.+108    	; 0xd14 <Display321+0x94>
     ca8:	08 ec       	ldi	r16, 0xC8	; 200
     caa:	12 e0       	ldi	r17, 0x02	; 2
     cac:	c0 e0       	ldi	r28, 0x00	; 0
		for(uint8_t i = 0; i < 8; i++){
			setButtonLed(Player2ButtonX, Player2ButtonY, i%2);
			if(SoundEnabled){
				DDRB |= (1<<1);	//play page tone
				ICR1 = notes[i];
     cae:	0f 2e       	mov	r0, r31
     cb0:	f6 e8       	ldi	r31, 0x86	; 134
     cb2:	cf 2e       	mov	r12, r31
     cb4:	d1 2c       	mov	r13, r1
     cb6:	f0 2d       	mov	r31, r0
				OCR1A = notes[i] / 2;
     cb8:	0f 2e       	mov	r0, r31
     cba:	f8 e8       	ldi	r31, 0x88	; 136
     cbc:	ef 2e       	mov	r14, r31
     cbe:	f1 2c       	mov	r15, r1
     cc0:	f0 2d       	mov	r31, r0
	
	clearLeds(0);
	
	if(GameMode){	//light up 2p button
		for(uint8_t i = 0; i < 8; i++){
			setButtonLed(Player2ButtonX, Player2ButtonY, i%2);
     cc2:	4c 2f       	mov	r20, r28
     cc4:	41 70       	andi	r20, 0x01	; 1
     cc6:	60 e0       	ldi	r22, 0x00	; 0
     cc8:	82 e0       	ldi	r24, 0x02	; 2
     cca:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
			if(SoundEnabled){
     cce:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <SoundEnabled>
     cd2:	88 23       	and	r24, r24
     cd4:	79 f0       	breq	.+30     	; 0xcf4 <Display321+0x74>
				DDRB |= (1<<1);	//play page tone
     cd6:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[i];
     cd8:	f8 01       	movw	r30, r16
     cda:	80 81       	ld	r24, Z
     cdc:	91 81       	ldd	r25, Z+1	; 0x01
     cde:	f6 01       	movw	r30, r12
     ce0:	91 83       	std	Z+1, r25	; 0x01
     ce2:	80 83       	st	Z, r24
				OCR1A = notes[i] / 2;
     ce4:	f8 01       	movw	r30, r16
     ce6:	80 81       	ld	r24, Z
     ce8:	91 81       	ldd	r25, Z+1	; 0x01
     cea:	96 95       	lsr	r25
     cec:	87 95       	ror	r24
     cee:	f7 01       	movw	r30, r14
     cf0:	91 83       	std	Z+1, r25	; 0x01
     cf2:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cf4:	ff ef       	ldi	r31, 0xFF	; 255
     cf6:	26 e0       	ldi	r18, 0x06	; 6
     cf8:	83 e0       	ldi	r24, 0x03	; 3
     cfa:	f1 50       	subi	r31, 0x01	; 1
     cfc:	20 40       	sbci	r18, 0x00	; 0
     cfe:	80 40       	sbci	r24, 0x00	; 0
     d00:	e1 f7       	brne	.-8      	; 0xcfa <Display321+0x7a>
     d02:	00 c0       	rjmp	.+0      	; 0xd04 <Display321+0x84>
     d04:	00 00       	nop
			}
			_delay_ms(62);
			DDRB &= ~(1<<1);
     d06:	21 98       	cbi	0x04, 1	; 4
void Display321(){
	
	clearLeds(0);
	
	if(GameMode){	//light up 2p button
		for(uint8_t i = 0; i < 8; i++){
     d08:	cf 5f       	subi	r28, 0xFF	; 255
     d0a:	0e 5f       	subi	r16, 0xFE	; 254
     d0c:	1f 4f       	sbci	r17, 0xFF	; 255
     d0e:	c8 30       	cpi	r28, 0x08	; 8
     d10:	c1 f6       	brne	.-80     	; 0xcc2 <Display321+0x42>
     d12:	35 c0       	rjmp	.+106    	; 0xd7e <Display321+0xfe>
     d14:	08 ec       	ldi	r16, 0xC8	; 200
     d16:	12 e0       	ldi	r17, 0x02	; 2

void Display321(){
	
	clearLeds(0);
	
	if(GameMode){	//light up 2p button
     d18:	c0 e0       	ldi	r28, 0x00	; 0
		}else{
		for(uint8_t i = 0; i < 8; i++){
			setButtonLed(Player1ButtonX, Player1ButtonY, i%2);
			if(SoundEnabled){
				DDRB |= (1<<1);	//play page tone
				ICR1 = notes[i];
     d1a:	0f 2e       	mov	r0, r31
     d1c:	f6 e8       	ldi	r31, 0x86	; 134
     d1e:	cf 2e       	mov	r12, r31
     d20:	d1 2c       	mov	r13, r1
     d22:	f0 2d       	mov	r31, r0
				OCR1A = notes[i] / 2;
     d24:	0f 2e       	mov	r0, r31
     d26:	f8 e8       	ldi	r31, 0x88	; 136
     d28:	ef 2e       	mov	r14, r31
     d2a:	f1 2c       	mov	r15, r1
     d2c:	f0 2d       	mov	r31, r0
			_delay_ms(62);
			DDRB &= ~(1<<1);
		}
		}else{
		for(uint8_t i = 0; i < 8; i++){
			setButtonLed(Player1ButtonX, Player1ButtonY, i%2);
     d2e:	4c 2f       	mov	r20, r28
     d30:	41 70       	andi	r20, 0x01	; 1
     d32:	60 e0       	ldi	r22, 0x00	; 0
     d34:	83 e0       	ldi	r24, 0x03	; 3
     d36:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
			if(SoundEnabled){
     d3a:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <SoundEnabled>
     d3e:	88 23       	and	r24, r24
     d40:	79 f0       	breq	.+30     	; 0xd60 <Display321+0xe0>
				DDRB |= (1<<1);	//play page tone
     d42:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[i];
     d44:	f8 01       	movw	r30, r16
     d46:	80 81       	ld	r24, Z
     d48:	91 81       	ldd	r25, Z+1	; 0x01
     d4a:	f6 01       	movw	r30, r12
     d4c:	91 83       	std	Z+1, r25	; 0x01
     d4e:	80 83       	st	Z, r24
				OCR1A = notes[i] / 2;
     d50:	f8 01       	movw	r30, r16
     d52:	80 81       	ld	r24, Z
     d54:	91 81       	ldd	r25, Z+1	; 0x01
     d56:	96 95       	lsr	r25
     d58:	87 95       	ror	r24
     d5a:	f7 01       	movw	r30, r14
     d5c:	91 83       	std	Z+1, r25	; 0x01
     d5e:	80 83       	st	Z, r24
     d60:	ff ef       	ldi	r31, 0xFF	; 255
     d62:	26 e0       	ldi	r18, 0x06	; 6
     d64:	83 e0       	ldi	r24, 0x03	; 3
     d66:	f1 50       	subi	r31, 0x01	; 1
     d68:	20 40       	sbci	r18, 0x00	; 0
     d6a:	80 40       	sbci	r24, 0x00	; 0
     d6c:	e1 f7       	brne	.-8      	; 0xd66 <Display321+0xe6>
     d6e:	00 c0       	rjmp	.+0      	; 0xd70 <Display321+0xf0>
     d70:	00 00       	nop
			}
			_delay_ms(62);
			DDRB &= ~(1<<1);
     d72:	21 98       	cbi	0x04, 1	; 4
			}
			_delay_ms(62);
			DDRB &= ~(1<<1);
		}
		}else{
		for(uint8_t i = 0; i < 8; i++){
     d74:	cf 5f       	subi	r28, 0xFF	; 255
     d76:	0e 5f       	subi	r16, 0xFE	; 254
     d78:	1f 4f       	sbci	r17, 0xFF	; 255
     d7a:	c8 30       	cpi	r28, 0x08	; 8
     d7c:	c1 f6       	brne	.-80     	; 0xd2e <Display321+0xae>
     d7e:	9f ef       	ldi	r25, 0xFF	; 255
     d80:	ec eb       	ldi	r30, 0xBC	; 188
     d82:	ff e1       	ldi	r31, 0x1F	; 31
     d84:	91 50       	subi	r25, 0x01	; 1
     d86:	e0 40       	sbci	r30, 0x00	; 0
     d88:	f0 40       	sbci	r31, 0x00	; 0
     d8a:	e1 f7       	brne	.-8      	; 0xd84 <Display321+0x104>
     d8c:	00 c0       	rjmp	.+0      	; 0xd8e <Display321+0x10e>
     d8e:	00 00       	nop
     d90:	0f 2e       	mov	r0, r31
     d92:	f6 e8       	ldi	r31, 0x86	; 134
     d94:	8f 2e       	mov	r8, r31
     d96:	f2 e0       	ldi	r31, 0x02	; 2
     d98:	9f 2e       	mov	r9, r31
     d9a:	f0 2d       	mov	r31, r0
     d9c:	0f 2e       	mov	r0, r31
     d9e:	f7 ea       	ldi	r31, 0xA7	; 167
     da0:	cf 2e       	mov	r12, r31
     da2:	f2 e0       	ldi	r31, 0x02	; 2
     da4:	df 2e       	mov	r13, r31
     da6:	f0 2d       	mov	r31, r0
     da8:	71 2c       	mov	r7, r1
     daa:	0f 2e       	mov	r0, r31
     dac:	f3 e0       	ldi	r31, 0x03	; 3
     dae:	ef 2e       	mov	r14, r31
     db0:	f1 2c       	mov	r15, r1
     db2:	f0 2d       	mov	r31, r0
	_delay_ms(650);
	for(uint8_t count = 3; count >= 1; count--){
		for(uint8_t disp = 0; disp < 3; disp++){
			setScore(disp, count);
		}
		printf("%d\n", count);
     db4:	0f 2e       	mov	r0, r31
     db6:	fe e6       	ldi	r31, 0x6E	; 110
     db8:	af 2e       	mov	r10, r31
     dba:	f1 e0       	ldi	r31, 0x01	; 1
     dbc:	bf 2e       	mov	r11, r31
     dbe:	f0 2d       	mov	r31, r0
     dc0:	21 c0       	rjmp	.+66     	; 0xe04 <Display321+0x184>
		clearLeds(0);
		
		for(uint8_t index = 0; index < 11; index++){
			setButtonLed(onledsX[index + ((3-count)*11)], onledsY[index + ((3-count)*11)], 1);
     dc2:	f4 01       	movw	r30, r8
     dc4:	61 91       	ld	r22, Z+
     dc6:	4f 01       	movw	r8, r30
     dc8:	41 e0       	ldi	r20, 0x01	; 1
     dca:	89 91       	ld	r24, Y+
     dcc:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
			setScore(disp, count);
		}
		printf("%d\n", count);
		clearLeds(0);
		
		for(uint8_t index = 0; index < 11; index++){
     dd0:	80 16       	cp	r8, r16
     dd2:	91 06       	cpc	r9, r17
     dd4:	b1 f7       	brne	.-20     	; 0xdc2 <Display321+0x142>
			setButtonLed(onledsX[index + ((3-count)*11)], onledsY[index + ((3-count)*11)], 1);
		}
		playChirp(3-count);
     dd6:	87 2d       	mov	r24, r7
     dd8:	0e 94 b4 04 	call	0x968	; 0x968 <playChirp>
     ddc:	ff ef       	ldi	r31, 0xFF	; 255
     dde:	23 ed       	ldi	r18, 0xD3	; 211
     de0:	80 e3       	ldi	r24, 0x30	; 48
     de2:	f1 50       	subi	r31, 0x01	; 1
     de4:	20 40       	sbci	r18, 0x00	; 0
     de6:	80 40       	sbci	r24, 0x00	; 0
     de8:	e1 f7       	brne	.-8      	; 0xde2 <Display321+0x162>
     dea:	00 c0       	rjmp	.+0      	; 0xdec <Display321+0x16c>
     dec:	00 00       	nop
     dee:	91 e0       	ldi	r25, 0x01	; 1
     df0:	e9 1a       	sub	r14, r25
     df2:	f1 08       	sbc	r15, r1
     df4:	73 94       	inc	r7
     df6:	eb e0       	ldi	r30, 0x0B	; 11
     df8:	ce 0e       	add	r12, r30
     dfa:	d1 1c       	adc	r13, r1
     dfc:	48 01       	movw	r8, r16
			DDRB &= ~(1<<1);
		}
	}

	_delay_ms(650);
	for(uint8_t count = 3; count >= 1; count--){
     dfe:	f3 e0       	ldi	r31, 0x03	; 3
     e00:	7f 16       	cp	r7, r31
     e02:	f1 f0       	breq	.+60     	; 0xe40 <Display321+0x1c0>
		for(uint8_t disp = 0; disp < 3; disp++){
			setScore(disp, count);
     e04:	b7 01       	movw	r22, r14
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	0e 94 de 00 	call	0x1bc	; 0x1bc <setScore>
     e0c:	b7 01       	movw	r22, r14
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	0e 94 de 00 	call	0x1bc	; 0x1bc <setScore>
     e14:	b7 01       	movw	r22, r14
     e16:	82 e0       	ldi	r24, 0x02	; 2
     e18:	0e 94 de 00 	call	0x1bc	; 0x1bc <setScore>
		}
		printf("%d\n", count);
     e1c:	ff 92       	push	r15
     e1e:	ef 92       	push	r14
     e20:	bf 92       	push	r11
     e22:	af 92       	push	r10
     e24:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <printf>
		clearLeds(0);
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <clearLeds>
     e2e:	84 01       	movw	r16, r8
     e30:	05 5f       	subi	r16, 0xF5	; 245
     e32:	1f 4f       	sbci	r17, 0xFF	; 255
     e34:	0f 90       	pop	r0
     e36:	0f 90       	pop	r0
     e38:	0f 90       	pop	r0
     e3a:	0f 90       	pop	r0
     e3c:	e6 01       	movw	r28, r12
     e3e:	c1 cf       	rjmp	.-126    	; 0xdc2 <Display321+0x142>
			setButtonLed(onledsX[index + ((3-count)*11)], onledsY[index + ((3-count)*11)], 1);
		}
		playChirp(3-count);
		_delay_ms(1000);
	}
}
     e40:	df 91       	pop	r29
     e42:	cf 91       	pop	r28
     e44:	1f 91       	pop	r17
     e46:	0f 91       	pop	r16
     e48:	ff 90       	pop	r15
     e4a:	ef 90       	pop	r14
     e4c:	df 90       	pop	r13
     e4e:	cf 90       	pop	r12
     e50:	bf 90       	pop	r11
     e52:	af 90       	pop	r10
     e54:	9f 90       	pop	r9
     e56:	8f 90       	pop	r8
     e58:	7f 90       	pop	r7
     e5a:	08 95       	ret

00000e5c <Game>:
			return;
		}
	}
}

void Game(){
     e5c:	2f 92       	push	r2
     e5e:	3f 92       	push	r3
     e60:	4f 92       	push	r4
     e62:	5f 92       	push	r5
     e64:	6f 92       	push	r6
     e66:	7f 92       	push	r7
     e68:	8f 92       	push	r8
     e6a:	9f 92       	push	r9
     e6c:	af 92       	push	r10
     e6e:	bf 92       	push	r11
     e70:	cf 92       	push	r12
     e72:	df 92       	push	r13
     e74:	ef 92       	push	r14
     e76:	ff 92       	push	r15
     e78:	0f 93       	push	r16
     e7a:	1f 93       	push	r17
     e7c:	cf 93       	push	r28
     e7e:	df 93       	push	r29
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
     e84:	29 97       	sbiw	r28, 0x09	; 9
     e86:	0f b6       	in	r0, 0x3f	; 63
     e88:	f8 94       	cli
     e8a:	de bf       	out	0x3e, r29	; 62
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	cd bf       	out	0x3d, r28	; 61

	// game mode is set when leaving attract mode
	Display321();
     e90:	0e 94 40 06 	call	0xc80	; 0xc80 <Display321>
	printf("GAME START\n");
     e94:	8f e4       	ldi	r24, 0x4F	; 79
     e96:	91 e0       	ldi	r25, 0x01	; 1
     e98:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <puts>
	
	P1Score = 0;			// reset scores and multipliers
     e9c:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <P1Score+0x1>
     ea0:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <P1Score>
	P2Score = 0;
     ea4:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <P2Score+0x1>
     ea8:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <P2Score>
	P1Multiplier = 1;
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <P1Multiplier>
	P2Multiplier = 1;
     eb2:	80 93 f3 02 	sts	0x02F3, r24	; 0x8002f3 <P2Multiplier>
     eb6:	0f 2e       	mov	r0, r31
     eb8:	f9 e0       	ldi	r31, 0x09	; 9
     eba:	af 2e       	mov	r10, r31
     ebc:	f3 e0       	ldi	r31, 0x03	; 3
     ebe:	bf 2e       	mov	r11, r31
     ec0:	f0 2d       	mov	r31, r0
     ec2:	0f 2e       	mov	r0, r31
     ec4:	f8 ef       	ldi	r31, 0xF8	; 248
     ec6:	ef 2e       	mov	r14, r31
     ec8:	f2 e0       	ldi	r31, 0x02	; 2
     eca:	ff 2e       	mov	r15, r31
     ecc:	f0 2d       	mov	r31, r0
     ece:	0f 2e       	mov	r0, r31
     ed0:	fc e0       	ldi	r31, 0x0C	; 12
     ed2:	6f 2e       	mov	r6, r31
     ed4:	f3 e0       	ldi	r31, 0x03	; 3
     ed6:	7f 2e       	mov	r7, r31
     ed8:	f0 2d       	mov	r31, r0
     eda:	87 01       	movw	r16, r14

	// pick 6 random leds to enable regardless of mode
	// (3 left side 3 right side)
	for(int i = 0; i < 3; i++){
		gameledsX[i] = rand() % 3;			// turn 3 on right side
     edc:	0f 2e       	mov	r0, r31
     ede:	f3 e0       	ldi	r31, 0x03	; 3
     ee0:	8f 2e       	mov	r8, r31
     ee2:	91 2c       	mov	r9, r1
     ee4:	f0 2d       	mov	r31, r0
		gameledsY[i] = 1+ (rand() % 5);
     ee6:	0f 2e       	mov	r0, r31
     ee8:	f5 e0       	ldi	r31, 0x05	; 5
     eea:	cf 2e       	mov	r12, r31
     eec:	d1 2c       	mov	r13, r1
     eee:	f0 2d       	mov	r31, r0
     ef0:	ba 82       	std	Y+2, r11	; 0x02
     ef2:	a9 82       	std	Y+1, r10	; 0x01
	P2Multiplier = 1;

	// pick 6 random leds to enable regardless of mode
	// (3 left side 3 right side)
	for(int i = 0; i < 3; i++){
		gameledsX[i] = rand() % 3;			// turn 3 on right side
     ef4:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <rand>
     ef8:	b4 01       	movw	r22, r8
     efa:	0e 94 d7 15 	call	0x2bae	; 0x2bae <__divmodhi4>
     efe:	e9 81       	ldd	r30, Y+1	; 0x01
     f00:	fa 81       	ldd	r31, Y+2	; 0x02
     f02:	81 93       	st	Z+, r24
     f04:	fa 83       	std	Y+2, r31	; 0x02
     f06:	e9 83       	std	Y+1, r30	; 0x01
		gameledsY[i] = 1+ (rand() % 5);
     f08:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <rand>
     f0c:	b6 01       	movw	r22, r12
     f0e:	0e 94 d7 15 	call	0x2bae	; 0x2bae <__divmodhi4>
     f12:	8f 5f       	subi	r24, 0xFF	; 255
     f14:	f8 01       	movw	r30, r16
     f16:	81 93       	st	Z+, r24
     f18:	8f 01       	movw	r16, r30
		
		gameledsX[i+3] = 3 + rand() % 3;	// turn 3 on left side
     f1a:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <rand>
     f1e:	b4 01       	movw	r22, r8
     f20:	0e 94 d7 15 	call	0x2bae	; 0x2bae <__divmodhi4>
     f24:	8d 5f       	subi	r24, 0xFD	; 253
     f26:	e9 81       	ldd	r30, Y+1	; 0x01
     f28:	fa 81       	ldd	r31, Y+2	; 0x02
     f2a:	82 83       	std	Z+2, r24	; 0x02
		gameledsY[i+3] = 1+(rand() % 5);
     f2c:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <rand>
     f30:	b6 01       	movw	r22, r12
     f32:	0e 94 d7 15 	call	0x2bae	; 0x2bae <__divmodhi4>
     f36:	8f 5f       	subi	r24, 0xFF	; 255
     f38:	f8 01       	movw	r30, r16
     f3a:	82 83       	std	Z+2, r24	; 0x02
	P1Multiplier = 1;
	P2Multiplier = 1;

	// pick 6 random leds to enable regardless of mode
	// (3 left side 3 right side)
	for(int i = 0; i < 3; i++){
     f3c:	29 81       	ldd	r18, Y+1	; 0x01
     f3e:	3a 81       	ldd	r19, Y+2	; 0x02
     f40:	26 15       	cp	r18, r6
     f42:	37 05       	cpc	r19, r7
     f44:	b9 f6       	brne	.-82     	; 0xef4 <Game+0x98>
		gameledsY[i+3] = 1+(rand() % 5);
	}
	
	uint16_t ticksrem;			// used in resetting multiplier
	
	TimeRemaining = RoundTime;
     f46:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <RoundTime>
     f4a:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <TimeRemaining>
	printf("round time %d\n", TimeRemaining);
     f4e:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <TimeRemaining>
     f52:	1f 92       	push	r1
     f54:	8f 93       	push	r24
     f56:	8a e5       	ldi	r24, 0x5A	; 90
     f58:	91 e0       	ldi	r25, 0x01	; 1
     f5a:	9f 93       	push	r25
     f5c:	8f 93       	push	r24
     f5e:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <printf>
	TCNT4 = 0;					// reset timer
     f62:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7e00a5>
     f66:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7e00a4>
	
	setScore(0, HighScore1P);	// will be replaced if 2p mode
     f6a:	60 91 02 03 	lds	r22, 0x0302	; 0x800302 <HighScore1P>
     f6e:	70 91 03 03 	lds	r23, 0x0303	; 0x800303 <HighScore1P+0x1>
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	0e 94 de 00 	call	0x1bc	; 0x1bc <setScore>
	uint8_t lastTime = TimeRemaining;
     f78:	30 91 01 03 	lds	r19, 0x0301	; 0x800301 <TimeRemaining>
     f7c:	3b 83       	std	Y+3, r19	; 0x03
	while(TimeRemaining > 0){
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	0f 90       	pop	r0
     f84:	0f 90       	pop	r0

				uint8_t newX, newY;
				while(1){				// repeatedly search for new open location
					if(i >= 3){
						//gameLedsX[i]
						newX = 3 + (rand() % 3);
     f86:	0f 2e       	mov	r0, r31
     f88:	f3 e0       	ldi	r31, 0x03	; 3
     f8a:	2f 2e       	mov	r2, r31
     f8c:	31 2c       	mov	r3, r1
     f8e:	f0 2d       	mov	r31, r0
     f90:	0f 2e       	mov	r0, r31
     f92:	ff e0       	ldi	r31, 0x0F	; 15
     f94:	8f 2e       	mov	r8, r31
     f96:	f3 e0       	ldi	r31, 0x03	; 3
     f98:	9f 2e       	mov	r9, r31
     f9a:	f0 2d       	mov	r31, r0
	printf("round time %d\n", TimeRemaining);
	TCNT4 = 0;					// reset timer
	
	setScore(0, HighScore1P);	// will be replaced if 2p mode
	uint8_t lastTime = TimeRemaining;
	while(TimeRemaining > 0){
     f9c:	18 c2       	rjmp	.+1072   	; 0x13ce <Game+0x572>
		
		
		if((SoundEnabled) & (lastTime != TimeRemaining) & (soundPlaying == 0)){
     f9e:	40 91 01 03 	lds	r20, 0x0301	; 0x800301 <TimeRemaining>
     fa2:	50 91 13 03 	lds	r21, 0x0313	; 0x800313 <soundPlaying>
     fa6:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <SoundEnabled>
     faa:	28 2f       	mov	r18, r24
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	55 23       	and	r21, r21
     fb4:	11 f0       	breq	.+4      	; 0xfba <Game+0x15e>
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	82 23       	and	r24, r18
     fbc:	93 23       	and	r25, r19
     fbe:	21 e0       	ldi	r18, 0x01	; 1
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	5b 81       	ldd	r21, Y+3	; 0x03
     fc4:	54 13       	cpse	r21, r20
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <Game+0x170>
     fc8:	20 e0       	ldi	r18, 0x00	; 0
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	82 23       	and	r24, r18
     fce:	93 23       	and	r25, r19
     fd0:	89 2b       	or	r24, r25
     fd2:	89 f1       	breq	.+98     	; 0x1036 <Game+0x1da>
			lastTime = TimeRemaining;
     fd4:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <TimeRemaining>
     fd8:	8b 83       	std	Y+3, r24	; 0x03
			DDRB |= (1<<1);	//make ticking noise
     fda:	21 9a       	sbi	0x04, 1	; 4
			ICR1 = notes[4 + (TimeRemaining%2)];
     fdc:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <TimeRemaining>
     fe0:	81 70       	andi	r24, 0x01	; 1
     fe2:	8c 83       	std	Y+4, r24	; 0x04
     fe4:	1d 82       	std	Y+5, r1	; 0x05
     fe6:	ec 81       	ldd	r30, Y+4	; 0x04
     fe8:	fd 81       	ldd	r31, Y+5	; 0x05
     fea:	34 96       	adiw	r30, 0x04	; 4
     fec:	ee 0f       	add	r30, r30
     fee:	ff 1f       	adc	r31, r31
     ff0:	e8 53       	subi	r30, 0x38	; 56
     ff2:	fd 4f       	sbci	r31, 0xFD	; 253
     ff4:	80 81       	ld	r24, Z
     ff6:	91 81       	ldd	r25, Z+1	; 0x01
     ff8:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     ffc:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
			OCR1A = notes[4 + (TimeRemaining%2)] / 2;
    1000:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <TimeRemaining>
    1004:	81 70       	andi	r24, 0x01	; 1
    1006:	8e 83       	std	Y+6, r24	; 0x06
    1008:	1f 82       	std	Y+7, r1	; 0x07
    100a:	ee 81       	ldd	r30, Y+6	; 0x06
    100c:	ff 81       	ldd	r31, Y+7	; 0x07
    100e:	34 96       	adiw	r30, 0x04	; 4
    1010:	ee 0f       	add	r30, r30
    1012:	ff 1f       	adc	r31, r31
    1014:	e8 53       	subi	r30, 0x38	; 56
    1016:	fd 4f       	sbci	r31, 0xFD	; 253
    1018:	80 81       	ld	r24, Z
    101a:	91 81       	ldd	r25, Z+1	; 0x01
    101c:	96 95       	lsr	r25
    101e:	87 95       	ror	r24
    1020:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1024:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1028:	ef ea       	ldi	r30, 0xAF	; 175
    102a:	f6 e3       	ldi	r31, 0x36	; 54
    102c:	31 97       	sbiw	r30, 0x01	; 1
    102e:	f1 f7       	brne	.-4      	; 0x102c <Game+0x1d0>
    1030:	00 c0       	rjmp	.+0      	; 0x1032 <Game+0x1d6>
    1032:	00 00       	nop
			_delay_us(3500);
			DDRB &= ~(1<<1);
    1034:	21 98       	cbi	0x04, 1	; 4
		}
		//printf("%ds REMAINING\n", TimeRemaining);
		
		setScore(1, TimeRemaining);
    1036:	60 91 01 03 	lds	r22, 0x0301	; 0x800301 <TimeRemaining>
    103a:	70 e0       	ldi	r23, 0x00	; 0
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	0e 94 de 00 	call	0x1bc	; 0x1bc <setScore>
		if(GameMode == 1){
    1042:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <GameMode>
    1046:	81 30       	cpi	r24, 0x01	; 1
    1048:	79 f4       	brne	.+30     	; 0x1068 <Game+0x20c>
			setScore(0, P1Score);	// if 2p mode, show left p1 and right p2 scores
    104a:	60 91 04 03 	lds	r22, 0x0304	; 0x800304 <P1Score>
    104e:	70 91 05 03 	lds	r23, 0x0305	; 0x800305 <P1Score+0x1>
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	0e 94 de 00 	call	0x1bc	; 0x1bc <setScore>
			setScore(2, P2Score);
    1058:	60 91 06 03 	lds	r22, 0x0306	; 0x800306 <P2Score>
    105c:	70 91 07 03 	lds	r23, 0x0307	; 0x800307 <P2Score+0x1>
    1060:	82 e0       	ldi	r24, 0x02	; 2
    1062:	0e 94 de 00 	call	0x1bc	; 0x1bc <setScore>
    1066:	c8 c1       	rjmp	.+912    	; 0x13f8 <Game+0x59c>
			}else{
			setScore(2, P1Score);	// otherwise show p1 score and high score
    1068:	60 91 04 03 	lds	r22, 0x0304	; 0x800304 <P1Score>
    106c:	70 91 05 03 	lds	r23, 0x0305	; 0x800305 <P1Score+0x1>
    1070:	82 e0       	ldi	r24, 0x02	; 2
    1072:	0e 94 de 00 	call	0x1bc	; 0x1bc <setScore>
    1076:	c0 c1       	rjmp	.+896    	; 0x13f8 <Game+0x59c>
    1078:	7a 82       	std	Y+2, r7	; 0x02
    107a:	69 82       	std	Y+1, r6	; 0x01
    107c:	c8 84       	ldd	r12, Y+8	; 0x08
    107e:	d9 84       	ldd	r13, Y+9	; 0x09
		}

		for(uint8_t i = 0; i < 6; i++){
			if (isButtonDown(gameledsX[i], gameledsY[i]) ){
    1080:	f3 01       	movw	r30, r6
    1082:	60 81       	ld	r22, Z
    1084:	f6 01       	movw	r30, r12
    1086:	80 81       	ld	r24, Z
    1088:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    108c:	88 23       	and	r24, r24
    108e:	09 f4       	brne	.+2      	; 0x1092 <Game+0x236>
    1090:	0b c1       	rjmp	.+534    	; 0x12a8 <Game+0x44c>
    1092:	50 2e       	mov	r5, r16
    1094:	01 2f       	mov	r16, r17

				uint8_t newX, newY;
				while(1){				// repeatedly search for new open location
					if(i >= 3){
    1096:	03 30       	cpi	r16, 0x03	; 3
    1098:	40 f0       	brcs	.+16     	; 0x10aa <Game+0x24e>
						//gameLedsX[i]
						newX = 3 + (rand() % 3);
    109a:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <rand>
    109e:	b1 01       	movw	r22, r2
    10a0:	0e 94 d7 15 	call	0x2bae	; 0x2bae <__divmodhi4>
    10a4:	13 e0       	ldi	r17, 0x03	; 3
    10a6:	18 0f       	add	r17, r24
    10a8:	06 c0       	rjmp	.+12     	; 0x10b6 <Game+0x25a>
						}else{
						newX = rand() % 3;
    10aa:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <rand>
    10ae:	b1 01       	movw	r22, r2
    10b0:	0e 94 d7 15 	call	0x2bae	; 0x2bae <__divmodhi4>
    10b4:	18 2f       	mov	r17, r24
					}
					newY = 1 + (rand() % 5);
    10b6:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <rand>
    10ba:	65 e0       	ldi	r22, 0x05	; 5
    10bc:	70 e0       	ldi	r23, 0x00	; 0
    10be:	0e 94 d7 15 	call	0x2bae	; 0x2bae <__divmodhi4>
    10c2:	8f 5f       	subi	r24, 0xFF	; 255
    10c4:	d7 01       	movw	r26, r14
    10c6:	f5 01       	movw	r30, r10
					//gameLedsY
					
					uint8_t clearSpot = 1;
    10c8:	25 2d       	mov	r18, r5
					for(uint8_t idx = 0; idx < 6; idx++){
						if((gameledsX[idx] == newX) && (gameledsY[idx] == newY)){
    10ca:	91 91       	ld	r25, Z+
    10cc:	19 13       	cpse	r17, r25
    10ce:	04 c0       	rjmp	.+8      	; 0x10d8 <Game+0x27c>
    10d0:	9c 91       	ld	r25, X
    10d2:	89 13       	cpse	r24, r25
    10d4:	01 c0       	rjmp	.+2      	; 0x10d8 <Game+0x27c>
							clearSpot = 0;	// "new" location is in use
    10d6:	24 2d       	mov	r18, r4
    10d8:	11 96       	adiw	r26, 0x01	; 1
					}
					newY = 1 + (rand() % 5);
					//gameLedsY
					
					uint8_t clearSpot = 1;
					for(uint8_t idx = 0; idx < 6; idx++){
    10da:	e8 15       	cp	r30, r8
    10dc:	f9 05       	cpc	r31, r9
    10de:	a9 f7       	brne	.-22     	; 0x10ca <Game+0x26e>
						if((gameledsX[idx] == newX) && (gameledsY[idx] == newY)){
							clearSpot = 0;	// "new" location is in use
						}
					}
					if(clearSpot){
    10e0:	22 23       	and	r18, r18
    10e2:	c9 f2       	breq	.-78     	; 0x1096 <Game+0x23a>
    10e4:	95 2d       	mov	r25, r5
    10e6:	51 2e       	mov	r5, r17
    10e8:	10 2f       	mov	r17, r16
    10ea:	09 2f       	mov	r16, r25
						gameledsX[i] = newX;
    10ec:	f6 01       	movw	r30, r12
    10ee:	50 82       	st	Z, r5
						gameledsY[i] = newY;
    10f0:	e9 81       	ldd	r30, Y+1	; 0x01
    10f2:	fa 81       	ldd	r31, Y+2	; 0x02
    10f4:	80 83       	st	Z, r24
						break;
					}
					
				}

				if(GameMode == 0){
    10f6:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <GameMode>
    10fa:	81 11       	cpse	r24, r1
    10fc:	42 c0       	rjmp	.+132    	; 0x1182 <Game+0x326>
					IncrementScore(0, P1Multiplier);	// add score and inc multiplier (singleplayer)
    10fe:	60 91 f4 02 	lds	r22, 0x02F4	; 0x8002f4 <P1Multiplier>
    1102:	70 e0       	ldi	r23, 0x00	; 0
    1104:	0e 94 8e 04 	call	0x91c	; 0x91c <IncrementScore>
					playChirp(P1Multiplier);
    1108:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <P1Multiplier>
    110c:	0e 94 b4 04 	call	0x968	; 0x968 <playChirp>
					
					P1Multiplier = (P1Multiplier == MultiplierMax) ? MultiplierMax : (P1Multiplier + 1);
    1110:	90 91 f4 02 	lds	r25, 0x02F4	; 0x8002f4 <P1Multiplier>
    1114:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <MultiplierMax>
    1118:	98 17       	cp	r25, r24
    111a:	11 f0       	breq	.+4      	; 0x1120 <Game+0x2c4>
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	89 0f       	add	r24, r25
    1120:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <P1Multiplier>
					ticksrem = MultTimeKill*15;
    1124:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <MultTimeKill>
    1128:	90 91 15 03 	lds	r25, 0x0315	; 0x800315 <MultTimeKill+0x1>
    112c:	4f e0       	ldi	r20, 0x0F	; 15
    112e:	48 9f       	mul	r20, r24
    1130:	90 01       	movw	r18, r0
    1132:	49 9f       	mul	r20, r25
    1134:	30 0d       	add	r19, r0
    1136:	11 24       	eor	r1, r1
					if(TCNT4 < (0xFFFF-ticksrem)){	//means decay will happen "this" value of seconds left
    1138:	e4 ea       	ldi	r30, 0xA4	; 164
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	40 81       	ld	r20, Z
    113e:	51 81       	ldd	r21, Z+1	; 0x01
    1140:	c9 01       	movw	r24, r18
    1142:	80 95       	com	r24
    1144:	90 95       	com	r25
    1146:	48 17       	cp	r20, r24
    1148:	59 07       	cpc	r21, r25
    114a:	28 f4       	brcc	.+10     	; 0x1156 <Game+0x2fa>
						P1MultTimeS = TimeRemaining;
    114c:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <TimeRemaining>
    1150:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <P1MultTimeS>
    1154:	05 c0       	rjmp	.+10     	; 0x1160 <Game+0x304>
						}else{
						P1MultTimeS = TimeRemaining-MultiplierDecaySeconds; // will happen "next" second
    1156:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <TimeRemaining>
    115a:	81 50       	subi	r24, 0x01	; 1
    115c:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <P1MultTimeS>
					}
					P1MultTimeT = (TCNT4 + ticksrem) % (OCR4A);	// tcnt and time rem reaches this and resets mult
    1160:	e4 ea       	ldi	r30, 0xA4	; 164
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	91 81       	ldd	r25, Z+1	; 0x01
    1168:	e8 ea       	ldi	r30, 0xA8	; 168
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	60 81       	ld	r22, Z
    116e:	71 81       	ldd	r23, Z+1	; 0x01
    1170:	82 0f       	add	r24, r18
    1172:	93 1f       	adc	r25, r19
    1174:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <__udivmodhi4>
    1178:	90 93 ff 02 	sts	0x02FF, r25	; 0x8002ff <P1MultTimeT+0x1>
    117c:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <P1MultTimeT>
    1180:	93 c0       	rjmp	.+294    	; 0x12a8 <Game+0x44c>
					
					}else{
					if(i >= 3){
    1182:	13 30       	cpi	r17, 0x03	; 3
    1184:	08 f4       	brcc	.+2      	; 0x1188 <Game+0x32c>
    1186:	4e c0       	rjmp	.+156    	; 0x1224 <Game+0x3c8>
						IncrementScore(1, P2Multiplier);	// add depending on side of button pressed
    1188:	60 91 f3 02 	lds	r22, 0x02F3	; 0x8002f3 <P2Multiplier>
    118c:	70 e0       	ldi	r23, 0x00	; 0
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	0e 94 8e 04 	call	0x91c	; 0x91c <IncrementScore>
						playChirp(P2Multiplier);
    1194:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <P2Multiplier>
    1198:	0e 94 b4 04 	call	0x968	; 0x968 <playChirp>
						
						P2Multiplier = (P2Multiplier == MultiplierMax) ? MultiplierMax : (P2Multiplier + 1);
    119c:	90 91 f3 02 	lds	r25, 0x02F3	; 0x8002f3 <P2Multiplier>
    11a0:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <MultiplierMax>
    11a4:	98 17       	cp	r25, r24
    11a6:	11 f0       	breq	.+4      	; 0x11ac <Game+0x350>
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	89 0f       	add	r24, r25
    11ac:	80 93 f3 02 	sts	0x02F3, r24	; 0x8002f3 <P2Multiplier>
						P2MultTimeS = TimeRemaining-MultiplierDecaySeconds;
    11b0:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <TimeRemaining>
    11b4:	81 50       	subi	r24, 0x01	; 1
    11b6:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <P2MultTimeS>
						P2MultTimeT = TCNT4;
    11ba:	e4 ea       	ldi	r30, 0xA4	; 164
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	91 81       	ldd	r25, Z+1	; 0x01
    11c2:	90 93 f7 02 	sts	0x02F7, r25	; 0x8002f7 <P2MultTimeT+0x1>
    11c6:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <P2MultTimeT>
						
						ticksrem = MultTimeKill*15;
    11ca:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <MultTimeKill>
    11ce:	90 91 15 03 	lds	r25, 0x0315	; 0x800315 <MultTimeKill+0x1>
    11d2:	4f e0       	ldi	r20, 0x0F	; 15
    11d4:	48 9f       	mul	r20, r24
    11d6:	90 01       	movw	r18, r0
    11d8:	49 9f       	mul	r20, r25
    11da:	30 0d       	add	r19, r0
    11dc:	11 24       	eor	r1, r1
						if(TCNT4 < (0xFFFF-ticksrem)){	//means decay will happen "this" value of seconds left
    11de:	40 81       	ld	r20, Z
    11e0:	51 81       	ldd	r21, Z+1	; 0x01
    11e2:	c9 01       	movw	r24, r18
    11e4:	80 95       	com	r24
    11e6:	90 95       	com	r25
    11e8:	48 17       	cp	r20, r24
    11ea:	59 07       	cpc	r21, r25
    11ec:	28 f4       	brcc	.+10     	; 0x11f8 <Game+0x39c>
							P1MultTimeS = TimeRemaining;
    11ee:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <TimeRemaining>
    11f2:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <P1MultTimeS>
    11f6:	05 c0       	rjmp	.+10     	; 0x1202 <Game+0x3a6>
						}else{
							P1MultTimeS = TimeRemaining-MultiplierDecaySeconds; // will happen "next" second
    11f8:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <TimeRemaining>
    11fc:	81 50       	subi	r24, 0x01	; 1
    11fe:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <P1MultTimeS>
						}
						P1MultTimeT = (TCNT4 + ticksrem) % (OCR4A);	// tcnt and time rem reaches this and resets mult
    1202:	e4 ea       	ldi	r30, 0xA4	; 164
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	91 81       	ldd	r25, Z+1	; 0x01
    120a:	e8 ea       	ldi	r30, 0xA8	; 168
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	60 81       	ld	r22, Z
    1210:	71 81       	ldd	r23, Z+1	; 0x01
    1212:	82 0f       	add	r24, r18
    1214:	93 1f       	adc	r25, r19
    1216:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <__udivmodhi4>
    121a:	90 93 ff 02 	sts	0x02FF, r25	; 0x8002ff <P1MultTimeT+0x1>
    121e:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <P1MultTimeT>
    1222:	42 c0       	rjmp	.+132    	; 0x12a8 <Game+0x44c>
						
						
						}else{
						IncrementScore(0, P1Multiplier);
    1224:	60 91 f4 02 	lds	r22, 0x02F4	; 0x8002f4 <P1Multiplier>
    1228:	70 e0       	ldi	r23, 0x00	; 0
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	0e 94 8e 04 	call	0x91c	; 0x91c <IncrementScore>
						playChirp(P1Multiplier);
    1230:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <P1Multiplier>
    1234:	0e 94 b4 04 	call	0x968	; 0x968 <playChirp>
						
						P1Multiplier = (P1Multiplier == MultiplierMax) ? MultiplierMax : (P1Multiplier + 1);
    1238:	90 91 f4 02 	lds	r25, 0x02F4	; 0x8002f4 <P1Multiplier>
    123c:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <MultiplierMax>
    1240:	98 17       	cp	r25, r24
    1242:	11 f0       	breq	.+4      	; 0x1248 <Game+0x3ec>
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	89 0f       	add	r24, r25
    1248:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <P1Multiplier>
						ticksrem = MultTimeKill*15;
    124c:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <MultTimeKill>
    1250:	90 91 15 03 	lds	r25, 0x0315	; 0x800315 <MultTimeKill+0x1>
    1254:	4f e0       	ldi	r20, 0x0F	; 15
    1256:	48 9f       	mul	r20, r24
    1258:	90 01       	movw	r18, r0
    125a:	49 9f       	mul	r20, r25
    125c:	30 0d       	add	r19, r0
    125e:	11 24       	eor	r1, r1
						if(TCNT4 < (0xFFFF-ticksrem)){	//means decay will happen "this" value of seconds left
    1260:	e4 ea       	ldi	r30, 0xA4	; 164
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	40 81       	ld	r20, Z
    1266:	51 81       	ldd	r21, Z+1	; 0x01
    1268:	c9 01       	movw	r24, r18
    126a:	80 95       	com	r24
    126c:	90 95       	com	r25
    126e:	48 17       	cp	r20, r24
    1270:	59 07       	cpc	r21, r25
    1272:	28 f4       	brcc	.+10     	; 0x127e <Game+0x422>
							P1MultTimeS = TimeRemaining;
    1274:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <TimeRemaining>
    1278:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <P1MultTimeS>
    127c:	05 c0       	rjmp	.+10     	; 0x1288 <Game+0x42c>
							}else{
							P1MultTimeS = TimeRemaining-MultiplierDecaySeconds; // will happen "next" second
    127e:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <TimeRemaining>
    1282:	81 50       	subi	r24, 0x01	; 1
    1284:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <P1MultTimeS>
						}
						P1MultTimeT = (TCNT4 + ticksrem) % (OCR4A);	// tcnt and time rem reaches this and resets mult
    1288:	e4 ea       	ldi	r30, 0xA4	; 164
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	91 81       	ldd	r25, Z+1	; 0x01
    1290:	e8 ea       	ldi	r30, 0xA8	; 168
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	60 81       	ld	r22, Z
    1296:	71 81       	ldd	r23, Z+1	; 0x01
    1298:	82 0f       	add	r24, r18
    129a:	93 1f       	adc	r25, r19
    129c:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <__udivmodhi4>
    12a0:	90 93 ff 02 	sts	0x02FF, r25	; 0x8002ff <P1MultTimeT+0x1>
    12a4:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <P1MultTimeT>
			setScore(2, P2Score);
			}else{
			setScore(2, P1Score);	// otherwise show p1 score and high score
		}

		for(uint8_t i = 0; i < 6; i++){
    12a8:	1f 5f       	subi	r17, 0xFF	; 255
    12aa:	ff ef       	ldi	r31, 0xFF	; 255
    12ac:	6f 1a       	sub	r6, r31
    12ae:	7f 0a       	sbc	r7, r31
    12b0:	28 85       	ldd	r18, Y+8	; 0x08
    12b2:	39 85       	ldd	r19, Y+9	; 0x09
    12b4:	2f 5f       	subi	r18, 0xFF	; 255
    12b6:	3f 4f       	sbci	r19, 0xFF	; 255
    12b8:	39 87       	std	Y+9, r19	; 0x09
    12ba:	28 87       	std	Y+8, r18	; 0x08
    12bc:	16 30       	cpi	r17, 0x06	; 6
    12be:	09 f0       	breq	.+2      	; 0x12c2 <Game+0x466>
    12c0:	db ce       	rjmp	.-586    	; 0x1078 <Game+0x21c>
		}
		
		
		
		
		if (P1Multiplier > 1){
    12c2:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <P1Multiplier>
    12c6:	82 30       	cpi	r24, 0x02	; 2
    12c8:	60 f1       	brcs	.+88     	; 0x1322 <Game+0x4c6>
			printf("%d \t %d\n",TCNT4,P1MultTimeT);
    12ca:	e4 ea       	ldi	r30, 0xA4	; 164
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	91 81       	ldd	r25, Z+1	; 0x01
    12d2:	20 91 ff 02 	lds	r18, 0x02FF	; 0x8002ff <P1MultTimeT+0x1>
    12d6:	2f 93       	push	r18
    12d8:	20 91 fe 02 	lds	r18, 0x02FE	; 0x8002fe <P1MultTimeT>
    12dc:	2f 93       	push	r18
    12de:	9f 93       	push	r25
    12e0:	8f 93       	push	r24
    12e2:	89 e6       	ldi	r24, 0x69	; 105
    12e4:	91 e0       	ldi	r25, 0x01	; 1
    12e6:	9f 93       	push	r25
    12e8:	8f 93       	push	r24
    12ea:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <printf>
			if((TimeRemaining == P1MultTimeS) && (TCNT4 >= P1MultTimeT)){
    12ee:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <TimeRemaining>
    12f2:	0f 90       	pop	r0
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	0f 90       	pop	r0
    12fe:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <P1MultTimeS>
    1302:	98 13       	cpse	r25, r24
    1304:	0e c0       	rjmp	.+28     	; 0x1322 <Game+0x4c6>
    1306:	e4 ea       	ldi	r30, 0xA4	; 164
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	20 81       	ld	r18, Z
    130c:	31 81       	ldd	r19, Z+1	; 0x01
    130e:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <P1MultTimeT>
    1312:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <P1MultTimeT+0x1>
    1316:	28 17       	cp	r18, r24
    1318:	39 07       	cpc	r19, r25
    131a:	18 f0       	brcs	.+6      	; 0x1322 <Game+0x4c6>
				P1Multiplier = 1;
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <P1Multiplier>
			}
		}
		
		if (P2Multiplier > 1){
    1322:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <P2Multiplier>
    1326:	82 30       	cpi	r24, 0x02	; 2
    1328:	08 f4       	brcc	.+2      	; 0x132c <Game+0x4d0>
    132a:	6d c0       	rjmp	.+218    	; 0x1406 <Game+0x5aa>
			if((TimeRemaining == P2MultTimeS) && (TCNT4 >= P2MultTimeT)){
    132c:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <TimeRemaining>
    1330:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <P2MultTimeS>
    1334:	98 13       	cpse	r25, r24
    1336:	67 c0       	rjmp	.+206    	; 0x1406 <Game+0x5aa>
    1338:	e4 ea       	ldi	r30, 0xA4	; 164
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	20 81       	ld	r18, Z
    133e:	31 81       	ldd	r19, Z+1	; 0x01
    1340:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <P2MultTimeT>
    1344:	90 91 f7 02 	lds	r25, 0x02F7	; 0x8002f7 <P2MultTimeT+0x1>
    1348:	28 17       	cp	r18, r24
    134a:	39 07       	cpc	r19, r25
    134c:	08 f4       	brcc	.+2      	; 0x1350 <Game+0x4f4>
    134e:	5b c0       	rjmp	.+182    	; 0x1406 <Game+0x5aa>
				P2Multiplier = 1;
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	80 93 f3 02 	sts	0x02F3, r24	; 0x8002f3 <P2Multiplier>
    1356:	57 c0       	rjmp	.+174    	; 0x1406 <Game+0x5aa>
		
		for(uint8_t ledIndexX = 0; ledIndexX < 6; ledIndexX++){
			for(uint8_t ledIndexY = 0; ledIndexY < 6; ledIndexY++){
				uint8_t found = 0;
				for(uint8_t ledIndex = 0; ledIndex < 6; ledIndex++){
					if((ledIndexX == gameledsX[ledIndex]) && (ledIndexY == gameledsY[ledIndex]))	//led is on in game
    1358:	81 91       	ld	r24, Z+
    135a:	29 81       	ldd	r18, Y+1	; 0x01
    135c:	82 13       	cpse	r24, r18
    135e:	04 c0       	rjmp	.+8      	; 0x1368 <Game+0x50c>
    1360:	8c 91       	ld	r24, X
    1362:	38 85       	ldd	r19, Y+8	; 0x08
    1364:	83 17       	cp	r24, r19
    1366:	31 f0       	breq	.+12     	; 0x1374 <Game+0x518>
    1368:	11 96       	adiw	r26, 0x01	; 1
		
		
		for(uint8_t ledIndexX = 0; ledIndexX < 6; ledIndexX++){
			for(uint8_t ledIndexY = 0; ledIndexY < 6; ledIndexY++){
				uint8_t found = 0;
				for(uint8_t ledIndex = 0; ledIndex < 6; ledIndex++){
    136a:	8e 16       	cp	r8, r30
    136c:	9f 06       	cpc	r9, r31
    136e:	a1 f7       	brne	.-24     	; 0x1358 <Game+0x4fc>
		}
		
		
		for(uint8_t ledIndexX = 0; ledIndexX < 6; ledIndexX++){
			for(uint8_t ledIndexY = 0; ledIndexY < 6; ledIndexY++){
				uint8_t found = 0;
    1370:	41 2f       	mov	r20, r17
    1372:	01 c0       	rjmp	.+2      	; 0x1376 <Game+0x51a>
				for(uint8_t ledIndex = 0; ledIndex < 6; ledIndex++){
					if((ledIndexX == gameledsX[ledIndex]) && (ledIndexY == gameledsY[ledIndex]))	//led is on in game
					{
						found = 1;
    1374:	40 2f       	mov	r20, r16
						break;
					}
				}
				setButtonLed(ledIndexX, ledIndexY, found);
    1376:	68 85       	ldd	r22, Y+8	; 0x08
    1378:	89 81       	ldd	r24, Y+1	; 0x01
    137a:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
			}
		}
		
		
		for(uint8_t ledIndexX = 0; ledIndexX < 6; ledIndexX++){
			for(uint8_t ledIndexY = 0; ledIndexY < 6; ledIndexY++){
    137e:	48 85       	ldd	r20, Y+8	; 0x08
    1380:	4f 5f       	subi	r20, 0xFF	; 255
    1382:	48 87       	std	Y+8, r20	; 0x08
    1384:	46 30       	cpi	r20, 0x06	; 6
    1386:	19 f0       	breq	.+6      	; 0x138e <Game+0x532>
					//gameLedsY
					
					uint8_t clearSpot = 1;
					for(uint8_t idx = 0; idx < 6; idx++){
						if((gameledsX[idx] == newX) && (gameledsY[idx] == newY)){
							clearSpot = 0;	// "new" location is in use
    1388:	d7 01       	movw	r26, r14
    138a:	f5 01       	movw	r30, r10
    138c:	e5 cf       	rjmp	.-54     	; 0x1358 <Game+0x4fc>
				P2Multiplier = 1;
			}
		}
		
		
		for(uint8_t ledIndexX = 0; ledIndexX < 6; ledIndexX++){
    138e:	59 81       	ldd	r21, Y+1	; 0x01
    1390:	5f 5f       	subi	r21, 0xFF	; 255
    1392:	59 83       	std	Y+1, r21	; 0x01
    1394:	56 30       	cpi	r21, 0x06	; 6
    1396:	11 f0       	breq	.+4      	; 0x139c <Game+0x540>
			for(uint8_t ledIndexY = 0; ledIndexY < 6; ledIndexY++){
				uint8_t found = 0;
    1398:	18 86       	std	Y+8, r1	; 0x08
    139a:	f6 cf       	rjmp	.-20     	; 0x1388 <Game+0x52c>
    139c:	0f 2e       	mov	r0, r31
    139e:	fe ef       	ldi	r31, 0xFE	; 254
    13a0:	cf 2e       	mov	r12, r31
    13a2:	f2 e0       	ldi	r31, 0x02	; 2
    13a4:	df 2e       	mov	r13, r31
    13a6:	f0 2d       	mov	r31, r0
				P2Multiplier = 1;
			}
		}
		
		
		for(uint8_t ledIndexX = 0; ledIndexX < 6; ledIndexX++){
    13a8:	85 01       	movw	r16, r10
    13aa:	fa 82       	std	Y+2, r15	; 0x02
    13ac:	e9 82       	std	Y+1, r14	; 0x01
				}
				setButtonLed(ledIndexX, ledIndexY, found);
			}
		}
		for(uint8_t ledIndex = 0; ledIndex < 6; ledIndex++){	//turn on game leds and turn others off
			setButtonLed(gameledsX[ledIndex], gameledsY[ledIndex], 1);
    13ae:	e9 81       	ldd	r30, Y+1	; 0x01
    13b0:	fa 81       	ldd	r31, Y+2	; 0x02
    13b2:	61 91       	ld	r22, Z+
    13b4:	fa 83       	std	Y+2, r31	; 0x02
    13b6:	e9 83       	std	Y+1, r30	; 0x01
    13b8:	41 e0       	ldi	r20, 0x01	; 1
    13ba:	f8 01       	movw	r30, r16
    13bc:	81 91       	ld	r24, Z+
    13be:	8f 01       	movw	r16, r30
    13c0:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
					}
				}
				setButtonLed(ledIndexX, ledIndexY, found);
			}
		}
		for(uint8_t ledIndex = 0; ledIndex < 6; ledIndex++){	//turn on game leds and turn others off
    13c4:	29 81       	ldd	r18, Y+1	; 0x01
    13c6:	3a 81       	ldd	r19, Y+2	; 0x02
    13c8:	c2 16       	cp	r12, r18
    13ca:	d3 06       	cpc	r13, r19
    13cc:	81 f7       	brne	.-32     	; 0x13ae <Game+0x552>
	printf("round time %d\n", TimeRemaining);
	TCNT4 = 0;					// reset timer
	
	setScore(0, HighScore1P);	// will be replaced if 2p mode
	uint8_t lastTime = TimeRemaining;
	while(TimeRemaining > 0){
    13ce:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <TimeRemaining>
    13d2:	81 11       	cpse	r24, r1
    13d4:	e4 cd       	rjmp	.-1080   	; 0xf9e <Game+0x142>
		}
		
		//_delay_ms(50);	// TODO maybe change this later

	}
	setScoreSegment(TIMER1, 18); // 18 is the dash
    13d6:	62 e1       	ldi	r22, 0x12	; 18
    13d8:	83 e0       	ldi	r24, 0x03	; 3
    13da:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
	setScoreSegment(TIMER10, 18);
    13de:	62 e1       	ldi	r22, 0x12	; 18
    13e0:	84 e0       	ldi	r24, 0x04	; 4
    13e2:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
	setScoreSegment(TIMER100, 18);
    13e6:	62 e1       	ldi	r22, 0x12	; 18
    13e8:	85 e0       	ldi	r24, 0x05	; 5
    13ea:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
	printf("GAMa ovar\n");
    13ee:	82 e7       	ldi	r24, 0x72	; 114
    13f0:	91 e0       	ldi	r25, 0x01	; 1
    13f2:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <puts>
	// game is over, stop timer
	
}
    13f6:	0b c0       	rjmp	.+22     	; 0x140e <Game+0x5b2>
	printf("GAME START\n");
	
	P1Score = 0;			// reset scores and multipliers
	P2Score = 0;
	P1Multiplier = 1;
	P2Multiplier = 1;
    13f8:	37 01       	movw	r6, r14
    13fa:	10 e0       	ldi	r17, 0x00	; 0
						newX = rand() % 3;
					}
					newY = 1 + (rand() % 5);
					//gameLedsY
					
					uint8_t clearSpot = 1;
    13fc:	01 e0       	ldi	r16, 0x01	; 1
					for(uint8_t idx = 0; idx < 6; idx++){
						if((gameledsX[idx] == newX) && (gameledsY[idx] == newY)){
							clearSpot = 0;	// "new" location is in use
    13fe:	41 2c       	mov	r4, r1
    1400:	b9 86       	std	Y+9, r11	; 0x09
    1402:	a8 86       	std	Y+8, r10	; 0x08
    1404:	39 ce       	rjmp	.-910    	; 0x1078 <Game+0x21c>
		}
		
		
		for(uint8_t ledIndexX = 0; ledIndexX < 6; ledIndexX++){
			for(uint8_t ledIndexY = 0; ledIndexY < 6; ledIndexY++){
				uint8_t found = 0;
    1406:	19 82       	std	Y+1, r1	; 0x01
    1408:	10 e0       	ldi	r17, 0x00	; 0
				for(uint8_t ledIndex = 0; ledIndex < 6; ledIndex++){
					if((ledIndexX == gameledsX[ledIndex]) && (ledIndexY == gameledsY[ledIndex]))	//led is on in game
					{
						found = 1;
    140a:	01 e0       	ldi	r16, 0x01	; 1
    140c:	c5 cf       	rjmp	.-118    	; 0x1398 <Game+0x53c>
	setScoreSegment(TIMER10, 18);
	setScoreSegment(TIMER100, 18);
	printf("GAMa ovar\n");
	// game is over, stop timer
	
}
    140e:	29 96       	adiw	r28, 0x09	; 9
    1410:	0f b6       	in	r0, 0x3f	; 63
    1412:	f8 94       	cli
    1414:	de bf       	out	0x3e, r29	; 62
    1416:	0f be       	out	0x3f, r0	; 63
    1418:	cd bf       	out	0x3d, r28	; 61
    141a:	df 91       	pop	r29
    141c:	cf 91       	pop	r28
    141e:	1f 91       	pop	r17
    1420:	0f 91       	pop	r16
    1422:	ff 90       	pop	r15
    1424:	ef 90       	pop	r14
    1426:	df 90       	pop	r13
    1428:	cf 90       	pop	r12
    142a:	bf 90       	pop	r11
    142c:	af 90       	pop	r10
    142e:	9f 90       	pop	r9
    1430:	8f 90       	pop	r8
    1432:	7f 90       	pop	r7
    1434:	6f 90       	pop	r6
    1436:	5f 90       	pop	r5
    1438:	4f 90       	pop	r4
    143a:	3f 90       	pop	r3
    143c:	2f 90       	pop	r2
    143e:	08 95       	ret

00001440 <AttractCheckGameStart>:
	TCCR0B = (0b101 << CS00);	//turn on clock for speaker
}

uint8_t attractButtonMemory[] = {0,0,0,0,0,0};
	
uint8_t AttractCheckGameStart(uint16_t count){
    1440:	2f 92       	push	r2
    1442:	3f 92       	push	r3
    1444:	4f 92       	push	r4
    1446:	5f 92       	push	r5
    1448:	6f 92       	push	r6
    144a:	7f 92       	push	r7
    144c:	8f 92       	push	r8
    144e:	9f 92       	push	r9
    1450:	af 92       	push	r10
    1452:	bf 92       	push	r11
    1454:	cf 92       	push	r12
    1456:	df 92       	push	r13
    1458:	ef 92       	push	r14
    145a:	ff 92       	push	r15
    145c:	0f 93       	push	r16
    145e:	1f 93       	push	r17
    1460:	cf 93       	push	r28
    1462:	df 93       	push	r29
    1464:	00 d0       	rcall	.+0      	; 0x1466 <AttractCheckGameStart+0x26>
    1466:	00 d0       	rcall	.+0      	; 0x1468 <AttractCheckGameStart+0x28>
    1468:	cd b7       	in	r28, 0x3d	; 61
    146a:	de b7       	in	r29, 0x3e	; 62
	// pauses some time while checking player button inputs, skip and start game if pressed
	for(uint16_t delayCount = 0; delayCount < count; delayCount++){
    146c:	00 97       	sbiw	r24, 0x00	; 0
    146e:	09 f4       	brne	.+2      	; 0x1472 <AttractCheckGameStart+0x32>
    1470:	bd c0       	rjmp	.+378    	; 0x15ec <AttractCheckGameStart+0x1ac>
    1472:	9a 83       	std	Y+2, r25	; 0x02
    1474:	89 83       	std	Y+1, r24	; 0x01
    1476:	a1 2c       	mov	r10, r1
    1478:	b1 2c       	mov	r11, r1
						}
						_delay_ms(20);
						DDRB &= ~(1<<1);
					}
				}else{
					attractButtonMemory[x] &= ~(1 << y);
    147a:	01 e0       	ldi	r16, 0x01	; 1
    147c:	10 e0       	ldi	r17, 0x00	; 0
				if(isButtonDown(x,y)){
					if((attractButtonMemory[x] & (1 << y)) == 0){	//button not pressed
						attractButtonMemory[x] |= (1 << y);
						if(SoundEnabled){
							DDRB |= (1<<1);	//make ticking noise
							ICR1 = notes[rand() % 8];
    147e:	0f 2e       	mov	r0, r31
    1480:	f6 e8       	ldi	r31, 0x86	; 134
    1482:	8f 2e       	mov	r8, r31
    1484:	91 2c       	mov	r9, r1
    1486:	f0 2d       	mov	r31, r0
							OCR1A = notes[4 + (TimeRemaining%2)] / 2;
    1488:	0f 2e       	mov	r0, r31
    148a:	f8 e8       	ldi	r31, 0x88	; 136
    148c:	6f 2e       	mov	r6, r31
    148e:	71 2c       	mov	r7, r1
    1490:	f0 2d       	mov	r31, r0
	
uint8_t AttractCheckGameStart(uint16_t count){
	// pauses some time while checking player button inputs, skip and start game if pressed
	for(uint16_t delayCount = 0; delayCount < count; delayCount++){
		//delay some ms between each button light and check for game start
		if(isButtonDown(Player1ButtonX, Player1ButtonY) || isButtonDown(Player2ButtonX, Player2ButtonY)){
    1492:	60 e0       	ldi	r22, 0x00	; 0
    1494:	83 e0       	ldi	r24, 0x03	; 3
    1496:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    149a:	81 11       	cpse	r24, r1
    149c:	0d c0       	rjmp	.+26     	; 0x14b8 <AttractCheckGameStart+0x78>
    149e:	60 e0       	ldi	r22, 0x00	; 0
    14a0:	82 e0       	ldi	r24, 0x02	; 2
    14a2:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    14a6:	28 2e       	mov	r2, r24
    14a8:	81 11       	cpse	r24, r1
    14aa:	06 c0       	rjmp	.+12     	; 0x14b8 <AttractCheckGameStart+0x78>
    14ac:	83 ee       	ldi	r24, 0xE3	; 227
    14ae:	92 e0       	ldi	r25, 0x02	; 2
    14b0:	9c 83       	std	Y+4, r25	; 0x04
    14b2:	8b 83       	std	Y+3, r24	; 0x03
    14b4:	31 2c       	mov	r3, r1
    14b6:	8a c0       	rjmp	.+276    	; 0x15cc <AttractCheckGameStart+0x18c>
			GameMode = isButtonDown(Player2ButtonX, Player2ButtonY);
    14b8:	60 e0       	ldi	r22, 0x00	; 0
    14ba:	82 e0       	ldi	r24, 0x02	; 2
    14bc:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    14c0:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <GameMode>
			printf("STARTING %dP mode\n", GameMode+1);
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	01 96       	adiw	r24, 0x01	; 1
    14c8:	9f 93       	push	r25
    14ca:	8f 93       	push	r24
    14cc:	8c e7       	ldi	r24, 0x7C	; 124
    14ce:	91 e0       	ldi	r25, 0x01	; 1
    14d0:	9f 93       	push	r25
    14d2:	8f 93       	push	r24
    14d4:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <printf>
			return 1;	// instantly return and quit waiting
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	0f 90       	pop	r0
    14de:	0f 90       	pop	r0
    14e0:	22 24       	eor	r2, r2
    14e2:	23 94       	inc	r2
    14e4:	84 c0       	rjmp	.+264    	; 0x15ee <AttractCheckGameStart+0x1ae>
		}
		for(uint8_t x = 0; x < 6; x++){
			for(uint8_t y = 1; y < 6; y++){
				if(isButtonDown(x,y)){
    14e6:	64 2d       	mov	r22, r4
    14e8:	83 2d       	mov	r24, r3
    14ea:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    14ee:	88 23       	and	r24, r24
    14f0:	09 f4       	brne	.+2      	; 0x14f4 <AttractCheckGameStart+0xb4>
    14f2:	4e c0       	rjmp	.+156    	; 0x1590 <AttractCheckGameStart+0x150>
					if((attractButtonMemory[x] & (1 << y)) == 0){	//button not pressed
    14f4:	eb 81       	ldd	r30, Y+3	; 0x03
    14f6:	fc 81       	ldd	r31, Y+4	; 0x04
    14f8:	20 81       	ld	r18, Z
    14fa:	82 2f       	mov	r24, r18
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	04 2c       	mov	r0, r4
    1500:	02 c0       	rjmp	.+4      	; 0x1506 <AttractCheckGameStart+0xc6>
    1502:	95 95       	asr	r25
    1504:	87 95       	ror	r24
    1506:	0a 94       	dec	r0
    1508:	e2 f7       	brpl	.-8      	; 0x1502 <AttractCheckGameStart+0xc2>
    150a:	80 fd       	sbrc	r24, 0
    150c:	4e c0       	rjmp	.+156    	; 0x15aa <AttractCheckGameStart+0x16a>
						attractButtonMemory[x] |= (1 << y);
    150e:	c8 01       	movw	r24, r16
    1510:	04 2c       	mov	r0, r4
    1512:	02 c0       	rjmp	.+4      	; 0x1518 <AttractCheckGameStart+0xd8>
    1514:	88 0f       	add	r24, r24
    1516:	99 1f       	adc	r25, r25
    1518:	0a 94       	dec	r0
    151a:	e2 f7       	brpl	.-8      	; 0x1514 <AttractCheckGameStart+0xd4>
    151c:	28 2b       	or	r18, r24
    151e:	f7 01       	movw	r30, r14
    1520:	20 83       	st	Z, r18
						if(SoundEnabled){
    1522:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <SoundEnabled>
    1526:	88 23       	and	r24, r24
    1528:	41 f1       	breq	.+80     	; 0x157a <AttractCheckGameStart+0x13a>
							DDRB |= (1<<1);	//make ticking noise
    152a:	21 9a       	sbi	0x04, 1	; 4
							ICR1 = notes[rand() % 8];
    152c:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <rand>
    1530:	87 70       	andi	r24, 0x07	; 7
    1532:	90 78       	andi	r25, 0x80	; 128
    1534:	99 23       	and	r25, r25
    1536:	24 f4       	brge	.+8      	; 0x1540 <AttractCheckGameStart+0x100>
    1538:	01 97       	sbiw	r24, 0x01	; 1
    153a:	88 6f       	ori	r24, 0xF8	; 248
    153c:	9f 6f       	ori	r25, 0xFF	; 255
    153e:	01 96       	adiw	r24, 0x01	; 1
    1540:	88 0f       	add	r24, r24
    1542:	99 1f       	adc	r25, r25
    1544:	fc 01       	movw	r30, r24
    1546:	e8 53       	subi	r30, 0x38	; 56
    1548:	fd 4f       	sbci	r31, 0xFD	; 253
    154a:	80 81       	ld	r24, Z
    154c:	91 81       	ldd	r25, Z+1	; 0x01
    154e:	f4 01       	movw	r30, r8
    1550:	91 83       	std	Z+1, r25	; 0x01
    1552:	80 83       	st	Z, r24
							OCR1A = notes[4 + (TimeRemaining%2)] / 2;
    1554:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <TimeRemaining>
    1558:	80 fb       	bst	r24, 0
    155a:	cc 24       	eor	r12, r12
    155c:	c0 f8       	bld	r12, 0
    155e:	d1 2c       	mov	r13, r1
    1560:	f6 01       	movw	r30, r12
    1562:	34 96       	adiw	r30, 0x04	; 4
    1564:	ee 0f       	add	r30, r30
    1566:	ff 1f       	adc	r31, r31
    1568:	e8 53       	subi	r30, 0x38	; 56
    156a:	fd 4f       	sbci	r31, 0xFD	; 253
    156c:	80 81       	ld	r24, Z
    156e:	91 81       	ldd	r25, Z+1	; 0x01
    1570:	96 95       	lsr	r25
    1572:	87 95       	ror	r24
    1574:	f3 01       	movw	r30, r6
    1576:	91 83       	std	Z+1, r25	; 0x01
    1578:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    157a:	ff ef       	ldi	r31, 0xFF	; 255
    157c:	29 ef       	ldi	r18, 0xF9	; 249
    157e:	80 e0       	ldi	r24, 0x00	; 0
    1580:	f1 50       	subi	r31, 0x01	; 1
    1582:	20 40       	sbci	r18, 0x00	; 0
    1584:	80 40       	sbci	r24, 0x00	; 0
    1586:	e1 f7       	brne	.-8      	; 0x1580 <AttractCheckGameStart+0x140>
    1588:	00 c0       	rjmp	.+0      	; 0x158a <AttractCheckGameStart+0x14a>
    158a:	00 00       	nop
						}
						_delay_ms(20);
						DDRB &= ~(1<<1);
    158c:	21 98       	cbi	0x04, 1	; 4
    158e:	0d c0       	rjmp	.+26     	; 0x15aa <AttractCheckGameStart+0x16a>
					}
				}else{
					attractButtonMemory[x] &= ~(1 << y);
    1590:	c8 01       	movw	r24, r16
    1592:	04 2c       	mov	r0, r4
    1594:	02 c0       	rjmp	.+4      	; 0x159a <AttractCheckGameStart+0x15a>
    1596:	88 0f       	add	r24, r24
    1598:	99 1f       	adc	r25, r25
    159a:	0a 94       	dec	r0
    159c:	e2 f7       	brpl	.-8      	; 0x1596 <AttractCheckGameStart+0x156>
    159e:	80 95       	com	r24
    15a0:	eb 81       	ldd	r30, Y+3	; 0x03
    15a2:	fc 81       	ldd	r31, Y+4	; 0x04
    15a4:	90 81       	ld	r25, Z
    15a6:	89 23       	and	r24, r25
    15a8:	80 83       	st	Z, r24
    15aa:	ff ef       	ldi	r31, 0xFF	; 255
    15ac:	4f 1a       	sub	r4, r31
    15ae:	5f 0a       	sbc	r5, r31
			GameMode = isButtonDown(Player2ButtonX, Player2ButtonY);
			printf("STARTING %dP mode\n", GameMode+1);
			return 1;	// instantly return and quit waiting
		}
		for(uint8_t x = 0; x < 6; x++){
			for(uint8_t y = 1; y < 6; y++){
    15b0:	26 e0       	ldi	r18, 0x06	; 6
    15b2:	42 16       	cp	r4, r18
    15b4:	51 04       	cpc	r5, r1
    15b6:	09 f0       	breq	.+2      	; 0x15ba <AttractCheckGameStart+0x17a>
    15b8:	96 cf       	rjmp	.-212    	; 0x14e6 <AttractCheckGameStart+0xa6>
		if(isButtonDown(Player1ButtonX, Player1ButtonY) || isButtonDown(Player2ButtonX, Player2ButtonY)){
			GameMode = isButtonDown(Player2ButtonX, Player2ButtonY);
			printf("STARTING %dP mode\n", GameMode+1);
			return 1;	// instantly return and quit waiting
		}
		for(uint8_t x = 0; x < 6; x++){
    15ba:	33 94       	inc	r3
    15bc:	8b 81       	ldd	r24, Y+3	; 0x03
    15be:	9c 81       	ldd	r25, Y+4	; 0x04
    15c0:	01 96       	adiw	r24, 0x01	; 1
    15c2:	9c 83       	std	Y+4, r25	; 0x04
    15c4:	8b 83       	std	Y+3, r24	; 0x03
    15c6:	96 e0       	ldi	r25, 0x06	; 6
    15c8:	39 16       	cp	r3, r25
    15ca:	31 f0       	breq	.+12     	; 0x15d8 <AttractCheckGameStart+0x198>

uint8_t attractButtonMemory[] = {0,0,0,0,0,0};
	
uint8_t AttractCheckGameStart(uint16_t count){
	// pauses some time while checking player button inputs, skip and start game if pressed
	for(uint16_t delayCount = 0; delayCount < count; delayCount++){
    15cc:	44 24       	eor	r4, r4
    15ce:	43 94       	inc	r4
    15d0:	51 2c       	mov	r5, r1
    15d2:	eb 80       	ldd	r14, Y+3	; 0x03
    15d4:	fc 80       	ldd	r15, Y+4	; 0x04
    15d6:	87 cf       	rjmp	.-242    	; 0x14e6 <AttractCheckGameStart+0xa6>
    15d8:	ef ef       	ldi	r30, 0xFF	; 255
    15da:	ae 1a       	sub	r10, r30
    15dc:	be 0a       	sbc	r11, r30
    15de:	89 81       	ldd	r24, Y+1	; 0x01
    15e0:	9a 81       	ldd	r25, Y+2	; 0x02
    15e2:	8a 15       	cp	r24, r10
    15e4:	9b 05       	cpc	r25, r11
    15e6:	09 f0       	breq	.+2      	; 0x15ea <AttractCheckGameStart+0x1aa>
    15e8:	54 cf       	rjmp	.-344    	; 0x1492 <AttractCheckGameStart+0x52>
    15ea:	01 c0       	rjmp	.+2      	; 0x15ee <AttractCheckGameStart+0x1ae>
					attractButtonMemory[x] &= ~(1 << y);
				}
			}
		}
	}
	return 0;	// return that it finished without button presses
    15ec:	21 2c       	mov	r2, r1
}
    15ee:	82 2d       	mov	r24, r2
    15f0:	0f 90       	pop	r0
    15f2:	0f 90       	pop	r0
    15f4:	0f 90       	pop	r0
    15f6:	0f 90       	pop	r0
    15f8:	df 91       	pop	r29
    15fa:	cf 91       	pop	r28
    15fc:	1f 91       	pop	r17
    15fe:	0f 91       	pop	r16
    1600:	ff 90       	pop	r15
    1602:	ef 90       	pop	r14
    1604:	df 90       	pop	r13
    1606:	cf 90       	pop	r12
    1608:	bf 90       	pop	r11
    160a:	af 90       	pop	r10
    160c:	9f 90       	pop	r9
    160e:	8f 90       	pop	r8
    1610:	7f 90       	pop	r7
    1612:	6f 90       	pop	r6
    1614:	5f 90       	pop	r5
    1616:	4f 90       	pop	r4
    1618:	3f 90       	pop	r3
    161a:	2f 90       	pop	r2
    161c:	08 95       	ret

0000161e <Attractive>:
	setScoreSegment(TIMER10, 18);
	setScoreSegment(TIMER100, 18);

}

void Attractive(){
    161e:	cf 92       	push	r12
    1620:	df 92       	push	r13
    1622:	ff 92       	push	r15
    1624:	0f 93       	push	r16
    1626:	1f 93       	push	r17
    1628:	cf 93       	push	r28
    162a:	df 93       	push	r29
	setScore(2, HighScore1P);
    162c:	60 91 02 03 	lds	r22, 0x0302	; 0x800302 <HighScore1P>
    1630:	70 91 03 03 	lds	r23, 0x0303	; 0x800303 <HighScore1P+0x1>
    1634:	82 e0       	ldi	r24, 0x02	; 2
    1636:	0e 94 de 00 	call	0x1bc	; 0x1bc <setScore>
	
	setScoreSegment(TIMER1, 18); // 18 is the dash
    163a:	62 e1       	ldi	r22, 0x12	; 18
    163c:	83 e0       	ldi	r24, 0x03	; 3
    163e:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
	setScoreSegment(TIMER10, 18);
    1642:	62 e1       	ldi	r22, 0x12	; 18
    1644:	84 e0       	ldi	r24, 0x04	; 4
    1646:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
	setScoreSegment(TIMER100, 18);
    164a:	62 e1       	ldi	r22, 0x12	; 18
    164c:	85 e0       	ldi	r24, 0x05	; 5
    164e:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
	
	setScore(0, HighScore2P);
    1652:	60 91 16 03 	lds	r22, 0x0316	; 0x800316 <HighScore2P>
    1656:	70 91 17 03 	lds	r23, 0x0317	; 0x800317 <HighScore2P+0x1>
    165a:	80 e0       	ldi	r24, 0x00	; 0
    165c:	0e 94 de 00 	call	0x1bc	; 0x1bc <setScore>
	while(1){
		uint8_t blinkyMode = rand() % AttractPatternCount;	// todo make random, ADD DISPLAY BLANKING
    1660:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <rand>
		switch(blinkyMode){	// multiple blinky modes (todo randomly pick one)
			case 0:
			while(1){
				for(uint8_t y = 1; y < 6; y++){
					for(uint8_t x = 0; x < 6; x++){
						setButtonLed( (y%2)==0 ? x : (5-x) ,y,1);
    1664:	0f 2e       	mov	r0, r31
    1666:	f5 e0       	ldi	r31, 0x05	; 5
    1668:	ff 2e       	mov	r15, r31
    166a:	f0 2d       	mov	r31, r0
    166c:	68 94       	set
    166e:	cc 24       	eor	r12, r12
    1670:	c1 f8       	bld	r12, 1
    1672:	d1 2c       	mov	r13, r1
	while(1){
		uint8_t blinkyMode = rand() % AttractPatternCount;	// todo make random, ADD DISPLAY BLANKING
		switch(blinkyMode){	// multiple blinky modes (todo randomly pick one)
			case 0:
			while(1){
				for(uint8_t y = 1; y < 6; y++){
    1674:	11 e0       	ldi	r17, 0x01	; 1
    1676:	2e c0       	rjmp	.+92     	; 0x16d4 <Attractive+0xb6>
					for(uint8_t x = 0; x < 6; x++){
						setButtonLed( (y%2)==0 ? x : (5-x) ,y,1);
    1678:	0d 2f       	mov	r16, r29
    167a:	dd 23       	and	r29, r29
    167c:	19 f0       	breq	.+6      	; 0x1684 <Attractive+0x66>
    167e:	8f 2d       	mov	r24, r15
    1680:	8c 1b       	sub	r24, r28
    1682:	01 c0       	rjmp	.+2      	; 0x1686 <Attractive+0x68>
    1684:	8c 2f       	mov	r24, r28
    1686:	41 e0       	ldi	r20, 0x01	; 1
    1688:	61 2f       	mov	r22, r17
    168a:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
						if( AttractCheckGameStart(600) ){
    168e:	88 e5       	ldi	r24, 0x58	; 88
    1690:	92 e0       	ldi	r25, 0x02	; 2
    1692:	0e 94 20 0a 	call	0x1440	; 0x1440 <AttractCheckGameStart>
    1696:	81 11       	cpse	r24, r1
    1698:	61 c0       	rjmp	.+194    	; 0x175c <Attractive+0x13e>
		uint8_t blinkyMode = rand() % AttractPatternCount;	// todo make random, ADD DISPLAY BLANKING
		switch(blinkyMode){	// multiple blinky modes (todo randomly pick one)
			case 0:
			while(1){
				for(uint8_t y = 1; y < 6; y++){
					for(uint8_t x = 0; x < 6; x++){
    169a:	cf 5f       	subi	r28, 0xFF	; 255
    169c:	c6 30       	cpi	r28, 0x06	; 6
    169e:	61 f7       	brne	.-40     	; 0x1678 <Attractive+0x5a>
						if( AttractCheckGameStart(600) ){
							
							goto EndAttract;
						}
					}
					setButtonLed(Player1ButtonX, Player1ButtonY, y%2);
    16a0:	40 2f       	mov	r20, r16
    16a2:	60 e0       	ldi	r22, 0x00	; 0
    16a4:	83 e0       	ldi	r24, 0x03	; 3
    16a6:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
					setButtonLed(Player2ButtonX, Player2ButtonY, (y+1) % 2);
    16aa:	a6 01       	movw	r20, r12
    16ac:	41 70       	andi	r20, 0x01	; 1
    16ae:	50 78       	andi	r21, 0x80	; 128
    16b0:	55 23       	and	r21, r21
    16b2:	34 f4       	brge	.+12     	; 0x16c0 <Attractive+0xa2>
    16b4:	41 50       	subi	r20, 0x01	; 1
    16b6:	51 09       	sbc	r21, r1
    16b8:	4e 6f       	ori	r20, 0xFE	; 254
    16ba:	5f 6f       	ori	r21, 0xFF	; 255
    16bc:	4f 5f       	subi	r20, 0xFF	; 255
    16be:	5f 4f       	sbci	r21, 0xFF	; 255
    16c0:	60 e0       	ldi	r22, 0x00	; 0
    16c2:	82 e0       	ldi	r24, 0x02	; 2
    16c4:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
	while(1){
		uint8_t blinkyMode = rand() % AttractPatternCount;	// todo make random, ADD DISPLAY BLANKING
		switch(blinkyMode){	// multiple blinky modes (todo randomly pick one)
			case 0:
			while(1){
				for(uint8_t y = 1; y < 6; y++){
    16c8:	1f 5f       	subi	r17, 0xFF	; 255
    16ca:	8f ef       	ldi	r24, 0xFF	; 255
    16cc:	c8 1a       	sub	r12, r24
    16ce:	d8 0a       	sbc	r13, r24
    16d0:	16 30       	cpi	r17, 0x06	; 6
    16d2:	99 f1       	breq	.+102    	; 0x173a <Attractive+0x11c>
	setScoreSegment(TIMER10, 18);
	setScoreSegment(TIMER100, 18);

}

void Attractive(){
    16d4:	c0 e0       	ldi	r28, 0x00	; 0
		switch(blinkyMode){	// multiple blinky modes (todo randomly pick one)
			case 0:
			while(1){
				for(uint8_t y = 1; y < 6; y++){
					for(uint8_t x = 0; x < 6; x++){
						setButtonLed( (y%2)==0 ? x : (5-x) ,y,1);
    16d6:	d1 2f       	mov	r29, r17
    16d8:	d1 70       	andi	r29, 0x01	; 1
    16da:	ce cf       	rjmp	.-100    	; 0x1678 <Attractive+0x5a>
					setButtonLed(Player1ButtonX, Player1ButtonY, y%2);
					setButtonLed(Player2ButtonX, Player2ButtonY, (y+1) % 2);
				}
				for(uint8_t y = 1; y < 6; y++){
					for(uint8_t x = 0; x < 6; x++){
						setButtonLed( (y%2)==0 ? x : (5-x) ,y,0);
    16dc:	0d 2f       	mov	r16, r29
    16de:	dd 23       	and	r29, r29
    16e0:	19 f0       	breq	.+6      	; 0x16e8 <Attractive+0xca>
    16e2:	8f 2d       	mov	r24, r15
    16e4:	8c 1b       	sub	r24, r28
    16e6:	01 c0       	rjmp	.+2      	; 0x16ea <Attractive+0xcc>
    16e8:	8c 2f       	mov	r24, r28
    16ea:	40 e0       	ldi	r20, 0x00	; 0
    16ec:	61 2f       	mov	r22, r17
    16ee:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
						if( AttractCheckGameStart(600) ){
    16f2:	88 e5       	ldi	r24, 0x58	; 88
    16f4:	92 e0       	ldi	r25, 0x02	; 2
    16f6:	0e 94 20 0a 	call	0x1440	; 0x1440 <AttractCheckGameStart>
    16fa:	81 11       	cpse	r24, r1
    16fc:	2f c0       	rjmp	.+94     	; 0x175c <Attractive+0x13e>
					}
					setButtonLed(Player1ButtonX, Player1ButtonY, y%2);
					setButtonLed(Player2ButtonX, Player2ButtonY, (y+1) % 2);
				}
				for(uint8_t y = 1; y < 6; y++){
					for(uint8_t x = 0; x < 6; x++){
    16fe:	cf 5f       	subi	r28, 0xFF	; 255
    1700:	c6 30       	cpi	r28, 0x06	; 6
    1702:	61 f7       	brne	.-40     	; 0x16dc <Attractive+0xbe>
						if( AttractCheckGameStart(600) ){
							
							goto EndAttract;
						}
					}
					setButtonLed(Player1ButtonX, Player1ButtonY, (y+1)%2);
    1704:	a6 01       	movw	r20, r12
    1706:	41 70       	andi	r20, 0x01	; 1
    1708:	50 78       	andi	r21, 0x80	; 128
    170a:	55 23       	and	r21, r21
    170c:	34 f4       	brge	.+12     	; 0x171a <Attractive+0xfc>
    170e:	41 50       	subi	r20, 0x01	; 1
    1710:	51 09       	sbc	r21, r1
    1712:	4e 6f       	ori	r20, 0xFE	; 254
    1714:	5f 6f       	ori	r21, 0xFF	; 255
    1716:	4f 5f       	subi	r20, 0xFF	; 255
    1718:	5f 4f       	sbci	r21, 0xFF	; 255
    171a:	60 e0       	ldi	r22, 0x00	; 0
    171c:	83 e0       	ldi	r24, 0x03	; 3
    171e:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
					setButtonLed(Player2ButtonX, Player2ButtonY,(y) % 2);
    1722:	40 2f       	mov	r20, r16
    1724:	60 e0       	ldi	r22, 0x00	; 0
    1726:	82 e0       	ldi	r24, 0x02	; 2
    1728:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
						}
					}
					setButtonLed(Player1ButtonX, Player1ButtonY, y%2);
					setButtonLed(Player2ButtonX, Player2ButtonY, (y+1) % 2);
				}
				for(uint8_t y = 1; y < 6; y++){
    172c:	1f 5f       	subi	r17, 0xFF	; 255
    172e:	8f ef       	ldi	r24, 0xFF	; 255
    1730:	c8 1a       	sub	r12, r24
    1732:	d8 0a       	sbc	r13, r24
    1734:	16 30       	cpi	r17, 0x06	; 6
    1736:	31 f4       	brne	.+12     	; 0x1744 <Attractive+0x126>
    1738:	99 cf       	rjmp	.-206    	; 0x166c <Attractive+0x4e>
    173a:	68 94       	set
    173c:	cc 24       	eor	r12, r12
    173e:	c1 f8       	bld	r12, 1
    1740:	d1 2c       	mov	r13, r1
    1742:	11 e0       	ldi	r17, 0x01	; 1
	while(1){
		uint8_t blinkyMode = rand() % AttractPatternCount;	// todo make random, ADD DISPLAY BLANKING
		switch(blinkyMode){	// multiple blinky modes (todo randomly pick one)
			case 0:
			while(1){
				for(uint8_t y = 1; y < 6; y++){
    1744:	c0 e0       	ldi	r28, 0x00	; 0
					setButtonLed(Player1ButtonX, Player1ButtonY, y%2);
					setButtonLed(Player2ButtonX, Player2ButtonY, (y+1) % 2);
				}
				for(uint8_t y = 1; y < 6; y++){
					for(uint8_t x = 0; x < 6; x++){
						setButtonLed( (y%2)==0 ? x : (5-x) ,y,0);
    1746:	d1 2f       	mov	r29, r17
    1748:	d1 70       	andi	r29, 0x01	; 1
    174a:	c8 cf       	rjmp	.-112    	; 0x16dc <Attractive+0xbe>
			}
		}
	}
	EndAttract:
	for(uint8_t scoredisp = 0; scoredisp < 9; scoredisp++){
		setScoreSegment(scoredisp, 16);	//turn off the displays
    174c:	60 e1       	ldi	r22, 0x10	; 16
    174e:	8c 2f       	mov	r24, r28
    1750:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
				}
			}
		}
	}
	EndAttract:
	for(uint8_t scoredisp = 0; scoredisp < 9; scoredisp++){
    1754:	cf 5f       	subi	r28, 0xFF	; 255
    1756:	c9 30       	cpi	r28, 0x09	; 9
    1758:	c9 f7       	brne	.-14     	; 0x174c <Attractive+0x12e>
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <Attractive+0x142>
    175c:	c0 e0       	ldi	r28, 0x00	; 0
    175e:	f6 cf       	rjmp	.-20     	; 0x174c <Attractive+0x12e>
		setScoreSegment(scoredisp, 16);	//turn off the displays
	}
	return;		// start the game

}
    1760:	df 91       	pop	r29
    1762:	cf 91       	pop	r28
    1764:	1f 91       	pop	r17
    1766:	0f 91       	pop	r16
    1768:	ff 90       	pop	r15
    176a:	df 90       	pop	r13
    176c:	cf 90       	pop	r12
    176e:	08 95       	ret

00001770 <EEPROM_write>:


void EEPROM_write(uint16_t uiAddress, uint8_t ucData)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
    1770:	f9 99       	sbic	0x1f, 1	; 31
    1772:	fe cf       	rjmp	.-4      	; 0x1770 <EEPROM_write>
	;
	/* Set up address and Data Registers */
	EEAR = uiAddress;
    1774:	92 bd       	out	0x22, r25	; 34
    1776:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
    1778:	60 bd       	out	0x20, r22	; 32
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMPE);
    177a:	fa 9a       	sbi	0x1f, 2	; 31
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEPE);
    177c:	f9 9a       	sbi	0x1f, 1	; 31
    177e:	08 95       	ret

00001780 <debugMode>:
	if(TimeRemaining > 0){
		TimeRemaining--;
	}
}

void debugMode(){
    1780:	3f 92       	push	r3
    1782:	4f 92       	push	r4
    1784:	5f 92       	push	r5
    1786:	6f 92       	push	r6
    1788:	7f 92       	push	r7
    178a:	8f 92       	push	r8
    178c:	9f 92       	push	r9
    178e:	af 92       	push	r10
    1790:	bf 92       	push	r11
    1792:	cf 92       	push	r12
    1794:	df 92       	push	r13
    1796:	ef 92       	push	r14
    1798:	ff 92       	push	r15
    179a:	0f 93       	push	r16
    179c:	1f 93       	push	r17
    179e:	cf 93       	push	r28
    17a0:	df 93       	push	r29
	uint8_t page = 0;
	uint8_t maxpages = 7;
	
	DDRB |= (1<<1);
    17a2:	21 9a       	sbi	0x04, 1	; 4
	ICR1 = notes[0];		// play debug tone
    17a4:	a6 e8       	ldi	r26, 0x86	; 134
    17a6:	b0 e0       	ldi	r27, 0x00	; 0
    17a8:	61 ec       	ldi	r22, 0xC1	; 193
    17aa:	71 e1       	ldi	r23, 0x11	; 17
    17ac:	11 96       	adiw	r26, 0x01	; 1
    17ae:	7c 93       	st	X, r23
    17b0:	6e 93       	st	-X, r22
	OCR1A = notes[0] / 2;
    17b2:	e8 e8       	ldi	r30, 0x88	; 136
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	40 ee       	ldi	r20, 0xE0	; 224
    17b8:	58 e0       	ldi	r21, 0x08	; 8
    17ba:	51 83       	std	Z+1, r21	; 0x01
    17bc:	40 83       	st	Z, r20
    17be:	1f ef       	ldi	r17, 0xFF	; 255
    17c0:	21 ee       	ldi	r18, 0xE1	; 225
    17c2:	84 e0       	ldi	r24, 0x04	; 4
    17c4:	11 50       	subi	r17, 0x01	; 1
    17c6:	20 40       	sbci	r18, 0x00	; 0
    17c8:	80 40       	sbci	r24, 0x00	; 0
    17ca:	e1 f7       	brne	.-8      	; 0x17c4 <debugMode+0x44>
    17cc:	00 c0       	rjmp	.+0      	; 0x17ce <debugMode+0x4e>
    17ce:	00 00       	nop
	_delay_ms(100);
	ICR1 = notes[1];
    17d0:	22 ed       	ldi	r18, 0xD2	; 210
    17d2:	3f e0       	ldi	r19, 0x0F	; 15
    17d4:	11 96       	adiw	r26, 0x01	; 1
    17d6:	3c 93       	st	X, r19
    17d8:	2e 93       	st	-X, r18
	OCR1A = notes[1] / 2;
    17da:	89 ee       	ldi	r24, 0xE9	; 233
    17dc:	97 e0       	ldi	r25, 0x07	; 7
    17de:	91 83       	std	Z+1, r25	; 0x01
    17e0:	80 83       	st	Z, r24
    17e2:	cf ef       	ldi	r28, 0xFF	; 255
    17e4:	d1 ee       	ldi	r29, 0xE1	; 225
    17e6:	14 e0       	ldi	r17, 0x04	; 4
    17e8:	c1 50       	subi	r28, 0x01	; 1
    17ea:	d0 40       	sbci	r29, 0x00	; 0
    17ec:	10 40       	sbci	r17, 0x00	; 0
    17ee:	e1 f7       	brne	.-8      	; 0x17e8 <debugMode+0x68>
    17f0:	00 c0       	rjmp	.+0      	; 0x17f2 <debugMode+0x72>
    17f2:	00 00       	nop
	_delay_ms(100);
	ICR1 = notes[0];
    17f4:	11 96       	adiw	r26, 0x01	; 1
    17f6:	7c 93       	st	X, r23
    17f8:	6e 93       	st	-X, r22
	OCR1A = notes[0] / 2;
    17fa:	51 83       	std	Z+1, r21	; 0x01
    17fc:	40 83       	st	Z, r20
    17fe:	4f ef       	ldi	r20, 0xFF	; 255
    1800:	51 ee       	ldi	r21, 0xE1	; 225
    1802:	64 e0       	ldi	r22, 0x04	; 4
    1804:	41 50       	subi	r20, 0x01	; 1
    1806:	50 40       	sbci	r21, 0x00	; 0
    1808:	60 40       	sbci	r22, 0x00	; 0
    180a:	e1 f7       	brne	.-8      	; 0x1804 <debugMode+0x84>
    180c:	00 c0       	rjmp	.+0      	; 0x180e <debugMode+0x8e>
    180e:	00 00       	nop
	_delay_ms(100);
	ICR1 = notes[1];
    1810:	11 96       	adiw	r26, 0x01	; 1
    1812:	3c 93       	st	X, r19
    1814:	2e 93       	st	-X, r18
	OCR1A = notes[1] / 2;
    1816:	91 83       	std	Z+1, r25	; 0x01
    1818:	80 83       	st	Z, r24
    181a:	8f ef       	ldi	r24, 0xFF	; 255
    181c:	91 ee       	ldi	r25, 0xE1	; 225
    181e:	c4 e0       	ldi	r28, 0x04	; 4
    1820:	81 50       	subi	r24, 0x01	; 1
    1822:	90 40       	sbci	r25, 0x00	; 0
    1824:	c0 40       	sbci	r28, 0x00	; 0
    1826:	e1 f7       	brne	.-8      	; 0x1820 <debugMode+0xa0>
    1828:	00 c0       	rjmp	.+0      	; 0x182a <debugMode+0xaa>
    182a:	00 00       	nop
	_delay_ms(100);
	DDRB &= ~(1<<1);
    182c:	21 98       	cbi	0x04, 1	; 4
	
	while(isButtonDown(0,1)){
    182e:	61 e0       	ldi	r22, 0x01	; 1
    1830:	80 e0       	ldi	r24, 0x00	; 0
    1832:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    1836:	81 11       	cpse	r24, r1
    1838:	fa cf       	rjmp	.-12     	; 0x182e <debugMode+0xae>
    183a:	df ef       	ldi	r29, 0xFF	; 255
    183c:	e0 e7       	ldi	r30, 0x70	; 112
    183e:	f2 e0       	ldi	r31, 0x02	; 2
    1840:	d1 50       	subi	r29, 0x01	; 1
    1842:	e0 40       	sbci	r30, 0x00	; 0
    1844:	f0 40       	sbci	r31, 0x00	; 0
    1846:	e1 f7       	brne	.-8      	; 0x1840 <debugMode+0xc0>
    1848:	00 c0       	rjmp	.+0      	; 0x184a <debugMode+0xca>
    184a:	00 00       	nop
		TimeRemaining--;
	}
}

void debugMode(){
	uint8_t page = 0;
    184c:	31 2c       	mov	r3, r1
						TCNT4 = 6250;
					}
				}
			}
			if(isButtonDown(3,5)){	//DOWN
				TCNT4 = 0;
    184e:	c4 ea       	ldi	r28, 0xA4	; 164
    1850:	d0 e0       	ldi	r29, 0x00	; 0
				SoundEnabled = (SoundEnabled + 1) % 2;
				
				DDRB |= (1<<1);	//play tone
				ICR1 = notes[1];
    1852:	0f 2e       	mov	r0, r31
    1854:	f6 e8       	ldi	r31, 0x86	; 134
    1856:	ef 2e       	mov	r14, r31
    1858:	f1 2c       	mov	r15, r1
    185a:	f0 2d       	mov	r31, r0
    185c:	0f 2e       	mov	r0, r31
    185e:	f2 ed       	ldi	r31, 0xD2	; 210
    1860:	af 2e       	mov	r10, r31
    1862:	ff e0       	ldi	r31, 0x0F	; 15
    1864:	bf 2e       	mov	r11, r31
    1866:	f0 2d       	mov	r31, r0
				OCR1A = notes[1] / 2;
    1868:	08 e8       	ldi	r16, 0x88	; 136
    186a:	10 e0       	ldi	r17, 0x00	; 0
    186c:	0f 2e       	mov	r0, r31
    186e:	f9 ee       	ldi	r31, 0xE9	; 233
    1870:	cf 2e       	mov	r12, r31
    1872:	f7 e0       	ldi	r31, 0x07	; 7
    1874:	df 2e       	mov	r13, r31
    1876:	f0 2d       	mov	r31, r0
				
				while(isButtonDown(3,5)){
					setScore(LEFT, SoundEnabled);
					if(TCNT4 > 6500){
						SoundEnabled = (SoundEnabled + 1) % 2;
						TCNT4 = 6250;
    1878:	0f 2e       	mov	r0, r31
    187a:	fa e6       	ldi	r31, 0x6A	; 106
    187c:	8f 2e       	mov	r8, r31
    187e:	f8 e1       	ldi	r31, 0x18	; 24
    1880:	9f 2e       	mov	r9, r31
    1882:	f0 2d       	mov	r31, r0
			if(isButtonDown(3,4)){	//UP
				TCNT4 = 0;
				SoundEnabled = (SoundEnabled + 1) % 2;
				
				DDRB |= (1<<1);	//play tone
				ICR1 = notes[2];
    1884:	0f 2e       	mov	r0, r31
    1886:	fe ee       	ldi	r31, 0xEE	; 238
    1888:	4f 2e       	mov	r4, r31
    188a:	fe e0       	ldi	r31, 0x0E	; 14
    188c:	5f 2e       	mov	r5, r31
    188e:	f0 2d       	mov	r31, r0
					}
				}
			}
			if(isButtonDown(3,5)){	//DOWN
				TCNT4 = 0;
				MultTimeKill = (MultTimeKill + 999) % 1000;
    1890:	0f 2e       	mov	r0, r31
    1892:	f8 ee       	ldi	r31, 0xE8	; 232
    1894:	6f 2e       	mov	r6, r31
    1896:	f3 e0       	ldi	r31, 0x03	; 3
    1898:	7f 2e       	mov	r7, r31
    189a:	f0 2d       	mov	r31, r0
	}
	_delay_ms(50);
	
	while(1){
		
		switch(page){
    189c:	83 2d       	mov	r24, r3
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	87 30       	cpi	r24, 0x07	; 7
    18a2:	91 05       	cpc	r25, r1
    18a4:	08 f0       	brcs	.+2      	; 0x18a8 <debugMode+0x128>
    18a6:	8a c6       	rjmp	.+3348   	; 0x25bc <debugMode+0xe3c>
    18a8:	fc 01       	movw	r30, r24
    18aa:	e6 5a       	subi	r30, 0xA6	; 166
    18ac:	ff 4f       	sbci	r31, 0xFF	; 255
    18ae:	0c 94 eb 15 	jmp	0x2bd6	; 0x2bd6 <__tablejump2__>
			case 0:	//high score 1p
			setScoreSegment(RIGHT100, 19);	//HI-SC1
    18b2:	63 e1       	ldi	r22, 0x13	; 19
    18b4:	88 e0       	ldi	r24, 0x08	; 8
    18b6:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
			setScoreSegment(RIGHT10, 1);
    18ba:	61 e0       	ldi	r22, 0x01	; 1
    18bc:	87 e0       	ldi	r24, 0x07	; 7
    18be:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
			setScoreSegment(RIGHT1, 18);
    18c2:	62 e1       	ldi	r22, 0x12	; 18
    18c4:	86 e0       	ldi	r24, 0x06	; 6
    18c6:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
			setScoreSegment(TIMER100, 5);
    18ca:	65 e0       	ldi	r22, 0x05	; 5
    18cc:	85 e0       	ldi	r24, 0x05	; 5
    18ce:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
			setScoreSegment(TIMER10, 0xC);
    18d2:	6c e0       	ldi	r22, 0x0C	; 12
    18d4:	84 e0       	ldi	r24, 0x04	; 4
    18d6:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
			setScoreSegment(TIMER1, 1);
    18da:	61 e0       	ldi	r22, 0x01	; 1
    18dc:	83 e0       	ldi	r24, 0x03	; 3
    18de:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
			setScore(LEFT, HighScore1P);
    18e2:	60 91 02 03 	lds	r22, 0x0302	; 0x800302 <HighScore1P>
    18e6:	70 91 03 03 	lds	r23, 0x0303	; 0x800303 <HighScore1P+0x1>
    18ea:	80 e0       	ldi	r24, 0x00	; 0
    18ec:	0e 94 de 00 	call	0x1bc	; 0x1bc <setScore>
			
			setButtonLed(3,2,1);		// RESET score led
    18f0:	41 e0       	ldi	r20, 0x01	; 1
    18f2:	62 e0       	ldi	r22, 0x02	; 2
    18f4:	83 e0       	ldi	r24, 0x03	; 3
    18f6:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
			
			if(isButtonDown(3,2)){
    18fa:	62 e0       	ldi	r22, 0x02	; 2
    18fc:	83 e0       	ldi	r24, 0x03	; 3
    18fe:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    1902:	88 23       	and	r24, r24
    1904:	21 f1       	breq	.+72     	; 0x194e <debugMode+0x1ce>
				HighScore1P = 0;
    1906:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <HighScore1P+0x1>
    190a:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <HighScore1P>
				setScore(LEFT, HighScore1P);
    190e:	60 e0       	ldi	r22, 0x00	; 0
    1910:	70 e0       	ldi	r23, 0x00	; 0
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	0e 94 de 00 	call	0x1bc	; 0x1bc <setScore>
				DDRB |= (1<<1);	//play reset
    1918:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[3];
    191a:	8d e4       	ldi	r24, 0x4D	; 77
    191c:	9d e0       	ldi	r25, 0x0D	; 13
    191e:	f7 01       	movw	r30, r14
    1920:	91 83       	std	Z+1, r25	; 0x01
    1922:	80 83       	st	Z, r24
				OCR1A = notes[3] / 2;
    1924:	86 ea       	ldi	r24, 0xA6	; 166
    1926:	96 e0       	ldi	r25, 0x06	; 6
    1928:	f8 01       	movw	r30, r16
    192a:	91 83       	std	Z+1, r25	; 0x01
    192c:	80 83       	st	Z, r24
    192e:	ff e7       	ldi	r31, 0x7F	; 127
    1930:	25 eb       	ldi	r18, 0xB5	; 181
    1932:	41 e0       	ldi	r20, 0x01	; 1
    1934:	f1 50       	subi	r31, 0x01	; 1
    1936:	20 40       	sbci	r18, 0x00	; 0
    1938:	40 40       	sbci	r20, 0x00	; 0
    193a:	e1 f7       	brne	.-8      	; 0x1934 <debugMode+0x1b4>
    193c:	00 c0       	rjmp	.+0      	; 0x193e <debugMode+0x1be>
    193e:	00 00       	nop
				_delay_ms(35);
				DDRB &= ~(1<<1);
    1940:	21 98       	cbi	0x04, 1	; 4
				while(isButtonDown(3,2))
    1942:	62 e0       	ldi	r22, 0x02	; 2
    1944:	83 e0       	ldi	r24, 0x03	; 3
    1946:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    194a:	81 11       	cpse	r24, r1
    194c:	fa cf       	rjmp	.-12     	; 0x1942 <debugMode+0x1c2>
				{
					//wait for unpush
				}
			}
			
			if(isButtonDown(3,4)){	//UP
    194e:	64 e0       	ldi	r22, 0x04	; 4
    1950:	83 e0       	ldi	r24, 0x03	; 3
    1952:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    1956:	88 23       	and	r24, r24
    1958:	09 f4       	brne	.+2      	; 0x195c <debugMode+0x1dc>
    195a:	6f c0       	rjmp	.+222    	; 0x1a3a <debugMode+0x2ba>
				TCNT4 = 0;
    195c:	19 82       	std	Y+1, r1	; 0x01
    195e:	18 82       	st	Y, r1
				HighScore1P = (HighScore1P + 1) % 1000;
    1960:	40 91 02 03 	lds	r20, 0x0302	; 0x800302 <HighScore1P>
    1964:	50 91 03 03 	lds	r21, 0x0303	; 0x800303 <HighScore1P+0x1>
    1968:	4f 5f       	subi	r20, 0xFF	; 255
    196a:	5f 4f       	sbci	r21, 0xFF	; 255
    196c:	9a 01       	movw	r18, r20
    196e:	36 95       	lsr	r19
    1970:	27 95       	ror	r18
    1972:	36 95       	lsr	r19
    1974:	27 95       	ror	r18
    1976:	36 95       	lsr	r19
    1978:	27 95       	ror	r18
    197a:	a5 ec       	ldi	r26, 0xC5	; 197
    197c:	b0 e2       	ldi	r27, 0x20	; 32
    197e:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <__umulhisi3>
    1982:	92 95       	swap	r25
    1984:	82 95       	swap	r24
    1986:	8f 70       	andi	r24, 0x0F	; 15
    1988:	89 27       	eor	r24, r25
    198a:	9f 70       	andi	r25, 0x0F	; 15
    198c:	89 27       	eor	r24, r25
    198e:	86 9d       	mul	r24, r6
    1990:	90 01       	movw	r18, r0
    1992:	87 9d       	mul	r24, r7
    1994:	30 0d       	add	r19, r0
    1996:	96 9d       	mul	r25, r6
    1998:	30 0d       	add	r19, r0
    199a:	11 24       	eor	r1, r1
    199c:	42 1b       	sub	r20, r18
    199e:	53 0b       	sbc	r21, r19
    19a0:	50 93 03 03 	sts	0x0303, r21	; 0x800303 <HighScore1P+0x1>
    19a4:	40 93 02 03 	sts	0x0302, r20	; 0x800302 <HighScore1P>
				
				DDRB |= (1<<1);	//play tone
    19a8:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[2];
    19aa:	f7 01       	movw	r30, r14
    19ac:	51 82       	std	Z+1, r5	; 0x01
    19ae:	40 82       	st	Z, r4
				OCR1A = notes[2] / 2;
    19b0:	47 e7       	ldi	r20, 0x77	; 119
    19b2:	57 e0       	ldi	r21, 0x07	; 7
    19b4:	f8 01       	movw	r30, r16
    19b6:	51 83       	std	Z+1, r21	; 0x01
    19b8:	40 83       	st	Z, r20
    19ba:	8f e5       	ldi	r24, 0x5F	; 95
    19bc:	9a ee       	ldi	r25, 0xEA	; 234
    19be:	01 97       	sbiw	r24, 0x01	; 1
    19c0:	f1 f7       	brne	.-4      	; 0x19be <debugMode+0x23e>
    19c2:	00 c0       	rjmp	.+0      	; 0x19c4 <debugMode+0x244>
    19c4:	00 00       	nop
				_delay_ms(15);
				DDRB &= ~(1<<1);
    19c6:	21 98       	cbi	0x04, 1	; 4
				
				while(isButtonDown(3,4)){
    19c8:	32 c0       	rjmp	.+100    	; 0x1a2e <debugMode+0x2ae>
					setScore(LEFT, HighScore1P);
    19ca:	60 91 02 03 	lds	r22, 0x0302	; 0x800302 <HighScore1P>
    19ce:	70 91 03 03 	lds	r23, 0x0303	; 0x800303 <HighScore1P+0x1>
    19d2:	80 e0       	ldi	r24, 0x00	; 0
    19d4:	0e 94 de 00 	call	0x1bc	; 0x1bc <setScore>
					if(TCNT4 > 6500){
    19d8:	88 81       	ld	r24, Y
    19da:	99 81       	ldd	r25, Y+1	; 0x01
    19dc:	85 36       	cpi	r24, 0x65	; 101
    19de:	99 41       	sbci	r25, 0x19	; 25
    19e0:	30 f1       	brcs	.+76     	; 0x1a2e <debugMode+0x2ae>
						HighScore1P = (HighScore1P + 1) % 1000;
    19e2:	40 91 02 03 	lds	r20, 0x0302	; 0x800302 <HighScore1P>
    19e6:	50 91 03 03 	lds	r21, 0x0303	; 0x800303 <HighScore1P+0x1>
    19ea:	4f 5f       	subi	r20, 0xFF	; 255
    19ec:	5f 4f       	sbci	r21, 0xFF	; 255
    19ee:	9a 01       	movw	r18, r20
    19f0:	36 95       	lsr	r19
    19f2:	27 95       	ror	r18
    19f4:	36 95       	lsr	r19
    19f6:	27 95       	ror	r18
    19f8:	36 95       	lsr	r19
    19fa:	27 95       	ror	r18
    19fc:	a5 ec       	ldi	r26, 0xC5	; 197
    19fe:	b0 e2       	ldi	r27, 0x20	; 32
    1a00:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <__umulhisi3>
    1a04:	92 95       	swap	r25
    1a06:	82 95       	swap	r24
    1a08:	8f 70       	andi	r24, 0x0F	; 15
    1a0a:	89 27       	eor	r24, r25
    1a0c:	9f 70       	andi	r25, 0x0F	; 15
    1a0e:	89 27       	eor	r24, r25
    1a10:	86 9d       	mul	r24, r6
    1a12:	90 01       	movw	r18, r0
    1a14:	87 9d       	mul	r24, r7
    1a16:	30 0d       	add	r19, r0
    1a18:	96 9d       	mul	r25, r6
    1a1a:	30 0d       	add	r19, r0
    1a1c:	11 24       	eor	r1, r1
    1a1e:	42 1b       	sub	r20, r18
    1a20:	53 0b       	sbc	r21, r19
    1a22:	50 93 03 03 	sts	0x0303, r21	; 0x800303 <HighScore1P+0x1>
    1a26:	40 93 02 03 	sts	0x0302, r20	; 0x800302 <HighScore1P>
						TCNT4 = 6250;
    1a2a:	99 82       	std	Y+1, r9	; 0x01
    1a2c:	88 82       	st	Y, r8
				ICR1 = notes[2];
				OCR1A = notes[2] / 2;
				_delay_ms(15);
				DDRB &= ~(1<<1);
				
				while(isButtonDown(3,4)){
    1a2e:	64 e0       	ldi	r22, 0x04	; 4
    1a30:	83 e0       	ldi	r24, 0x03	; 3
    1a32:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    1a36:	81 11       	cpse	r24, r1
    1a38:	c8 cf       	rjmp	.-112    	; 0x19ca <debugMode+0x24a>
						HighScore1P = (HighScore1P + 1) % 1000;
						TCNT4 = 6250;
					}
				}	
			}
			if(isButtonDown(3,5)){	//DOWN
    1a3a:	65 e0       	ldi	r22, 0x05	; 5
    1a3c:	83 e0       	ldi	r24, 0x03	; 3
    1a3e:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    1a42:	88 23       	and	r24, r24
    1a44:	09 f4       	brne	.+2      	; 0x1a48 <debugMode+0x2c8>
    1a46:	ba c5       	rjmp	.+2932   	; 0x25bc <debugMode+0xe3c>
				TCNT4 = 0;
    1a48:	19 82       	std	Y+1, r1	; 0x01
    1a4a:	18 82       	st	Y, r1
				HighScore1P = (HighScore1P + 999) % 1000;
    1a4c:	40 91 02 03 	lds	r20, 0x0302	; 0x800302 <HighScore1P>
    1a50:	50 91 03 03 	lds	r21, 0x0303	; 0x800303 <HighScore1P+0x1>
    1a54:	49 51       	subi	r20, 0x19	; 25
    1a56:	5c 4f       	sbci	r21, 0xFC	; 252
    1a58:	9a 01       	movw	r18, r20
    1a5a:	36 95       	lsr	r19
    1a5c:	27 95       	ror	r18
    1a5e:	36 95       	lsr	r19
    1a60:	27 95       	ror	r18
    1a62:	36 95       	lsr	r19
    1a64:	27 95       	ror	r18
    1a66:	a5 ec       	ldi	r26, 0xC5	; 197
    1a68:	b0 e2       	ldi	r27, 0x20	; 32
    1a6a:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <__umulhisi3>
    1a6e:	92 95       	swap	r25
    1a70:	82 95       	swap	r24
    1a72:	8f 70       	andi	r24, 0x0F	; 15
    1a74:	89 27       	eor	r24, r25
    1a76:	9f 70       	andi	r25, 0x0F	; 15
    1a78:	89 27       	eor	r24, r25
    1a7a:	86 9d       	mul	r24, r6
    1a7c:	90 01       	movw	r18, r0
    1a7e:	87 9d       	mul	r24, r7
    1a80:	30 0d       	add	r19, r0
    1a82:	96 9d       	mul	r25, r6
    1a84:	30 0d       	add	r19, r0
    1a86:	11 24       	eor	r1, r1
    1a88:	42 1b       	sub	r20, r18
    1a8a:	53 0b       	sbc	r21, r19
    1a8c:	50 93 03 03 	sts	0x0303, r21	; 0x800303 <HighScore1P+0x1>
    1a90:	40 93 02 03 	sts	0x0302, r20	; 0x800302 <HighScore1P>
				
				DDRB |= (1<<1);	//play tone
    1a94:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[1];
    1a96:	f7 01       	movw	r30, r14
    1a98:	b1 82       	std	Z+1, r11	; 0x01
    1a9a:	a0 82       	st	Z, r10
				OCR1A = notes[1] / 2;
    1a9c:	f8 01       	movw	r30, r16
    1a9e:	d1 82       	std	Z+1, r13	; 0x01
    1aa0:	c0 82       	st	Z, r12
    1aa2:	8f e5       	ldi	r24, 0x5F	; 95
    1aa4:	9a ee       	ldi	r25, 0xEA	; 234
    1aa6:	01 97       	sbiw	r24, 0x01	; 1
    1aa8:	f1 f7       	brne	.-4      	; 0x1aa6 <debugMode+0x326>
    1aaa:	00 c0       	rjmp	.+0      	; 0x1aac <debugMode+0x32c>
    1aac:	00 00       	nop
				_delay_ms(15);
				DDRB &= ~(1<<1);
    1aae:	21 98       	cbi	0x04, 1	; 4
				
				while(isButtonDown(3,5)){
    1ab0:	32 c0       	rjmp	.+100    	; 0x1b16 <debugMode+0x396>
					setScore(LEFT, HighScore1P);
    1ab2:	60 91 02 03 	lds	r22, 0x0302	; 0x800302 <HighScore1P>
    1ab6:	70 91 03 03 	lds	r23, 0x0303	; 0x800303 <HighScore1P+0x1>
    1aba:	80 e0       	ldi	r24, 0x00	; 0
    1abc:	0e 94 de 00 	call	0x1bc	; 0x1bc <setScore>
					if(TCNT4 > 6500){
    1ac0:	88 81       	ld	r24, Y
    1ac2:	99 81       	ldd	r25, Y+1	; 0x01
    1ac4:	85 36       	cpi	r24, 0x65	; 101
    1ac6:	99 41       	sbci	r25, 0x19	; 25
    1ac8:	30 f1       	brcs	.+76     	; 0x1b16 <debugMode+0x396>
						HighScore1P = (HighScore1P + 999) % 1000;
    1aca:	40 91 02 03 	lds	r20, 0x0302	; 0x800302 <HighScore1P>
    1ace:	50 91 03 03 	lds	r21, 0x0303	; 0x800303 <HighScore1P+0x1>
    1ad2:	49 51       	subi	r20, 0x19	; 25
    1ad4:	5c 4f       	sbci	r21, 0xFC	; 252
    1ad6:	9a 01       	movw	r18, r20
    1ad8:	36 95       	lsr	r19
    1ada:	27 95       	ror	r18
    1adc:	36 95       	lsr	r19
    1ade:	27 95       	ror	r18
    1ae0:	36 95       	lsr	r19
    1ae2:	27 95       	ror	r18
    1ae4:	a5 ec       	ldi	r26, 0xC5	; 197
    1ae6:	b0 e2       	ldi	r27, 0x20	; 32
    1ae8:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <__umulhisi3>
    1aec:	92 95       	swap	r25
    1aee:	82 95       	swap	r24
    1af0:	8f 70       	andi	r24, 0x0F	; 15
    1af2:	89 27       	eor	r24, r25
    1af4:	9f 70       	andi	r25, 0x0F	; 15
    1af6:	89 27       	eor	r24, r25
    1af8:	86 9d       	mul	r24, r6
    1afa:	90 01       	movw	r18, r0
    1afc:	87 9d       	mul	r24, r7
    1afe:	30 0d       	add	r19, r0
    1b00:	96 9d       	mul	r25, r6
    1b02:	30 0d       	add	r19, r0
    1b04:	11 24       	eor	r1, r1
    1b06:	42 1b       	sub	r20, r18
    1b08:	53 0b       	sbc	r21, r19
    1b0a:	50 93 03 03 	sts	0x0303, r21	; 0x800303 <HighScore1P+0x1>
    1b0e:	40 93 02 03 	sts	0x0302, r20	; 0x800302 <HighScore1P>
						TCNT4 = 6250;
    1b12:	99 82       	std	Y+1, r9	; 0x01
    1b14:	88 82       	st	Y, r8
				ICR1 = notes[1];
				OCR1A = notes[1] / 2;
				_delay_ms(15);
				DDRB &= ~(1<<1);
				
				while(isButtonDown(3,5)){
    1b16:	65 e0       	ldi	r22, 0x05	; 5
    1b18:	83 e0       	ldi	r24, 0x03	; 3
    1b1a:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    1b1e:	81 11       	cpse	r24, r1
    1b20:	c8 cf       	rjmp	.-112    	; 0x1ab2 <debugMode+0x332>
    1b22:	4c c5       	rjmp	.+2712   	; 0x25bc <debugMode+0xe3c>
			
			
			
			
			case 1:	//high score 2p
			setScoreSegment(RIGHT100, 19);	//HI-SC2
    1b24:	63 e1       	ldi	r22, 0x13	; 19
    1b26:	88 e0       	ldi	r24, 0x08	; 8
    1b28:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
			setScoreSegment(RIGHT10, 1);
    1b2c:	61 e0       	ldi	r22, 0x01	; 1
    1b2e:	87 e0       	ldi	r24, 0x07	; 7
    1b30:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
			setScoreSegment(RIGHT1, 18);
    1b34:	62 e1       	ldi	r22, 0x12	; 18
    1b36:	86 e0       	ldi	r24, 0x06	; 6
    1b38:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
			setScoreSegment(TIMER100, 5);
    1b3c:	65 e0       	ldi	r22, 0x05	; 5
    1b3e:	85 e0       	ldi	r24, 0x05	; 5
    1b40:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
			setScoreSegment(TIMER10, 0xC);
    1b44:	6c e0       	ldi	r22, 0x0C	; 12
    1b46:	84 e0       	ldi	r24, 0x04	; 4
    1b48:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
			setScoreSegment(TIMER1, 2);
    1b4c:	62 e0       	ldi	r22, 0x02	; 2
    1b4e:	83 e0       	ldi	r24, 0x03	; 3
    1b50:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
			setScore(LEFT, HighScore2P);
    1b54:	60 91 16 03 	lds	r22, 0x0316	; 0x800316 <HighScore2P>
    1b58:	70 91 17 03 	lds	r23, 0x0317	; 0x800317 <HighScore2P+0x1>
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	0e 94 de 00 	call	0x1bc	; 0x1bc <setScore>
			
			setButtonLed(3,2,1);		// RESET score led
    1b62:	41 e0       	ldi	r20, 0x01	; 1
    1b64:	62 e0       	ldi	r22, 0x02	; 2
    1b66:	83 e0       	ldi	r24, 0x03	; 3
    1b68:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
			
			if(isButtonDown(3,2)){
    1b6c:	62 e0       	ldi	r22, 0x02	; 2
    1b6e:	83 e0       	ldi	r24, 0x03	; 3
    1b70:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    1b74:	88 23       	and	r24, r24
    1b76:	31 f1       	breq	.+76     	; 0x1bc4 <debugMode+0x444>
				HighScore2P = 0;
    1b78:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <HighScore2P+0x1>
    1b7c:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <HighScore2P>
				setScore(LEFT, HighScore1P);
    1b80:	60 91 02 03 	lds	r22, 0x0302	; 0x800302 <HighScore1P>
    1b84:	70 91 03 03 	lds	r23, 0x0303	; 0x800303 <HighScore1P+0x1>
    1b88:	80 e0       	ldi	r24, 0x00	; 0
    1b8a:	0e 94 de 00 	call	0x1bc	; 0x1bc <setScore>
				DDRB |= (1<<1);	//play reset
    1b8e:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[3];
    1b90:	8d e4       	ldi	r24, 0x4D	; 77
    1b92:	9d e0       	ldi	r25, 0x0D	; 13
    1b94:	f7 01       	movw	r30, r14
    1b96:	91 83       	std	Z+1, r25	; 0x01
    1b98:	80 83       	st	Z, r24
				OCR1A = notes[3] / 2;
    1b9a:	86 ea       	ldi	r24, 0xA6	; 166
    1b9c:	96 e0       	ldi	r25, 0x06	; 6
    1b9e:	f8 01       	movw	r30, r16
    1ba0:	91 83       	std	Z+1, r25	; 0x01
    1ba2:	80 83       	st	Z, r24
    1ba4:	ff e7       	ldi	r31, 0x7F	; 127
    1ba6:	25 eb       	ldi	r18, 0xB5	; 181
    1ba8:	41 e0       	ldi	r20, 0x01	; 1
    1baa:	f1 50       	subi	r31, 0x01	; 1
    1bac:	20 40       	sbci	r18, 0x00	; 0
    1bae:	40 40       	sbci	r20, 0x00	; 0
    1bb0:	e1 f7       	brne	.-8      	; 0x1baa <debugMode+0x42a>
    1bb2:	00 c0       	rjmp	.+0      	; 0x1bb4 <debugMode+0x434>
    1bb4:	00 00       	nop
				_delay_ms(35);
				DDRB &= ~(1<<1);
    1bb6:	21 98       	cbi	0x04, 1	; 4
				while(isButtonDown(3,2))
    1bb8:	62 e0       	ldi	r22, 0x02	; 2
    1bba:	83 e0       	ldi	r24, 0x03	; 3
    1bbc:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    1bc0:	81 11       	cpse	r24, r1
    1bc2:	fa cf       	rjmp	.-12     	; 0x1bb8 <debugMode+0x438>
				{
					//wait for unpush
				}
			}
			
			if(isButtonDown(3,4)){	//UP
    1bc4:	64 e0       	ldi	r22, 0x04	; 4
    1bc6:	83 e0       	ldi	r24, 0x03	; 3
    1bc8:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    1bcc:	88 23       	and	r24, r24
    1bce:	09 f4       	brne	.+2      	; 0x1bd2 <debugMode+0x452>
    1bd0:	6f c0       	rjmp	.+222    	; 0x1cb0 <debugMode+0x530>
				TCNT4 = 0;
    1bd2:	19 82       	std	Y+1, r1	; 0x01
    1bd4:	18 82       	st	Y, r1
				HighScore2P = (HighScore2P + 1) % 1000;
    1bd6:	40 91 16 03 	lds	r20, 0x0316	; 0x800316 <HighScore2P>
    1bda:	50 91 17 03 	lds	r21, 0x0317	; 0x800317 <HighScore2P+0x1>
    1bde:	4f 5f       	subi	r20, 0xFF	; 255
    1be0:	5f 4f       	sbci	r21, 0xFF	; 255
    1be2:	9a 01       	movw	r18, r20
    1be4:	36 95       	lsr	r19
    1be6:	27 95       	ror	r18
    1be8:	36 95       	lsr	r19
    1bea:	27 95       	ror	r18
    1bec:	36 95       	lsr	r19
    1bee:	27 95       	ror	r18
    1bf0:	a5 ec       	ldi	r26, 0xC5	; 197
    1bf2:	b0 e2       	ldi	r27, 0x20	; 32
    1bf4:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <__umulhisi3>
    1bf8:	92 95       	swap	r25
    1bfa:	82 95       	swap	r24
    1bfc:	8f 70       	andi	r24, 0x0F	; 15
    1bfe:	89 27       	eor	r24, r25
    1c00:	9f 70       	andi	r25, 0x0F	; 15
    1c02:	89 27       	eor	r24, r25
    1c04:	86 9d       	mul	r24, r6
    1c06:	90 01       	movw	r18, r0
    1c08:	87 9d       	mul	r24, r7
    1c0a:	30 0d       	add	r19, r0
    1c0c:	96 9d       	mul	r25, r6
    1c0e:	30 0d       	add	r19, r0
    1c10:	11 24       	eor	r1, r1
    1c12:	42 1b       	sub	r20, r18
    1c14:	53 0b       	sbc	r21, r19
    1c16:	50 93 17 03 	sts	0x0317, r21	; 0x800317 <HighScore2P+0x1>
    1c1a:	40 93 16 03 	sts	0x0316, r20	; 0x800316 <HighScore2P>
				
				DDRB |= (1<<1);	//play tone
    1c1e:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[2];
    1c20:	f7 01       	movw	r30, r14
    1c22:	51 82       	std	Z+1, r5	; 0x01
    1c24:	40 82       	st	Z, r4
				OCR1A = notes[2] / 2;
    1c26:	47 e7       	ldi	r20, 0x77	; 119
    1c28:	57 e0       	ldi	r21, 0x07	; 7
    1c2a:	f8 01       	movw	r30, r16
    1c2c:	51 83       	std	Z+1, r21	; 0x01
    1c2e:	40 83       	st	Z, r20
    1c30:	8f e5       	ldi	r24, 0x5F	; 95
    1c32:	9a ee       	ldi	r25, 0xEA	; 234
    1c34:	01 97       	sbiw	r24, 0x01	; 1
    1c36:	f1 f7       	brne	.-4      	; 0x1c34 <debugMode+0x4b4>
    1c38:	00 c0       	rjmp	.+0      	; 0x1c3a <debugMode+0x4ba>
    1c3a:	00 00       	nop
				_delay_ms(15);
				DDRB &= ~(1<<1);
    1c3c:	21 98       	cbi	0x04, 1	; 4
				
				while(isButtonDown(3,4)){
    1c3e:	32 c0       	rjmp	.+100    	; 0x1ca4 <debugMode+0x524>
					setScore(LEFT, HighScore2P);
    1c40:	60 91 16 03 	lds	r22, 0x0316	; 0x800316 <HighScore2P>
    1c44:	70 91 17 03 	lds	r23, 0x0317	; 0x800317 <HighScore2P+0x1>
    1c48:	80 e0       	ldi	r24, 0x00	; 0
    1c4a:	0e 94 de 00 	call	0x1bc	; 0x1bc <setScore>
					if(TCNT4 > 6500){
    1c4e:	88 81       	ld	r24, Y
    1c50:	99 81       	ldd	r25, Y+1	; 0x01
    1c52:	85 36       	cpi	r24, 0x65	; 101
    1c54:	99 41       	sbci	r25, 0x19	; 25
    1c56:	30 f1       	brcs	.+76     	; 0x1ca4 <debugMode+0x524>
						HighScore2P = (HighScore2P + 1) % 1000;
    1c58:	40 91 16 03 	lds	r20, 0x0316	; 0x800316 <HighScore2P>
    1c5c:	50 91 17 03 	lds	r21, 0x0317	; 0x800317 <HighScore2P+0x1>
    1c60:	4f 5f       	subi	r20, 0xFF	; 255
    1c62:	5f 4f       	sbci	r21, 0xFF	; 255
    1c64:	9a 01       	movw	r18, r20
    1c66:	36 95       	lsr	r19
    1c68:	27 95       	ror	r18
    1c6a:	36 95       	lsr	r19
    1c6c:	27 95       	ror	r18
    1c6e:	36 95       	lsr	r19
    1c70:	27 95       	ror	r18
    1c72:	a5 ec       	ldi	r26, 0xC5	; 197
    1c74:	b0 e2       	ldi	r27, 0x20	; 32
    1c76:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <__umulhisi3>
    1c7a:	92 95       	swap	r25
    1c7c:	82 95       	swap	r24
    1c7e:	8f 70       	andi	r24, 0x0F	; 15
    1c80:	89 27       	eor	r24, r25
    1c82:	9f 70       	andi	r25, 0x0F	; 15
    1c84:	89 27       	eor	r24, r25
    1c86:	86 9d       	mul	r24, r6
    1c88:	90 01       	movw	r18, r0
    1c8a:	87 9d       	mul	r24, r7
    1c8c:	30 0d       	add	r19, r0
    1c8e:	96 9d       	mul	r25, r6
    1c90:	30 0d       	add	r19, r0
    1c92:	11 24       	eor	r1, r1
    1c94:	42 1b       	sub	r20, r18
    1c96:	53 0b       	sbc	r21, r19
    1c98:	50 93 17 03 	sts	0x0317, r21	; 0x800317 <HighScore2P+0x1>
    1c9c:	40 93 16 03 	sts	0x0316, r20	; 0x800316 <HighScore2P>
						TCNT4 = 6250;
    1ca0:	99 82       	std	Y+1, r9	; 0x01
    1ca2:	88 82       	st	Y, r8
				ICR1 = notes[2];
				OCR1A = notes[2] / 2;
				_delay_ms(15);
				DDRB &= ~(1<<1);
				
				while(isButtonDown(3,4)){
    1ca4:	64 e0       	ldi	r22, 0x04	; 4
    1ca6:	83 e0       	ldi	r24, 0x03	; 3
    1ca8:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    1cac:	81 11       	cpse	r24, r1
    1cae:	c8 cf       	rjmp	.-112    	; 0x1c40 <debugMode+0x4c0>
						HighScore2P = (HighScore2P + 1) % 1000;
						TCNT4 = 6250;
					}
				}
			}
			if(isButtonDown(3,5)){	//DOWN
    1cb0:	65 e0       	ldi	r22, 0x05	; 5
    1cb2:	83 e0       	ldi	r24, 0x03	; 3
    1cb4:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    1cb8:	88 23       	and	r24, r24
    1cba:	09 f4       	brne	.+2      	; 0x1cbe <debugMode+0x53e>
    1cbc:	7f c4       	rjmp	.+2302   	; 0x25bc <debugMode+0xe3c>
				TCNT4 = 0;
    1cbe:	19 82       	std	Y+1, r1	; 0x01
    1cc0:	18 82       	st	Y, r1
				HighScore2P = (HighScore2P + 999) % 1000;
    1cc2:	40 91 16 03 	lds	r20, 0x0316	; 0x800316 <HighScore2P>
    1cc6:	50 91 17 03 	lds	r21, 0x0317	; 0x800317 <HighScore2P+0x1>
    1cca:	49 51       	subi	r20, 0x19	; 25
    1ccc:	5c 4f       	sbci	r21, 0xFC	; 252
    1cce:	9a 01       	movw	r18, r20
    1cd0:	36 95       	lsr	r19
    1cd2:	27 95       	ror	r18
    1cd4:	36 95       	lsr	r19
    1cd6:	27 95       	ror	r18
    1cd8:	36 95       	lsr	r19
    1cda:	27 95       	ror	r18
    1cdc:	a5 ec       	ldi	r26, 0xC5	; 197
    1cde:	b0 e2       	ldi	r27, 0x20	; 32
    1ce0:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <__umulhisi3>
    1ce4:	92 95       	swap	r25
    1ce6:	82 95       	swap	r24
    1ce8:	8f 70       	andi	r24, 0x0F	; 15
    1cea:	89 27       	eor	r24, r25
    1cec:	9f 70       	andi	r25, 0x0F	; 15
    1cee:	89 27       	eor	r24, r25
    1cf0:	86 9d       	mul	r24, r6
    1cf2:	90 01       	movw	r18, r0
    1cf4:	87 9d       	mul	r24, r7
    1cf6:	30 0d       	add	r19, r0
    1cf8:	96 9d       	mul	r25, r6
    1cfa:	30 0d       	add	r19, r0
    1cfc:	11 24       	eor	r1, r1
    1cfe:	42 1b       	sub	r20, r18
    1d00:	53 0b       	sbc	r21, r19
    1d02:	50 93 17 03 	sts	0x0317, r21	; 0x800317 <HighScore2P+0x1>
    1d06:	40 93 16 03 	sts	0x0316, r20	; 0x800316 <HighScore2P>
				
				DDRB |= (1<<1);	//play tone
    1d0a:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[1];
    1d0c:	f7 01       	movw	r30, r14
    1d0e:	b1 82       	std	Z+1, r11	; 0x01
    1d10:	a0 82       	st	Z, r10
				OCR1A = notes[1] / 2;
    1d12:	f8 01       	movw	r30, r16
    1d14:	d1 82       	std	Z+1, r13	; 0x01
    1d16:	c0 82       	st	Z, r12
    1d18:	8f e5       	ldi	r24, 0x5F	; 95
    1d1a:	9a ee       	ldi	r25, 0xEA	; 234
    1d1c:	01 97       	sbiw	r24, 0x01	; 1
    1d1e:	f1 f7       	brne	.-4      	; 0x1d1c <debugMode+0x59c>
    1d20:	00 c0       	rjmp	.+0      	; 0x1d22 <debugMode+0x5a2>
    1d22:	00 00       	nop
				_delay_ms(15);
				DDRB &= ~(1<<1);
    1d24:	21 98       	cbi	0x04, 1	; 4
				
				while(isButtonDown(3,5)){
    1d26:	32 c0       	rjmp	.+100    	; 0x1d8c <debugMode+0x60c>
					setScore(LEFT, HighScore2P);
    1d28:	60 91 16 03 	lds	r22, 0x0316	; 0x800316 <HighScore2P>
    1d2c:	70 91 17 03 	lds	r23, 0x0317	; 0x800317 <HighScore2P+0x1>
    1d30:	80 e0       	ldi	r24, 0x00	; 0
    1d32:	0e 94 de 00 	call	0x1bc	; 0x1bc <setScore>
					if(TCNT4 > 6500){
    1d36:	88 81       	ld	r24, Y
    1d38:	99 81       	ldd	r25, Y+1	; 0x01
    1d3a:	85 36       	cpi	r24, 0x65	; 101
    1d3c:	99 41       	sbci	r25, 0x19	; 25
    1d3e:	30 f1       	brcs	.+76     	; 0x1d8c <debugMode+0x60c>
						HighScore2P = (HighScore2P + 999) % 1000;
    1d40:	40 91 16 03 	lds	r20, 0x0316	; 0x800316 <HighScore2P>
    1d44:	50 91 17 03 	lds	r21, 0x0317	; 0x800317 <HighScore2P+0x1>
    1d48:	49 51       	subi	r20, 0x19	; 25
    1d4a:	5c 4f       	sbci	r21, 0xFC	; 252
    1d4c:	9a 01       	movw	r18, r20
    1d4e:	36 95       	lsr	r19
    1d50:	27 95       	ror	r18
    1d52:	36 95       	lsr	r19
    1d54:	27 95       	ror	r18
    1d56:	36 95       	lsr	r19
    1d58:	27 95       	ror	r18
    1d5a:	a5 ec       	ldi	r26, 0xC5	; 197
    1d5c:	b0 e2       	ldi	r27, 0x20	; 32
    1d5e:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <__umulhisi3>
    1d62:	92 95       	swap	r25
    1d64:	82 95       	swap	r24
    1d66:	8f 70       	andi	r24, 0x0F	; 15
    1d68:	89 27       	eor	r24, r25
    1d6a:	9f 70       	andi	r25, 0x0F	; 15
    1d6c:	89 27       	eor	r24, r25
    1d6e:	86 9d       	mul	r24, r6
    1d70:	90 01       	movw	r18, r0
    1d72:	87 9d       	mul	r24, r7
    1d74:	30 0d       	add	r19, r0
    1d76:	96 9d       	mul	r25, r6
    1d78:	30 0d       	add	r19, r0
    1d7a:	11 24       	eor	r1, r1
    1d7c:	42 1b       	sub	r20, r18
    1d7e:	53 0b       	sbc	r21, r19
    1d80:	50 93 17 03 	sts	0x0317, r21	; 0x800317 <HighScore2P+0x1>
    1d84:	40 93 16 03 	sts	0x0316, r20	; 0x800316 <HighScore2P>
						TCNT4 = 6250;
    1d88:	99 82       	std	Y+1, r9	; 0x01
    1d8a:	88 82       	st	Y, r8
				ICR1 = notes[1];
				OCR1A = notes[1] / 2;
				_delay_ms(15);
				DDRB &= ~(1<<1);
				
				while(isButtonDown(3,5)){
    1d8c:	65 e0       	ldi	r22, 0x05	; 5
    1d8e:	83 e0       	ldi	r24, 0x03	; 3
    1d90:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    1d94:	81 11       	cpse	r24, r1
    1d96:	c8 cf       	rjmp	.-112    	; 0x1d28 <debugMode+0x5a8>
    1d98:	11 c4       	rjmp	.+2082   	; 0x25bc <debugMode+0xe3c>
			break;		//*************END HIGH SCORE 2p
			
			
			
			case 2:	//round time
			setScoreSegment(RIGHT100, 20);	//rnd tn
    1d9a:	64 e1       	ldi	r22, 0x14	; 20
    1d9c:	88 e0       	ldi	r24, 0x08	; 8
    1d9e:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
			setScoreSegment(RIGHT10, 21);
    1da2:	65 e1       	ldi	r22, 0x15	; 21
    1da4:	87 e0       	ldi	r24, 0x07	; 7
    1da6:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
			setScoreSegment(RIGHT1, 0xd);
    1daa:	6d e0       	ldi	r22, 0x0D	; 13
    1dac:	86 e0       	ldi	r24, 0x06	; 6
    1dae:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
			setScoreSegment(TIMER100, 16);
    1db2:	60 e1       	ldi	r22, 0x10	; 16
    1db4:	85 e0       	ldi	r24, 0x05	; 5
    1db6:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
			setScoreSegment(TIMER10, 22);
    1dba:	66 e1       	ldi	r22, 0x16	; 22
    1dbc:	84 e0       	ldi	r24, 0x04	; 4
    1dbe:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
			setScoreSegment(TIMER1, 21);
    1dc2:	65 e1       	ldi	r22, 0x15	; 21
    1dc4:	83 e0       	ldi	r24, 0x03	; 3
    1dc6:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
			setScore(LEFT, RoundTime);
    1dca:	60 91 12 03 	lds	r22, 0x0312	; 0x800312 <RoundTime>
    1dce:	70 e0       	ldi	r23, 0x00	; 0
    1dd0:	80 e0       	ldi	r24, 0x00	; 0
    1dd2:	0e 94 de 00 	call	0x1bc	; 0x1bc <setScore>
			
			setButtonLed(3,2,1);		// RESET score led
    1dd6:	41 e0       	ldi	r20, 0x01	; 1
    1dd8:	62 e0       	ldi	r22, 0x02	; 2
    1dda:	83 e0       	ldi	r24, 0x03	; 3
    1ddc:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
			
			if(isButtonDown(3,2)){
    1de0:	62 e0       	ldi	r22, 0x02	; 2
    1de2:	83 e0       	ldi	r24, 0x03	; 3
    1de4:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    1de8:	88 23       	and	r24, r24
    1dea:	19 f1       	breq	.+70     	; 0x1e32 <debugMode+0x6b2>
				RoundTime = 40;
    1dec:	88 e2       	ldi	r24, 0x28	; 40
    1dee:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <RoundTime>
				setScore(LEFT, RoundTime);
    1df2:	68 e2       	ldi	r22, 0x28	; 40
    1df4:	70 e0       	ldi	r23, 0x00	; 0
    1df6:	80 e0       	ldi	r24, 0x00	; 0
    1df8:	0e 94 de 00 	call	0x1bc	; 0x1bc <setScore>
				DDRB |= (1<<1);	//play reset
    1dfc:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[3];
    1dfe:	8d e4       	ldi	r24, 0x4D	; 77
    1e00:	9d e0       	ldi	r25, 0x0D	; 13
    1e02:	f7 01       	movw	r30, r14
    1e04:	91 83       	std	Z+1, r25	; 0x01
    1e06:	80 83       	st	Z, r24
				OCR1A = notes[3] / 2;
    1e08:	86 ea       	ldi	r24, 0xA6	; 166
    1e0a:	96 e0       	ldi	r25, 0x06	; 6
    1e0c:	f8 01       	movw	r30, r16
    1e0e:	91 83       	std	Z+1, r25	; 0x01
    1e10:	80 83       	st	Z, r24
    1e12:	ff e7       	ldi	r31, 0x7F	; 127
    1e14:	25 eb       	ldi	r18, 0xB5	; 181
    1e16:	41 e0       	ldi	r20, 0x01	; 1
    1e18:	f1 50       	subi	r31, 0x01	; 1
    1e1a:	20 40       	sbci	r18, 0x00	; 0
    1e1c:	40 40       	sbci	r20, 0x00	; 0
    1e1e:	e1 f7       	brne	.-8      	; 0x1e18 <debugMode+0x698>
    1e20:	00 c0       	rjmp	.+0      	; 0x1e22 <debugMode+0x6a2>
    1e22:	00 00       	nop
				_delay_ms(35);
				DDRB &= ~(1<<1);
    1e24:	21 98       	cbi	0x04, 1	; 4
				while(isButtonDown(3,2))
    1e26:	62 e0       	ldi	r22, 0x02	; 2
    1e28:	83 e0       	ldi	r24, 0x03	; 3
    1e2a:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    1e2e:	81 11       	cpse	r24, r1
    1e30:	fa cf       	rjmp	.-12     	; 0x1e26 <debugMode+0x6a6>
				{
					//wait for unpush
				}
			}
			
			if(isButtonDown(3,4)){	//UP
    1e32:	64 e0       	ldi	r22, 0x04	; 4
    1e34:	83 e0       	ldi	r24, 0x03	; 3
    1e36:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    1e3a:	88 23       	and	r24, r24
    1e3c:	81 f1       	breq	.+96     	; 0x1e9e <debugMode+0x71e>
				TCNT4 = 0;
    1e3e:	19 82       	std	Y+1, r1	; 0x01
    1e40:	18 82       	st	Y, r1
				RoundTime = (RoundTime + 1);
    1e42:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <RoundTime>
    1e46:	8f 5f       	subi	r24, 0xFF	; 255
    1e48:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <RoundTime>
				
				DDRB |= (1<<1);	//play tone
    1e4c:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[2];
    1e4e:	f7 01       	movw	r30, r14
    1e50:	51 82       	std	Z+1, r5	; 0x01
    1e52:	40 82       	st	Z, r4
				OCR1A = notes[2] / 2;
    1e54:	47 e7       	ldi	r20, 0x77	; 119
    1e56:	57 e0       	ldi	r21, 0x07	; 7
    1e58:	f8 01       	movw	r30, r16
    1e5a:	51 83       	std	Z+1, r21	; 0x01
    1e5c:	40 83       	st	Z, r20
    1e5e:	8f e5       	ldi	r24, 0x5F	; 95
    1e60:	9a ee       	ldi	r25, 0xEA	; 234
    1e62:	01 97       	sbiw	r24, 0x01	; 1
    1e64:	f1 f7       	brne	.-4      	; 0x1e62 <debugMode+0x6e2>
    1e66:	00 c0       	rjmp	.+0      	; 0x1e68 <debugMode+0x6e8>
    1e68:	00 00       	nop
				_delay_ms(15);
				DDRB &= ~(1<<1);
    1e6a:	21 98       	cbi	0x04, 1	; 4
				
				while(isButtonDown(3,4)){
    1e6c:	12 c0       	rjmp	.+36     	; 0x1e92 <debugMode+0x712>
					setScore(LEFT, RoundTime);
    1e6e:	60 91 12 03 	lds	r22, 0x0312	; 0x800312 <RoundTime>
    1e72:	70 e0       	ldi	r23, 0x00	; 0
    1e74:	80 e0       	ldi	r24, 0x00	; 0
    1e76:	0e 94 de 00 	call	0x1bc	; 0x1bc <setScore>
					if(TCNT4 > 6500){
    1e7a:	88 81       	ld	r24, Y
    1e7c:	99 81       	ldd	r25, Y+1	; 0x01
    1e7e:	85 36       	cpi	r24, 0x65	; 101
    1e80:	99 41       	sbci	r25, 0x19	; 25
    1e82:	38 f0       	brcs	.+14     	; 0x1e92 <debugMode+0x712>
						RoundTime = (RoundTime + 1);
    1e84:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <RoundTime>
    1e88:	8f 5f       	subi	r24, 0xFF	; 255
    1e8a:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <RoundTime>
						TCNT4 = 6250;
    1e8e:	99 82       	std	Y+1, r9	; 0x01
    1e90:	88 82       	st	Y, r8
				ICR1 = notes[2];
				OCR1A = notes[2] / 2;
				_delay_ms(15);
				DDRB &= ~(1<<1);
				
				while(isButtonDown(3,4)){
    1e92:	64 e0       	ldi	r22, 0x04	; 4
    1e94:	83 e0       	ldi	r24, 0x03	; 3
    1e96:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    1e9a:	81 11       	cpse	r24, r1
    1e9c:	e8 cf       	rjmp	.-48     	; 0x1e6e <debugMode+0x6ee>
						RoundTime = (RoundTime + 1);
						TCNT4 = 6250;
					}
				}
			}
			if(isButtonDown(3,5)){	//DOWN
    1e9e:	65 e0       	ldi	r22, 0x05	; 5
    1ea0:	83 e0       	ldi	r24, 0x03	; 3
    1ea2:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    1ea6:	88 23       	and	r24, r24
    1ea8:	09 f4       	brne	.+2      	; 0x1eac <debugMode+0x72c>
    1eaa:	88 c3       	rjmp	.+1808   	; 0x25bc <debugMode+0xe3c>
				TCNT4 = 0;
    1eac:	19 82       	std	Y+1, r1	; 0x01
    1eae:	18 82       	st	Y, r1
				RoundTime = (RoundTime + 255);
    1eb0:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <RoundTime>
    1eb4:	81 50       	subi	r24, 0x01	; 1
    1eb6:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <RoundTime>
				
				DDRB |= (1<<1);	//play tone
    1eba:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[1];
    1ebc:	f7 01       	movw	r30, r14
    1ebe:	b1 82       	std	Z+1, r11	; 0x01
    1ec0:	a0 82       	st	Z, r10
				OCR1A = notes[1] / 2;
    1ec2:	f8 01       	movw	r30, r16
    1ec4:	d1 82       	std	Z+1, r13	; 0x01
    1ec6:	c0 82       	st	Z, r12
    1ec8:	8f e5       	ldi	r24, 0x5F	; 95
    1eca:	9a ee       	ldi	r25, 0xEA	; 234
    1ecc:	01 97       	sbiw	r24, 0x01	; 1
    1ece:	f1 f7       	brne	.-4      	; 0x1ecc <debugMode+0x74c>
    1ed0:	00 c0       	rjmp	.+0      	; 0x1ed2 <debugMode+0x752>
    1ed2:	00 00       	nop
				_delay_ms(15);
				DDRB &= ~(1<<1);
    1ed4:	21 98       	cbi	0x04, 1	; 4
				
				while(isButtonDown(3,5)){
    1ed6:	12 c0       	rjmp	.+36     	; 0x1efc <debugMode+0x77c>
					setScore(LEFT, RoundTime);
    1ed8:	60 91 12 03 	lds	r22, 0x0312	; 0x800312 <RoundTime>
    1edc:	70 e0       	ldi	r23, 0x00	; 0
    1ede:	80 e0       	ldi	r24, 0x00	; 0
    1ee0:	0e 94 de 00 	call	0x1bc	; 0x1bc <setScore>
					if(TCNT4 > 6500){
    1ee4:	88 81       	ld	r24, Y
    1ee6:	99 81       	ldd	r25, Y+1	; 0x01
    1ee8:	85 36       	cpi	r24, 0x65	; 101
    1eea:	99 41       	sbci	r25, 0x19	; 25
    1eec:	38 f0       	brcs	.+14     	; 0x1efc <debugMode+0x77c>
						RoundTime = (RoundTime + 255);
    1eee:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <RoundTime>
    1ef2:	81 50       	subi	r24, 0x01	; 1
    1ef4:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <RoundTime>
						TCNT4 = 6250;
    1ef8:	99 82       	std	Y+1, r9	; 0x01
    1efa:	88 82       	st	Y, r8
				ICR1 = notes[1];
				OCR1A = notes[1] / 2;
				_delay_ms(15);
				DDRB &= ~(1<<1);
				
				while(isButtonDown(3,5)){
    1efc:	65 e0       	ldi	r22, 0x05	; 5
    1efe:	83 e0       	ldi	r24, 0x03	; 3
    1f00:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    1f04:	81 11       	cpse	r24, r1
    1f06:	e8 cf       	rjmp	.-48     	; 0x1ed8 <debugMode+0x758>
    1f08:	59 c3       	rjmp	.+1714   	; 0x25bc <debugMode+0xe3c>
			
			
			
			
			case 3:	//bonus time
			setScoreSegment(RIGHT100, 0xb);	//rnd tn
    1f0a:	6b e0       	ldi	r22, 0x0B	; 11
    1f0c:	88 e0       	ldi	r24, 0x08	; 8
    1f0e:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
			setScoreSegment(RIGHT10, 21);
    1f12:	65 e1       	ldi	r22, 0x15	; 21
    1f14:	87 e0       	ldi	r24, 0x07	; 7
    1f16:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
			setScoreSegment(RIGHT1, 5);
    1f1a:	65 e0       	ldi	r22, 0x05	; 5
    1f1c:	86 e0       	ldi	r24, 0x06	; 6
    1f1e:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
			setScoreSegment(TIMER100, 16);
    1f22:	60 e1       	ldi	r22, 0x10	; 16
    1f24:	85 e0       	ldi	r24, 0x05	; 5
    1f26:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
			setScoreSegment(TIMER10, 22);
    1f2a:	66 e1       	ldi	r22, 0x16	; 22
    1f2c:	84 e0       	ldi	r24, 0x04	; 4
    1f2e:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
			setScoreSegment(TIMER1, 21);
    1f32:	65 e1       	ldi	r22, 0x15	; 21
    1f34:	83 e0       	ldi	r24, 0x03	; 3
    1f36:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
			setScore(LEFT, BonusTime);
    1f3a:	60 91 f5 02 	lds	r22, 0x02F5	; 0x8002f5 <BonusTime>
    1f3e:	70 e0       	ldi	r23, 0x00	; 0
    1f40:	80 e0       	ldi	r24, 0x00	; 0
    1f42:	0e 94 de 00 	call	0x1bc	; 0x1bc <setScore>
			
			setButtonLed(3,2,1);		// RESET score led
    1f46:	41 e0       	ldi	r20, 0x01	; 1
    1f48:	62 e0       	ldi	r22, 0x02	; 2
    1f4a:	83 e0       	ldi	r24, 0x03	; 3
    1f4c:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
			
			if(isButtonDown(3,2)){
    1f50:	62 e0       	ldi	r22, 0x02	; 2
    1f52:	83 e0       	ldi	r24, 0x03	; 3
    1f54:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    1f58:	88 23       	and	r24, r24
    1f5a:	19 f1       	breq	.+70     	; 0x1fa2 <debugMode+0x822>
				BonusTime = 3;
    1f5c:	83 e0       	ldi	r24, 0x03	; 3
    1f5e:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <BonusTime>
				setScore(LEFT, BonusTime);
    1f62:	63 e0       	ldi	r22, 0x03	; 3
    1f64:	70 e0       	ldi	r23, 0x00	; 0
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	0e 94 de 00 	call	0x1bc	; 0x1bc <setScore>
				DDRB |= (1<<1);	//play reset
    1f6c:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[3];
    1f6e:	8d e4       	ldi	r24, 0x4D	; 77
    1f70:	9d e0       	ldi	r25, 0x0D	; 13
    1f72:	f7 01       	movw	r30, r14
    1f74:	91 83       	std	Z+1, r25	; 0x01
    1f76:	80 83       	st	Z, r24
				OCR1A = notes[3] / 2;
    1f78:	86 ea       	ldi	r24, 0xA6	; 166
    1f7a:	96 e0       	ldi	r25, 0x06	; 6
    1f7c:	f8 01       	movw	r30, r16
    1f7e:	91 83       	std	Z+1, r25	; 0x01
    1f80:	80 83       	st	Z, r24
    1f82:	ff e7       	ldi	r31, 0x7F	; 127
    1f84:	25 eb       	ldi	r18, 0xB5	; 181
    1f86:	41 e0       	ldi	r20, 0x01	; 1
    1f88:	f1 50       	subi	r31, 0x01	; 1
    1f8a:	20 40       	sbci	r18, 0x00	; 0
    1f8c:	40 40       	sbci	r20, 0x00	; 0
    1f8e:	e1 f7       	brne	.-8      	; 0x1f88 <debugMode+0x808>
    1f90:	00 c0       	rjmp	.+0      	; 0x1f92 <debugMode+0x812>
    1f92:	00 00       	nop
				_delay_ms(35);
				DDRB &= ~(1<<1);
    1f94:	21 98       	cbi	0x04, 1	; 4
				while(isButtonDown(3,2))
    1f96:	62 e0       	ldi	r22, 0x02	; 2
    1f98:	83 e0       	ldi	r24, 0x03	; 3
    1f9a:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    1f9e:	81 11       	cpse	r24, r1
    1fa0:	fa cf       	rjmp	.-12     	; 0x1f96 <debugMode+0x816>
				{
					//wait for unpush
				}
			}
			
			if(isButtonDown(3,4)){	//UP
    1fa2:	64 e0       	ldi	r22, 0x04	; 4
    1fa4:	83 e0       	ldi	r24, 0x03	; 3
    1fa6:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    1faa:	88 23       	and	r24, r24
    1fac:	81 f1       	breq	.+96     	; 0x200e <debugMode+0x88e>
				TCNT4 = 0;
    1fae:	19 82       	std	Y+1, r1	; 0x01
    1fb0:	18 82       	st	Y, r1
				BonusTime = (BonusTime + 1);
    1fb2:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <BonusTime>
    1fb6:	8f 5f       	subi	r24, 0xFF	; 255
    1fb8:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <BonusTime>
				
				DDRB |= (1<<1);	//play tone
    1fbc:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[2];
    1fbe:	f7 01       	movw	r30, r14
    1fc0:	51 82       	std	Z+1, r5	; 0x01
    1fc2:	40 82       	st	Z, r4
				OCR1A = notes[2] / 2;
    1fc4:	47 e7       	ldi	r20, 0x77	; 119
    1fc6:	57 e0       	ldi	r21, 0x07	; 7
    1fc8:	f8 01       	movw	r30, r16
    1fca:	51 83       	std	Z+1, r21	; 0x01
    1fcc:	40 83       	st	Z, r20
    1fce:	8f e5       	ldi	r24, 0x5F	; 95
    1fd0:	9a ee       	ldi	r25, 0xEA	; 234
    1fd2:	01 97       	sbiw	r24, 0x01	; 1
    1fd4:	f1 f7       	brne	.-4      	; 0x1fd2 <debugMode+0x852>
    1fd6:	00 c0       	rjmp	.+0      	; 0x1fd8 <debugMode+0x858>
    1fd8:	00 00       	nop
				_delay_ms(15);
				DDRB &= ~(1<<1);
    1fda:	21 98       	cbi	0x04, 1	; 4
				
				while(isButtonDown(3,4)){
    1fdc:	12 c0       	rjmp	.+36     	; 0x2002 <debugMode+0x882>
					setScore(LEFT, BonusTime);
    1fde:	60 91 f5 02 	lds	r22, 0x02F5	; 0x8002f5 <BonusTime>
    1fe2:	70 e0       	ldi	r23, 0x00	; 0
    1fe4:	80 e0       	ldi	r24, 0x00	; 0
    1fe6:	0e 94 de 00 	call	0x1bc	; 0x1bc <setScore>
					if(TCNT4 > 6500){
    1fea:	88 81       	ld	r24, Y
    1fec:	99 81       	ldd	r25, Y+1	; 0x01
    1fee:	85 36       	cpi	r24, 0x65	; 101
    1ff0:	99 41       	sbci	r25, 0x19	; 25
    1ff2:	38 f0       	brcs	.+14     	; 0x2002 <debugMode+0x882>
						BonusTime = (BonusTime + 1);
    1ff4:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <BonusTime>
    1ff8:	8f 5f       	subi	r24, 0xFF	; 255
    1ffa:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <BonusTime>
						TCNT4 = 6250;
    1ffe:	99 82       	std	Y+1, r9	; 0x01
    2000:	88 82       	st	Y, r8
				ICR1 = notes[2];
				OCR1A = notes[2] / 2;
				_delay_ms(15);
				DDRB &= ~(1<<1);
				
				while(isButtonDown(3,4)){
    2002:	64 e0       	ldi	r22, 0x04	; 4
    2004:	83 e0       	ldi	r24, 0x03	; 3
    2006:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    200a:	81 11       	cpse	r24, r1
    200c:	e8 cf       	rjmp	.-48     	; 0x1fde <debugMode+0x85e>
						BonusTime = (BonusTime + 1);
						TCNT4 = 6250;
					}
				}
			}
			if(isButtonDown(3,5)){	//DOWN
    200e:	65 e0       	ldi	r22, 0x05	; 5
    2010:	83 e0       	ldi	r24, 0x03	; 3
    2012:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    2016:	88 23       	and	r24, r24
    2018:	09 f4       	brne	.+2      	; 0x201c <debugMode+0x89c>
    201a:	d0 c2       	rjmp	.+1440   	; 0x25bc <debugMode+0xe3c>
				TCNT4 = 0;
    201c:	19 82       	std	Y+1, r1	; 0x01
    201e:	18 82       	st	Y, r1
				BonusTime = (BonusTime + 255);
    2020:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <BonusTime>
    2024:	81 50       	subi	r24, 0x01	; 1
    2026:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <BonusTime>
				
				DDRB |= (1<<1);	//play tone
    202a:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[1];
    202c:	f7 01       	movw	r30, r14
    202e:	b1 82       	std	Z+1, r11	; 0x01
    2030:	a0 82       	st	Z, r10
				OCR1A = notes[1] / 2;
    2032:	f8 01       	movw	r30, r16
    2034:	d1 82       	std	Z+1, r13	; 0x01
    2036:	c0 82       	st	Z, r12
    2038:	8f e5       	ldi	r24, 0x5F	; 95
    203a:	9a ee       	ldi	r25, 0xEA	; 234
    203c:	01 97       	sbiw	r24, 0x01	; 1
    203e:	f1 f7       	brne	.-4      	; 0x203c <debugMode+0x8bc>
    2040:	00 c0       	rjmp	.+0      	; 0x2042 <debugMode+0x8c2>
    2042:	00 00       	nop
				_delay_ms(15);
				DDRB &= ~(1<<1);
    2044:	21 98       	cbi	0x04, 1	; 4
				
				while(isButtonDown(3,5)){
    2046:	12 c0       	rjmp	.+36     	; 0x206c <debugMode+0x8ec>
					setScore(LEFT, BonusTime);
    2048:	60 91 f5 02 	lds	r22, 0x02F5	; 0x8002f5 <BonusTime>
    204c:	70 e0       	ldi	r23, 0x00	; 0
    204e:	80 e0       	ldi	r24, 0x00	; 0
    2050:	0e 94 de 00 	call	0x1bc	; 0x1bc <setScore>
					if(TCNT4 > 6500){
    2054:	88 81       	ld	r24, Y
    2056:	99 81       	ldd	r25, Y+1	; 0x01
    2058:	85 36       	cpi	r24, 0x65	; 101
    205a:	99 41       	sbci	r25, 0x19	; 25
    205c:	38 f0       	brcs	.+14     	; 0x206c <debugMode+0x8ec>
						BonusTime = (BonusTime + 255);
    205e:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <BonusTime>
    2062:	81 50       	subi	r24, 0x01	; 1
    2064:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <BonusTime>
						TCNT4 = 6250;
    2068:	99 82       	std	Y+1, r9	; 0x01
    206a:	88 82       	st	Y, r8
				ICR1 = notes[1];
				OCR1A = notes[1] / 2;
				_delay_ms(15);
				DDRB &= ~(1<<1);
				
				while(isButtonDown(3,5)){
    206c:	65 e0       	ldi	r22, 0x05	; 5
    206e:	83 e0       	ldi	r24, 0x03	; 3
    2070:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    2074:	81 11       	cpse	r24, r1
    2076:	e8 cf       	rjmp	.-48     	; 0x2048 <debugMode+0x8c8>
    2078:	a1 c2       	rjmp	.+1346   	; 0x25bc <debugMode+0xe3c>
			
			
			
			
			case 4:	//multiplier ticks
			setScoreSegment(RIGHT100, 0xE);	//3ul tck
    207a:	6e e0       	ldi	r22, 0x0E	; 14
    207c:	88 e0       	ldi	r24, 0x08	; 8
    207e:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
			setScoreSegment(RIGHT10, 23);
    2082:	67 e1       	ldi	r22, 0x17	; 23
    2084:	87 e0       	ldi	r24, 0x07	; 7
    2086:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
			setScoreSegment(RIGHT1, 1);
    208a:	61 e0       	ldi	r22, 0x01	; 1
    208c:	86 e0       	ldi	r24, 0x06	; 6
    208e:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
			setScoreSegment(TIMER100, 22);
    2092:	66 e1       	ldi	r22, 0x16	; 22
    2094:	85 e0       	ldi	r24, 0x05	; 5
    2096:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
			setScoreSegment(TIMER10, 0xc);
    209a:	6c e0       	ldi	r22, 0x0C	; 12
    209c:	84 e0       	ldi	r24, 0x04	; 4
    209e:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
			setScoreSegment(TIMER1, 0xc);
    20a2:	6c e0       	ldi	r22, 0x0C	; 12
    20a4:	83 e0       	ldi	r24, 0x03	; 3
    20a6:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
			setScore(LEFT, MultTimeKill);
    20aa:	60 91 14 03 	lds	r22, 0x0314	; 0x800314 <MultTimeKill>
    20ae:	70 91 15 03 	lds	r23, 0x0315	; 0x800315 <MultTimeKill+0x1>
    20b2:	80 e0       	ldi	r24, 0x00	; 0
    20b4:	0e 94 de 00 	call	0x1bc	; 0x1bc <setScore>
			
			setButtonLed(3,2,1);		// RESET score led
    20b8:	41 e0       	ldi	r20, 0x01	; 1
    20ba:	62 e0       	ldi	r22, 0x02	; 2
    20bc:	83 e0       	ldi	r24, 0x03	; 3
    20be:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
			
			if(isButtonDown(3,2)){
    20c2:	62 e0       	ldi	r22, 0x02	; 2
    20c4:	83 e0       	ldi	r24, 0x03	; 3
    20c6:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    20ca:	88 23       	and	r24, r24
    20cc:	31 f1       	breq	.+76     	; 0x211a <debugMode+0x99a>
				MultTimeKill = 999;
    20ce:	87 ee       	ldi	r24, 0xE7	; 231
    20d0:	93 e0       	ldi	r25, 0x03	; 3
    20d2:	90 93 15 03 	sts	0x0315, r25	; 0x800315 <MultTimeKill+0x1>
    20d6:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <MultTimeKill>
				setScore(LEFT, MultTimeKill);
    20da:	67 ee       	ldi	r22, 0xE7	; 231
    20dc:	73 e0       	ldi	r23, 0x03	; 3
    20de:	80 e0       	ldi	r24, 0x00	; 0
    20e0:	0e 94 de 00 	call	0x1bc	; 0x1bc <setScore>
				DDRB |= (1<<1);	//play reset
    20e4:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[3];
    20e6:	8d e4       	ldi	r24, 0x4D	; 77
    20e8:	9d e0       	ldi	r25, 0x0D	; 13
    20ea:	f7 01       	movw	r30, r14
    20ec:	91 83       	std	Z+1, r25	; 0x01
    20ee:	80 83       	st	Z, r24
				OCR1A = notes[3] / 2;
    20f0:	86 ea       	ldi	r24, 0xA6	; 166
    20f2:	96 e0       	ldi	r25, 0x06	; 6
    20f4:	f8 01       	movw	r30, r16
    20f6:	91 83       	std	Z+1, r25	; 0x01
    20f8:	80 83       	st	Z, r24
    20fa:	ff e7       	ldi	r31, 0x7F	; 127
    20fc:	25 eb       	ldi	r18, 0xB5	; 181
    20fe:	41 e0       	ldi	r20, 0x01	; 1
    2100:	f1 50       	subi	r31, 0x01	; 1
    2102:	20 40       	sbci	r18, 0x00	; 0
    2104:	40 40       	sbci	r20, 0x00	; 0
    2106:	e1 f7       	brne	.-8      	; 0x2100 <debugMode+0x980>
    2108:	00 c0       	rjmp	.+0      	; 0x210a <debugMode+0x98a>
    210a:	00 00       	nop
				_delay_ms(35);
				DDRB &= ~(1<<1);
    210c:	21 98       	cbi	0x04, 1	; 4
				while(isButtonDown(3,2))
    210e:	62 e0       	ldi	r22, 0x02	; 2
    2110:	83 e0       	ldi	r24, 0x03	; 3
    2112:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    2116:	81 11       	cpse	r24, r1
    2118:	fa cf       	rjmp	.-12     	; 0x210e <debugMode+0x98e>
				{
					//wait for unpush
				}
			}
			
			if(isButtonDown(3,4)){	//UP
    211a:	64 e0       	ldi	r22, 0x04	; 4
    211c:	83 e0       	ldi	r24, 0x03	; 3
    211e:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    2122:	88 23       	and	r24, r24
    2124:	09 f4       	brne	.+2      	; 0x2128 <debugMode+0x9a8>
    2126:	6f c0       	rjmp	.+222    	; 0x2206 <debugMode+0xa86>
				TCNT4 = 0;
    2128:	19 82       	std	Y+1, r1	; 0x01
    212a:	18 82       	st	Y, r1
				MultTimeKill = (MultTimeKill + 1) % 1000;
    212c:	40 91 14 03 	lds	r20, 0x0314	; 0x800314 <MultTimeKill>
    2130:	50 91 15 03 	lds	r21, 0x0315	; 0x800315 <MultTimeKill+0x1>
    2134:	4f 5f       	subi	r20, 0xFF	; 255
    2136:	5f 4f       	sbci	r21, 0xFF	; 255
    2138:	9a 01       	movw	r18, r20
    213a:	36 95       	lsr	r19
    213c:	27 95       	ror	r18
    213e:	36 95       	lsr	r19
    2140:	27 95       	ror	r18
    2142:	36 95       	lsr	r19
    2144:	27 95       	ror	r18
    2146:	a5 ec       	ldi	r26, 0xC5	; 197
    2148:	b0 e2       	ldi	r27, 0x20	; 32
    214a:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <__umulhisi3>
    214e:	92 95       	swap	r25
    2150:	82 95       	swap	r24
    2152:	8f 70       	andi	r24, 0x0F	; 15
    2154:	89 27       	eor	r24, r25
    2156:	9f 70       	andi	r25, 0x0F	; 15
    2158:	89 27       	eor	r24, r25
    215a:	86 9d       	mul	r24, r6
    215c:	90 01       	movw	r18, r0
    215e:	87 9d       	mul	r24, r7
    2160:	30 0d       	add	r19, r0
    2162:	96 9d       	mul	r25, r6
    2164:	30 0d       	add	r19, r0
    2166:	11 24       	eor	r1, r1
    2168:	42 1b       	sub	r20, r18
    216a:	53 0b       	sbc	r21, r19
    216c:	50 93 15 03 	sts	0x0315, r21	; 0x800315 <MultTimeKill+0x1>
    2170:	40 93 14 03 	sts	0x0314, r20	; 0x800314 <MultTimeKill>
				
				DDRB |= (1<<1);	//play tone
    2174:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[2];
    2176:	f7 01       	movw	r30, r14
    2178:	51 82       	std	Z+1, r5	; 0x01
    217a:	40 82       	st	Z, r4
				OCR1A = notes[2] / 2;
    217c:	47 e7       	ldi	r20, 0x77	; 119
    217e:	57 e0       	ldi	r21, 0x07	; 7
    2180:	f8 01       	movw	r30, r16
    2182:	51 83       	std	Z+1, r21	; 0x01
    2184:	40 83       	st	Z, r20
    2186:	8f e5       	ldi	r24, 0x5F	; 95
    2188:	9a ee       	ldi	r25, 0xEA	; 234
    218a:	01 97       	sbiw	r24, 0x01	; 1
    218c:	f1 f7       	brne	.-4      	; 0x218a <debugMode+0xa0a>
    218e:	00 c0       	rjmp	.+0      	; 0x2190 <debugMode+0xa10>
    2190:	00 00       	nop
				_delay_ms(15);
				DDRB &= ~(1<<1);
    2192:	21 98       	cbi	0x04, 1	; 4
				
				while(isButtonDown(3,4)){
    2194:	32 c0       	rjmp	.+100    	; 0x21fa <debugMode+0xa7a>
					setScore(LEFT, MultTimeKill);
    2196:	60 91 14 03 	lds	r22, 0x0314	; 0x800314 <MultTimeKill>
    219a:	70 91 15 03 	lds	r23, 0x0315	; 0x800315 <MultTimeKill+0x1>
    219e:	80 e0       	ldi	r24, 0x00	; 0
    21a0:	0e 94 de 00 	call	0x1bc	; 0x1bc <setScore>
					if(TCNT4 > 6500){
    21a4:	88 81       	ld	r24, Y
    21a6:	99 81       	ldd	r25, Y+1	; 0x01
    21a8:	85 36       	cpi	r24, 0x65	; 101
    21aa:	99 41       	sbci	r25, 0x19	; 25
    21ac:	30 f1       	brcs	.+76     	; 0x21fa <debugMode+0xa7a>
						MultTimeKill = (MultTimeKill + 1) % 1000;
    21ae:	40 91 14 03 	lds	r20, 0x0314	; 0x800314 <MultTimeKill>
    21b2:	50 91 15 03 	lds	r21, 0x0315	; 0x800315 <MultTimeKill+0x1>
    21b6:	4f 5f       	subi	r20, 0xFF	; 255
    21b8:	5f 4f       	sbci	r21, 0xFF	; 255
    21ba:	9a 01       	movw	r18, r20
    21bc:	36 95       	lsr	r19
    21be:	27 95       	ror	r18
    21c0:	36 95       	lsr	r19
    21c2:	27 95       	ror	r18
    21c4:	36 95       	lsr	r19
    21c6:	27 95       	ror	r18
    21c8:	a5 ec       	ldi	r26, 0xC5	; 197
    21ca:	b0 e2       	ldi	r27, 0x20	; 32
    21cc:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <__umulhisi3>
    21d0:	92 95       	swap	r25
    21d2:	82 95       	swap	r24
    21d4:	8f 70       	andi	r24, 0x0F	; 15
    21d6:	89 27       	eor	r24, r25
    21d8:	9f 70       	andi	r25, 0x0F	; 15
    21da:	89 27       	eor	r24, r25
    21dc:	86 9d       	mul	r24, r6
    21de:	90 01       	movw	r18, r0
    21e0:	87 9d       	mul	r24, r7
    21e2:	30 0d       	add	r19, r0
    21e4:	96 9d       	mul	r25, r6
    21e6:	30 0d       	add	r19, r0
    21e8:	11 24       	eor	r1, r1
    21ea:	42 1b       	sub	r20, r18
    21ec:	53 0b       	sbc	r21, r19
    21ee:	50 93 15 03 	sts	0x0315, r21	; 0x800315 <MultTimeKill+0x1>
    21f2:	40 93 14 03 	sts	0x0314, r20	; 0x800314 <MultTimeKill>
						TCNT4 = 6250;
    21f6:	99 82       	std	Y+1, r9	; 0x01
    21f8:	88 82       	st	Y, r8
				ICR1 = notes[2];
				OCR1A = notes[2] / 2;
				_delay_ms(15);
				DDRB &= ~(1<<1);
				
				while(isButtonDown(3,4)){
    21fa:	64 e0       	ldi	r22, 0x04	; 4
    21fc:	83 e0       	ldi	r24, 0x03	; 3
    21fe:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    2202:	81 11       	cpse	r24, r1
    2204:	c8 cf       	rjmp	.-112    	; 0x2196 <debugMode+0xa16>
						MultTimeKill = (MultTimeKill + 1) % 1000;
						TCNT4 = 6250;
					}
				}
			}
			if(isButtonDown(3,5)){	//DOWN
    2206:	65 e0       	ldi	r22, 0x05	; 5
    2208:	83 e0       	ldi	r24, 0x03	; 3
    220a:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    220e:	88 23       	and	r24, r24
    2210:	09 f4       	brne	.+2      	; 0x2214 <debugMode+0xa94>
    2212:	d4 c1       	rjmp	.+936    	; 0x25bc <debugMode+0xe3c>
				TCNT4 = 0;
    2214:	19 82       	std	Y+1, r1	; 0x01
    2216:	18 82       	st	Y, r1
				MultTimeKill = (MultTimeKill + 999) % 1000;
    2218:	40 91 14 03 	lds	r20, 0x0314	; 0x800314 <MultTimeKill>
    221c:	50 91 15 03 	lds	r21, 0x0315	; 0x800315 <MultTimeKill+0x1>
    2220:	49 51       	subi	r20, 0x19	; 25
    2222:	5c 4f       	sbci	r21, 0xFC	; 252
    2224:	9a 01       	movw	r18, r20
    2226:	36 95       	lsr	r19
    2228:	27 95       	ror	r18
    222a:	36 95       	lsr	r19
    222c:	27 95       	ror	r18
    222e:	36 95       	lsr	r19
    2230:	27 95       	ror	r18
    2232:	a5 ec       	ldi	r26, 0xC5	; 197
    2234:	b0 e2       	ldi	r27, 0x20	; 32
    2236:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <__umulhisi3>
    223a:	92 95       	swap	r25
    223c:	82 95       	swap	r24
    223e:	8f 70       	andi	r24, 0x0F	; 15
    2240:	89 27       	eor	r24, r25
    2242:	9f 70       	andi	r25, 0x0F	; 15
    2244:	89 27       	eor	r24, r25
    2246:	86 9d       	mul	r24, r6
    2248:	90 01       	movw	r18, r0
    224a:	87 9d       	mul	r24, r7
    224c:	30 0d       	add	r19, r0
    224e:	96 9d       	mul	r25, r6
    2250:	30 0d       	add	r19, r0
    2252:	11 24       	eor	r1, r1
    2254:	42 1b       	sub	r20, r18
    2256:	53 0b       	sbc	r21, r19
    2258:	50 93 15 03 	sts	0x0315, r21	; 0x800315 <MultTimeKill+0x1>
    225c:	40 93 14 03 	sts	0x0314, r20	; 0x800314 <MultTimeKill>
				
				DDRB |= (1<<1);	//play tone
    2260:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[1];
    2262:	f7 01       	movw	r30, r14
    2264:	b1 82       	std	Z+1, r11	; 0x01
    2266:	a0 82       	st	Z, r10
				OCR1A = notes[1] / 2;
    2268:	f8 01       	movw	r30, r16
    226a:	d1 82       	std	Z+1, r13	; 0x01
    226c:	c0 82       	st	Z, r12
    226e:	8f e5       	ldi	r24, 0x5F	; 95
    2270:	9a ee       	ldi	r25, 0xEA	; 234
    2272:	01 97       	sbiw	r24, 0x01	; 1
    2274:	f1 f7       	brne	.-4      	; 0x2272 <debugMode+0xaf2>
    2276:	00 c0       	rjmp	.+0      	; 0x2278 <debugMode+0xaf8>
    2278:	00 00       	nop
				_delay_ms(15);
				DDRB &= ~(1<<1);
    227a:	21 98       	cbi	0x04, 1	; 4
				
				while(isButtonDown(3,5)){
    227c:	32 c0       	rjmp	.+100    	; 0x22e2 <debugMode+0xb62>
					setScore(LEFT, MultTimeKill);
    227e:	60 91 14 03 	lds	r22, 0x0314	; 0x800314 <MultTimeKill>
    2282:	70 91 15 03 	lds	r23, 0x0315	; 0x800315 <MultTimeKill+0x1>
    2286:	80 e0       	ldi	r24, 0x00	; 0
    2288:	0e 94 de 00 	call	0x1bc	; 0x1bc <setScore>
					if(TCNT4 > 6500){
    228c:	88 81       	ld	r24, Y
    228e:	99 81       	ldd	r25, Y+1	; 0x01
    2290:	85 36       	cpi	r24, 0x65	; 101
    2292:	99 41       	sbci	r25, 0x19	; 25
    2294:	30 f1       	brcs	.+76     	; 0x22e2 <debugMode+0xb62>
						MultTimeKill = (MultTimeKill + 999) % 1000;
    2296:	40 91 14 03 	lds	r20, 0x0314	; 0x800314 <MultTimeKill>
    229a:	50 91 15 03 	lds	r21, 0x0315	; 0x800315 <MultTimeKill+0x1>
    229e:	49 51       	subi	r20, 0x19	; 25
    22a0:	5c 4f       	sbci	r21, 0xFC	; 252
    22a2:	9a 01       	movw	r18, r20
    22a4:	36 95       	lsr	r19
    22a6:	27 95       	ror	r18
    22a8:	36 95       	lsr	r19
    22aa:	27 95       	ror	r18
    22ac:	36 95       	lsr	r19
    22ae:	27 95       	ror	r18
    22b0:	a5 ec       	ldi	r26, 0xC5	; 197
    22b2:	b0 e2       	ldi	r27, 0x20	; 32
    22b4:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <__umulhisi3>
    22b8:	92 95       	swap	r25
    22ba:	82 95       	swap	r24
    22bc:	8f 70       	andi	r24, 0x0F	; 15
    22be:	89 27       	eor	r24, r25
    22c0:	9f 70       	andi	r25, 0x0F	; 15
    22c2:	89 27       	eor	r24, r25
    22c4:	86 9d       	mul	r24, r6
    22c6:	90 01       	movw	r18, r0
    22c8:	87 9d       	mul	r24, r7
    22ca:	30 0d       	add	r19, r0
    22cc:	96 9d       	mul	r25, r6
    22ce:	30 0d       	add	r19, r0
    22d0:	11 24       	eor	r1, r1
    22d2:	42 1b       	sub	r20, r18
    22d4:	53 0b       	sbc	r21, r19
    22d6:	50 93 15 03 	sts	0x0315, r21	; 0x800315 <MultTimeKill+0x1>
    22da:	40 93 14 03 	sts	0x0314, r20	; 0x800314 <MultTimeKill>
						TCNT4 = 6250;
    22de:	99 82       	std	Y+1, r9	; 0x01
    22e0:	88 82       	st	Y, r8
				ICR1 = notes[1];
				OCR1A = notes[1] / 2;
				_delay_ms(15);
				DDRB &= ~(1<<1);
				
				while(isButtonDown(3,5)){
    22e2:	65 e0       	ldi	r22, 0x05	; 5
    22e4:	83 e0       	ldi	r24, 0x03	; 3
    22e6:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    22ea:	81 11       	cpse	r24, r1
    22ec:	c8 cf       	rjmp	.-112    	; 0x227e <debugMode+0xafe>
    22ee:	66 c1       	rjmp	.+716    	; 0x25bc <debugMode+0xe3c>
			
			
			
			
			case 5:	//bonus round points
			setScoreSegment(RIGHT100, 0xb);	//3ul tck
    22f0:	6b e0       	ldi	r22, 0x0B	; 11
    22f2:	88 e0       	ldi	r24, 0x08	; 8
    22f4:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
			setScoreSegment(RIGHT10, 21);
    22f8:	65 e1       	ldi	r22, 0x15	; 21
    22fa:	87 e0       	ldi	r24, 0x07	; 7
    22fc:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
			setScoreSegment(RIGHT1, 5);
    2300:	65 e0       	ldi	r22, 0x05	; 5
    2302:	86 e0       	ldi	r24, 0x06	; 6
    2304:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
			setScoreSegment(TIMER100, 24);
    2308:	68 e1       	ldi	r22, 0x18	; 24
    230a:	85 e0       	ldi	r24, 0x05	; 5
    230c:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
			setScoreSegment(TIMER10, 22);
    2310:	66 e1       	ldi	r22, 0x16	; 22
    2312:	84 e0       	ldi	r24, 0x04	; 4
    2314:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
			setScoreSegment(TIMER1, 5);
    2318:	65 e0       	ldi	r22, 0x05	; 5
    231a:	83 e0       	ldi	r24, 0x03	; 3
    231c:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
			setScore(LEFT, BonusPointCount);
    2320:	60 91 18 03 	lds	r22, 0x0318	; 0x800318 <BonusPointCount>
    2324:	70 e0       	ldi	r23, 0x00	; 0
    2326:	80 e0       	ldi	r24, 0x00	; 0
    2328:	0e 94 de 00 	call	0x1bc	; 0x1bc <setScore>
			
			setButtonLed(3,2,1);		// RESET score led
    232c:	41 e0       	ldi	r20, 0x01	; 1
    232e:	62 e0       	ldi	r22, 0x02	; 2
    2330:	83 e0       	ldi	r24, 0x03	; 3
    2332:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
			
			if(isButtonDown(3,2)){
    2336:	62 e0       	ldi	r22, 0x02	; 2
    2338:	83 e0       	ldi	r24, 0x03	; 3
    233a:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    233e:	88 23       	and	r24, r24
    2340:	19 f1       	breq	.+70     	; 0x2388 <debugMode+0xc08>
				BonusPointCount = 2;
    2342:	82 e0       	ldi	r24, 0x02	; 2
    2344:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <BonusPointCount>
				setScore(LEFT, BonusPointCount);
    2348:	62 e0       	ldi	r22, 0x02	; 2
    234a:	70 e0       	ldi	r23, 0x00	; 0
    234c:	80 e0       	ldi	r24, 0x00	; 0
    234e:	0e 94 de 00 	call	0x1bc	; 0x1bc <setScore>
				DDRB |= (1<<1);	//play reset
    2352:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[3];
    2354:	8d e4       	ldi	r24, 0x4D	; 77
    2356:	9d e0       	ldi	r25, 0x0D	; 13
    2358:	f7 01       	movw	r30, r14
    235a:	91 83       	std	Z+1, r25	; 0x01
    235c:	80 83       	st	Z, r24
				OCR1A = notes[3] / 2;
    235e:	86 ea       	ldi	r24, 0xA6	; 166
    2360:	96 e0       	ldi	r25, 0x06	; 6
    2362:	f8 01       	movw	r30, r16
    2364:	91 83       	std	Z+1, r25	; 0x01
    2366:	80 83       	st	Z, r24
    2368:	ff e7       	ldi	r31, 0x7F	; 127
    236a:	25 eb       	ldi	r18, 0xB5	; 181
    236c:	41 e0       	ldi	r20, 0x01	; 1
    236e:	f1 50       	subi	r31, 0x01	; 1
    2370:	20 40       	sbci	r18, 0x00	; 0
    2372:	40 40       	sbci	r20, 0x00	; 0
    2374:	e1 f7       	brne	.-8      	; 0x236e <debugMode+0xbee>
    2376:	00 c0       	rjmp	.+0      	; 0x2378 <debugMode+0xbf8>
    2378:	00 00       	nop
				_delay_ms(35);
				DDRB &= ~(1<<1);
    237a:	21 98       	cbi	0x04, 1	; 4
				while(isButtonDown(3,2))
    237c:	62 e0       	ldi	r22, 0x02	; 2
    237e:	83 e0       	ldi	r24, 0x03	; 3
    2380:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    2384:	81 11       	cpse	r24, r1
    2386:	fa cf       	rjmp	.-12     	; 0x237c <debugMode+0xbfc>
				{
					//wait for unpush
				}
			}
			
			if(isButtonDown(3,4)){	//UP
    2388:	64 e0       	ldi	r22, 0x04	; 4
    238a:	83 e0       	ldi	r24, 0x03	; 3
    238c:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    2390:	88 23       	and	r24, r24
    2392:	81 f1       	breq	.+96     	; 0x23f4 <debugMode+0xc74>
				TCNT4 = 0;
    2394:	19 82       	std	Y+1, r1	; 0x01
    2396:	18 82       	st	Y, r1
				BonusPointCount = (BonusPointCount + 1);
    2398:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <BonusPointCount>
    239c:	8f 5f       	subi	r24, 0xFF	; 255
    239e:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <BonusPointCount>
				
				DDRB |= (1<<1);	//play tone
    23a2:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[2];
    23a4:	f7 01       	movw	r30, r14
    23a6:	51 82       	std	Z+1, r5	; 0x01
    23a8:	40 82       	st	Z, r4
				OCR1A = notes[2] / 2;
    23aa:	47 e7       	ldi	r20, 0x77	; 119
    23ac:	57 e0       	ldi	r21, 0x07	; 7
    23ae:	f8 01       	movw	r30, r16
    23b0:	51 83       	std	Z+1, r21	; 0x01
    23b2:	40 83       	st	Z, r20
    23b4:	8f e5       	ldi	r24, 0x5F	; 95
    23b6:	9a ee       	ldi	r25, 0xEA	; 234
    23b8:	01 97       	sbiw	r24, 0x01	; 1
    23ba:	f1 f7       	brne	.-4      	; 0x23b8 <debugMode+0xc38>
    23bc:	00 c0       	rjmp	.+0      	; 0x23be <debugMode+0xc3e>
    23be:	00 00       	nop
				_delay_ms(15);
				DDRB &= ~(1<<1);
    23c0:	21 98       	cbi	0x04, 1	; 4
				
				while(isButtonDown(3,4)){
    23c2:	12 c0       	rjmp	.+36     	; 0x23e8 <debugMode+0xc68>
					setScore(LEFT, BonusPointCount);
    23c4:	60 91 18 03 	lds	r22, 0x0318	; 0x800318 <BonusPointCount>
    23c8:	70 e0       	ldi	r23, 0x00	; 0
    23ca:	80 e0       	ldi	r24, 0x00	; 0
    23cc:	0e 94 de 00 	call	0x1bc	; 0x1bc <setScore>
					if(TCNT4 > 6500){
    23d0:	88 81       	ld	r24, Y
    23d2:	99 81       	ldd	r25, Y+1	; 0x01
    23d4:	85 36       	cpi	r24, 0x65	; 101
    23d6:	99 41       	sbci	r25, 0x19	; 25
    23d8:	38 f0       	brcs	.+14     	; 0x23e8 <debugMode+0xc68>
						BonusPointCount = (BonusPointCount + 1);
    23da:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <BonusPointCount>
    23de:	8f 5f       	subi	r24, 0xFF	; 255
    23e0:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <BonusPointCount>
						TCNT4 = 6250;
    23e4:	99 82       	std	Y+1, r9	; 0x01
    23e6:	88 82       	st	Y, r8
				ICR1 = notes[2];
				OCR1A = notes[2] / 2;
				_delay_ms(15);
				DDRB &= ~(1<<1);
				
				while(isButtonDown(3,4)){
    23e8:	64 e0       	ldi	r22, 0x04	; 4
    23ea:	83 e0       	ldi	r24, 0x03	; 3
    23ec:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    23f0:	81 11       	cpse	r24, r1
    23f2:	e8 cf       	rjmp	.-48     	; 0x23c4 <debugMode+0xc44>
						BonusPointCount = (BonusPointCount + 1);
						TCNT4 = 6250;
					}
				}
			}
			if(isButtonDown(3,5)){	//DOWN
    23f4:	65 e0       	ldi	r22, 0x05	; 5
    23f6:	83 e0       	ldi	r24, 0x03	; 3
    23f8:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    23fc:	88 23       	and	r24, r24
    23fe:	09 f4       	brne	.+2      	; 0x2402 <debugMode+0xc82>
    2400:	dd c0       	rjmp	.+442    	; 0x25bc <debugMode+0xe3c>
				TCNT4 = 0;
    2402:	19 82       	std	Y+1, r1	; 0x01
    2404:	18 82       	st	Y, r1
				BonusPointCount = (BonusPointCount + 255);
    2406:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <BonusPointCount>
    240a:	81 50       	subi	r24, 0x01	; 1
    240c:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <BonusPointCount>
				
				DDRB |= (1<<1);	//play tone
    2410:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[1];
    2412:	f7 01       	movw	r30, r14
    2414:	b1 82       	std	Z+1, r11	; 0x01
    2416:	a0 82       	st	Z, r10
				OCR1A = notes[1] / 2;
    2418:	f8 01       	movw	r30, r16
    241a:	d1 82       	std	Z+1, r13	; 0x01
    241c:	c0 82       	st	Z, r12
    241e:	8f e5       	ldi	r24, 0x5F	; 95
    2420:	9a ee       	ldi	r25, 0xEA	; 234
    2422:	01 97       	sbiw	r24, 0x01	; 1
    2424:	f1 f7       	brne	.-4      	; 0x2422 <debugMode+0xca2>
    2426:	00 c0       	rjmp	.+0      	; 0x2428 <debugMode+0xca8>
    2428:	00 00       	nop
				_delay_ms(15);
				DDRB &= ~(1<<1);
    242a:	21 98       	cbi	0x04, 1	; 4
				
				while(isButtonDown(3,5)){
    242c:	12 c0       	rjmp	.+36     	; 0x2452 <debugMode+0xcd2>
					setScore(LEFT, BonusPointCount);
    242e:	60 91 18 03 	lds	r22, 0x0318	; 0x800318 <BonusPointCount>
    2432:	70 e0       	ldi	r23, 0x00	; 0
    2434:	80 e0       	ldi	r24, 0x00	; 0
    2436:	0e 94 de 00 	call	0x1bc	; 0x1bc <setScore>
					if(TCNT4 > 6500){
    243a:	88 81       	ld	r24, Y
    243c:	99 81       	ldd	r25, Y+1	; 0x01
    243e:	85 36       	cpi	r24, 0x65	; 101
    2440:	99 41       	sbci	r25, 0x19	; 25
    2442:	38 f0       	brcs	.+14     	; 0x2452 <debugMode+0xcd2>
						BonusPointCount = (BonusPointCount + 255);
    2444:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <BonusPointCount>
    2448:	81 50       	subi	r24, 0x01	; 1
    244a:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <BonusPointCount>
						TCNT4 = 6250;
    244e:	99 82       	std	Y+1, r9	; 0x01
    2450:	88 82       	st	Y, r8
				ICR1 = notes[1];
				OCR1A = notes[1] / 2;
				_delay_ms(15);
				DDRB &= ~(1<<1);
				
				while(isButtonDown(3,5)){
    2452:	65 e0       	ldi	r22, 0x05	; 5
    2454:	83 e0       	ldi	r24, 0x03	; 3
    2456:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    245a:	81 11       	cpse	r24, r1
    245c:	e8 cf       	rjmp	.-48     	; 0x242e <debugMode+0xcae>
    245e:	ae c0       	rjmp	.+348    	; 0x25bc <debugMode+0xe3c>
			
			
			
			
			case 6:	//sound on
			setScoreSegment(RIGHT100, 5);
    2460:	65 e0       	ldi	r22, 0x05	; 5
    2462:	88 e0       	ldi	r24, 0x08	; 8
    2464:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
			setScoreSegment(RIGHT10, 21);
    2468:	65 e1       	ldi	r22, 0x15	; 21
    246a:	87 e0       	ldi	r24, 0x07	; 7
    246c:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
			setScoreSegment(RIGHT1, 0xd);
    2470:	6d e0       	ldi	r22, 0x0D	; 13
    2472:	86 e0       	ldi	r24, 0x06	; 6
    2474:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
			setScoreSegment(TIMER100, 16);
    2478:	60 e1       	ldi	r22, 0x10	; 16
    247a:	85 e0       	ldi	r24, 0x05	; 5
    247c:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
			setScoreSegment(TIMER10, 16);
    2480:	60 e1       	ldi	r22, 0x10	; 16
    2482:	84 e0       	ldi	r24, 0x04	; 4
    2484:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
			setScoreSegment(TIMER1, 16);
    2488:	60 e1       	ldi	r22, 0x10	; 16
    248a:	83 e0       	ldi	r24, 0x03	; 3
    248c:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
			
			setScore(LEFT, SoundEnabled);
    2490:	60 91 0f 03 	lds	r22, 0x030F	; 0x80030f <SoundEnabled>
    2494:	70 e0       	ldi	r23, 0x00	; 0
    2496:	80 e0       	ldi	r24, 0x00	; 0
    2498:	0e 94 de 00 	call	0x1bc	; 0x1bc <setScore>

			if(isButtonDown(3,4)){	//UP
    249c:	64 e0       	ldi	r22, 0x04	; 4
    249e:	83 e0       	ldi	r24, 0x03	; 3
    24a0:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    24a4:	88 23       	and	r24, r24
    24a6:	09 f4       	brne	.+2      	; 0x24aa <debugMode+0xd2a>
    24a8:	42 c0       	rjmp	.+132    	; 0x252e <debugMode+0xdae>
				TCNT4 = 0;
    24aa:	19 82       	std	Y+1, r1	; 0x01
    24ac:	18 82       	st	Y, r1
				SoundEnabled = (SoundEnabled + 1) % 2;
    24ae:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <SoundEnabled>
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	01 96       	adiw	r24, 0x01	; 1
    24b6:	81 70       	andi	r24, 0x01	; 1
    24b8:	90 78       	andi	r25, 0x80	; 128
    24ba:	99 23       	and	r25, r25
    24bc:	24 f4       	brge	.+8      	; 0x24c6 <debugMode+0xd46>
    24be:	01 97       	sbiw	r24, 0x01	; 1
    24c0:	8e 6f       	ori	r24, 0xFE	; 254
    24c2:	9f 6f       	ori	r25, 0xFF	; 255
    24c4:	01 96       	adiw	r24, 0x01	; 1
    24c6:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <SoundEnabled>
				
				DDRB |= (1<<1);	//play tone
    24ca:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[2];
    24cc:	f7 01       	movw	r30, r14
    24ce:	51 82       	std	Z+1, r5	; 0x01
    24d0:	40 82       	st	Z, r4
				OCR1A = notes[2] / 2;
    24d2:	47 e7       	ldi	r20, 0x77	; 119
    24d4:	57 e0       	ldi	r21, 0x07	; 7
    24d6:	f8 01       	movw	r30, r16
    24d8:	51 83       	std	Z+1, r21	; 0x01
    24da:	40 83       	st	Z, r20
    24dc:	8f e5       	ldi	r24, 0x5F	; 95
    24de:	9a ee       	ldi	r25, 0xEA	; 234
    24e0:	01 97       	sbiw	r24, 0x01	; 1
    24e2:	f1 f7       	brne	.-4      	; 0x24e0 <debugMode+0xd60>
    24e4:	00 c0       	rjmp	.+0      	; 0x24e6 <debugMode+0xd66>
    24e6:	00 00       	nop
				_delay_ms(15);
				DDRB &= ~(1<<1);
    24e8:	21 98       	cbi	0x04, 1	; 4
				
				while(isButtonDown(3,4)){
    24ea:	1b c0       	rjmp	.+54     	; 0x2522 <debugMode+0xda2>
					setScore(LEFT, SoundEnabled);
    24ec:	60 91 0f 03 	lds	r22, 0x030F	; 0x80030f <SoundEnabled>
    24f0:	70 e0       	ldi	r23, 0x00	; 0
    24f2:	80 e0       	ldi	r24, 0x00	; 0
    24f4:	0e 94 de 00 	call	0x1bc	; 0x1bc <setScore>
					if(TCNT4 > 6500){
    24f8:	88 81       	ld	r24, Y
    24fa:	99 81       	ldd	r25, Y+1	; 0x01
    24fc:	85 36       	cpi	r24, 0x65	; 101
    24fe:	99 41       	sbci	r25, 0x19	; 25
    2500:	80 f0       	brcs	.+32     	; 0x2522 <debugMode+0xda2>
						SoundEnabled = (SoundEnabled + 1) % 2;
    2502:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <SoundEnabled>
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	01 96       	adiw	r24, 0x01	; 1
    250a:	81 70       	andi	r24, 0x01	; 1
    250c:	90 78       	andi	r25, 0x80	; 128
    250e:	99 23       	and	r25, r25
    2510:	24 f4       	brge	.+8      	; 0x251a <debugMode+0xd9a>
    2512:	01 97       	sbiw	r24, 0x01	; 1
    2514:	8e 6f       	ori	r24, 0xFE	; 254
    2516:	9f 6f       	ori	r25, 0xFF	; 255
    2518:	01 96       	adiw	r24, 0x01	; 1
    251a:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <SoundEnabled>
						TCNT4 = 6250;
    251e:	99 82       	std	Y+1, r9	; 0x01
    2520:	88 82       	st	Y, r8
				ICR1 = notes[2];
				OCR1A = notes[2] / 2;
				_delay_ms(15);
				DDRB &= ~(1<<1);
				
				while(isButtonDown(3,4)){
    2522:	64 e0       	ldi	r22, 0x04	; 4
    2524:	83 e0       	ldi	r24, 0x03	; 3
    2526:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    252a:	81 11       	cpse	r24, r1
    252c:	df cf       	rjmp	.-66     	; 0x24ec <debugMode+0xd6c>
						SoundEnabled = (SoundEnabled + 1) % 2;
						TCNT4 = 6250;
					}
				}
			}
			if(isButtonDown(3,5)){	//DOWN
    252e:	65 e0       	ldi	r22, 0x05	; 5
    2530:	83 e0       	ldi	r24, 0x03	; 3
    2532:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    2536:	88 23       	and	r24, r24
    2538:	09 f4       	brne	.+2      	; 0x253c <debugMode+0xdbc>
    253a:	40 c0       	rjmp	.+128    	; 0x25bc <debugMode+0xe3c>
				TCNT4 = 0;
    253c:	19 82       	std	Y+1, r1	; 0x01
    253e:	18 82       	st	Y, r1
				SoundEnabled = (SoundEnabled + 1) % 2;
    2540:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <SoundEnabled>
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	01 96       	adiw	r24, 0x01	; 1
    2548:	81 70       	andi	r24, 0x01	; 1
    254a:	90 78       	andi	r25, 0x80	; 128
    254c:	99 23       	and	r25, r25
    254e:	24 f4       	brge	.+8      	; 0x2558 <debugMode+0xdd8>
    2550:	01 97       	sbiw	r24, 0x01	; 1
    2552:	8e 6f       	ori	r24, 0xFE	; 254
    2554:	9f 6f       	ori	r25, 0xFF	; 255
    2556:	01 96       	adiw	r24, 0x01	; 1
    2558:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <SoundEnabled>
				
				DDRB |= (1<<1);	//play tone
    255c:	21 9a       	sbi	0x04, 1	; 4
				ICR1 = notes[1];
    255e:	f7 01       	movw	r30, r14
    2560:	b1 82       	std	Z+1, r11	; 0x01
    2562:	a0 82       	st	Z, r10
				OCR1A = notes[1] / 2;
    2564:	f8 01       	movw	r30, r16
    2566:	d1 82       	std	Z+1, r13	; 0x01
    2568:	c0 82       	st	Z, r12
    256a:	8f e5       	ldi	r24, 0x5F	; 95
    256c:	9a ee       	ldi	r25, 0xEA	; 234
    256e:	01 97       	sbiw	r24, 0x01	; 1
    2570:	f1 f7       	brne	.-4      	; 0x256e <debugMode+0xdee>
    2572:	00 c0       	rjmp	.+0      	; 0x2574 <debugMode+0xdf4>
    2574:	00 00       	nop
				_delay_ms(15);
				DDRB &= ~(1<<1);
    2576:	21 98       	cbi	0x04, 1	; 4
				
				while(isButtonDown(3,5)){
    2578:	1b c0       	rjmp	.+54     	; 0x25b0 <debugMode+0xe30>
					setScore(LEFT, SoundEnabled);
    257a:	60 91 0f 03 	lds	r22, 0x030F	; 0x80030f <SoundEnabled>
    257e:	70 e0       	ldi	r23, 0x00	; 0
    2580:	80 e0       	ldi	r24, 0x00	; 0
    2582:	0e 94 de 00 	call	0x1bc	; 0x1bc <setScore>
					if(TCNT4 > 6500){
    2586:	88 81       	ld	r24, Y
    2588:	99 81       	ldd	r25, Y+1	; 0x01
    258a:	85 36       	cpi	r24, 0x65	; 101
    258c:	99 41       	sbci	r25, 0x19	; 25
    258e:	80 f0       	brcs	.+32     	; 0x25b0 <debugMode+0xe30>
						SoundEnabled = (SoundEnabled + 1) % 2;
    2590:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <SoundEnabled>
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	01 96       	adiw	r24, 0x01	; 1
    2598:	81 70       	andi	r24, 0x01	; 1
    259a:	90 78       	andi	r25, 0x80	; 128
    259c:	99 23       	and	r25, r25
    259e:	24 f4       	brge	.+8      	; 0x25a8 <debugMode+0xe28>
    25a0:	01 97       	sbiw	r24, 0x01	; 1
    25a2:	8e 6f       	ori	r24, 0xFE	; 254
    25a4:	9f 6f       	ori	r25, 0xFF	; 255
    25a6:	01 96       	adiw	r24, 0x01	; 1
    25a8:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <SoundEnabled>
						TCNT4 = 6250;
    25ac:	99 82       	std	Y+1, r9	; 0x01
    25ae:	88 82       	st	Y, r8
				ICR1 = notes[1];
				OCR1A = notes[1] / 2;
				_delay_ms(15);
				DDRB &= ~(1<<1);
				
				while(isButtonDown(3,5)){
    25b0:	65 e0       	ldi	r22, 0x05	; 5
    25b2:	83 e0       	ldi	r24, 0x03	; 3
    25b4:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    25b8:	81 11       	cpse	r24, r1
    25ba:	df cf       	rjmp	.-66     	; 0x257a <debugMode+0xdfa>





		setButtonLed(0,5,1);	//NEXT button
    25bc:	41 e0       	ldi	r20, 0x01	; 1
    25be:	65 e0       	ldi	r22, 0x05	; 5
    25c0:	80 e0       	ldi	r24, 0x00	; 0
    25c2:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
		setButtonLed(1,5,1);	//PREV button
    25c6:	41 e0       	ldi	r20, 0x01	; 1
    25c8:	65 e0       	ldi	r22, 0x05	; 5
    25ca:	81 e0       	ldi	r24, 0x01	; 1
    25cc:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
		setButtonLed(3,4,1);	//UP button
    25d0:	41 e0       	ldi	r20, 0x01	; 1
    25d2:	64 e0       	ldi	r22, 0x04	; 4
    25d4:	83 e0       	ldi	r24, 0x03	; 3
    25d6:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
		setButtonLed(3,5,1);	//DOWN button
    25da:	41 e0       	ldi	r20, 0x01	; 1
    25dc:	65 e0       	ldi	r22, 0x05	; 5
    25de:	83 e0       	ldi	r24, 0x03	; 3
    25e0:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
		setButtonLed(0,1,1);	//CLOSE button
    25e4:	41 e0       	ldi	r20, 0x01	; 1
    25e6:	61 e0       	ldi	r22, 0x01	; 1
    25e8:	80 e0       	ldi	r24, 0x00	; 0
    25ea:	0e 94 b9 00 	call	0x172	; 0x172 <setButtonLed>
		
		if(isButtonDown(0,5)){	// goto next page
    25ee:	65 e0       	ldi	r22, 0x05	; 5
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    25f6:	88 23       	and	r24, r24
    25f8:	b1 f1       	breq	.+108    	; 0x2666 <debugMode+0xee6>
			page = (page+1) % maxpages;
    25fa:	83 2d       	mov	r24, r3
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	01 96       	adiw	r24, 0x01	; 1
    2600:	67 e0       	ldi	r22, 0x07	; 7
    2602:	70 e0       	ldi	r23, 0x00	; 0
    2604:	0e 94 d7 15 	call	0x2bae	; 0x2bae <__divmodhi4>
    2608:	38 2e       	mov	r3, r24
			
			DDRB |= (1<<1);	//play page tone
    260a:	21 9a       	sbi	0x04, 1	; 4
			ICR1 = notes[0];
    260c:	81 ec       	ldi	r24, 0xC1	; 193
    260e:	91 e1       	ldi	r25, 0x11	; 17
    2610:	f7 01       	movw	r30, r14
    2612:	91 83       	std	Z+1, r25	; 0x01
    2614:	80 83       	st	Z, r24
			OCR1A = notes[0] / 2;
    2616:	80 ee       	ldi	r24, 0xE0	; 224
    2618:	98 e0       	ldi	r25, 0x08	; 8
    261a:	f8 01       	movw	r30, r16
    261c:	91 83       	std	Z+1, r25	; 0x01
    261e:	80 83       	st	Z, r24
    2620:	ff e7       	ldi	r31, 0x7F	; 127
    2622:	25 eb       	ldi	r18, 0xB5	; 181
    2624:	41 e0       	ldi	r20, 0x01	; 1
    2626:	f1 50       	subi	r31, 0x01	; 1
    2628:	20 40       	sbci	r18, 0x00	; 0
    262a:	40 40       	sbci	r20, 0x00	; 0
    262c:	e1 f7       	brne	.-8      	; 0x2626 <debugMode+0xea6>
    262e:	00 c0       	rjmp	.+0      	; 0x2630 <debugMode+0xeb0>
    2630:	00 00       	nop
			_delay_ms(35);
			DDRB &= ~(1<<1);
    2632:	21 98       	cbi	0x04, 1	; 4
			
			while(isButtonDown(0,5)){
    2634:	65 e0       	ldi	r22, 0x05	; 5
    2636:	80 e0       	ldi	r24, 0x00	; 0
    2638:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    263c:	81 11       	cpse	r24, r1
    263e:	fa cf       	rjmp	.-12     	; 0x2634 <debugMode+0xeb4>
				;				//wait until button release
			}
			DDRB |= (1<<1);	//play page tone
    2640:	21 9a       	sbi	0x04, 1	; 4
			ICR1 = notes[1];
    2642:	f7 01       	movw	r30, r14
    2644:	b1 82       	std	Z+1, r11	; 0x01
    2646:	a0 82       	st	Z, r10
			OCR1A = notes[1] / 2;
    2648:	f8 01       	movw	r30, r16
    264a:	d1 82       	std	Z+1, r13	; 0x01
    264c:	c0 82       	st	Z, r12
    264e:	ff e7       	ldi	r31, 0x7F	; 127
    2650:	25 eb       	ldi	r18, 0xB5	; 181
    2652:	41 e0       	ldi	r20, 0x01	; 1
    2654:	f1 50       	subi	r31, 0x01	; 1
    2656:	20 40       	sbci	r18, 0x00	; 0
    2658:	40 40       	sbci	r20, 0x00	; 0
    265a:	e1 f7       	brne	.-8      	; 0x2654 <debugMode+0xed4>
    265c:	00 c0       	rjmp	.+0      	; 0x265e <debugMode+0xede>
    265e:	00 00       	nop
			_delay_ms(35);
			DDRB &= ~(1<<1);
    2660:	21 98       	cbi	0x04, 1	; 4
			
			clearLeds(0);
    2662:	0e 94 53 01 	call	0x2a6	; 0x2a6 <clearLeds>
			
		}
		if(isButtonDown(1,5)){	// goto next page
    2666:	65 e0       	ldi	r22, 0x05	; 5
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    266e:	88 23       	and	r24, r24
    2670:	b1 f1       	breq	.+108    	; 0x26de <debugMode+0xf5e>
			page = (page + maxpages - 1) % maxpages;
    2672:	83 2d       	mov	r24, r3
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	06 96       	adiw	r24, 0x06	; 6
    2678:	67 e0       	ldi	r22, 0x07	; 7
    267a:	70 e0       	ldi	r23, 0x00	; 0
    267c:	0e 94 d7 15 	call	0x2bae	; 0x2bae <__divmodhi4>
    2680:	38 2e       	mov	r3, r24
			
			DDRB |= (1<<1);	//play page tone
    2682:	21 9a       	sbi	0x04, 1	; 4
			ICR1 = notes[0];
    2684:	81 ec       	ldi	r24, 0xC1	; 193
    2686:	91 e1       	ldi	r25, 0x11	; 17
    2688:	f7 01       	movw	r30, r14
    268a:	91 83       	std	Z+1, r25	; 0x01
    268c:	80 83       	st	Z, r24
			OCR1A = notes[0] / 2;
    268e:	80 ee       	ldi	r24, 0xE0	; 224
    2690:	98 e0       	ldi	r25, 0x08	; 8
    2692:	f8 01       	movw	r30, r16
    2694:	91 83       	std	Z+1, r25	; 0x01
    2696:	80 83       	st	Z, r24
    2698:	ff e7       	ldi	r31, 0x7F	; 127
    269a:	25 eb       	ldi	r18, 0xB5	; 181
    269c:	41 e0       	ldi	r20, 0x01	; 1
    269e:	f1 50       	subi	r31, 0x01	; 1
    26a0:	20 40       	sbci	r18, 0x00	; 0
    26a2:	40 40       	sbci	r20, 0x00	; 0
    26a4:	e1 f7       	brne	.-8      	; 0x269e <debugMode+0xf1e>
    26a6:	00 c0       	rjmp	.+0      	; 0x26a8 <debugMode+0xf28>
    26a8:	00 00       	nop
			_delay_ms(35);
			DDRB &= ~(1<<1);
    26aa:	21 98       	cbi	0x04, 1	; 4
			
			while(isButtonDown(1,5)){
    26ac:	65 e0       	ldi	r22, 0x05	; 5
    26ae:	81 e0       	ldi	r24, 0x01	; 1
    26b0:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    26b4:	81 11       	cpse	r24, r1
    26b6:	fa cf       	rjmp	.-12     	; 0x26ac <debugMode+0xf2c>
				;				//wait until button release
			}
			DDRB |= (1<<1);	//play page tone
    26b8:	21 9a       	sbi	0x04, 1	; 4
			ICR1 = notes[1];
    26ba:	f7 01       	movw	r30, r14
    26bc:	b1 82       	std	Z+1, r11	; 0x01
    26be:	a0 82       	st	Z, r10
			OCR1A = notes[1] / 2;
    26c0:	f8 01       	movw	r30, r16
    26c2:	d1 82       	std	Z+1, r13	; 0x01
    26c4:	c0 82       	st	Z, r12
    26c6:	ff e7       	ldi	r31, 0x7F	; 127
    26c8:	25 eb       	ldi	r18, 0xB5	; 181
    26ca:	41 e0       	ldi	r20, 0x01	; 1
    26cc:	f1 50       	subi	r31, 0x01	; 1
    26ce:	20 40       	sbci	r18, 0x00	; 0
    26d0:	40 40       	sbci	r20, 0x00	; 0
    26d2:	e1 f7       	brne	.-8      	; 0x26cc <debugMode+0xf4c>
    26d4:	00 c0       	rjmp	.+0      	; 0x26d6 <debugMode+0xf56>
    26d6:	00 00       	nop
			_delay_ms(35);
			DDRB &= ~(1<<1);
    26d8:	21 98       	cbi	0x04, 1	; 4
			
			clearLeds(0);
    26da:	0e 94 53 01 	call	0x2a6	; 0x2a6 <clearLeds>
		}
		if(isButtonDown(0,1)){	//CLOSE debug
    26de:	61 e0       	ldi	r22, 0x01	; 1
    26e0:	80 e0       	ldi	r24, 0x00	; 0
    26e2:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    26e6:	88 23       	and	r24, r24
    26e8:	09 f4       	brne	.+2      	; 0x26ec <debugMode+0xf6c>
    26ea:	d8 c8       	rjmp	.-3664   	; 0x189c <debugMode+0x11c>
			//first SAVE all values
			DDRB |= (1<<1);	//play page tone
    26ec:	21 9a       	sbi	0x04, 1	; 4
			ICR1 = notes[3];
    26ee:	a6 e8       	ldi	r26, 0x86	; 134
    26f0:	b0 e0       	ldi	r27, 0x00	; 0
    26f2:	2d e4       	ldi	r18, 0x4D	; 77
    26f4:	3d e0       	ldi	r19, 0x0D	; 13
    26f6:	11 96       	adiw	r26, 0x01	; 1
    26f8:	3c 93       	st	X, r19
    26fa:	2e 93       	st	-X, r18
			OCR1A = notes[3] / 2;
    26fc:	e8 e8       	ldi	r30, 0x88	; 136
    26fe:	f0 e0       	ldi	r31, 0x00	; 0
    2700:	86 ea       	ldi	r24, 0xA6	; 166
    2702:	96 e0       	ldi	r25, 0x06	; 6
    2704:	91 83       	std	Z+1, r25	; 0x01
    2706:	80 83       	st	Z, r24
    2708:	5f e7       	ldi	r21, 0x7F	; 127
    270a:	65 eb       	ldi	r22, 0xB5	; 181
    270c:	c1 e0       	ldi	r28, 0x01	; 1
    270e:	51 50       	subi	r21, 0x01	; 1
    2710:	60 40       	sbci	r22, 0x00	; 0
    2712:	c0 40       	sbci	r28, 0x00	; 0
    2714:	e1 f7       	brne	.-8      	; 0x270e <debugMode+0xf8e>
    2716:	00 c0       	rjmp	.+0      	; 0x2718 <debugMode+0xf98>
    2718:	00 00       	nop
			_delay_ms(35);
			DDRB &= ~(1<<1);
    271a:	21 98       	cbi	0x04, 1	; 4
    271c:	df e7       	ldi	r29, 0x7F	; 127
    271e:	15 eb       	ldi	r17, 0xB5	; 181
    2720:	41 e0       	ldi	r20, 0x01	; 1
    2722:	d1 50       	subi	r29, 0x01	; 1
    2724:	10 40       	sbci	r17, 0x00	; 0
    2726:	40 40       	sbci	r20, 0x00	; 0
    2728:	e1 f7       	brne	.-8      	; 0x2722 <debugMode+0xfa2>
    272a:	00 c0       	rjmp	.+0      	; 0x272c <debugMode+0xfac>
    272c:	00 00       	nop
			_delay_ms(35);
			DDRB |= (1<<1);	//play page tone
    272e:	21 9a       	sbi	0x04, 1	; 4
			ICR1 = notes[3];
    2730:	11 96       	adiw	r26, 0x01	; 1
    2732:	3c 93       	st	X, r19
    2734:	2e 93       	st	-X, r18
			OCR1A = notes[3] / 2;
    2736:	91 83       	std	Z+1, r25	; 0x01
    2738:	80 83       	st	Z, r24
    273a:	5f e7       	ldi	r21, 0x7F	; 127
    273c:	65 eb       	ldi	r22, 0xB5	; 181
    273e:	81 e0       	ldi	r24, 0x01	; 1
    2740:	51 50       	subi	r21, 0x01	; 1
    2742:	60 40       	sbci	r22, 0x00	; 0
    2744:	80 40       	sbci	r24, 0x00	; 0
    2746:	e1 f7       	brne	.-8      	; 0x2740 <debugMode+0xfc0>
    2748:	00 c0       	rjmp	.+0      	; 0x274a <debugMode+0xfca>
    274a:	00 00       	nop
			_delay_ms(35);
			DDRB &= ~(1<<1);
    274c:	21 98       	cbi	0x04, 1	; 4
			
			EEPROM_write(EEP_ADDR_HighScore1P_H, HighScore1P >> 8);
    274e:	60 91 03 03 	lds	r22, 0x0303	; 0x800303 <HighScore1P+0x1>
    2752:	80 e0       	ldi	r24, 0x00	; 0
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	0e 94 b8 0b 	call	0x1770	; 0x1770 <EEPROM_write>
			EEPROM_write(EEP_ADDR_HighScore1P_L, HighScore1P & 0xFF);
    275a:	60 91 02 03 	lds	r22, 0x0302	; 0x800302 <HighScore1P>
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	0e 94 b8 0b 	call	0x1770	; 0x1770 <EEPROM_write>
			EEPROM_write(EEP_ADDR_HighScore2P_H, HighScore2P >> 8);
    2766:	60 91 17 03 	lds	r22, 0x0317	; 0x800317 <HighScore2P+0x1>
    276a:	82 e0       	ldi	r24, 0x02	; 2
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	0e 94 b8 0b 	call	0x1770	; 0x1770 <EEPROM_write>
			EEPROM_write(EEP_ADDR_HighScore2P_L, HighScore2P & 0xFF);
    2772:	60 91 16 03 	lds	r22, 0x0316	; 0x800316 <HighScore2P>
    2776:	83 e0       	ldi	r24, 0x03	; 3
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	0e 94 b8 0b 	call	0x1770	; 0x1770 <EEPROM_write>
			EEPROM_write(EEP_ADDR_RoundTime, RoundTime);
    277e:	60 91 12 03 	lds	r22, 0x0312	; 0x800312 <RoundTime>
    2782:	80 e1       	ldi	r24, 0x10	; 16
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	0e 94 b8 0b 	call	0x1770	; 0x1770 <EEPROM_write>
			EEPROM_write(EEP_ADDR_BonusTime, BonusTime);
    278a:	60 91 f5 02 	lds	r22, 0x02F5	; 0x8002f5 <BonusTime>
    278e:	80 e2       	ldi	r24, 0x20	; 32
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	0e 94 b8 0b 	call	0x1770	; 0x1770 <EEPROM_write>
			EEPROM_write(EEP_ADDR_MultTimeKill_H, MultTimeKill >> 8);
    2796:	60 91 15 03 	lds	r22, 0x0315	; 0x800315 <MultTimeKill+0x1>
    279a:	80 e8       	ldi	r24, 0x80	; 128
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	0e 94 b8 0b 	call	0x1770	; 0x1770 <EEPROM_write>
			EEPROM_write(EEP_ADDR_MultTimeKill_L, MultTimeKill & 0xFF);
    27a2:	60 91 14 03 	lds	r22, 0x0314	; 0x800314 <MultTimeKill>
    27a6:	81 e8       	ldi	r24, 0x81	; 129
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	0e 94 b8 0b 	call	0x1770	; 0x1770 <EEPROM_write>
			EEPROM_write(EEP_ADDR_SoundEnabled, SoundEnabled);
    27ae:	60 91 0f 03 	lds	r22, 0x030F	; 0x80030f <SoundEnabled>
    27b2:	80 e7       	ldi	r24, 0x70	; 112
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	0e 94 b8 0b 	call	0x1770	; 0x1770 <EEPROM_write>
			EEPROM_write(EEP_ADDR_BonusPtCount, BonusPointCount);
    27ba:	60 91 18 03 	lds	r22, 0x0318	; 0x800318 <BonusPointCount>
    27be:	80 e6       	ldi	r24, 0x60	; 96
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	0e 94 b8 0b 	call	0x1770	; 0x1770 <EEPROM_write>
			
			return;
		}
	}
}
    27c6:	df 91       	pop	r29
    27c8:	cf 91       	pop	r28
    27ca:	1f 91       	pop	r17
    27cc:	0f 91       	pop	r16
    27ce:	ff 90       	pop	r15
    27d0:	ef 90       	pop	r14
    27d2:	df 90       	pop	r13
    27d4:	cf 90       	pop	r12
    27d6:	bf 90       	pop	r11
    27d8:	af 90       	pop	r10
    27da:	9f 90       	pop	r9
    27dc:	8f 90       	pop	r8
    27de:	7f 90       	pop	r7
    27e0:	6f 90       	pop	r6
    27e2:	5f 90       	pop	r5
    27e4:	4f 90       	pop	r4
    27e6:	3f 90       	pop	r3
    27e8:	08 95       	ret

000027ea <EEPROM_read>:
}

uint8_t EEPROM_read(uint16_t uiAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
    27ea:	f9 99       	sbic	0x1f, 1	; 31
    27ec:	fe cf       	rjmp	.-4      	; 0x27ea <EEPROM_read>
	;
	/* Set up address register */
	EEAR = uiAddress;
    27ee:	92 bd       	out	0x22, r25	; 34
    27f0:	81 bd       	out	0x21, r24	; 33
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
    27f2:	f8 9a       	sbi	0x1f, 0	; 31
	/* Return data from Data Register */
	return EEDR;
    27f4:	80 b5       	in	r24, 0x20	; 32
}
    27f6:	08 95       	ret

000027f8 <main>:
	UBRR0L = 51;
}

int main(void)
{
	usbQcInit();
    27f8:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <usbQcInit>
	QCset12V();
    27fc:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <QCset12V>
	
	buttonsInit();
    2800:	0e 94 9f 00 	call	0x13e	; 0x13e <buttonsInit>
	init_uart();
    2804:	0e 94 9f 02 	call	0x53e	; 0x53e <init_uart>
	stdout = &mystdout;
    2808:	89 e1       	ldi	r24, 0x19	; 25
    280a:	91 e0       	ldi	r25, 0x01	; 1
    280c:	90 93 1c 03 	sts	0x031C, r25	; 0x80031c <__iob+0x3>
    2810:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <__iob+0x2>
	printf("\n\nWelcome to bartending robot OS ver 4.7B\n");
    2814:	8f e8       	ldi	r24, 0x8F	; 143
    2816:	91 e0       	ldi	r25, 0x01	; 1
    2818:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <puts>
	
	sei();
    281c:	78 94       	sei
	setScoreSegment(6, 0x11);
	_delay_ms(100);
	}*/
	
	// initialize timer0 for audio circuit
	DDRB |= (1 << DDB1) | (1 << DDB5); // output speaker pin B1
    281e:	84 b1       	in	r24, 0x04	; 4
    2820:	82 62       	ori	r24, 0x22	; 34
    2822:	84 b9       	out	0x04, r24	; 4
	ICR1 = 0;	// TOP of counter, start OFF
    2824:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    2828:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	OCR1A = 0; //0x1FFF;	// OFF at
    282c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    2830:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TCCR1A |= (1 << COM1A1) | (1 << WGM11); //|(0 << COM1B1);
    2834:	e0 e8       	ldi	r30, 0x80	; 128
    2836:	f0 e0       	ldi	r31, 0x00	; 0
    2838:	80 81       	ld	r24, Z
    283a:	82 68       	ori	r24, 0x82	; 130
    283c:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12 ) | (1 << WGM13) | (1 << CS41);
    283e:	e1 e8       	ldi	r30, 0x81	; 129
    2840:	f0 e0       	ldi	r31, 0x00	; 0
    2842:	80 81       	ld	r24, Z
    2844:	8a 61       	ori	r24, 0x1A	; 26
    2846:	80 83       	st	Z, r24
	PORTB &= ~(1 << 1);
    2848:	29 98       	cbi	0x05, 1	; 5
	
	TCCR0A = (1 << WGM01);	// enable CTC mode timer 0
    284a:	82 e0       	ldi	r24, 0x02	; 2
    284c:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0;		//disable clock for timer0, as it will be enabled when "beeped"
    284e:	15 bc       	out	0x25, r1	; 37
	OCR0A = 125;
    2850:	9d e7       	ldi	r25, 0x7D	; 125
    2852:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = ( 1 << OCIE0A );
    2854:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	
	printf("AUDIO TIMERS & PORT SET\n");
    2858:	89 eb       	ldi	r24, 0xB9	; 185
    285a:	91 e0       	ldi	r25, 0x01	; 1
    285c:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <puts>

	//load values from eeprom
	
	

	HighScore1P = (EEPROM_read(EEP_ADDR_HighScore1P_H) << 8) | (EEPROM_read(EEP_ADDR_HighScore1P_L));
    2860:	80 e0       	ldi	r24, 0x00	; 0
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	0e 94 f5 13 	call	0x27ea	; 0x27ea <EEPROM_read>
    2868:	c8 2f       	mov	r28, r24
    286a:	81 e0       	ldi	r24, 0x01	; 1
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	0e 94 f5 13 	call	0x27ea	; 0x27ea <EEPROM_read>
    2872:	2c 2f       	mov	r18, r28
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	32 2f       	mov	r19, r18
    2878:	22 27       	eor	r18, r18
    287a:	28 2b       	or	r18, r24
    287c:	30 93 03 03 	sts	0x0303, r19	; 0x800303 <HighScore1P+0x1>
    2880:	20 93 02 03 	sts	0x0302, r18	; 0x800302 <HighScore1P>
	HighScore2P = (EEPROM_read(EEP_ADDR_HighScore2P_H) << 8) | (EEPROM_read(EEP_ADDR_HighScore2P_L));
    2884:	82 e0       	ldi	r24, 0x02	; 2
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	0e 94 f5 13 	call	0x27ea	; 0x27ea <EEPROM_read>
    288c:	c8 2f       	mov	r28, r24
    288e:	83 e0       	ldi	r24, 0x03	; 3
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	0e 94 f5 13 	call	0x27ea	; 0x27ea <EEPROM_read>
    2896:	2c 2f       	mov	r18, r28
    2898:	30 e0       	ldi	r19, 0x00	; 0
    289a:	32 2f       	mov	r19, r18
    289c:	22 27       	eor	r18, r18
    289e:	28 2b       	or	r18, r24
    28a0:	30 93 17 03 	sts	0x0317, r19	; 0x800317 <HighScore2P+0x1>
    28a4:	20 93 16 03 	sts	0x0316, r18	; 0x800316 <HighScore2P>
	RoundTime = EEPROM_read(EEP_ADDR_RoundTime);
    28a8:	80 e1       	ldi	r24, 0x10	; 16
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	0e 94 f5 13 	call	0x27ea	; 0x27ea <EEPROM_read>
    28b0:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <RoundTime>
	BonusTime = EEPROM_read(EEP_ADDR_BonusTime);
    28b4:	80 e2       	ldi	r24, 0x20	; 32
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	0e 94 f5 13 	call	0x27ea	; 0x27ea <EEPROM_read>
    28bc:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <BonusTime>
	MultiplierMax = EEPROM_read(EEP_ADDR_MultMax);
    28c0:	80 e5       	ldi	r24, 0x50	; 80
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	0e 94 f5 13 	call	0x27ea	; 0x27ea <EEPROM_read>
    28c8:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <MultiplierMax>
	BonusPointCount = EEPROM_read(EEP_ADDR_BonusPtCount);
    28cc:	80 e6       	ldi	r24, 0x60	; 96
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	0e 94 f5 13 	call	0x27ea	; 0x27ea <EEPROM_read>
    28d4:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <BonusPointCount>
	SoundEnabled = EEPROM_read(EEP_ADDR_SoundEnabled);
    28d8:	80 e7       	ldi	r24, 0x70	; 112
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	0e 94 f5 13 	call	0x27ea	; 0x27ea <EEPROM_read>
    28e0:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <SoundEnabled>
	MultTimeKill = (EEPROM_read(EEP_ADDR_MultTimeKill_H) << 8) | (EEPROM_read(EEP_ADDR_MultTimeKill_L));
    28e4:	80 e8       	ldi	r24, 0x80	; 128
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	0e 94 f5 13 	call	0x27ea	; 0x27ea <EEPROM_read>
    28ec:	c8 2f       	mov	r28, r24
    28ee:	81 e8       	ldi	r24, 0x81	; 129
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	0e 94 f5 13 	call	0x27ea	; 0x27ea <EEPROM_read>
    28f6:	2c 2f       	mov	r18, r28
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	32 2f       	mov	r19, r18
    28fc:	22 27       	eor	r18, r18
    28fe:	28 2b       	or	r18, r24
    2900:	30 93 15 03 	sts	0x0315, r19	; 0x800315 <MultTimeKill+0x1>
    2904:	20 93 14 03 	sts	0x0314, r18	; 0x800314 <MultTimeKill>
	
	// load random value from eeprom as seed and write new random value
	srand((EEPROM_read(EEP_ADDR_RandomSeed_H) << 8) | EEPROM_read(EEP_ADDR_RandomSeed_L));
    2908:	80 e4       	ldi	r24, 0x40	; 64
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	0e 94 f5 13 	call	0x27ea	; 0x27ea <EEPROM_read>
    2910:	c8 2f       	mov	r28, r24
    2912:	81 e4       	ldi	r24, 0x41	; 65
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	0e 94 f5 13 	call	0x27ea	; 0x27ea <EEPROM_read>
    291a:	2c 2f       	mov	r18, r28
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	32 2f       	mov	r19, r18
    2920:	22 27       	eor	r18, r18
    2922:	a9 01       	movw	r20, r18
    2924:	48 2b       	or	r20, r24
    2926:	ca 01       	movw	r24, r20
    2928:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <srand>
	EEPROM_write(EEP_ADDR_RandomSeed_H, rand()%256 );
    292c:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <rand>
    2930:	90 78       	andi	r25, 0x80	; 128
    2932:	99 23       	and	r25, r25
    2934:	1c f4       	brge	.+6      	; 0x293c <main+0x144>
    2936:	01 97       	sbiw	r24, 0x01	; 1
    2938:	9f 6f       	ori	r25, 0xFF	; 255
    293a:	01 96       	adiw	r24, 0x01	; 1
    293c:	68 2f       	mov	r22, r24
    293e:	80 e4       	ldi	r24, 0x40	; 64
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	0e 94 b8 0b 	call	0x1770	; 0x1770 <EEPROM_write>
	EEPROM_write(EEP_ADDR_RandomSeed_L, rand()%256 );
    2946:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <rand>
    294a:	90 78       	andi	r25, 0x80	; 128
    294c:	99 23       	and	r25, r25
    294e:	1c f4       	brge	.+6      	; 0x2956 <main+0x15e>
    2950:	01 97       	sbiw	r24, 0x01	; 1
    2952:	9f 6f       	ori	r25, 0xFF	; 255
    2954:	01 96       	adiw	r24, 0x01	; 1
    2956:	68 2f       	mov	r22, r24
    2958:	81 e4       	ldi	r24, 0x41	; 65
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	0e 94 b8 0b 	call	0x1770	; 0x1770 <EEPROM_write>
	
	printf("EEPROM VALUES SET:\n");
    2960:	81 ed       	ldi	r24, 0xD1	; 209
    2962:	91 e0       	ldi	r25, 0x01	; 1
    2964:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <puts>
	printf("HS1P: %d \t HS2P: %d \t RT: %d \t BT: %d \t MMAX: %d \t BPC: %d \t SND: %d \t MulTck: %d \n",HighScore1P, HighScore2P, RoundTime, BonusTime, MultiplierMax, BonusPointCount, SoundEnabled, MultTimeKill);
    2968:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <MultTimeKill+0x1>
    296c:	8f 93       	push	r24
    296e:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <MultTimeKill>
    2972:	8f 93       	push	r24
    2974:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <SoundEnabled>
    2978:	1f 92       	push	r1
    297a:	8f 93       	push	r24
    297c:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <BonusPointCount>
    2980:	1f 92       	push	r1
    2982:	8f 93       	push	r24
    2984:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <MultiplierMax>
    2988:	1f 92       	push	r1
    298a:	8f 93       	push	r24
    298c:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <BonusTime>
    2990:	1f 92       	push	r1
    2992:	8f 93       	push	r24
    2994:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <RoundTime>
    2998:	1f 92       	push	r1
    299a:	8f 93       	push	r24
    299c:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <HighScore2P+0x1>
    29a0:	8f 93       	push	r24
    29a2:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <HighScore2P>
    29a6:	8f 93       	push	r24
    29a8:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <HighScore1P+0x1>
    29ac:	8f 93       	push	r24
    29ae:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <HighScore1P>
    29b2:	8f 93       	push	r24
    29b4:	84 ee       	ldi	r24, 0xE4	; 228
    29b6:	91 e0       	ldi	r25, 0x01	; 1
    29b8:	9f 93       	push	r25
    29ba:	8f 93       	push	r24
    29bc:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <printf>
	printf("RANDOMSEED: 0x%X%X\n\n", EEPROM_read(EEP_ADDR_RandomSeed_H), EEPROM_read(EEP_ADDR_RandomSeed_L));
    29c0:	81 e4       	ldi	r24, 0x41	; 65
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	0e 94 f5 13 	call	0x27ea	; 0x27ea <EEPROM_read>
    29c8:	c8 2f       	mov	r28, r24
    29ca:	80 e4       	ldi	r24, 0x40	; 64
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	0e 94 f5 13 	call	0x27ea	; 0x27ea <EEPROM_read>
    29d2:	1f 92       	push	r1
    29d4:	cf 93       	push	r28
    29d6:	1f 92       	push	r1
    29d8:	8f 93       	push	r24
    29da:	88 e3       	ldi	r24, 0x38	; 56
    29dc:	92 e0       	ldi	r25, 0x02	; 2
    29de:	9f 93       	push	r25
    29e0:	8f 93       	push	r24
    29e2:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <printf>
	
	
	
	
	// set up timer4 for game timer
	TCCR4B = (1 << WGM42)|(0b101 << CS40);	// enable timer 0 (game timer)
    29e6:	8d e0       	ldi	r24, 0x0D	; 13
    29e8:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
	TIMSK4 = (1 << OCIE4A);
    29ec:	82 e0       	ldi	r24, 0x02	; 2
    29ee:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7e0072>
	OCR4A = 15625;			// set up for 1s
    29f2:	89 e0       	ldi	r24, 0x09	; 9
    29f4:	9d e3       	ldi	r25, 0x3D	; 61
    29f6:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    29fa:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>

	sei();
    29fe:	78 94       	sei
    2a00:	8d b7       	in	r24, 0x3d	; 61
    2a02:	9e b7       	in	r25, 0x3e	; 62
    2a04:	48 96       	adiw	r24, 0x18	; 24
    2a06:	0f b6       	in	r0, 0x3f	; 63
    2a08:	f8 94       	cli
    2a0a:	9e bf       	out	0x3e, r25	; 62
    2a0c:	0f be       	out	0x3f, r0	; 63
    2a0e:	8d bf       	out	0x3d, r24	; 61
	
	}
	}
	}*/
	
	for(uint8_t dispindex = 0; dispindex < 9; dispindex++){
    2a10:	c0 e0       	ldi	r28, 0x00	; 0
		setScoreSegment(dispindex, 18);
    2a12:	62 e1       	ldi	r22, 0x12	; 18
    2a14:	8c 2f       	mov	r24, r28
    2a16:	0e 94 4d 01 	call	0x29a	; 0x29a <setScoreSegment>
	
	}
	}
	}*/
	
	for(uint8_t dispindex = 0; dispindex < 9; dispindex++){
    2a1a:	cf 5f       	subi	r28, 0xFF	; 255
    2a1c:	c9 30       	cpi	r28, 0x09	; 9
    2a1e:	c9 f7       	brne	.-14     	; 0x2a12 <main+0x21a>
		setScoreSegment(dispindex, 18);
	}
	if(isButtonDown(DebugButtonX, DebugButtonY)){
    2a20:	61 e0       	ldi	r22, 0x01	; 1
    2a22:	80 e0       	ldi	r24, 0x00	; 0
    2a24:	0e 94 ab 00 	call	0x156	; 0x156 <isButtonDown>
    2a28:	81 11       	cpse	r24, r1
		debugMode();
    2a2a:	0e 94 c0 0b 	call	0x1780	; 0x1780 <debugMode>
			}
			}else{
			if((P1Score > HighScore2P) || (P2Score > HighScore2P)){
				HighScore2P = (P1Score > P2Score ? P1Score : P2Score);
				EEPROM_write(EEP_ADDR_HighScore2P_H, HighScore2P >> 8);
				EEPROM_write(EEP_ADDR_HighScore2P_L, HighScore2P & 0xFF);
    2a2e:	c6 e1       	ldi	r28, 0x16	; 22
    2a30:	d3 e0       	ldi	r29, 0x03	; 3
		Bonus();
		
		if(GameMode == 0){
			if(P1Score > HighScore1P){
				HighScore1P = P1Score;
				printf("new high score %d", HighScore1P);
    2a32:	04 e7       	ldi	r16, 0x74	; 116
    2a34:	12 e0       	ldi	r17, 0x02	; 2
				EEPROM_write(EEP_ADDR_HighScore1P_H, HighScore1P >> 8);
				EEPROM_write(EEP_ADDR_HighScore1P_L, HighScore1P & 0xFF);
    2a36:	0f 2e       	mov	r0, r31
    2a38:	f2 e0       	ldi	r31, 0x02	; 2
    2a3a:	ef 2e       	mov	r14, r31
    2a3c:	f3 e0       	ldi	r31, 0x03	; 3
    2a3e:	ff 2e       	mov	r15, r31
    2a40:	f0 2d       	mov	r31, r0
		debugMode();
	}

	while (1)
	{
		printf("\n\n\nSTARTING ATTRACT MODE\n");
    2a42:	8d e4       	ldi	r24, 0x4D	; 77
    2a44:	92 e0       	ldi	r25, 0x02	; 2
    2a46:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <puts>
		Attractive();		// loop thru patterns until game start is pressed (TODO IMPLEMENT DEBUG PATTERN)
    2a4a:	0e 94 0f 0b 	call	0x161e	; 0x161e <Attractive>
		printf("STARTING GAME\n");
    2a4e:	86 e6       	ldi	r24, 0x66	; 102
    2a50:	92 e0       	ldi	r25, 0x02	; 2
    2a52:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <puts>
		Game();
    2a56:	0e 94 2e 07 	call	0xe5c	; 0xe5c <Game>
    2a5a:	9f ef       	ldi	r25, 0xFF	; 255
    2a5c:	ee e9       	ldi	r30, 0x9E	; 158
    2a5e:	f4 e2       	ldi	r31, 0x24	; 36
    2a60:	91 50       	subi	r25, 0x01	; 1
    2a62:	e0 40       	sbci	r30, 0x00	; 0
    2a64:	f0 40       	sbci	r31, 0x00	; 0
    2a66:	e1 f7       	brne	.-8      	; 0x2a60 <main+0x268>
    2a68:	00 c0       	rjmp	.+0      	; 0x2a6a <main+0x272>
    2a6a:	00 00       	nop
		_delay_ms(750);
		Bonus();
    2a6c:	0e 94 c4 04 	call	0x988	; 0x988 <Bonus>
		
		if(GameMode == 0){
    2a70:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <GameMode>
    2a74:	81 11       	cpse	r24, r1
    2a76:	29 c0       	rjmp	.+82     	; 0x2aca <main+0x2d2>
			if(P1Score > HighScore1P){
    2a78:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <P1Score>
    2a7c:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <P1Score+0x1>
    2a80:	20 91 02 03 	lds	r18, 0x0302	; 0x800302 <HighScore1P>
    2a84:	30 91 03 03 	lds	r19, 0x0303	; 0x800303 <HighScore1P+0x1>
    2a88:	28 17       	cp	r18, r24
    2a8a:	39 07       	cpc	r19, r25
    2a8c:	08 f0       	brcs	.+2      	; 0x2a90 <main+0x298>
    2a8e:	47 c0       	rjmp	.+142    	; 0x2b1e <main+0x326>
				HighScore1P = P1Score;
    2a90:	90 93 03 03 	sts	0x0303, r25	; 0x800303 <HighScore1P+0x1>
    2a94:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <HighScore1P>
				printf("new high score %d", HighScore1P);
    2a98:	9f 93       	push	r25
    2a9a:	8f 93       	push	r24
    2a9c:	1f 93       	push	r17
    2a9e:	0f 93       	push	r16
    2aa0:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <printf>
				EEPROM_write(EEP_ADDR_HighScore1P_H, HighScore1P >> 8);
    2aa4:	60 91 03 03 	lds	r22, 0x0303	; 0x800303 <HighScore1P+0x1>
    2aa8:	80 e0       	ldi	r24, 0x00	; 0
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	0e 94 b8 0b 	call	0x1770	; 0x1770 <EEPROM_write>
				EEPROM_write(EEP_ADDR_HighScore1P_L, HighScore1P & 0xFF);
    2ab0:	f7 01       	movw	r30, r14
    2ab2:	60 81       	ld	r22, Z
    2ab4:	81 e0       	ldi	r24, 0x01	; 1
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	0e 94 b8 0b 	call	0x1770	; 0x1770 <EEPROM_write>
				
				ShowWinner();			//if new high score, flash screen
    2abc:	0e 94 68 03 	call	0x6d0	; 0x6d0 <ShowWinner>
    2ac0:	0f 90       	pop	r0
    2ac2:	0f 90       	pop	r0
    2ac4:	0f 90       	pop	r0
    2ac6:	0f 90       	pop	r0
    2ac8:	2a c0       	rjmp	.+84     	; 0x2b1e <main+0x326>
			}
			}else{
			if((P1Score > HighScore2P) || (P2Score > HighScore2P)){
    2aca:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <P1Score>
    2ace:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <P1Score+0x1>
    2ad2:	20 91 16 03 	lds	r18, 0x0316	; 0x800316 <HighScore2P>
    2ad6:	30 91 17 03 	lds	r19, 0x0317	; 0x800317 <HighScore2P+0x1>
    2ada:	28 17       	cp	r18, r24
    2adc:	39 07       	cpc	r19, r25
    2ade:	38 f0       	brcs	.+14     	; 0x2aee <main+0x2f6>
    2ae0:	40 91 06 03 	lds	r20, 0x0306	; 0x800306 <P2Score>
    2ae4:	50 91 07 03 	lds	r21, 0x0307	; 0x800307 <P2Score+0x1>
    2ae8:	24 17       	cp	r18, r20
    2aea:	35 07       	cpc	r19, r21
    2aec:	b0 f4       	brcc	.+44     	; 0x2b1a <main+0x322>
				HighScore2P = (P1Score > P2Score ? P1Score : P2Score);
    2aee:	20 91 06 03 	lds	r18, 0x0306	; 0x800306 <P2Score>
    2af2:	30 91 07 03 	lds	r19, 0x0307	; 0x800307 <P2Score+0x1>
    2af6:	28 17       	cp	r18, r24
    2af8:	39 07       	cpc	r19, r25
    2afa:	08 f4       	brcc	.+2      	; 0x2afe <main+0x306>
    2afc:	9c 01       	movw	r18, r24
    2afe:	30 93 17 03 	sts	0x0317, r19	; 0x800317 <HighScore2P+0x1>
    2b02:	20 93 16 03 	sts	0x0316, r18	; 0x800316 <HighScore2P>
				EEPROM_write(EEP_ADDR_HighScore2P_H, HighScore2P >> 8);
    2b06:	63 2f       	mov	r22, r19
    2b08:	82 e0       	ldi	r24, 0x02	; 2
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	0e 94 b8 0b 	call	0x1770	; 0x1770 <EEPROM_write>
				EEPROM_write(EEP_ADDR_HighScore2P_L, HighScore2P & 0xFF);
    2b10:	68 81       	ld	r22, Y
    2b12:	83 e0       	ldi	r24, 0x03	; 3
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	0e 94 b8 0b 	call	0x1770	; 0x1770 <EEPROM_write>
			}
			ShowWinner();				//if 2 player mode show winner anyway
    2b1a:	0e 94 68 03 	call	0x6d0	; 0x6d0 <ShowWinner>
    2b1e:	ff ef       	ldi	r31, 0xFF	; 255
    2b20:	2e e9       	ldi	r18, 0x9E	; 158
    2b22:	44 e2       	ldi	r20, 0x24	; 36
    2b24:	f1 50       	subi	r31, 0x01	; 1
    2b26:	20 40       	sbci	r18, 0x00	; 0
    2b28:	40 40       	sbci	r20, 0x00	; 0
    2b2a:	e1 f7       	brne	.-8      	; 0x2b24 <main+0x32c>
    2b2c:	00 c0       	rjmp	.+0      	; 0x2b2e <main+0x336>
    2b2e:	00 00       	nop
    2b30:	88 cf       	rjmp	.-240    	; 0x2a42 <main+0x24a>

00002b32 <_dm0V>:
	_dp600mV();
	_dm600mV();
}

void _dm0V(){
	QC_PORT &= ~(1 << QC_DM);
    2b32:	70 98       	cbi	0x0e, 0	; 14
	QC_DDR |= 1 << QC_DM;
    2b34:	68 9a       	sbi	0x0d, 0	; 13
    2b36:	08 95       	ret

00002b38 <_dp600mV>:
}

void _dp600mV(){
	QC_DDR &= ~(1 << QC_DP);
    2b38:	69 98       	cbi	0x0d, 1	; 13
    2b3a:	08 95       	ret

00002b3c <QCset5V>:
	_delay_ms(2);
	
}

void QCset5V(){
	_dp600mV();
    2b3c:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <_dp600mV>
	_dm0V();
    2b40:	0e 94 99 15 	call	0x2b32	; 0x2b32 <_dm0V>
    2b44:	08 95       	ret

00002b46 <_dm600mV>:
void _dp600mV(){
	QC_DDR &= ~(1 << QC_DP);
}

void _dm600mV(){
	QC_DDR &= ~(1 << QC_DM);
    2b46:	68 98       	cbi	0x0d, 0	; 13
    2b48:	08 95       	ret

00002b4a <_handshake>:
	_handshake();
	QCset5V();
}

void _handshake(){
	_dm600mV();
    2b4a:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <_dm600mV>
    2b4e:	2f ef       	ldi	r18, 0xFF	; 255
    2b50:	8d e3       	ldi	r24, 0x3D	; 61
    2b52:	99 e4       	ldi	r25, 0x49	; 73
    2b54:	21 50       	subi	r18, 0x01	; 1
    2b56:	80 40       	sbci	r24, 0x00	; 0
    2b58:	90 40       	sbci	r25, 0x00	; 0
    2b5a:	e1 f7       	brne	.-8      	; 0x2b54 <_handshake+0xa>
    2b5c:	00 c0       	rjmp	.+0      	; 0x2b5e <_handshake+0x14>
    2b5e:	00 00       	nop
	_delay_ms(1500);
	_dm0V();
    2b60:	0e 94 99 15 	call	0x2b32	; 0x2b32 <_dm0V>
    2b64:	8f e3       	ldi	r24, 0x3F	; 63
    2b66:	9f e1       	ldi	r25, 0x1F	; 31
    2b68:	01 97       	sbiw	r24, 0x01	; 1
    2b6a:	f1 f7       	brne	.-4      	; 0x2b68 <_handshake+0x1e>
    2b6c:	00 c0       	rjmp	.+0      	; 0x2b6e <_handshake+0x24>
    2b6e:	00 00       	nop
    2b70:	08 95       	ret

00002b72 <usbQcInit>:
#include "usbQc.h"
#define F_CPU 16000000UL
#include <util/delay.h>

void usbQcInit(){
	_handshake();
    2b72:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <_handshake>
	QCset5V();
    2b76:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <QCset5V>
    2b7a:	08 95       	ret

00002b7c <QCset12V>:
	_dm600mV();
	
}

void QCset12V(){
	_dp600mV();
    2b7c:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <_dp600mV>
	_dm600mV();
    2b80:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <_dm600mV>
    2b84:	08 95       	ret

00002b86 <__udivmodhi4>:
    2b86:	aa 1b       	sub	r26, r26
    2b88:	bb 1b       	sub	r27, r27
    2b8a:	51 e1       	ldi	r21, 0x11	; 17
    2b8c:	07 c0       	rjmp	.+14     	; 0x2b9c <__udivmodhi4_ep>

00002b8e <__udivmodhi4_loop>:
    2b8e:	aa 1f       	adc	r26, r26
    2b90:	bb 1f       	adc	r27, r27
    2b92:	a6 17       	cp	r26, r22
    2b94:	b7 07       	cpc	r27, r23
    2b96:	10 f0       	brcs	.+4      	; 0x2b9c <__udivmodhi4_ep>
    2b98:	a6 1b       	sub	r26, r22
    2b9a:	b7 0b       	sbc	r27, r23

00002b9c <__udivmodhi4_ep>:
    2b9c:	88 1f       	adc	r24, r24
    2b9e:	99 1f       	adc	r25, r25
    2ba0:	5a 95       	dec	r21
    2ba2:	a9 f7       	brne	.-22     	; 0x2b8e <__udivmodhi4_loop>
    2ba4:	80 95       	com	r24
    2ba6:	90 95       	com	r25
    2ba8:	bc 01       	movw	r22, r24
    2baa:	cd 01       	movw	r24, r26
    2bac:	08 95       	ret

00002bae <__divmodhi4>:
    2bae:	97 fb       	bst	r25, 7
    2bb0:	07 2e       	mov	r0, r23
    2bb2:	16 f4       	brtc	.+4      	; 0x2bb8 <__divmodhi4+0xa>
    2bb4:	00 94       	com	r0
    2bb6:	07 d0       	rcall	.+14     	; 0x2bc6 <__divmodhi4_neg1>
    2bb8:	77 fd       	sbrc	r23, 7
    2bba:	09 d0       	rcall	.+18     	; 0x2bce <__divmodhi4_neg2>
    2bbc:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <__udivmodhi4>
    2bc0:	07 fc       	sbrc	r0, 7
    2bc2:	05 d0       	rcall	.+10     	; 0x2bce <__divmodhi4_neg2>
    2bc4:	3e f4       	brtc	.+14     	; 0x2bd4 <__divmodhi4_exit>

00002bc6 <__divmodhi4_neg1>:
    2bc6:	90 95       	com	r25
    2bc8:	81 95       	neg	r24
    2bca:	9f 4f       	sbci	r25, 0xFF	; 255
    2bcc:	08 95       	ret

00002bce <__divmodhi4_neg2>:
    2bce:	70 95       	com	r23
    2bd0:	61 95       	neg	r22
    2bd2:	7f 4f       	sbci	r23, 0xFF	; 255

00002bd4 <__divmodhi4_exit>:
    2bd4:	08 95       	ret

00002bd6 <__tablejump2__>:
    2bd6:	ee 0f       	add	r30, r30
    2bd8:	ff 1f       	adc	r31, r31
    2bda:	05 90       	lpm	r0, Z+
    2bdc:	f4 91       	lpm	r31, Z
    2bde:	e0 2d       	mov	r30, r0
    2be0:	09 94       	ijmp

00002be2 <__umulhisi3>:
    2be2:	a2 9f       	mul	r26, r18
    2be4:	b0 01       	movw	r22, r0
    2be6:	b3 9f       	mul	r27, r19
    2be8:	c0 01       	movw	r24, r0
    2bea:	a3 9f       	mul	r26, r19
    2bec:	70 0d       	add	r23, r0
    2bee:	81 1d       	adc	r24, r1
    2bf0:	11 24       	eor	r1, r1
    2bf2:	91 1d       	adc	r25, r1
    2bf4:	b2 9f       	mul	r27, r18
    2bf6:	70 0d       	add	r23, r0
    2bf8:	81 1d       	adc	r24, r1
    2bfa:	11 24       	eor	r1, r1
    2bfc:	91 1d       	adc	r25, r1
    2bfe:	08 95       	ret

00002c00 <do_rand>:
    2c00:	8f 92       	push	r8
    2c02:	9f 92       	push	r9
    2c04:	af 92       	push	r10
    2c06:	bf 92       	push	r11
    2c08:	cf 92       	push	r12
    2c0a:	df 92       	push	r13
    2c0c:	ef 92       	push	r14
    2c0e:	ff 92       	push	r15
    2c10:	cf 93       	push	r28
    2c12:	df 93       	push	r29
    2c14:	ec 01       	movw	r28, r24
    2c16:	68 81       	ld	r22, Y
    2c18:	79 81       	ldd	r23, Y+1	; 0x01
    2c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c1c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c1e:	61 15       	cp	r22, r1
    2c20:	71 05       	cpc	r23, r1
    2c22:	81 05       	cpc	r24, r1
    2c24:	91 05       	cpc	r25, r1
    2c26:	21 f4       	brne	.+8      	; 0x2c30 <do_rand+0x30>
    2c28:	64 e2       	ldi	r22, 0x24	; 36
    2c2a:	79 ed       	ldi	r23, 0xD9	; 217
    2c2c:	8b e5       	ldi	r24, 0x5B	; 91
    2c2e:	97 e0       	ldi	r25, 0x07	; 7
    2c30:	2d e1       	ldi	r18, 0x1D	; 29
    2c32:	33 ef       	ldi	r19, 0xF3	; 243
    2c34:	41 e0       	ldi	r20, 0x01	; 1
    2c36:	50 e0       	ldi	r21, 0x00	; 0
    2c38:	0e 94 33 19 	call	0x3266	; 0x3266 <__divmodsi4>
    2c3c:	49 01       	movw	r8, r18
    2c3e:	5a 01       	movw	r10, r20
    2c40:	9b 01       	movw	r18, r22
    2c42:	ac 01       	movw	r20, r24
    2c44:	a7 ea       	ldi	r26, 0xA7	; 167
    2c46:	b1 e4       	ldi	r27, 0x41	; 65
    2c48:	0e 94 52 19 	call	0x32a4	; 0x32a4 <__muluhisi3>
    2c4c:	6b 01       	movw	r12, r22
    2c4e:	7c 01       	movw	r14, r24
    2c50:	ac ee       	ldi	r26, 0xEC	; 236
    2c52:	b4 ef       	ldi	r27, 0xF4	; 244
    2c54:	a5 01       	movw	r20, r10
    2c56:	94 01       	movw	r18, r8
    2c58:	0e 94 60 19 	call	0x32c0	; 0x32c0 <__mulohisi3>
    2c5c:	dc 01       	movw	r26, r24
    2c5e:	cb 01       	movw	r24, r22
    2c60:	8c 0d       	add	r24, r12
    2c62:	9d 1d       	adc	r25, r13
    2c64:	ae 1d       	adc	r26, r14
    2c66:	bf 1d       	adc	r27, r15
    2c68:	b7 ff       	sbrs	r27, 7
    2c6a:	03 c0       	rjmp	.+6      	; 0x2c72 <do_rand+0x72>
    2c6c:	01 97       	sbiw	r24, 0x01	; 1
    2c6e:	a1 09       	sbc	r26, r1
    2c70:	b0 48       	sbci	r27, 0x80	; 128
    2c72:	88 83       	st	Y, r24
    2c74:	99 83       	std	Y+1, r25	; 0x01
    2c76:	aa 83       	std	Y+2, r26	; 0x02
    2c78:	bb 83       	std	Y+3, r27	; 0x03
    2c7a:	9f 77       	andi	r25, 0x7F	; 127
    2c7c:	df 91       	pop	r29
    2c7e:	cf 91       	pop	r28
    2c80:	ff 90       	pop	r15
    2c82:	ef 90       	pop	r14
    2c84:	df 90       	pop	r13
    2c86:	cf 90       	pop	r12
    2c88:	bf 90       	pop	r11
    2c8a:	af 90       	pop	r10
    2c8c:	9f 90       	pop	r9
    2c8e:	8f 90       	pop	r8
    2c90:	08 95       	ret

00002c92 <rand_r>:
    2c92:	0e 94 00 16 	call	0x2c00	; 0x2c00 <do_rand>
    2c96:	08 95       	ret

00002c98 <rand>:
    2c98:	80 e0       	ldi	r24, 0x00	; 0
    2c9a:	91 e0       	ldi	r25, 0x01	; 1
    2c9c:	0e 94 00 16 	call	0x2c00	; 0x2c00 <do_rand>
    2ca0:	08 95       	ret

00002ca2 <srand>:
    2ca2:	a0 e0       	ldi	r26, 0x00	; 0
    2ca4:	b0 e0       	ldi	r27, 0x00	; 0
    2ca6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    2caa:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    2cae:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    2cb2:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    2cb6:	08 95       	ret

00002cb8 <printf>:
    2cb8:	a0 e0       	ldi	r26, 0x00	; 0
    2cba:	b0 e0       	ldi	r27, 0x00	; 0
    2cbc:	e2 e6       	ldi	r30, 0x62	; 98
    2cbe:	f6 e1       	ldi	r31, 0x16	; 22
    2cc0:	0c 94 75 19 	jmp	0x32ea	; 0x32ea <__prologue_saves__+0x20>
    2cc4:	ae 01       	movw	r20, r28
    2cc6:	4b 5f       	subi	r20, 0xFB	; 251
    2cc8:	5f 4f       	sbci	r21, 0xFF	; 255
    2cca:	fa 01       	movw	r30, r20
    2ccc:	61 91       	ld	r22, Z+
    2cce:	71 91       	ld	r23, Z+
    2cd0:	af 01       	movw	r20, r30
    2cd2:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <__iob+0x2>
    2cd6:	90 91 1c 03 	lds	r25, 0x031C	; 0x80031c <__iob+0x3>
    2cda:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <vfprintf>
    2cde:	e2 e0       	ldi	r30, 0x02	; 2
    2ce0:	0c 94 91 19 	jmp	0x3322	; 0x3322 <__epilogue_restores__+0x20>

00002ce4 <puts>:
    2ce4:	0f 93       	push	r16
    2ce6:	1f 93       	push	r17
    2ce8:	cf 93       	push	r28
    2cea:	df 93       	push	r29
    2cec:	e0 91 1b 03 	lds	r30, 0x031B	; 0x80031b <__iob+0x2>
    2cf0:	f0 91 1c 03 	lds	r31, 0x031C	; 0x80031c <__iob+0x3>
    2cf4:	23 81       	ldd	r18, Z+3	; 0x03
    2cf6:	21 ff       	sbrs	r18, 1
    2cf8:	1b c0       	rjmp	.+54     	; 0x2d30 <puts+0x4c>
    2cfa:	8c 01       	movw	r16, r24
    2cfc:	d0 e0       	ldi	r29, 0x00	; 0
    2cfe:	c0 e0       	ldi	r28, 0x00	; 0
    2d00:	f8 01       	movw	r30, r16
    2d02:	81 91       	ld	r24, Z+
    2d04:	8f 01       	movw	r16, r30
    2d06:	60 91 1b 03 	lds	r22, 0x031B	; 0x80031b <__iob+0x2>
    2d0a:	70 91 1c 03 	lds	r23, 0x031C	; 0x80031c <__iob+0x3>
    2d0e:	db 01       	movw	r26, r22
    2d10:	18 96       	adiw	r26, 0x08	; 8
    2d12:	ed 91       	ld	r30, X+
    2d14:	fc 91       	ld	r31, X
    2d16:	19 97       	sbiw	r26, 0x09	; 9
    2d18:	88 23       	and	r24, r24
    2d1a:	31 f0       	breq	.+12     	; 0x2d28 <puts+0x44>
    2d1c:	09 95       	icall
    2d1e:	89 2b       	or	r24, r25
    2d20:	79 f3       	breq	.-34     	; 0x2d00 <puts+0x1c>
    2d22:	df ef       	ldi	r29, 0xFF	; 255
    2d24:	cf ef       	ldi	r28, 0xFF	; 255
    2d26:	ec cf       	rjmp	.-40     	; 0x2d00 <puts+0x1c>
    2d28:	8a e0       	ldi	r24, 0x0A	; 10
    2d2a:	09 95       	icall
    2d2c:	89 2b       	or	r24, r25
    2d2e:	19 f0       	breq	.+6      	; 0x2d36 <puts+0x52>
    2d30:	8f ef       	ldi	r24, 0xFF	; 255
    2d32:	9f ef       	ldi	r25, 0xFF	; 255
    2d34:	02 c0       	rjmp	.+4      	; 0x2d3a <puts+0x56>
    2d36:	8d 2f       	mov	r24, r29
    2d38:	9c 2f       	mov	r25, r28
    2d3a:	df 91       	pop	r29
    2d3c:	cf 91       	pop	r28
    2d3e:	1f 91       	pop	r17
    2d40:	0f 91       	pop	r16
    2d42:	08 95       	ret

00002d44 <vfprintf>:
    2d44:	ab e0       	ldi	r26, 0x0B	; 11
    2d46:	b0 e0       	ldi	r27, 0x00	; 0
    2d48:	e8 ea       	ldi	r30, 0xA8	; 168
    2d4a:	f6 e1       	ldi	r31, 0x16	; 22
    2d4c:	0c 94 65 19 	jmp	0x32ca	; 0x32ca <__prologue_saves__>
    2d50:	6c 01       	movw	r12, r24
    2d52:	7b 01       	movw	r14, r22
    2d54:	8a 01       	movw	r16, r20
    2d56:	fc 01       	movw	r30, r24
    2d58:	17 82       	std	Z+7, r1	; 0x07
    2d5a:	16 82       	std	Z+6, r1	; 0x06
    2d5c:	83 81       	ldd	r24, Z+3	; 0x03
    2d5e:	81 ff       	sbrs	r24, 1
    2d60:	cc c1       	rjmp	.+920    	; 0x30fa <vfprintf+0x3b6>
    2d62:	ce 01       	movw	r24, r28
    2d64:	01 96       	adiw	r24, 0x01	; 1
    2d66:	3c 01       	movw	r6, r24
    2d68:	f6 01       	movw	r30, r12
    2d6a:	93 81       	ldd	r25, Z+3	; 0x03
    2d6c:	f7 01       	movw	r30, r14
    2d6e:	93 fd       	sbrc	r25, 3
    2d70:	85 91       	lpm	r24, Z+
    2d72:	93 ff       	sbrs	r25, 3
    2d74:	81 91       	ld	r24, Z+
    2d76:	7f 01       	movw	r14, r30
    2d78:	88 23       	and	r24, r24
    2d7a:	09 f4       	brne	.+2      	; 0x2d7e <vfprintf+0x3a>
    2d7c:	ba c1       	rjmp	.+884    	; 0x30f2 <vfprintf+0x3ae>
    2d7e:	85 32       	cpi	r24, 0x25	; 37
    2d80:	39 f4       	brne	.+14     	; 0x2d90 <vfprintf+0x4c>
    2d82:	93 fd       	sbrc	r25, 3
    2d84:	85 91       	lpm	r24, Z+
    2d86:	93 ff       	sbrs	r25, 3
    2d88:	81 91       	ld	r24, Z+
    2d8a:	7f 01       	movw	r14, r30
    2d8c:	85 32       	cpi	r24, 0x25	; 37
    2d8e:	29 f4       	brne	.+10     	; 0x2d9a <vfprintf+0x56>
    2d90:	b6 01       	movw	r22, r12
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	0e 94 99 18 	call	0x3132	; 0x3132 <fputc>
    2d98:	e7 cf       	rjmp	.-50     	; 0x2d68 <vfprintf+0x24>
    2d9a:	91 2c       	mov	r9, r1
    2d9c:	21 2c       	mov	r2, r1
    2d9e:	31 2c       	mov	r3, r1
    2da0:	ff e1       	ldi	r31, 0x1F	; 31
    2da2:	f3 15       	cp	r31, r3
    2da4:	d8 f0       	brcs	.+54     	; 0x2ddc <vfprintf+0x98>
    2da6:	8b 32       	cpi	r24, 0x2B	; 43
    2da8:	79 f0       	breq	.+30     	; 0x2dc8 <vfprintf+0x84>
    2daa:	38 f4       	brcc	.+14     	; 0x2dba <vfprintf+0x76>
    2dac:	80 32       	cpi	r24, 0x20	; 32
    2dae:	79 f0       	breq	.+30     	; 0x2dce <vfprintf+0x8a>
    2db0:	83 32       	cpi	r24, 0x23	; 35
    2db2:	a1 f4       	brne	.+40     	; 0x2ddc <vfprintf+0x98>
    2db4:	23 2d       	mov	r18, r3
    2db6:	20 61       	ori	r18, 0x10	; 16
    2db8:	1d c0       	rjmp	.+58     	; 0x2df4 <vfprintf+0xb0>
    2dba:	8d 32       	cpi	r24, 0x2D	; 45
    2dbc:	61 f0       	breq	.+24     	; 0x2dd6 <vfprintf+0x92>
    2dbe:	80 33       	cpi	r24, 0x30	; 48
    2dc0:	69 f4       	brne	.+26     	; 0x2ddc <vfprintf+0x98>
    2dc2:	23 2d       	mov	r18, r3
    2dc4:	21 60       	ori	r18, 0x01	; 1
    2dc6:	16 c0       	rjmp	.+44     	; 0x2df4 <vfprintf+0xb0>
    2dc8:	83 2d       	mov	r24, r3
    2dca:	82 60       	ori	r24, 0x02	; 2
    2dcc:	38 2e       	mov	r3, r24
    2dce:	e3 2d       	mov	r30, r3
    2dd0:	e4 60       	ori	r30, 0x04	; 4
    2dd2:	3e 2e       	mov	r3, r30
    2dd4:	2a c0       	rjmp	.+84     	; 0x2e2a <vfprintf+0xe6>
    2dd6:	f3 2d       	mov	r31, r3
    2dd8:	f8 60       	ori	r31, 0x08	; 8
    2dda:	1d c0       	rjmp	.+58     	; 0x2e16 <vfprintf+0xd2>
    2ddc:	37 fc       	sbrc	r3, 7
    2dde:	2d c0       	rjmp	.+90     	; 0x2e3a <vfprintf+0xf6>
    2de0:	20 ed       	ldi	r18, 0xD0	; 208
    2de2:	28 0f       	add	r18, r24
    2de4:	2a 30       	cpi	r18, 0x0A	; 10
    2de6:	40 f0       	brcs	.+16     	; 0x2df8 <vfprintf+0xb4>
    2de8:	8e 32       	cpi	r24, 0x2E	; 46
    2dea:	b9 f4       	brne	.+46     	; 0x2e1a <vfprintf+0xd6>
    2dec:	36 fc       	sbrc	r3, 6
    2dee:	81 c1       	rjmp	.+770    	; 0x30f2 <vfprintf+0x3ae>
    2df0:	23 2d       	mov	r18, r3
    2df2:	20 64       	ori	r18, 0x40	; 64
    2df4:	32 2e       	mov	r3, r18
    2df6:	19 c0       	rjmp	.+50     	; 0x2e2a <vfprintf+0xe6>
    2df8:	36 fe       	sbrs	r3, 6
    2dfa:	06 c0       	rjmp	.+12     	; 0x2e08 <vfprintf+0xc4>
    2dfc:	8a e0       	ldi	r24, 0x0A	; 10
    2dfe:	98 9e       	mul	r9, r24
    2e00:	20 0d       	add	r18, r0
    2e02:	11 24       	eor	r1, r1
    2e04:	92 2e       	mov	r9, r18
    2e06:	11 c0       	rjmp	.+34     	; 0x2e2a <vfprintf+0xe6>
    2e08:	ea e0       	ldi	r30, 0x0A	; 10
    2e0a:	2e 9e       	mul	r2, r30
    2e0c:	20 0d       	add	r18, r0
    2e0e:	11 24       	eor	r1, r1
    2e10:	22 2e       	mov	r2, r18
    2e12:	f3 2d       	mov	r31, r3
    2e14:	f0 62       	ori	r31, 0x20	; 32
    2e16:	3f 2e       	mov	r3, r31
    2e18:	08 c0       	rjmp	.+16     	; 0x2e2a <vfprintf+0xe6>
    2e1a:	8c 36       	cpi	r24, 0x6C	; 108
    2e1c:	21 f4       	brne	.+8      	; 0x2e26 <vfprintf+0xe2>
    2e1e:	83 2d       	mov	r24, r3
    2e20:	80 68       	ori	r24, 0x80	; 128
    2e22:	38 2e       	mov	r3, r24
    2e24:	02 c0       	rjmp	.+4      	; 0x2e2a <vfprintf+0xe6>
    2e26:	88 36       	cpi	r24, 0x68	; 104
    2e28:	41 f4       	brne	.+16     	; 0x2e3a <vfprintf+0xf6>
    2e2a:	f7 01       	movw	r30, r14
    2e2c:	93 fd       	sbrc	r25, 3
    2e2e:	85 91       	lpm	r24, Z+
    2e30:	93 ff       	sbrs	r25, 3
    2e32:	81 91       	ld	r24, Z+
    2e34:	7f 01       	movw	r14, r30
    2e36:	81 11       	cpse	r24, r1
    2e38:	b3 cf       	rjmp	.-154    	; 0x2da0 <vfprintf+0x5c>
    2e3a:	98 2f       	mov	r25, r24
    2e3c:	9f 7d       	andi	r25, 0xDF	; 223
    2e3e:	95 54       	subi	r25, 0x45	; 69
    2e40:	93 30       	cpi	r25, 0x03	; 3
    2e42:	28 f4       	brcc	.+10     	; 0x2e4e <vfprintf+0x10a>
    2e44:	0c 5f       	subi	r16, 0xFC	; 252
    2e46:	1f 4f       	sbci	r17, 0xFF	; 255
    2e48:	9f e3       	ldi	r25, 0x3F	; 63
    2e4a:	99 83       	std	Y+1, r25	; 0x01
    2e4c:	0d c0       	rjmp	.+26     	; 0x2e68 <vfprintf+0x124>
    2e4e:	83 36       	cpi	r24, 0x63	; 99
    2e50:	31 f0       	breq	.+12     	; 0x2e5e <vfprintf+0x11a>
    2e52:	83 37       	cpi	r24, 0x73	; 115
    2e54:	71 f0       	breq	.+28     	; 0x2e72 <vfprintf+0x12e>
    2e56:	83 35       	cpi	r24, 0x53	; 83
    2e58:	09 f0       	breq	.+2      	; 0x2e5c <vfprintf+0x118>
    2e5a:	59 c0       	rjmp	.+178    	; 0x2f0e <vfprintf+0x1ca>
    2e5c:	21 c0       	rjmp	.+66     	; 0x2ea0 <vfprintf+0x15c>
    2e5e:	f8 01       	movw	r30, r16
    2e60:	80 81       	ld	r24, Z
    2e62:	89 83       	std	Y+1, r24	; 0x01
    2e64:	0e 5f       	subi	r16, 0xFE	; 254
    2e66:	1f 4f       	sbci	r17, 0xFF	; 255
    2e68:	88 24       	eor	r8, r8
    2e6a:	83 94       	inc	r8
    2e6c:	91 2c       	mov	r9, r1
    2e6e:	53 01       	movw	r10, r6
    2e70:	13 c0       	rjmp	.+38     	; 0x2e98 <vfprintf+0x154>
    2e72:	28 01       	movw	r4, r16
    2e74:	f2 e0       	ldi	r31, 0x02	; 2
    2e76:	4f 0e       	add	r4, r31
    2e78:	51 1c       	adc	r5, r1
    2e7a:	f8 01       	movw	r30, r16
    2e7c:	a0 80       	ld	r10, Z
    2e7e:	b1 80       	ldd	r11, Z+1	; 0x01
    2e80:	36 fe       	sbrs	r3, 6
    2e82:	03 c0       	rjmp	.+6      	; 0x2e8a <vfprintf+0x146>
    2e84:	69 2d       	mov	r22, r9
    2e86:	70 e0       	ldi	r23, 0x00	; 0
    2e88:	02 c0       	rjmp	.+4      	; 0x2e8e <vfprintf+0x14a>
    2e8a:	6f ef       	ldi	r22, 0xFF	; 255
    2e8c:	7f ef       	ldi	r23, 0xFF	; 255
    2e8e:	c5 01       	movw	r24, r10
    2e90:	0e 94 8e 18 	call	0x311c	; 0x311c <strnlen>
    2e94:	4c 01       	movw	r8, r24
    2e96:	82 01       	movw	r16, r4
    2e98:	f3 2d       	mov	r31, r3
    2e9a:	ff 77       	andi	r31, 0x7F	; 127
    2e9c:	3f 2e       	mov	r3, r31
    2e9e:	16 c0       	rjmp	.+44     	; 0x2ecc <vfprintf+0x188>
    2ea0:	28 01       	movw	r4, r16
    2ea2:	22 e0       	ldi	r18, 0x02	; 2
    2ea4:	42 0e       	add	r4, r18
    2ea6:	51 1c       	adc	r5, r1
    2ea8:	f8 01       	movw	r30, r16
    2eaa:	a0 80       	ld	r10, Z
    2eac:	b1 80       	ldd	r11, Z+1	; 0x01
    2eae:	36 fe       	sbrs	r3, 6
    2eb0:	03 c0       	rjmp	.+6      	; 0x2eb8 <vfprintf+0x174>
    2eb2:	69 2d       	mov	r22, r9
    2eb4:	70 e0       	ldi	r23, 0x00	; 0
    2eb6:	02 c0       	rjmp	.+4      	; 0x2ebc <vfprintf+0x178>
    2eb8:	6f ef       	ldi	r22, 0xFF	; 255
    2eba:	7f ef       	ldi	r23, 0xFF	; 255
    2ebc:	c5 01       	movw	r24, r10
    2ebe:	0e 94 83 18 	call	0x3106	; 0x3106 <strnlen_P>
    2ec2:	4c 01       	movw	r8, r24
    2ec4:	f3 2d       	mov	r31, r3
    2ec6:	f0 68       	ori	r31, 0x80	; 128
    2ec8:	3f 2e       	mov	r3, r31
    2eca:	82 01       	movw	r16, r4
    2ecc:	33 fc       	sbrc	r3, 3
    2ece:	1b c0       	rjmp	.+54     	; 0x2f06 <vfprintf+0x1c2>
    2ed0:	82 2d       	mov	r24, r2
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	88 16       	cp	r8, r24
    2ed6:	99 06       	cpc	r9, r25
    2ed8:	b0 f4       	brcc	.+44     	; 0x2f06 <vfprintf+0x1c2>
    2eda:	b6 01       	movw	r22, r12
    2edc:	80 e2       	ldi	r24, 0x20	; 32
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	0e 94 99 18 	call	0x3132	; 0x3132 <fputc>
    2ee4:	2a 94       	dec	r2
    2ee6:	f4 cf       	rjmp	.-24     	; 0x2ed0 <vfprintf+0x18c>
    2ee8:	f5 01       	movw	r30, r10
    2eea:	37 fc       	sbrc	r3, 7
    2eec:	85 91       	lpm	r24, Z+
    2eee:	37 fe       	sbrs	r3, 7
    2ef0:	81 91       	ld	r24, Z+
    2ef2:	5f 01       	movw	r10, r30
    2ef4:	b6 01       	movw	r22, r12
    2ef6:	90 e0       	ldi	r25, 0x00	; 0
    2ef8:	0e 94 99 18 	call	0x3132	; 0x3132 <fputc>
    2efc:	21 10       	cpse	r2, r1
    2efe:	2a 94       	dec	r2
    2f00:	21 e0       	ldi	r18, 0x01	; 1
    2f02:	82 1a       	sub	r8, r18
    2f04:	91 08       	sbc	r9, r1
    2f06:	81 14       	cp	r8, r1
    2f08:	91 04       	cpc	r9, r1
    2f0a:	71 f7       	brne	.-36     	; 0x2ee8 <vfprintf+0x1a4>
    2f0c:	e8 c0       	rjmp	.+464    	; 0x30de <vfprintf+0x39a>
    2f0e:	84 36       	cpi	r24, 0x64	; 100
    2f10:	11 f0       	breq	.+4      	; 0x2f16 <vfprintf+0x1d2>
    2f12:	89 36       	cpi	r24, 0x69	; 105
    2f14:	41 f5       	brne	.+80     	; 0x2f66 <vfprintf+0x222>
    2f16:	f8 01       	movw	r30, r16
    2f18:	37 fe       	sbrs	r3, 7
    2f1a:	07 c0       	rjmp	.+14     	; 0x2f2a <vfprintf+0x1e6>
    2f1c:	60 81       	ld	r22, Z
    2f1e:	71 81       	ldd	r23, Z+1	; 0x01
    2f20:	82 81       	ldd	r24, Z+2	; 0x02
    2f22:	93 81       	ldd	r25, Z+3	; 0x03
    2f24:	0c 5f       	subi	r16, 0xFC	; 252
    2f26:	1f 4f       	sbci	r17, 0xFF	; 255
    2f28:	08 c0       	rjmp	.+16     	; 0x2f3a <vfprintf+0x1f6>
    2f2a:	60 81       	ld	r22, Z
    2f2c:	71 81       	ldd	r23, Z+1	; 0x01
    2f2e:	07 2e       	mov	r0, r23
    2f30:	00 0c       	add	r0, r0
    2f32:	88 0b       	sbc	r24, r24
    2f34:	99 0b       	sbc	r25, r25
    2f36:	0e 5f       	subi	r16, 0xFE	; 254
    2f38:	1f 4f       	sbci	r17, 0xFF	; 255
    2f3a:	f3 2d       	mov	r31, r3
    2f3c:	ff 76       	andi	r31, 0x6F	; 111
    2f3e:	3f 2e       	mov	r3, r31
    2f40:	97 ff       	sbrs	r25, 7
    2f42:	09 c0       	rjmp	.+18     	; 0x2f56 <vfprintf+0x212>
    2f44:	90 95       	com	r25
    2f46:	80 95       	com	r24
    2f48:	70 95       	com	r23
    2f4a:	61 95       	neg	r22
    2f4c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f4e:	8f 4f       	sbci	r24, 0xFF	; 255
    2f50:	9f 4f       	sbci	r25, 0xFF	; 255
    2f52:	f0 68       	ori	r31, 0x80	; 128
    2f54:	3f 2e       	mov	r3, r31
    2f56:	2a e0       	ldi	r18, 0x0A	; 10
    2f58:	30 e0       	ldi	r19, 0x00	; 0
    2f5a:	a3 01       	movw	r20, r6
    2f5c:	0e 94 d5 18 	call	0x31aa	; 0x31aa <__ultoa_invert>
    2f60:	88 2e       	mov	r8, r24
    2f62:	86 18       	sub	r8, r6
    2f64:	45 c0       	rjmp	.+138    	; 0x2ff0 <vfprintf+0x2ac>
    2f66:	85 37       	cpi	r24, 0x75	; 117
    2f68:	31 f4       	brne	.+12     	; 0x2f76 <vfprintf+0x232>
    2f6a:	23 2d       	mov	r18, r3
    2f6c:	2f 7e       	andi	r18, 0xEF	; 239
    2f6e:	b2 2e       	mov	r11, r18
    2f70:	2a e0       	ldi	r18, 0x0A	; 10
    2f72:	30 e0       	ldi	r19, 0x00	; 0
    2f74:	25 c0       	rjmp	.+74     	; 0x2fc0 <vfprintf+0x27c>
    2f76:	93 2d       	mov	r25, r3
    2f78:	99 7f       	andi	r25, 0xF9	; 249
    2f7a:	b9 2e       	mov	r11, r25
    2f7c:	8f 36       	cpi	r24, 0x6F	; 111
    2f7e:	c1 f0       	breq	.+48     	; 0x2fb0 <vfprintf+0x26c>
    2f80:	18 f4       	brcc	.+6      	; 0x2f88 <vfprintf+0x244>
    2f82:	88 35       	cpi	r24, 0x58	; 88
    2f84:	79 f0       	breq	.+30     	; 0x2fa4 <vfprintf+0x260>
    2f86:	b5 c0       	rjmp	.+362    	; 0x30f2 <vfprintf+0x3ae>
    2f88:	80 37       	cpi	r24, 0x70	; 112
    2f8a:	19 f0       	breq	.+6      	; 0x2f92 <vfprintf+0x24e>
    2f8c:	88 37       	cpi	r24, 0x78	; 120
    2f8e:	21 f0       	breq	.+8      	; 0x2f98 <vfprintf+0x254>
    2f90:	b0 c0       	rjmp	.+352    	; 0x30f2 <vfprintf+0x3ae>
    2f92:	e9 2f       	mov	r30, r25
    2f94:	e0 61       	ori	r30, 0x10	; 16
    2f96:	be 2e       	mov	r11, r30
    2f98:	b4 fe       	sbrs	r11, 4
    2f9a:	0d c0       	rjmp	.+26     	; 0x2fb6 <vfprintf+0x272>
    2f9c:	fb 2d       	mov	r31, r11
    2f9e:	f4 60       	ori	r31, 0x04	; 4
    2fa0:	bf 2e       	mov	r11, r31
    2fa2:	09 c0       	rjmp	.+18     	; 0x2fb6 <vfprintf+0x272>
    2fa4:	34 fe       	sbrs	r3, 4
    2fa6:	0a c0       	rjmp	.+20     	; 0x2fbc <vfprintf+0x278>
    2fa8:	29 2f       	mov	r18, r25
    2faa:	26 60       	ori	r18, 0x06	; 6
    2fac:	b2 2e       	mov	r11, r18
    2fae:	06 c0       	rjmp	.+12     	; 0x2fbc <vfprintf+0x278>
    2fb0:	28 e0       	ldi	r18, 0x08	; 8
    2fb2:	30 e0       	ldi	r19, 0x00	; 0
    2fb4:	05 c0       	rjmp	.+10     	; 0x2fc0 <vfprintf+0x27c>
    2fb6:	20 e1       	ldi	r18, 0x10	; 16
    2fb8:	30 e0       	ldi	r19, 0x00	; 0
    2fba:	02 c0       	rjmp	.+4      	; 0x2fc0 <vfprintf+0x27c>
    2fbc:	20 e1       	ldi	r18, 0x10	; 16
    2fbe:	32 e0       	ldi	r19, 0x02	; 2
    2fc0:	f8 01       	movw	r30, r16
    2fc2:	b7 fe       	sbrs	r11, 7
    2fc4:	07 c0       	rjmp	.+14     	; 0x2fd4 <vfprintf+0x290>
    2fc6:	60 81       	ld	r22, Z
    2fc8:	71 81       	ldd	r23, Z+1	; 0x01
    2fca:	82 81       	ldd	r24, Z+2	; 0x02
    2fcc:	93 81       	ldd	r25, Z+3	; 0x03
    2fce:	0c 5f       	subi	r16, 0xFC	; 252
    2fd0:	1f 4f       	sbci	r17, 0xFF	; 255
    2fd2:	06 c0       	rjmp	.+12     	; 0x2fe0 <vfprintf+0x29c>
    2fd4:	60 81       	ld	r22, Z
    2fd6:	71 81       	ldd	r23, Z+1	; 0x01
    2fd8:	80 e0       	ldi	r24, 0x00	; 0
    2fda:	90 e0       	ldi	r25, 0x00	; 0
    2fdc:	0e 5f       	subi	r16, 0xFE	; 254
    2fde:	1f 4f       	sbci	r17, 0xFF	; 255
    2fe0:	a3 01       	movw	r20, r6
    2fe2:	0e 94 d5 18 	call	0x31aa	; 0x31aa <__ultoa_invert>
    2fe6:	88 2e       	mov	r8, r24
    2fe8:	86 18       	sub	r8, r6
    2fea:	fb 2d       	mov	r31, r11
    2fec:	ff 77       	andi	r31, 0x7F	; 127
    2fee:	3f 2e       	mov	r3, r31
    2ff0:	36 fe       	sbrs	r3, 6
    2ff2:	0d c0       	rjmp	.+26     	; 0x300e <vfprintf+0x2ca>
    2ff4:	23 2d       	mov	r18, r3
    2ff6:	2e 7f       	andi	r18, 0xFE	; 254
    2ff8:	a2 2e       	mov	r10, r18
    2ffa:	89 14       	cp	r8, r9
    2ffc:	58 f4       	brcc	.+22     	; 0x3014 <vfprintf+0x2d0>
    2ffe:	34 fe       	sbrs	r3, 4
    3000:	0b c0       	rjmp	.+22     	; 0x3018 <vfprintf+0x2d4>
    3002:	32 fc       	sbrc	r3, 2
    3004:	09 c0       	rjmp	.+18     	; 0x3018 <vfprintf+0x2d4>
    3006:	83 2d       	mov	r24, r3
    3008:	8e 7e       	andi	r24, 0xEE	; 238
    300a:	a8 2e       	mov	r10, r24
    300c:	05 c0       	rjmp	.+10     	; 0x3018 <vfprintf+0x2d4>
    300e:	b8 2c       	mov	r11, r8
    3010:	a3 2c       	mov	r10, r3
    3012:	03 c0       	rjmp	.+6      	; 0x301a <vfprintf+0x2d6>
    3014:	b8 2c       	mov	r11, r8
    3016:	01 c0       	rjmp	.+2      	; 0x301a <vfprintf+0x2d6>
    3018:	b9 2c       	mov	r11, r9
    301a:	a4 fe       	sbrs	r10, 4
    301c:	0f c0       	rjmp	.+30     	; 0x303c <vfprintf+0x2f8>
    301e:	fe 01       	movw	r30, r28
    3020:	e8 0d       	add	r30, r8
    3022:	f1 1d       	adc	r31, r1
    3024:	80 81       	ld	r24, Z
    3026:	80 33       	cpi	r24, 0x30	; 48
    3028:	21 f4       	brne	.+8      	; 0x3032 <vfprintf+0x2ee>
    302a:	9a 2d       	mov	r25, r10
    302c:	99 7e       	andi	r25, 0xE9	; 233
    302e:	a9 2e       	mov	r10, r25
    3030:	09 c0       	rjmp	.+18     	; 0x3044 <vfprintf+0x300>
    3032:	a2 fe       	sbrs	r10, 2
    3034:	06 c0       	rjmp	.+12     	; 0x3042 <vfprintf+0x2fe>
    3036:	b3 94       	inc	r11
    3038:	b3 94       	inc	r11
    303a:	04 c0       	rjmp	.+8      	; 0x3044 <vfprintf+0x300>
    303c:	8a 2d       	mov	r24, r10
    303e:	86 78       	andi	r24, 0x86	; 134
    3040:	09 f0       	breq	.+2      	; 0x3044 <vfprintf+0x300>
    3042:	b3 94       	inc	r11
    3044:	a3 fc       	sbrc	r10, 3
    3046:	11 c0       	rjmp	.+34     	; 0x306a <vfprintf+0x326>
    3048:	a0 fe       	sbrs	r10, 0
    304a:	06 c0       	rjmp	.+12     	; 0x3058 <vfprintf+0x314>
    304c:	b2 14       	cp	r11, r2
    304e:	88 f4       	brcc	.+34     	; 0x3072 <vfprintf+0x32e>
    3050:	28 0c       	add	r2, r8
    3052:	92 2c       	mov	r9, r2
    3054:	9b 18       	sub	r9, r11
    3056:	0e c0       	rjmp	.+28     	; 0x3074 <vfprintf+0x330>
    3058:	b2 14       	cp	r11, r2
    305a:	60 f4       	brcc	.+24     	; 0x3074 <vfprintf+0x330>
    305c:	b6 01       	movw	r22, r12
    305e:	80 e2       	ldi	r24, 0x20	; 32
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	0e 94 99 18 	call	0x3132	; 0x3132 <fputc>
    3066:	b3 94       	inc	r11
    3068:	f7 cf       	rjmp	.-18     	; 0x3058 <vfprintf+0x314>
    306a:	b2 14       	cp	r11, r2
    306c:	18 f4       	brcc	.+6      	; 0x3074 <vfprintf+0x330>
    306e:	2b 18       	sub	r2, r11
    3070:	02 c0       	rjmp	.+4      	; 0x3076 <vfprintf+0x332>
    3072:	98 2c       	mov	r9, r8
    3074:	21 2c       	mov	r2, r1
    3076:	a4 fe       	sbrs	r10, 4
    3078:	10 c0       	rjmp	.+32     	; 0x309a <vfprintf+0x356>
    307a:	b6 01       	movw	r22, r12
    307c:	80 e3       	ldi	r24, 0x30	; 48
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	0e 94 99 18 	call	0x3132	; 0x3132 <fputc>
    3084:	a2 fe       	sbrs	r10, 2
    3086:	17 c0       	rjmp	.+46     	; 0x30b6 <vfprintf+0x372>
    3088:	a1 fc       	sbrc	r10, 1
    308a:	03 c0       	rjmp	.+6      	; 0x3092 <vfprintf+0x34e>
    308c:	88 e7       	ldi	r24, 0x78	; 120
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	02 c0       	rjmp	.+4      	; 0x3096 <vfprintf+0x352>
    3092:	88 e5       	ldi	r24, 0x58	; 88
    3094:	90 e0       	ldi	r25, 0x00	; 0
    3096:	b6 01       	movw	r22, r12
    3098:	0c c0       	rjmp	.+24     	; 0x30b2 <vfprintf+0x36e>
    309a:	8a 2d       	mov	r24, r10
    309c:	86 78       	andi	r24, 0x86	; 134
    309e:	59 f0       	breq	.+22     	; 0x30b6 <vfprintf+0x372>
    30a0:	a1 fe       	sbrs	r10, 1
    30a2:	02 c0       	rjmp	.+4      	; 0x30a8 <vfprintf+0x364>
    30a4:	8b e2       	ldi	r24, 0x2B	; 43
    30a6:	01 c0       	rjmp	.+2      	; 0x30aa <vfprintf+0x366>
    30a8:	80 e2       	ldi	r24, 0x20	; 32
    30aa:	a7 fc       	sbrc	r10, 7
    30ac:	8d e2       	ldi	r24, 0x2D	; 45
    30ae:	b6 01       	movw	r22, r12
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	0e 94 99 18 	call	0x3132	; 0x3132 <fputc>
    30b6:	89 14       	cp	r8, r9
    30b8:	38 f4       	brcc	.+14     	; 0x30c8 <vfprintf+0x384>
    30ba:	b6 01       	movw	r22, r12
    30bc:	80 e3       	ldi	r24, 0x30	; 48
    30be:	90 e0       	ldi	r25, 0x00	; 0
    30c0:	0e 94 99 18 	call	0x3132	; 0x3132 <fputc>
    30c4:	9a 94       	dec	r9
    30c6:	f7 cf       	rjmp	.-18     	; 0x30b6 <vfprintf+0x372>
    30c8:	8a 94       	dec	r8
    30ca:	f3 01       	movw	r30, r6
    30cc:	e8 0d       	add	r30, r8
    30ce:	f1 1d       	adc	r31, r1
    30d0:	80 81       	ld	r24, Z
    30d2:	b6 01       	movw	r22, r12
    30d4:	90 e0       	ldi	r25, 0x00	; 0
    30d6:	0e 94 99 18 	call	0x3132	; 0x3132 <fputc>
    30da:	81 10       	cpse	r8, r1
    30dc:	f5 cf       	rjmp	.-22     	; 0x30c8 <vfprintf+0x384>
    30de:	22 20       	and	r2, r2
    30e0:	09 f4       	brne	.+2      	; 0x30e4 <vfprintf+0x3a0>
    30e2:	42 ce       	rjmp	.-892    	; 0x2d68 <vfprintf+0x24>
    30e4:	b6 01       	movw	r22, r12
    30e6:	80 e2       	ldi	r24, 0x20	; 32
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	0e 94 99 18 	call	0x3132	; 0x3132 <fputc>
    30ee:	2a 94       	dec	r2
    30f0:	f6 cf       	rjmp	.-20     	; 0x30de <vfprintf+0x39a>
    30f2:	f6 01       	movw	r30, r12
    30f4:	86 81       	ldd	r24, Z+6	; 0x06
    30f6:	97 81       	ldd	r25, Z+7	; 0x07
    30f8:	02 c0       	rjmp	.+4      	; 0x30fe <vfprintf+0x3ba>
    30fa:	8f ef       	ldi	r24, 0xFF	; 255
    30fc:	9f ef       	ldi	r25, 0xFF	; 255
    30fe:	2b 96       	adiw	r28, 0x0b	; 11
    3100:	e2 e1       	ldi	r30, 0x12	; 18
    3102:	0c 94 81 19 	jmp	0x3302	; 0x3302 <__epilogue_restores__>

00003106 <strnlen_P>:
    3106:	fc 01       	movw	r30, r24
    3108:	05 90       	lpm	r0, Z+
    310a:	61 50       	subi	r22, 0x01	; 1
    310c:	70 40       	sbci	r23, 0x00	; 0
    310e:	01 10       	cpse	r0, r1
    3110:	d8 f7       	brcc	.-10     	; 0x3108 <strnlen_P+0x2>
    3112:	80 95       	com	r24
    3114:	90 95       	com	r25
    3116:	8e 0f       	add	r24, r30
    3118:	9f 1f       	adc	r25, r31
    311a:	08 95       	ret

0000311c <strnlen>:
    311c:	fc 01       	movw	r30, r24
    311e:	61 50       	subi	r22, 0x01	; 1
    3120:	70 40       	sbci	r23, 0x00	; 0
    3122:	01 90       	ld	r0, Z+
    3124:	01 10       	cpse	r0, r1
    3126:	d8 f7       	brcc	.-10     	; 0x311e <strnlen+0x2>
    3128:	80 95       	com	r24
    312a:	90 95       	com	r25
    312c:	8e 0f       	add	r24, r30
    312e:	9f 1f       	adc	r25, r31
    3130:	08 95       	ret

00003132 <fputc>:
    3132:	0f 93       	push	r16
    3134:	1f 93       	push	r17
    3136:	cf 93       	push	r28
    3138:	df 93       	push	r29
    313a:	fb 01       	movw	r30, r22
    313c:	23 81       	ldd	r18, Z+3	; 0x03
    313e:	21 fd       	sbrc	r18, 1
    3140:	03 c0       	rjmp	.+6      	; 0x3148 <fputc+0x16>
    3142:	8f ef       	ldi	r24, 0xFF	; 255
    3144:	9f ef       	ldi	r25, 0xFF	; 255
    3146:	2c c0       	rjmp	.+88     	; 0x31a0 <fputc+0x6e>
    3148:	22 ff       	sbrs	r18, 2
    314a:	16 c0       	rjmp	.+44     	; 0x3178 <fputc+0x46>
    314c:	46 81       	ldd	r20, Z+6	; 0x06
    314e:	57 81       	ldd	r21, Z+7	; 0x07
    3150:	24 81       	ldd	r18, Z+4	; 0x04
    3152:	35 81       	ldd	r19, Z+5	; 0x05
    3154:	42 17       	cp	r20, r18
    3156:	53 07       	cpc	r21, r19
    3158:	44 f4       	brge	.+16     	; 0x316a <fputc+0x38>
    315a:	a0 81       	ld	r26, Z
    315c:	b1 81       	ldd	r27, Z+1	; 0x01
    315e:	9d 01       	movw	r18, r26
    3160:	2f 5f       	subi	r18, 0xFF	; 255
    3162:	3f 4f       	sbci	r19, 0xFF	; 255
    3164:	31 83       	std	Z+1, r19	; 0x01
    3166:	20 83       	st	Z, r18
    3168:	8c 93       	st	X, r24
    316a:	26 81       	ldd	r18, Z+6	; 0x06
    316c:	37 81       	ldd	r19, Z+7	; 0x07
    316e:	2f 5f       	subi	r18, 0xFF	; 255
    3170:	3f 4f       	sbci	r19, 0xFF	; 255
    3172:	37 83       	std	Z+7, r19	; 0x07
    3174:	26 83       	std	Z+6, r18	; 0x06
    3176:	14 c0       	rjmp	.+40     	; 0x31a0 <fputc+0x6e>
    3178:	8b 01       	movw	r16, r22
    317a:	ec 01       	movw	r28, r24
    317c:	fb 01       	movw	r30, r22
    317e:	00 84       	ldd	r0, Z+8	; 0x08
    3180:	f1 85       	ldd	r31, Z+9	; 0x09
    3182:	e0 2d       	mov	r30, r0
    3184:	09 95       	icall
    3186:	89 2b       	or	r24, r25
    3188:	e1 f6       	brne	.-72     	; 0x3142 <fputc+0x10>
    318a:	d8 01       	movw	r26, r16
    318c:	16 96       	adiw	r26, 0x06	; 6
    318e:	8d 91       	ld	r24, X+
    3190:	9c 91       	ld	r25, X
    3192:	17 97       	sbiw	r26, 0x07	; 7
    3194:	01 96       	adiw	r24, 0x01	; 1
    3196:	17 96       	adiw	r26, 0x07	; 7
    3198:	9c 93       	st	X, r25
    319a:	8e 93       	st	-X, r24
    319c:	16 97       	sbiw	r26, 0x06	; 6
    319e:	ce 01       	movw	r24, r28
    31a0:	df 91       	pop	r29
    31a2:	cf 91       	pop	r28
    31a4:	1f 91       	pop	r17
    31a6:	0f 91       	pop	r16
    31a8:	08 95       	ret

000031aa <__ultoa_invert>:
    31aa:	fa 01       	movw	r30, r20
    31ac:	aa 27       	eor	r26, r26
    31ae:	28 30       	cpi	r18, 0x08	; 8
    31b0:	51 f1       	breq	.+84     	; 0x3206 <__ultoa_invert+0x5c>
    31b2:	20 31       	cpi	r18, 0x10	; 16
    31b4:	81 f1       	breq	.+96     	; 0x3216 <__ultoa_invert+0x6c>
    31b6:	e8 94       	clt
    31b8:	6f 93       	push	r22
    31ba:	6e 7f       	andi	r22, 0xFE	; 254
    31bc:	6e 5f       	subi	r22, 0xFE	; 254
    31be:	7f 4f       	sbci	r23, 0xFF	; 255
    31c0:	8f 4f       	sbci	r24, 0xFF	; 255
    31c2:	9f 4f       	sbci	r25, 0xFF	; 255
    31c4:	af 4f       	sbci	r26, 0xFF	; 255
    31c6:	b1 e0       	ldi	r27, 0x01	; 1
    31c8:	3e d0       	rcall	.+124    	; 0x3246 <__ultoa_invert+0x9c>
    31ca:	b4 e0       	ldi	r27, 0x04	; 4
    31cc:	3c d0       	rcall	.+120    	; 0x3246 <__ultoa_invert+0x9c>
    31ce:	67 0f       	add	r22, r23
    31d0:	78 1f       	adc	r23, r24
    31d2:	89 1f       	adc	r24, r25
    31d4:	9a 1f       	adc	r25, r26
    31d6:	a1 1d       	adc	r26, r1
    31d8:	68 0f       	add	r22, r24
    31da:	79 1f       	adc	r23, r25
    31dc:	8a 1f       	adc	r24, r26
    31de:	91 1d       	adc	r25, r1
    31e0:	a1 1d       	adc	r26, r1
    31e2:	6a 0f       	add	r22, r26
    31e4:	71 1d       	adc	r23, r1
    31e6:	81 1d       	adc	r24, r1
    31e8:	91 1d       	adc	r25, r1
    31ea:	a1 1d       	adc	r26, r1
    31ec:	20 d0       	rcall	.+64     	; 0x322e <__ultoa_invert+0x84>
    31ee:	09 f4       	brne	.+2      	; 0x31f2 <__ultoa_invert+0x48>
    31f0:	68 94       	set
    31f2:	3f 91       	pop	r19
    31f4:	2a e0       	ldi	r18, 0x0A	; 10
    31f6:	26 9f       	mul	r18, r22
    31f8:	11 24       	eor	r1, r1
    31fa:	30 19       	sub	r19, r0
    31fc:	30 5d       	subi	r19, 0xD0	; 208
    31fe:	31 93       	st	Z+, r19
    3200:	de f6       	brtc	.-74     	; 0x31b8 <__ultoa_invert+0xe>
    3202:	cf 01       	movw	r24, r30
    3204:	08 95       	ret
    3206:	46 2f       	mov	r20, r22
    3208:	47 70       	andi	r20, 0x07	; 7
    320a:	40 5d       	subi	r20, 0xD0	; 208
    320c:	41 93       	st	Z+, r20
    320e:	b3 e0       	ldi	r27, 0x03	; 3
    3210:	0f d0       	rcall	.+30     	; 0x3230 <__ultoa_invert+0x86>
    3212:	c9 f7       	brne	.-14     	; 0x3206 <__ultoa_invert+0x5c>
    3214:	f6 cf       	rjmp	.-20     	; 0x3202 <__ultoa_invert+0x58>
    3216:	46 2f       	mov	r20, r22
    3218:	4f 70       	andi	r20, 0x0F	; 15
    321a:	40 5d       	subi	r20, 0xD0	; 208
    321c:	4a 33       	cpi	r20, 0x3A	; 58
    321e:	18 f0       	brcs	.+6      	; 0x3226 <__ultoa_invert+0x7c>
    3220:	49 5d       	subi	r20, 0xD9	; 217
    3222:	31 fd       	sbrc	r19, 1
    3224:	40 52       	subi	r20, 0x20	; 32
    3226:	41 93       	st	Z+, r20
    3228:	02 d0       	rcall	.+4      	; 0x322e <__ultoa_invert+0x84>
    322a:	a9 f7       	brne	.-22     	; 0x3216 <__ultoa_invert+0x6c>
    322c:	ea cf       	rjmp	.-44     	; 0x3202 <__ultoa_invert+0x58>
    322e:	b4 e0       	ldi	r27, 0x04	; 4
    3230:	a6 95       	lsr	r26
    3232:	97 95       	ror	r25
    3234:	87 95       	ror	r24
    3236:	77 95       	ror	r23
    3238:	67 95       	ror	r22
    323a:	ba 95       	dec	r27
    323c:	c9 f7       	brne	.-14     	; 0x3230 <__ultoa_invert+0x86>
    323e:	00 97       	sbiw	r24, 0x00	; 0
    3240:	61 05       	cpc	r22, r1
    3242:	71 05       	cpc	r23, r1
    3244:	08 95       	ret
    3246:	9b 01       	movw	r18, r22
    3248:	ac 01       	movw	r20, r24
    324a:	0a 2e       	mov	r0, r26
    324c:	06 94       	lsr	r0
    324e:	57 95       	ror	r21
    3250:	47 95       	ror	r20
    3252:	37 95       	ror	r19
    3254:	27 95       	ror	r18
    3256:	ba 95       	dec	r27
    3258:	c9 f7       	brne	.-14     	; 0x324c <__ultoa_invert+0xa2>
    325a:	62 0f       	add	r22, r18
    325c:	73 1f       	adc	r23, r19
    325e:	84 1f       	adc	r24, r20
    3260:	95 1f       	adc	r25, r21
    3262:	a0 1d       	adc	r26, r0
    3264:	08 95       	ret

00003266 <__divmodsi4>:
    3266:	05 2e       	mov	r0, r21
    3268:	97 fb       	bst	r25, 7
    326a:	1e f4       	brtc	.+6      	; 0x3272 <__divmodsi4+0xc>
    326c:	00 94       	com	r0
    326e:	0e 94 4a 19 	call	0x3294	; 0x3294 <__negsi2>
    3272:	57 fd       	sbrc	r21, 7
    3274:	07 d0       	rcall	.+14     	; 0x3284 <__divmodsi4_neg2>
    3276:	0e 94 9c 19 	call	0x3338	; 0x3338 <__udivmodsi4>
    327a:	07 fc       	sbrc	r0, 7
    327c:	03 d0       	rcall	.+6      	; 0x3284 <__divmodsi4_neg2>
    327e:	4e f4       	brtc	.+18     	; 0x3292 <__divmodsi4_exit>
    3280:	0c 94 4a 19 	jmp	0x3294	; 0x3294 <__negsi2>

00003284 <__divmodsi4_neg2>:
    3284:	50 95       	com	r21
    3286:	40 95       	com	r20
    3288:	30 95       	com	r19
    328a:	21 95       	neg	r18
    328c:	3f 4f       	sbci	r19, 0xFF	; 255
    328e:	4f 4f       	sbci	r20, 0xFF	; 255
    3290:	5f 4f       	sbci	r21, 0xFF	; 255

00003292 <__divmodsi4_exit>:
    3292:	08 95       	ret

00003294 <__negsi2>:
    3294:	90 95       	com	r25
    3296:	80 95       	com	r24
    3298:	70 95       	com	r23
    329a:	61 95       	neg	r22
    329c:	7f 4f       	sbci	r23, 0xFF	; 255
    329e:	8f 4f       	sbci	r24, 0xFF	; 255
    32a0:	9f 4f       	sbci	r25, 0xFF	; 255
    32a2:	08 95       	ret

000032a4 <__muluhisi3>:
    32a4:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <__umulhisi3>
    32a8:	a5 9f       	mul	r26, r21
    32aa:	90 0d       	add	r25, r0
    32ac:	b4 9f       	mul	r27, r20
    32ae:	90 0d       	add	r25, r0
    32b0:	a4 9f       	mul	r26, r20
    32b2:	80 0d       	add	r24, r0
    32b4:	91 1d       	adc	r25, r1
    32b6:	11 24       	eor	r1, r1
    32b8:	08 95       	ret

000032ba <__mulshisi3>:
    32ba:	b7 ff       	sbrs	r27, 7
    32bc:	0c 94 52 19 	jmp	0x32a4	; 0x32a4 <__muluhisi3>

000032c0 <__mulohisi3>:
    32c0:	0e 94 52 19 	call	0x32a4	; 0x32a4 <__muluhisi3>
    32c4:	82 1b       	sub	r24, r18
    32c6:	93 0b       	sbc	r25, r19
    32c8:	08 95       	ret

000032ca <__prologue_saves__>:
    32ca:	2f 92       	push	r2
    32cc:	3f 92       	push	r3
    32ce:	4f 92       	push	r4
    32d0:	5f 92       	push	r5
    32d2:	6f 92       	push	r6
    32d4:	7f 92       	push	r7
    32d6:	8f 92       	push	r8
    32d8:	9f 92       	push	r9
    32da:	af 92       	push	r10
    32dc:	bf 92       	push	r11
    32de:	cf 92       	push	r12
    32e0:	df 92       	push	r13
    32e2:	ef 92       	push	r14
    32e4:	ff 92       	push	r15
    32e6:	0f 93       	push	r16
    32e8:	1f 93       	push	r17
    32ea:	cf 93       	push	r28
    32ec:	df 93       	push	r29
    32ee:	cd b7       	in	r28, 0x3d	; 61
    32f0:	de b7       	in	r29, 0x3e	; 62
    32f2:	ca 1b       	sub	r28, r26
    32f4:	db 0b       	sbc	r29, r27
    32f6:	0f b6       	in	r0, 0x3f	; 63
    32f8:	f8 94       	cli
    32fa:	de bf       	out	0x3e, r29	; 62
    32fc:	0f be       	out	0x3f, r0	; 63
    32fe:	cd bf       	out	0x3d, r28	; 61
    3300:	09 94       	ijmp

00003302 <__epilogue_restores__>:
    3302:	2a 88       	ldd	r2, Y+18	; 0x12
    3304:	39 88       	ldd	r3, Y+17	; 0x11
    3306:	48 88       	ldd	r4, Y+16	; 0x10
    3308:	5f 84       	ldd	r5, Y+15	; 0x0f
    330a:	6e 84       	ldd	r6, Y+14	; 0x0e
    330c:	7d 84       	ldd	r7, Y+13	; 0x0d
    330e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3310:	9b 84       	ldd	r9, Y+11	; 0x0b
    3312:	aa 84       	ldd	r10, Y+10	; 0x0a
    3314:	b9 84       	ldd	r11, Y+9	; 0x09
    3316:	c8 84       	ldd	r12, Y+8	; 0x08
    3318:	df 80       	ldd	r13, Y+7	; 0x07
    331a:	ee 80       	ldd	r14, Y+6	; 0x06
    331c:	fd 80       	ldd	r15, Y+5	; 0x05
    331e:	0c 81       	ldd	r16, Y+4	; 0x04
    3320:	1b 81       	ldd	r17, Y+3	; 0x03
    3322:	aa 81       	ldd	r26, Y+2	; 0x02
    3324:	b9 81       	ldd	r27, Y+1	; 0x01
    3326:	ce 0f       	add	r28, r30
    3328:	d1 1d       	adc	r29, r1
    332a:	0f b6       	in	r0, 0x3f	; 63
    332c:	f8 94       	cli
    332e:	de bf       	out	0x3e, r29	; 62
    3330:	0f be       	out	0x3f, r0	; 63
    3332:	cd bf       	out	0x3d, r28	; 61
    3334:	ed 01       	movw	r28, r26
    3336:	08 95       	ret

00003338 <__udivmodsi4>:
    3338:	a1 e2       	ldi	r26, 0x21	; 33
    333a:	1a 2e       	mov	r1, r26
    333c:	aa 1b       	sub	r26, r26
    333e:	bb 1b       	sub	r27, r27
    3340:	fd 01       	movw	r30, r26
    3342:	0d c0       	rjmp	.+26     	; 0x335e <__udivmodsi4_ep>

00003344 <__udivmodsi4_loop>:
    3344:	aa 1f       	adc	r26, r26
    3346:	bb 1f       	adc	r27, r27
    3348:	ee 1f       	adc	r30, r30
    334a:	ff 1f       	adc	r31, r31
    334c:	a2 17       	cp	r26, r18
    334e:	b3 07       	cpc	r27, r19
    3350:	e4 07       	cpc	r30, r20
    3352:	f5 07       	cpc	r31, r21
    3354:	20 f0       	brcs	.+8      	; 0x335e <__udivmodsi4_ep>
    3356:	a2 1b       	sub	r26, r18
    3358:	b3 0b       	sbc	r27, r19
    335a:	e4 0b       	sbc	r30, r20
    335c:	f5 0b       	sbc	r31, r21

0000335e <__udivmodsi4_ep>:
    335e:	66 1f       	adc	r22, r22
    3360:	77 1f       	adc	r23, r23
    3362:	88 1f       	adc	r24, r24
    3364:	99 1f       	adc	r25, r25
    3366:	1a 94       	dec	r1
    3368:	69 f7       	brne	.-38     	; 0x3344 <__udivmodsi4_loop>
    336a:	60 95       	com	r22
    336c:	70 95       	com	r23
    336e:	80 95       	com	r24
    3370:	90 95       	com	r25
    3372:	9b 01       	movw	r18, r22
    3374:	ac 01       	movw	r20, r24
    3376:	bd 01       	movw	r22, r26
    3378:	cf 01       	movw	r24, r30
    337a:	08 95       	ret

0000337c <_exit>:
    337c:	f8 94       	cli

0000337e <__stop_program>:
    337e:	ff cf       	rjmp	.-2      	; 0x337e <__stop_program>
